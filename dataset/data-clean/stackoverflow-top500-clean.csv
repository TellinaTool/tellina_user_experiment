,Link,Text,Code
0,https://stackoverflow.com/questions/59895/,"['is a useful one-liner which will give you the full directory name of the script no matter where it is being called from.', 'It will work as long as the last component of the path used to find the script is not a symlink (directory links are OK).  If you also want to resolve any links to the script itself, you need a multi-line solution:', 'This last one will work with any combination of aliases, source, bash -c, symlinks, etc.', 'Beware: if you cd to a different directory before running this snippet, the result may be incorrect!', 'Also, watch out for $CDPATH gotchas, and stderr output side effects if the user has smartly overridden cd to redirect output to stderr instead (including escape sequences, such as when calling update_terminal_cwd >&2 on Mac). Adding >/dev/null 2>&1 at the end of your cd command will take care of both possibilities.', 'To understand how it works, try running this more verbose form:', 'And it will print something like:']","[<code>#!/bin/bash

DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )""
</code>, <code>#!/bin/bash

SOURCE=""${BASH_SOURCE[0]}""
while [ -h ""$SOURCE"" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=""$( cd -P ""$( dirname ""$SOURCE"" )"" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )""
  SOURCE=""$(readlink ""$SOURCE"")""
  [[ $SOURCE != /* ]] &amp;&amp; SOURCE=""$DIR/$SOURCE"" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=""$( cd -P ""$( dirname ""$SOURCE"" )"" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )""
</code>, <code>source</code>, <code>bash -c</code>, <code>cd</code>, <code>$CDPATH</code>, <code>update_terminal_cwd &gt;&amp;2</code>, <code>&gt;/dev/null 2&gt;&amp;1</code>, <code>cd</code>, <code>#!/bin/bash

SOURCE=""${BASH_SOURCE[0]}""
while [ -h ""$SOURCE"" ]; do # resolve $SOURCE until the file is no longer a symlink
  TARGET=""$(readlink ""$SOURCE"")""
  if [[ $TARGET == /* ]]; then
    echo ""SOURCE '$SOURCE' is an absolute symlink to '$TARGET'""
    SOURCE=""$TARGET""
  else
    DIR=""$( dirname ""$SOURCE"" )""
    echo ""SOURCE '$SOURCE' is a relative symlink to '$TARGET' (relative to '$DIR')""
    SOURCE=""$DIR/$TARGET"" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  fi
done
echo ""SOURCE is '$SOURCE'""
RDIR=""$( dirname ""$SOURCE"" )""
DIR=""$( cd -P ""$( dirname ""$SOURCE"" )"" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )""
if [ ""$DIR"" != ""$RDIR"" ]; then
  echo ""DIR '$RDIR' resolves to '$DIR'""
fi
echo ""DIR is '$DIR'""
</code>, <code>SOURCE './scriptdir.sh' is a relative symlink to 'sym2/scriptdir.sh' (relative to '.')
SOURCE is './sym2/scriptdir.sh'
DIR './sym2' resolves to '/home/ubuntu/dotfiles/fo fo/real/real1/real2'
DIR is '/home/ubuntu/dotfiles/fo fo/real/real1/real2'
</code>]"
1,https://stackoverflow.com/questions/59838/,"['To check if a directory exists in a shell script, you can use the following:', ""Or to check if a directory doesn't exist:"", 'However, as Jon Ericson points out, subsequent commands may not work as intended if you do not take into account that a symbolic link to a directory will also pass this check.\nE.g. running this:', 'Will produce the error message:', 'So symbolic links may have to be treated differently, if subsequent commands expect directories:', 'Take particular note of the double-quotes used to wrap the variables. The reason for this is explained by 8jean in another answer.', 'If the variables contain spaces or other unusual characters it will probably cause the script to fail.']","[<code>if [ -d ""$DIRECTORY"" ]; then
  # Control will enter here if $DIRECTORY exists.
fi
</code>, <code>if [ ! -d ""$DIRECTORY"" ]; then
  # Control will enter here if $DIRECTORY doesn't exist.
fi
</code>, <code>ln -s ""$ACTUAL_DIR"" ""$SYMLINK""
if [ -d ""$SYMLINK"" ]; then 
  rmdir ""$SYMLINK"" 
fi
</code>, <code>rmdir: failed to remove `symlink': Not a directory
</code>, <code>if [ -d ""$LINK_OR_DIR"" ]; then 
  if [ -L ""$LINK_OR_DIR"" ]; then
    # It is a symlink!
    # Symbolic link specific commands go here.
    rm ""$LINK_OR_DIR""
  else
    # It's a directory!
    # Directory command goes here.
    rmdir ""$LINK_OR_DIR""
  fi
fi
</code>]"
2,https://stackoverflow.com/questions/638975/,"['The test command ([ here) has a ""not"" logical operator which is the exclamation point (similar to many other languages). Try this:']","[<code>[</code>, <code>if [ ! -f /tmp/foo.txt ]; then
    echo ""File not found!""
fi
</code>]"
3,https://stackoverflow.com/questions/4181703/,['In general to concatenate two variables you can just write them one after another:'],"[<code>foo=""Hello""
foo=""${foo} World""
echo ""${foo}""
&gt; Hello World
</code>, <code>a='Hello'
b='World'
c=""${a} ${b}""
echo ""${c}""
&gt; Hello World
</code>]"
4,https://stackoverflow.com/questions/229551/,"[""You can use Marcus's answer (* wildcards) outside a case statement, too, if you use double brackets:"", 'Note that spaces in the needle string need to be placed between double quotes, and the * wildcards should be outside. Also note that a simple comparison operator is used (i.e. ==), not the regex operator =~.']","[<code>string='My long string'
if [[ $string == *""My long""* ]]; then
  echo ""It's there!""
fi
</code>, <code>*</code>, <code>==</code>, <code>=~</code>]"
5,https://stackoverflow.com/questions/8467424/,"['You could use printf instead:', 'printf has more consistent behavior than echo. The behavior of echo varies greatly between different versions.']","[<code>printf</code>, <code>printf ""hello\nworld\n""
</code>, <code>printf</code>, <code>echo</code>, <code>echo</code>]"
6,https://stackoverflow.com/questions/818255/,"['File descriptor 1 is the standard output (stdout).\nFile descriptor 2 is the standard error (stderr).', 'Here is one way to remember this construct (although it is not entirely accurate): at first, 2>1 may look like a good way to redirect stderr to stdout. However, it will actually be interpreted as ""redirect stderr to a file named 1"". & indicates that what follows and precedes is a file descriptor and not a filename. So the construct becomes: 2>&1.', 'Consider >& as redirect merger operator.']","[<code>stdout</code>, <code>stderr</code>, <code>2&gt;1</code>, <code>stderr</code>, <code>stdout</code>, <code>stderr</code>, <code>1</code>, <code>&amp;</code>, <code>2&gt;&amp;1</code>, <code>&gt;&amp;</code>]"
7,https://stackoverflow.com/questions/592620/,"['POSIX compatible:', 'Example use:', 'For Bash specific environments:', ""Avoid which. Not only is it an external process you're launching for doing very little (meaning builtins like hash, type or command are way cheaper), you can also rely on the builtins to actually do what you want, while the effects of external commands can easily vary from system to system."", 'Why care?', ""So, don't use which. Instead use one of these:"", '(Minor side-note: some will suggest 2>&- is the same 2>/dev/null but shorter – this is untrue.  2>&- closes FD 2 which causes an error in the program when it tries to write to stderr, which is very different from successfully writing to it and discarding the output (and dangerous!))', ""If your hash bang is /bin/sh then you should care about what POSIX says. type and hash's exit codes aren't terribly well defined by POSIX, and hash is seen to exit successfully when the command doesn't exist (haven't seen this with type yet).  command's exit status is well defined by POSIX, so that one is probably the safest to use."", ""If your script uses bash though, POSIX rules don't really matter anymore and both type and hash become perfectly safe to use. type now has a -P to search just the PATH and hash has the side-effect that the command's location will be hashed (for faster lookup next time you use it), which is usually a good thing since you probably check for its existence in order to actually use it."", ""As a simple example, here's a function that runs gdate if it exists, otherwise date:"", 'You can use scripts-common to reach your need.', 'To check if something is installed, you can do:']","[<code>command -v &lt;the_command&gt;
</code>, <code>if ! command -v COMMAND &amp;&gt; /dev/null
then
    echo ""COMMAND could not be found""
    exit
fi
</code>, <code>hash &lt;the_command&gt; # For regular commands. Or...
type &lt;the_command&gt; # To check built-ins and keywords
</code>, <code>which</code>, <code>hash</code>, <code>type</code>, <code>command</code>, <code>which</code>, <code>if which foo</code>, <code>foo</code>, <code>hash</code>, <code>which</code>, <code>which</code>, <code>$ command -v foo &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 ""I require foo but it's not installed.  Aborting.""; exit 1; }
$ type foo &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 ""I require foo but it's not installed.  Aborting.""; exit 1; }
$ hash foo 2&gt;/dev/null || { echo &gt;&amp;2 ""I require foo but it's not installed.  Aborting.""; exit 1; }
</code>, <code>2&gt;&amp;-</code>, <code>2&gt;/dev/null</code>, <code>2&gt;&amp;-</code>, <code>/bin/sh</code>, <code>type</code>, <code>hash</code>, <code>hash</code>, <code>type</code>, <code>command</code>, <code>bash</code>, <code>type</code>, <code>hash</code>, <code>type</code>, <code>-P</code>, <code>PATH</code>, <code>hash</code>, <code>gdate</code>, <code>date</code>, <code>gnudate() {
    if hash gdate 2&gt;/dev/null; then
        gdate ""$@""
    else
        date ""$@""
    fi
}
</code>, <code>checkBin &lt;the_command&gt; || errorMessage ""This tool requires &lt;the_command&gt;. Install it please, and then run this tool again.""
</code>]"
8,https://stackoverflow.com/questions/965053/,"['First, get file name without the path:', ""Alternatively, you can focus on the last '/' of the path instead of the '.' which should work even if you have unpredictable file extensions:"", 'You may want to check the documentation :']","[<code>filename=$(basename -- ""$fullfile"")
extension=""${filename##*.}""
filename=""${filename%.*}""
</code>, <code>filename=""${fullfile##*/}""
</code>]"
9,https://stackoverflow.com/questions/918886/,"[""You can set the internal field separator (IFS) variable, and then let it parse into an array. When this happens in a command, then the assignment to IFS only takes place to that single command's environment (to read ). It then parses the input according to the IFS variable value into an array, which we can then iterate over."", 'It will parse one line of items separated by ;, pushing it into an array. Stuff for processing whole of $IN, each time one line of input separated by ;:']","[<code>IFS</code>, <code>read</code>, <code>IFS</code>, <code>IFS=';' read -ra ADDR &lt;&lt;&lt; ""$IN""
for i in ""${ADDR[@]}""; do
    # process ""$i""
done
</code>, <code>;</code>, <code>$IN</code>, <code>;</code>, <code> while IFS=';' read -ra ADDR; do
      for i in ""${ADDR[@]}""; do
          # process ""$i""
      done
 done &lt;&lt;&lt; ""$IN""
</code>]"
10,https://stackoverflow.com/questions/192249/,"['Two common ways to pass key-value-pair arguments are:', 'Usage demo-space-separated.sh -e conf -s /etc -l /usr/lib /etc/hosts', 'output from copy-pasting the block above:', 'Usage demo-equals-separated.sh -e=conf -s=/etc -l=/usr/lib /etc/hosts', 'output from copy-pasting the block above:', 'To better understand ${i#*=} search for ""Substring Removal"" in this guide. It is functionally equivalent to `sed \'s/[^=]*=//\' <<< ""$i""` which calls a needless subprocess or `echo ""$i"" | sed \'s/[^=]*=//\'` which calls two needless subprocesses. ', 'from: http://mywiki.wooledge.org/BashFAQ/035#getopts', 'getopt(1) limitations (older, relatively-recent getopt versions): ', ""More recent getopt versions don't have these limitations."", ""Additionally, the POSIX shell (and others) offer getopts which doesn't have these limitations. I've included a simplistic getopts example."", 'Usage demo-getopts.sh -vf /etc/hosts foo bar', 'output from copy-pasting the block above:', 'The advantages of getopts are:', 'The disadvantage of getopts is that it can only handle short options (-h, not --help) without additional code.', 'There is a getopts tutorial which explains what all of the syntax and variables mean.  In bash, there is also help getopts, which might be informative.']","[<code>--option argument</code>, <code>demo-space-separated.sh -e conf -s /etc -l /usr/lib /etc/hosts</code>, <code>cat &gt;/tmp/demo-space-separated.sh &lt;&lt;'EOF'
#!/bin/bash

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key=""$1""

case $key in
    -e|--extension)
    EXTENSION=""$2""
    shift # past argument
    shift # past value
    ;;
    -s|--searchpath)
    SEARCHPATH=""$2""
    shift # past argument
    shift # past value
    ;;
    -l|--lib)
    LIBPATH=""$2""
    shift # past argument
    shift # past value
    ;;
    --default)
    DEFAULT=YES
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=(""$1"") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- ""${POSITIONAL[@]}"" # restore positional parameters

echo ""FILE EXTENSION  = ${EXTENSION}""
echo ""SEARCH PATH     = ${SEARCHPATH}""
echo ""LIBRARY PATH    = ${LIBPATH}""
echo ""DEFAULT         = ${DEFAULT}""
echo ""Number files in SEARCH PATH with EXTENSION:"" $(ls -1 ""${SEARCHPATH}""/*.""${EXTENSION}"" | wc -l)
if [[ -n $1 ]]; then
    echo ""Last line of file specified as non-opt/last argument:""
    tail -1 ""$1""
fi
EOF

chmod +x /tmp/demo-space-separated.sh

/tmp/demo-space-separated.sh -e conf -s /etc -l /usr/lib /etc/hosts
</code>, <code>FILE EXTENSION  = conf
SEARCH PATH     = /etc
LIBRARY PATH    = /usr/lib
DEFAULT         =
Number files in SEARCH PATH with EXTENSION: 14
Last line of file specified as non-opt/last argument:
#93.184.216.34    example.com
</code>, <code>--option=argument</code>, <code>demo-equals-separated.sh -e=conf -s=/etc -l=/usr/lib /etc/hosts</code>, <code>cat &gt;/tmp/demo-equals-separated.sh &lt;&lt;'EOF'
#!/bin/bash

for i in ""$@""
do
case $i in
    -e=*|--extension=*)
    EXTENSION=""${i#*=}""
    shift # past argument=value
    ;;
    -s=*|--searchpath=*)
    SEARCHPATH=""${i#*=}""
    shift # past argument=value
    ;;
    -l=*|--lib=*)
    LIBPATH=""${i#*=}""
    shift # past argument=value
    ;;
    --default)
    DEFAULT=YES
    shift # past argument with no value
    ;;
    *)
          # unknown option
    ;;
esac
done
echo ""FILE EXTENSION  = ${EXTENSION}""
echo ""SEARCH PATH     = ${SEARCHPATH}""
echo ""LIBRARY PATH    = ${LIBPATH}""
echo ""DEFAULT         = ${DEFAULT}""
echo ""Number files in SEARCH PATH with EXTENSION:"" $(ls -1 ""${SEARCHPATH}""/*.""${EXTENSION}"" | wc -l)
if [[ -n $1 ]]; then
    echo ""Last line of file specified as non-opt/last argument:""
    tail -1 $1
fi
EOF

chmod +x /tmp/demo-equals-separated.sh

/tmp/demo-equals-separated.sh -e=conf -s=/etc -l=/usr/lib /etc/hosts
</code>, <code>FILE EXTENSION  = conf
SEARCH PATH     = /etc
LIBRARY PATH    = /usr/lib
DEFAULT         =
Number files in SEARCH PATH with EXTENSION: 14
Last line of file specified as non-opt/last argument:
#93.184.216.34    example.com
</code>, <code>${i#*=}</code>, <code>`sed 's/[^=]*=//' &lt;&lt;&lt; ""$i""`</code>, <code>`echo ""$i"" | sed 's/[^=]*=//'`</code>, <code>getopt</code>, <code>getopt</code>, <code>getopts</code>, <code>getopts</code>, <code>demo-getopts.sh -vf /etc/hosts foo bar</code>, <code>cat &gt;/tmp/demo-getopts.sh &lt;&lt;'EOF'
#!/bin/sh

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
output_file=""""
verbose=0

while getopts ""h?vf:"" opt; do
    case ""$opt"" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  verbose=1
        ;;
    f)  output_file=$OPTARG
        ;;
    esac
done

shift $((OPTIND-1))

[ ""${1:-}"" = ""--"" ] &amp;&amp; shift

echo ""verbose=$verbose, output_file='$output_file', Leftovers: $@""
EOF

chmod +x /tmp/demo-getopts.sh

/tmp/demo-getopts.sh -vf /etc/hosts foo bar
</code>, <code>verbose=1, output_file='/etc/hosts', Leftovers: foo bar
</code>, <code>getopts</code>, <code>dash</code>, <code>-vf filename</code>, <code>getopts</code>, <code>-h</code>, <code>--help</code>, <code>help getopts</code>]"
11,https://stackoverflow.com/questions/4651437/,"['In addition to backticks `command`, command substitution can be done with $(command) or ""$(command)"", which I find easier to read, and allows for nesting.', 'Quoting ("") does matter to preserve multi-line variable values; it is optional on the right-hand side of an assignment, as word splitting is not performed, so OUTPUT=$(ls -1) would work fine.']","[<code>`command`</code>, <code>$(command)</code>, <code>""$(command)""</code>, <code>OUTPUT=$(ls -1)
echo ""${OUTPUT}""

MULTILINE=$(ls \
   -1)
echo ""${MULTILINE}""
</code>, <code>""</code>, <code>OUTPUT=$(ls -1)</code>]"
12,https://stackoverflow.com/questions/2518127/,"['You can enter the long form command:', 'or you can use the shorter version of the command:']","[<code>source ~/.bashrc
</code>, <code>. ~/.bashrc
</code>]"
13,https://stackoverflow.com/questions/169511/,['edit: I prefer seq over the other methods because I can actually remember it ;)'],"[<code>for i in $(seq 1 $END); do echo $i; done</code>, <code>seq</code>]"
14,https://stackoverflow.com/questions/3601515/,"['where ${var+x} is a parameter expansion which evaluates to nothing if var is unset, and substitutes the string x otherwise.', 'Quotes can be omitted (so we can say ${var+x} instead of ""${var+x}"") because this syntax & usage guarantees this will only expand to something that does not require quotes (since it either expands to x (which contains no word breaks so it needs no quotes), or to nothing (which results in [ -z  ], which conveniently evaluates to the same value (true) that [ -z """" ] does as well)).', 'However, while quotes can be safely omitted, and it was not immediately obvious to all (it wasn\'t even apparent to the first author of this quotes explanation who is also a major Bash coder), it would sometimes be better to write the solution with quotes as [ -z ""${var+x}"" ], at the very small possible cost of an O(1) speed penalty.  The first author also added this as a comment next to the code using this solution giving the URL to this answer, which now also includes the explanation for why the quotes can be safely omitted.', 'This is often wrong because it doesn\'t distinguish between a variable that is unset and a variable that is set to the empty string. That is to say, if var=\'\', then the above solution will output ""var is blank"". ', 'The distinction between unset and ""set to the empty string"" is essential in situations where the user has to specify an extension, or additional list of properties, and that not specifying them defaults to a non-empty value, whereas specifying the empty string should make the script use an empty extension or list of additional properties.', 'The distinction may not be essential in every scenario though. In those cases  [ -z ""$var"" ] will be just fine. ', '']","[<code>if [ -z ${var+x} ]; then echo ""var is unset""; else echo ""var is set to '$var'""; fi
</code>, <code>${var+x}</code>, <code>var</code>, <code>x</code>, <code>${var+x}</code>, <code>""${var+x}""</code>, <code>x</code>, <code>[ -z  ]</code>, <code>[ -z """" ]</code>, <code>[ -z ""${var+x}"" ]</code>, <code>if [ -z ""$var"" ]; then echo ""var is blank""; else echo ""var is set to '$var'""; fi
</code>, <code>var=''</code>, <code>[ -z ""$var"" ]</code>]"
15,https://stackoverflow.com/questions/1358540/,"['Try:', 'The SLOCCount tool may help as well.', 'It will give an accurate source lines of code count for whatever\nhierarchy you point it at, as well as some additional stats.', 'Sorted output:', ""find . -name '*.php' | xargs wc -l | sort -nr""]","[<code>find . -name '*.php' | xargs wc -l
</code>, <code>find . -name '*.php' | xargs wc -l | sort -nr</code>]"
16,https://stackoverflow.com/questions/8880603/,"['You can use it like this:', 'Also works for multi-line array declaration']","[<code>## declare an array variable
declare -a arr=(""element1"" ""element2"" ""element3"")

## now loop through the above array
for i in ""${arr[@]}""
do
   echo ""$i""
   # or do whatever with individual element of the array
done

# You can access them using echo ""${arr[0]}"", ""${arr[1]}"" also
</code>, <code>declare -a arr=(""element1"" 
                ""element2"" ""element3""
                ""element4""
                )
</code>]"
17,https://stackoverflow.com/questions/876239/,['Bash executes the redirects from left to right as follows:'],"[<code>cmd &gt;&gt;file.txt 2&gt;&amp;1
</code>, <code>&gt;&gt;file.txt</code>, <code>file.txt</code>, <code>stdout</code>, <code>2&gt;&amp;1</code>, <code>stderr</code>, <code>stdout</code>, <code>&amp;1</code>, <code>stdout</code>]"
18,https://stackoverflow.com/questions/226703/,"['The simplest and most widely available method to get user input at a shell prompt is the read command. The best way to illustrate its use is a simple demonstration:', ""Another method, pointed out by Steven Huwig, is Bash's select command. Here is the same example using select:"", ""With select you don't need to sanitize the input – it displays the available choices, and you type a number corresponding to your choice. It also loops automatically, so there's no need for a while true loop to retry if they give invalid input."", 'Also, Léa Gris demonstrated a way to make the request language agnostic in her answer. Adapting my first example to better serve multiple languages might look like this:', 'Obviously other communication strings remain untranslated here (Install, Answer) which would need to be addressed in a more fully completed translation, but even a partial translation would be helpful in many cases.', 'Finally, please check out the excellent answer by F. Hauri.']","[<code>read</code>, <code>while true; do
    read -p ""Do you wish to install this program?"" yn
    case $yn in
        [Yy]* ) make install; break;;
        [Nn]* ) exit;;
        * ) echo ""Please answer yes or no."";;
    esac
done
</code>, <code>select</code>, <code>select</code>, <code>echo ""Do you wish to install this program?""
select yn in ""Yes"" ""No""; do
    case $yn in
        Yes ) make install; break;;
        No ) exit;;
    esac
done
</code>, <code>select</code>, <code>while true</code>, <code>set -- $(locale LC_MESSAGES)
yesptrn=""$1""; noptrn=""$2""; yesword=""$3""; noword=""$4""

while true; do
    read -p ""Install (${yesword} / ${noword})? "" yn
    case $yn in
        ${yesptrn##^} ) make install; break;;
        ${noptrn##^} ) exit;;
        * ) echo ""Answer ${yesword} / ${noword}."";;
    esac
done
</code>]"
19,https://stackoverflow.com/questions/1521462/,"['One way to do it is:', ""As pointed out in the comments, this has the side effects of trimming leading whitespace, interpreting backslash sequences, and skipping the last line if it's missing a terminating linefeed. If these are concerns, you can do:"", 'Exceptionally, if the loop body may read from standard input, you can open the file using a different file descriptor:', 'Here, 10 is just an arbitrary number (different from 0, 1, 2).']","[<code>while read p; do
  echo ""$p""
done &lt;peptides.txt
</code>, <code>while IFS="""" read -r p || [ -n ""$p"" ]
do
  printf '%s\n' ""$p""
done &lt; peptides.txt
</code>, <code>while read -u 10 p; do
  ...
done 10&lt;peptides.txt
</code>]"
20,https://stackoverflow.com/questions/6482377/,"['It is:', 'The $# variable will tell you the number of input arguments the script was passed.', 'Or you can check if an argument is an empty string or not like:', 'The -z switch will test if the expansion of ""$1"" is a null string or not. If it is a null string then the body is executed.']","[<code>if [ $# -eq 0 ]
  then
    echo ""No arguments supplied""
fi
</code>, <code>$#</code>, <code>if [ -z ""$1"" ]
  then
    echo ""No argument supplied""
fi
</code>, <code>-z</code>]"
21,https://stackoverflow.com/questions/7131670/,"['Bash alias does not directly accept parameters. You will have to create a function.', 'alias does not accept parameters but a function can be called just like an alias. For example:', 'By the way, Bash functions defined in your .bashrc and other files are available as commands within your shell. So for instance you can call the earlier function like this ']","[<code>alias</code>, <code>myfunction() {
    #do things with parameters like $1 such as
    mv ""$1"" ""$1.bak""
    cp ""$2"" ""$1""
}


myfunction old.conf new.conf #calls `myfunction`
</code>, <code>.bashrc</code>, <code>$ myfunction original.conf my.conf
</code>]"
22,https://stackoverflow.com/questions/2264428/,"['The are various ways:', 'You may run into portability issues with the following examples:', 'Note: YMMV on this one. Doesn\'t work for me (GNU bash version 4.2.46 and 4.0.33 (and same behaviour 2.05b.0 but nocasematch is not implemented)) even with using shopt -u nocasematch;. Unsetting that nocasematch causes [[ ""fooBaR"" == ""FOObar"" ]] to match OK BUT inside case weirdly [b-z] are incorrectly matched by [A-Z]. Bash is confused by the double-negative (""unsetting nocasematch"")! :-)']","[<code>$ echo ""$a"" | tr '[:upper:]' '[:lower:]'
hi all
</code>, <code>$ echo ""$a"" | awk '{print tolower($0)}'
hi all
</code>, <code>$ echo ""${a,,}""
hi all
</code>, <code>$ echo ""$a"" | sed -e 's/\(.*\)/\L\1/'
hi all
# this also works:
$ sed -e 's/\(.*\)/\L\1/' &lt;&lt;&lt; ""$a""
hi all
</code>, <code>$ echo ""$a"" | perl -ne 'print lc'
hi all
</code>, <code>lc(){
    case ""$1"" in
        [A-Z])
        n=$(printf ""%d"" ""'$1"")
        n=$((n+32))
        printf \\$(printf ""%o"" ""$n"")
        ;;
        *)
        printf ""%s"" ""$1""
        ;;
    esac
}
word=""I Love Bash""
for((i=0;i&lt;${#word};i++))
do
    ch=""${word:$i:1}""
    lc ""$ch""
done
</code>, <code>shopt -u nocasematch;</code>]"
23,https://stackoverflow.com/questions/4565700/,"['Something like this should work (suggested by orip):', 'if you prefer subshells, you could try the following (though it is more fragile):', 'Git will invoke SSH which will find its agent by environment variable; this will, in turn, have the key loaded.', 'Alternatively, setting HOME may also do the trick, provided you are willing to setup a directory that contains only a .ssh directory as HOME; this may either contain an identity.pub, or a config file setting IdentityFile.']","[<code>ssh-agent bash -c 'ssh-add /somewhere/yourkey; git clone git@github.com:user/project.git'
</code>, <code>ssh-agent $(ssh-add /somewhere/yourkey; git clone git@github.com:user/project.git)
</code>, <code>HOME</code>, <code>.ssh</code>, <code>HOME</code>]"
24,https://stackoverflow.com/questions/2990414/,"['You could do this, which facilitates reading:', '>&2 copies file descriptor #2 to file descriptor #1. Therefore, after this redirection is performed, both file descriptors will refer to the same file: the one file descriptor #2 was originally referring to. For more information see the Bash Hackers Illustrated Redirection Tutorial.']","[<code>&gt;&amp;2 echo ""error""
</code>, <code>&gt;&amp;2</code>]"
25,https://stackoverflow.com/questions/10376206/,"['You should use #!/usr/bin/env bash for portability: different *nixes put bash in different places, and using /usr/bin/env is a workaround to run the first bash found on the PATH. And sh is not bash.']","[<code>#!/usr/bin/env bash</code>, <code>bash</code>, <code>/usr/bin/env</code>, <code>bash</code>, <code>PATH</code>, <code>sh</code>, <code>bash</code>]"
26,https://stackoverflow.com/questions/1401482/,"[""In bash (>=4.2) it is preferable to use printf's built-in date formatter (part of bash) rather than the external date (usually GNU date)."", 'As such:', 'In bash (<4.2): ', 'Other available date formats can be viewed from the date man pages (for external non-bash specific command):']","[<code>date</code>, <code># put current date as yyyy-mm-dd in $date
# -1 -&gt; explicit current date, bash &gt;=4.3 defaults to current time if not provided
# -2 -&gt; start time for shell
printf -v date '%(%Y-%m-%d)T\n' -1 

# put current date as yyyy-mm-dd HH:MM:SS in $date
printf -v date '%(%Y-%m-%d %H:%M:%S)T\n' -1 

# to print directly remove -v flag, as such:
printf '%(%Y-%m-%d)T\n' -1
# -&gt; current date printed to terminal
</code>, <code># put current date as yyyy-mm-dd in $date
date=$(date '+%Y-%m-%d')

# put current date as yyyy-mm-dd HH:MM:SS in $date
date=$(date '+%Y-%m-%d %H:%M:%S')

# print current date directly
echo $(date '+%Y-%m-%d')
</code>, <code>man date
</code>]"
27,https://stackoverflow.com/questions/3137094/,"['Use wc:', 'This will output the number of lines in <filename>:', 'Or, to omit the <filename> from the result use wc -l < <filename>:', 'You can also pipe data to wc as well:']","[<code>wc</code>, <code>wc -l &lt;filename&gt;
</code>, <code>&lt;filename&gt;</code>, <code>$ wc -l /dir/file.txt
3272485 /dir/file.txt
</code>, <code>&lt;filename&gt;</code>, <code>wc -l &lt; &lt;filename&gt;</code>, <code>$ wc -l &lt; /dir/file.txt
3272485
</code>, <code>wc</code>, <code>$ cat /dir/file.txt | wc -l
3272485
$ curl yahoo.com --silent | wc -l
63
</code>]"
28,https://stackoverflow.com/questions/418896/,"['The command you want is named tee:', 'For example, if you only care about stdout:', 'If you want to include stderr, do:', '2>&1 redirects channel 2 (stderr/standard error) into channel 1 (stdout/standard output), such that both is written as stdout. It is also directed to the given output file as of the tee command.', 'Furthermore, if you want to append to the log file, use tee -a as:']","[<code>tee</code>, <code>foo | tee output.file
</code>, <code>ls -a | tee output.file
</code>, <code>program [arguments...] 2&gt;&amp;1 | tee outfile
</code>, <code>2&gt;&amp;1</code>, <code>tee</code>, <code>tee -a</code>, <code>program [arguments...] 2&gt;&amp;1 | tee -a outfile
</code>]"
29,https://stackoverflow.com/questions/1250079/,"['If you really want to use single quotes in the outermost layer, remember that you can glue both kinds of quotation. Example:', 'Explanation of how \'""\'""\' is interpreted as just \':', 'If you do not place any whitespaces between (1) and (2), or between (4) and (5), the shell will interpret that string as a one long word.']","[<code> alias rxvt='urxvt -fg '""'""'#111111'""'""' -bg '""'""'#111111'""'""
 #                     ^^^^^       ^^^^^     ^^^^^       ^^^^
 #                     12345       12345     12345       1234
</code>, <code>'""'""'</code>, <code>'</code>, <code>'</code>, <code>""</code>, <code>'</code>, <code>""</code>, <code>'</code>]"
30,https://stackoverflow.com/questions/2953646/,"['Revised Answer (Feb 12, 2014)', 'Original Answer', 'Caveats: https://stackoverflow.com/a/21210966/89391', 'From: Using boolean variables in Bash', ""The reason the original answer is included here is because the comments before the revision on Feb 12, 2014 pertain only to the original answer, and many of the comments are wrong when associated with the revised answer. For example, Dennis Williamson's comment about bash builtin true on Jun 2, 2010 only applies to the original answer, not the revised.""]","[<code>the_world_is_flat=true
# ...do something interesting...
if [ ""$the_world_is_flat"" = true ] ; then
    echo 'Be careful not to fall off!'
fi
</code>, <code>the_world_is_flat=true
# ...do something interesting...
if $the_world_is_flat ; then
    echo 'Be careful not to fall off!'
fi
</code>, <code>true</code>]"
31,https://stackoverflow.com/questions/6212219/,"['There are two typical ways of declaring a function. I prefer the second approach.', 'or', 'To call a function with arguments:', 'The function refers to passed arguments by their position (not by name), that is $1, $2, and so forth. $0 is the name of the script itself.', 'Example:', 'Also, you need to call your function after it is declared.', 'Output:', 'Reference: Advanced Bash-Scripting Guide.']","[<code>function function_name {
   command...
} 
</code>, <code>function_name () {
   command...
} 
</code>, <code>function_name ""$arg1"" ""$arg2""
</code>, <code>$1</code>, <code>$2</code>, <code>$0</code>, <code>function_name () {
   echo ""Parameter #1 is $1""
}
</code>, <code>#!/usr/bin/env sh

foo 1  # this will fail because foo has not been declared yet.

foo() {
    echo ""Parameter #1 is $1""
}

foo 2 # this will work.
</code>, <code>./myScript.sh: line 2: foo: command not found
Parameter #1 is 2
</code>]"
32,https://stackoverflow.com/questions/2342826/,"['First redirect stderr to stdout — the pipe; then redirect stdout to /dev/null (without changing where stderr is going):', 'For the details of I/O redirection in all its variety, see the chapter on Redirections in the Bash reference manual.', ""Note that the sequence of I/O redirections is interpreted left-to-right, but pipes are set up before the I/O redirections are interpreted.  File descriptors such as 1 and 2 are references to open file descriptions.  The operation 2>&1 makes file descriptor 2 aka stderr refer to the same open file description as file descriptor 1 aka stdout is currently referring to (see dup2() and open()).  The operation >/dev/null then changes file descriptor 1 so that it refers to an open file description for /dev/null, but that doesn't change the fact that file descriptor 2 refers to the open file description which file descriptor 1 was originally pointing to — namely, the pipe.""]","[<code>/dev/null</code>, <code>command 2&gt;&amp;1 &gt;/dev/null | grep 'something'
</code>, <code>2&gt;&amp;1</code>, <code>dup2()</code>, <code>open()</code>, <code>&gt;/dev/null</code>, <code>/dev/null</code>]"
33,https://stackoverflow.com/questions/4608187/,"['Simply type source ~/.bash_profile', 'Alternatively, if you like saving keystrokes you can type . ~/.bash_profile']","[<code>source ~/.bash_profile</code>, <code>. ~/.bash_profile</code>]"
34,https://stackoverflow.com/questions/749544/,"[""There's a wealth of clipboards you could be dealing with.  I expect you're probably a Linux user who wants to put stuff in the X Windows primary clipboard.  Usually, the clipboard you want to talk to has a utility that lets you talk to it."", ""In the case of X, there's xclip (and others). xclip -selection c will send data to the clipboard that works with Ctrl + C, Ctrl + V in most applications."", ""If you're on Mac OS X, there's pbcopy. e.g cat example.txt | pbcopy"", ""If you're in Linux terminal mode (no X) then look into gpm or screen which has a clipboard.  Try the screen command readreg."", 'Under Windows 10+ or cygwin, use /dev/clipboard or clip.']","[<code>xclip</code>, <code>xclip -selection c</code>, <code>pbcopy</code>, <code>cat example.txt | pbcopy</code>, <code>gpm</code>, <code>screen</code>, <code>readreg</code>, <code>/dev/clipboard</code>, <code>clip</code>]"
35,https://stackoverflow.com/questions/14352290/,"['*/ is a pattern that matches all of the subdirectories in the current directory (* would match all files and subdirectories; the / restricts it to directories). Similarly, to list all subdirectories under /home/alice/Documents, use ls -d /home/alice/Documents/*/']","[<code>*/</code>, <code>*</code>, <code>/</code>, <code>ls -d /home/alice/Documents/*/</code>]"
36,https://stackoverflow.com/questions/1158091/,"['export makes the variable available to sub-processes.', 'That is,', 'means that the variable name is available to any process you run from that shell process. If you want a process to make use of this variable, use export, and run the process from that shell.', 'means the variable scope is restricted to the shell, and is not available to any other process. You would use this for (say) loop variables, temporary variables etc.', ""It's important to note that exporting a variable doesn't make it available to parent processes. That is, specifying and exporting a variable in a spawned process doesn't make it available in the process that launched it.""]","[<code>export</code>, <code>export name=value
</code>, <code>export</code>, <code>name=value
</code>]"
37,https://stackoverflow.com/questions/2237080/,"[""If you want to do something when they don't match, replace = with !=. You can read more about string operations and arithmetic operations in their respective documentation."", 'You want the quotes around $x, because if it is empty, your Bash script encounters a syntax error as seen below:', 'Note that Bash allows == to be used for equality with [, but this is not standard.', 'Use either the first case wherein the quotes around $x are optional:', 'or use the second case:']","[<code>if [ ""$x"" = ""valid"" ]; then
  echo ""x has the value 'valid'""
fi
</code>, <code>=</code>, <code>!=</code>, <code>$x</code>, <code>$x</code>, <code>if [ = ""valid"" ]; then
</code>, <code>==</code>, <code>==</code>, <code>[</code>, <code>$x</code>, <code>if [[ ""$x"" == ""valid"" ]]; then
</code>, <code>if [ ""$x"" = ""valid"" ]; then
</code>]"
38,https://stackoverflow.com/questions/2853803/,"['set -x or set -o xtrace expands variables and prints a little + sign before the line.', 'set -v or set -o verbose does not expand the variables before printing.', 'Use set +x and set +v to turn off the above settings.', 'On the first line of the script, one can put #!/bin/sh -x (or -v) to have the same effect as set -x (or -v) later in the script.', 'The above also works with /bin/sh.', ""See the bash-hackers' wiki on set attributes, and on debugging.""]","[<code>set -x</code>, <code>set -o xtrace</code>, <code>set -v</code>, <code>set -o verbose</code>, <code>set +x</code>, <code>set +v</code>, <code>#!/bin/sh -x</code>, <code>-v</code>, <code>set -x</code>, <code>-v</code>, <code>/bin/sh</code>, <code>set</code>, <code>$ cat shl
#!/bin/bash                                                                     

DIR=/tmp/so
ls $DIR

$ bash -x shl 
+ DIR=/tmp/so
+ ls /tmp/so
$
</code>]"
39,https://stackoverflow.com/questions/1955505/,"['There are a number of tools specifically designed for the purpose of manipulating JSON from the command line, and will be a lot easier and more reliable than doing it with Awk, such as jq:', 'You can also do this with tools that are likely already installed on your system, like Python using the json module, and so avoid any extra dependencies, while still having the benefit of a proper JSON parser. The following assume you want to use UTF-8, which the original JSON should be encoded in and is what most modern terminals use as well:', 'Python 3:', 'Python 2:', ""The standard POSIX/Single Unix Specification shell is a very limited language which doesn't contain facilities for representing sequences (list or arrays) or associative arrays (also known as hash tables, maps, dicts, or objects in some other languages). This makes representing the result of parsing JSON somewhat tricky in portable shell scripts. There are somewhat hacky ways to do it, but many of them can break if keys or values contain certain special characters."", ""Bash 4 and later, zsh, and ksh have support for arrays and associative arrays, but these shells are not universally available (macOS stopped updating Bash at Bash 3, due to a change from GPLv2 to GPLv3, while many Linux systems don't have zsh installed out of the box). It's possible that you could write a script that would work in either Bash 4 or zsh, one of which is available on most macOS, Linux, and BSD systems these days, but it would be tough to write a shebang line that worked for such a polyglot script."", ""Finally, writing a full fledged JSON parser in shell would be a significant enough enough dependency that you might as well just use an existing dependency like jq or Python instead. It's not going to be a one-liner, or even small five-line snippet, to do a good implementation."", 'It is possible to use these tools to do some quick extraction from JSON with a known shape and formatted in a known way, such as one key per line. There are several examples of suggestions for this in other answers.', 'However, these tools are designed for line based or record based formats; they are not designed for recursive parsing of matched delimiters with possible escape characters.', 'So these quick and dirty solutions using awk/sed/grep are likely to be fragile, and break if some aspect of the input format changes, such as collapsing whitespace, or adding additional levels of nesting to the JSON objects, or an escaped quote within a string. A solution that is robust enough to handle all JSON input without breaking will also be fairly large and complex, and so not too much different than adding another dependency on jq or Python.', ""I have had to deal with large amounts of customer data being deleted due to poor input parsing in a shell script before, so I never recommend quick and dirty methods that may be fragile in this way. If you're doing some one-off processing, see the other answers for suggestions, but I still highly recommend just using an existing tested JSON parser."", 'This answer originally recommended jsawk, which should still work, but is a little more cumbersome to use than jq, and depends on a standalone JavaScript interpreter being installed which is less common than a Python interpreter, so the above answers are probably preferable:', ""This answer also originally used the Twitter API from the question, but that API no longer works, making it hard to copy the examples to test out, and the new Twitter API requires API keys, so I've switched to using the GitHub API which can be used easily without API keys.  The first answer for the original question would be:""]","[<code>jq</code>, <code>curl -s 'https://api.github.com/users/lambda' | jq -r '.name'
</code>, <code>json</code>, <code>curl -s 'https://api.github.com/users/lambda' | \
    python3 -c ""import sys, json; print(json.load(sys.stdin)['name'])""
</code>, <code>export PYTHONIOENCODING=utf8
curl -s 'https://api.github.com/users/lambda' | \
    python2 -c ""import sys, json; print json.load(sys.stdin)['name']""
</code>, <code>jq</code>, <code>jq</code>, <code>curl -s 'https://api.github.com/users/lambda' | jsawk -a 'return this.name'
</code>, <code>curl 'http://twitter.com/users/username.json' | jq -r '.text'
</code>]"
40,https://stackoverflow.com/questions/255898/,"['Use ""$@"" to represent all the arguments:', 'This will iterate over each argument and print it out on a separate line.  $@ behaves like $* except that when quoted the arguments are broken up properly if there are spaces in them:']","[<code>""$@""</code>, <code>for var in ""$@""
do
    echo ""$var""
done
</code>, <code>sh test.sh 1 2 '3 4'
1
2
3 4
</code>]"
41,https://stackoverflow.com/questions/14637979/,"['There are multiple ways to do it. The actual solution depends on the purpose.', 'The variable values are usually stored in either a list of assignments or a shell script that is run at the start of the system or user session. In case of the shell script you must use a specific shell syntax and export or set commands.', 'Gnome on Wayland starts user login shell to get the environment. It effectively uses login shell configurations ~/.profile, ~/.<shell>_profile, ~/.<shell>_login files.', 'Difference between Login Shell and Non-Login Shell?']","[<code>export</code>, <code>set</code>, <code>/etc/environment</code>, <code>/usr/local/something/bin</code>, <code>PATH</code>, <code>JAVA_HOME</code>, <code>/etc/environment.d/*.conf</code>, <code>/usr/local/something/bin</code>, <code>PATH</code>, <code>JAVA_HOME</code>, <code>/etc/xprofile</code>, <code>PATH</code>, <code>/usr/local/something/bin</code>, <code>/etc/profile</code>, <code>/etc/profile.d/*</code>, <code>/etc/&lt;shell&gt;.&lt;shell&gt;rc</code>, <code>~/.pam_environment</code>, <code>HOME</code>, <code>PATH</code>, <code>~/.xprofile</code>, <code>PATH</code>, <code>~/bin</code>, <code>~/go/bin</code>, <code>GOPATH</code>, <code>NPM_HOME</code>, <code>~/.profile</code>, <code>~/.&lt;shell&gt;_profile</code>, <code>~/.&lt;shell&gt;_login</code>, <code>~/.&lt;shell&gt;rc</code>, <code>~/.profile</code>, <code>~/.&lt;shell&gt;_profile</code>, <code>~/.&lt;shell&gt;_login</code>]"
42,https://stackoverflow.com/questions/4824590/,"['Use ""$@"" instead of plain $@ if you actually wish your parameters to be passed the same.', 'Observe:']","[<code>""$@""</code>, <code>$@</code>, <code>$ cat no_quotes.sh
#!/bin/bash
echo_args.sh $@

$ cat quotes.sh
#!/bin/bash
echo_args.sh ""$@""

$ cat echo_args.sh
#!/bin/bash
echo Received: $1
echo Received: $2
echo Received: $3
echo Received: $4

$ ./no_quotes.sh first second
Received: first
Received: second
Received:
Received:

$ ./no_quotes.sh ""one quoted arg""
Received: one
Received: quoted
Received: arg
Received:

$ ./quotes.sh first second
Received: first
Received: second
Received:
Received:

$ ./quotes.sh ""one quoted arg""
Received: one quoted arg
Received:
Received:
Received:
</code>]"
43,https://stackoverflow.com/questions/13210880/,"['To replace the first occurrence of a pattern with a given string, use ${parameter/pattern/string}:', 'To replace all occurrences, use ${parameter//pattern/string}:', '(This is documented in the Bash Reference Manual, §3.5.3 ""Shell Parameter Expansion"".)', 'Note that this feature is not specified by POSIX — it\'s a Bash extension — so not all Unix shells implement it. For the relevant POSIX documentation, see The Open Group Technical Standard Base Specifications, Issue 7, the Shell & Utilities volume, §2.6.2 ""Parameter Expansion"".']","[<code>${<em>parameter</em>/<em>pattern</em>/<em>string</em>}</code>, <code>#!/bin/bash
firstString=""I love Suzi and Marry""
secondString=""Sara""
echo ""${firstString/Suzi/$secondString}""    
# prints 'I love Sara and Marry'
</code>, <code>${<em>parameter</em>//<em>pattern</em>/<em>string</em>}</code>, <code>message='The secret code is 12345'
echo ""${message//[0-9]/X}""           
# prints 'The secret code is XXXXX'
</code>]"
44,https://stackoverflow.com/questions/9679776/,"['You can use Ctrl+U to clear up to the beginning.', 'You can use Ctrl+W to delete just a word.', 'You can also use Ctrl+C to cancel.', 'If you want to keep the history, you can use Alt+Shift+# to make it a comment.', 'Bash Emacs Editing Mode Cheat Sheet']",[]
45,https://stackoverflow.com/questions/1371261/,"['No need for basename, and especially no need for a subshell running pwd (which adds an extra, and expensive, fork operation); the shell can do this internally using parameter expansion:', ""Note that if you're applying this technique in other circumstances (not PWD, but some other variable holding a directory name), you might need to trim any trailing slashes. The below uses bash's extglob support to work even with multiple trailing slashes:"", 'Alternatively, without extglob:']","[<code>result=${PWD##*/}          # to assign to a variable

printf '%s\n' ""${PWD##*/}"" # to print to stdout
                           # ...more robust than echo for unusual names
                           #    (consider a directory named -e or -n)

printf '%q\n' ""${PWD##*/}"" # to print to stdout, quoted for use as shell input
                           # ...useful to make hidden characters readable.
</code>, <code>PWD</code>, <code>dirname=/path/to/somewhere//
shopt -s extglob           # enable +(...) glob syntax
result=${dirname%%+(/)}    # trim however many trailing slashes exist
result=${result##*/}       # remove everything before the last / that still remains
printf '%s\n' ""$result""
</code>, <code>extglob</code>, <code>dirname=""/path/to/somewhere//""
result=""${dirname%""${dirname##*[!/]}""}"" # extglob-free multi-trailing-/ trim
result=""${result##*/}""                  # remove everything before the last /
</code>]"
46,https://stackoverflow.com/questions/1951506/,"['Yes there is:', 'Bash Reference Manual:', ""In the context where an assignment statement is assigning a value to a shell variable or array index (see Arrays), the ‘+=’ operator can be used to append to or add to the variable's previous value.""]","[<code>ARRAY=()
ARRAY+=('foo')
ARRAY+=('bar')
</code>]"
47,https://stackoverflow.com/questions/4997693/,"['You said Linux, so you luck out (at least it should be available, not sure when it was added):', 'Should do what you need.', 'If you also want to see differences for files that may not exist in either directory:']","[<code>diff --brief --recursive dir1/ dir2/ # GNU long options
diff -qr dir1/ dir2/ # common short options
</code>, <code>diff --brief --recursive --new-file dir1/ dir2/ # GNU long options
diff -qrN dir1/ dir2/ # common short options
</code>]"
48,https://stackoverflow.com/questions/5163144/,"['Most of the above can be found under Special Parameters in the Bash Reference Manual. There are all the environment variables set by the shell.', 'For a comprehensive index, please see the Reference Manual Variable Index.']","[<code>$1</code>, <code>$2</code>, <code>$3</code>, <code>""$@""</code>, <code>{$1, $2, $3 ...}</code>, <code>""$*""</code>, <code>$1 $2 $3 ...</code>, <code>$#</code>, <code>$-</code>, <code>$$</code>, <code>$_</code>, <code>$IFS</code>, <code>$?</code>, <code>$!</code>, <code>$0</code>]"
49,https://stackoverflow.com/questions/4822471/,"['xargs will do what you want:', 'But with more information and probably better, you can do:']","[<code>xargs</code>, <code>git ls-files | xargs cat | wc -l
</code>, <code>git ls-files | xargs wc -l
</code>]"
50,https://stackoverflow.com/questions/762348/,"[""Note:\n* This answer probably goes deeper than the use case warrants, and find 2>/dev/null may be good enough in many situations. It may still be of interest for a cross-platform perspective and for its discussion of some advanced shell techniques in the interest of finding a solution that is as robust as possible, even though the cases guarded against may be largely hypothetical.\n* If your system is configured to show localized error messages, prefix the find calls below with LC_ALL=C (LC_ALL=C find ...) to ensure that English messages are reported, so that grep -v 'Permission denied' works as intended. Invariably, however, any error messages that do get displayed will then be in English as well.  "", ""If your shell is bash or zsh, there's a solution that is robust while being reasonably simple, using only POSIX-compliant find features; while bash itself is not part of POSIX, most modern Unix platforms come with it, making this solution widely portable:"", ""Note: There's a small chance that some of grep's output may arrive after find completes, because the overall command doesn't wait for the command inside >(...) to finish. In bash, you can prevent this by appending | cat to the command."", '>(...) is a (rarely used) output process substitution that allows redirecting output (in this case, stderr output (2>) to the stdin of the command inside >(...).\nIn addition to bash and zsh, ksh supports them as well in principle, but trying to combine them with redirection from stderr, as is done here (2> >(...)), appears to be silently ignored (in ksh 93u+).', 'This approach is:', 'robust: grep is only applied to error messages (and not to a combination of file paths and error messages, potentially leading to false positives), and error messages other than permission-denied ones are passed through, to stderr.', ""side-effect free: find's exit code is preserved: the inability to access at least one of the filesystem items encountered results in exit code 1 (although that won't tell you whether errors other than permission-denied ones occurred (too))."", 'Fully POSIX-compliant solutions either have limitations or require additional work.', ""If find's output is to be captured in a file anyway (or suppressed altogether), then the pipeline-based solution from Jonathan Leffler's answer is simple, robust, and POSIX-compliant:"", 'Note that the order of the redirections matters: 2>&1 must come first.', 'Capturing stdout output in a file up front allows 2>&1 to send only error messages through the pipeline, which grep can then unambiguously operate on.', ""The only downside is that the overall exit code will be the grep command's, not find's, which in this case means: if there are no errors at all or only permission-denied errors, the exit code will be 1 (signaling failure), otherwise (errors other than permission-denied ones) 0 - which is the opposite of the intent.\nThat said, find's exit code is rarely used anyway, as it often conveys little information beyond fundamental failure such as passing a non-existent path.\nHowever, the specific case of even only some of the input paths being inaccessible due to lack of permissions is reflected in find's exit code (in both GNU and BSD find): if a permissions-denied error occurs for any of the files processed, the exit code is set to 1."", 'The following variation addresses that:', ""Now, the exit code indicates whether any errors other than Permission denied occurred: 1 if so, 0 otherwise.\nIn other words: the exit code now reflects the true intent of the command: success (0) is reported, if no errors at all or only permission-denied errors occurred.\nThis is arguably even better than just passing find's exit code through, as in the solution at the top."", 'gniourf_gniourf in the comments proposes a (still POSIX-compliant) generalization of this solution using sophisticated redirections, which works even with the default behavior of printing the file paths to stdout:', 'In short: Custom file descriptor 3 is used to temporarily swap stdout (1) and stderr (2), so that error messages alone can be piped to grep via stdout.', 'Without these redirections, both data (file paths) and error messages would be piped to grep via stdout, and grep would then not be able to distinguish between error message Permission denied and a (hypothetical) file whose name happens to contain the phrase Permission denied.', ""As in the first solution, however, the the exit code reported will be grep's, not find's, but the same fix as above can be applied."", ""There are several points to note about Michael Brux's answer, find . ! -readable -prune -o -print:"", ""It requires GNU find; notably, it won't work on macOS. Of course, if you only ever need the command to work with GNU find, this won't be a problem for you."", 'Some Permission denied errors may still surface: find ! -readable -prune reports such errors for the child items of directories for which the current user does have r permission, but lacks x (executable) permission. The reason is that because the directory itself is readable, -prune is not executed, and the attempt to descend into that directory then triggers the error messages. That said, the typical case is for the r permission to be missing.', 'Note: The following point is a matter of philosophy and/or specific use case, and you may decide it is not relevant to you and that the command fits your needs well, especially if simply printing the paths is all you do:', ""The first solution in Jonathan Leffler's answer, find . 2>/dev/null > files_and_folders, as he himself states,  blindly silences all error messages (and the workaround is cumbersome and not fully robust, as he also explains). Pragmatically speaking, however, it is the simplest solution, as you may be content to assume that any and all errors would be permission-related."", 'mist\'s answer, sudo find . > files_and_folders, is concise and pragmatic, but ill-advised for anything other than merely printing filenames, for security reasons: because you\'re running as the root user, ""you risk having your whole system being messed up by a bug in find or a malicious version, or an incorrect invocation which writes something unexpectedly, which could not happen if you ran this with normal privileges"" (from a comment on mist\'s answer by tripleee).  ', ""The 2nd solution in viraptor's answer, find . 2>&1 | grep -v 'Permission denied' > some_file runs the risk of false positives (due to sending a mix of stdout and stderr through the pipeline), and, potentially, instead of reporting non-permission-denied errors via stderr, captures them alongside the output paths in the output file.""]","[<code>find 2&gt;/dev/null</code>, <code>find</code>, <code>LC_ALL=C</code>, <code>LC_ALL=C find ...</code>, <code>grep -v 'Permission denied'</code>, <code>bash</code>, <code>zsh</code>, <code>find</code>, <code>bash</code>, <code>find . &gt; files_and_folders 2&gt; &gt;(grep -v 'Permission denied' &gt;&amp;2)
</code>, <code>grep</code>, <code>find</code>, <code>&gt;(...)</code>, <code>bash</code>, <code>| cat</code>, <code>&gt;(...)</code>, <code>2&gt;</code>, <code>&gt;(...)</code>, <code>bash</code>, <code>zsh</code>, <code>ksh</code>, <code>2&gt; &gt;(...)</code>, <code>ksh 93u+</code>, <code>grep -v 'Permission denied'</code>, <code>-v</code>, <code>find</code>, <code>Permission denied</code>, <code>&gt;&amp;2</code>, <code>grep</code>, <code>find</code>, <code>1</code>, <code>find</code>, <code>find . 2&gt;&amp;1 &gt;files_and_folders | grep -v 'Permission denied' &gt;&amp;2
</code>, <code>2&gt;&amp;1</code>, <code>2&gt;&amp;1</code>, <code>grep</code>, <code>grep</code>, <code>find</code>, <code>1</code>, <code>0</code>, <code>find</code>, <code>find</code>, <code>find</code>, <code>1</code>, <code>find . 2&gt;&amp;1 &gt;files_and_folders | { grep -v 'Permission denied' &gt;&amp;2; [ $? -eq 1 ]; }
</code>, <code>Permission denied</code>, <code>1</code>, <code>0</code>, <code>0</code>, <code>find</code>, <code>{ find . 3&gt;&amp;2 2&gt;&amp;1 1&gt;&amp;3 | grep -v 'Permission denied' &gt;&amp;3; } 3&gt;&amp;2 2&gt;&amp;1
</code>, <code>3</code>, <code>1</code>, <code>2</code>, <code>grep</code>, <code>grep</code>, <code>grep</code>, <code>Permission denied</code>, <code>Permission denied</code>, <code>grep</code>, <code>find</code>, <code>find . ! -readable -prune -o -print</code>, <code>find</code>, <code>find</code>, <code>Permission denied</code>, <code>find ! -readable -prune</code>, <code>r</code>, <code>x</code>, <code>-prune</code>, <code>r</code>, <code>find</code>, <code>find</code>, <code>-name</code>, <code>find . ! -readable -prune -o -name '*.txt'</code>, <code>-print</code>, <code>find . 2&gt;/dev/null &gt; files_and_folders</code>, <code>sudo find . &gt; files_and_folders</code>, <code>find . 2&gt;&amp;1 | grep -v 'Permission denied' &gt; some_file</code>]"
51,https://stackoverflow.com/questions/2953081/,"['Read the Advanced Bash-Scripting Guide Chapter 19. Here Documents.', ""Here's an example which will write the contents to a file at /tmp/yourfilehere"", ""Note that the final 'EOF' (The LimitString) should not have any whitespace in front of the word, because it means that the LimitString will not be recognized."", 'In a shell script, you may want to use indentation to make the code readable, however this can have the undesirable effect of indenting the text within your here document. In this case, use <<- (followed by a dash) to disable leading tabs (Note that to test this you will need to replace the leading whitespace with a tab character, since I cannot print actual tab characters here.)', ""If you don't want to interpret variables in the text, then use single quotes:"", 'To pipe the heredoc through a command pipeline:', 'Output:', '... or to write the the heredoc to a file using sudo:']","[<code>/tmp/yourfilehere</code>, <code>cat &lt;&lt; EOF &gt; /tmp/yourfilehere
These contents will be written to the file.
        This line is indented.
EOF
</code>, <code>LimitString</code>, <code>LimitString</code>, <code>&lt;&lt;-</code>, <code>#!/usr/bin/env bash

if true ; then
    cat &lt;&lt;- EOF &gt; /tmp/yourfilehere
    The leading tab is ignored.
    EOF
fi
</code>, <code>cat &lt;&lt; 'EOF' &gt; /tmp/yourfilehere
The variable $FOO will not be interpreted.
EOF
</code>, <code>cat &lt;&lt;'EOF' |  sed 's/a/b/'
foo
bar
baz
EOF
</code>, <code>foo
bbr
bbz
</code>, <code>sudo</code>, <code>cat &lt;&lt;'EOF' |  sed 's/a/b/' | sudo tee /etc/config_file.conf
foo
bar
baz
EOF
</code>]"
52,https://stackoverflow.com/questions/2172352/,"['This snippet on the Advanced Bash Scripting Guide says:', 'So you had it nearly correct; you needed double brackets, not single brackets.', 'With regards to your second question, you can write it this way:', 'Which will echo', ""Bash's if syntax is hard to get used to (IMO).""]","[<code># The == comparison operator behaves differently within a double-brackets
# test than within single brackets.

[[ $a == z* ]]   # True if $a starts with a ""z"" (wildcard matching).
[[ $a == ""z*"" ]] # True if $a is equal to z* (literal matching).
</code>, <code>HOST=user1
if  [[ $HOST == user1 ]] || [[ $HOST == node* ]] ;
then
    echo yes1
fi

HOST=node001
if [[ $HOST == user1 ]] || [[ $HOST == node* ]] ;
then
    echo yes2
fi
</code>, <code>yes1
yes2
</code>, <code>if</code>]"
53,https://stackoverflow.com/questions/19622198/,"['From help set :', ""But it's considered bad practice by some (bash FAQ and irc freenode #bash FAQ authors). It's recommended to use:"", 'to run do_something function when errors occur.', 'See http://mywiki.wooledge.org/BashFAQ/105']","[<code>help set</code>, <code>  -e  Exit immediately if a command exits with a non-zero status.
</code>, <code>trap 'do_something' ERR
</code>, <code>do_something</code>]"
54,https://stackoverflow.com/questions/5064563/,"[""Certainly, how it's done depends on your shell. In Bash, you can use single quotes around the message and can just leave the quote open, which will make Bash prompt for another line, until you close the quote. Like this:"", 'Alternatively, you can use a ""here document"" (also known as heredoc):']","[<code>git commit -m 'Message

goes
here'
</code>, <code>git commit -F- &lt;&lt;EOF
Message

goes
here
EOF
</code>]"
55,https://stackoverflow.com/questions/10929453/,"['The following reads a file passed as an argument line by line:', 'This is the standard form for reading lines from a file in a loop. Explanation:', 'Or you can put it in a bash file helper script, example contents:', 'If the above is saved to a script with filename readfile, it can be run as follows:', 'If the file isn’t a standard POSIX text file (= not terminated by a newline character), the loop can be modified to handle trailing partial lines:', ""Here, || [[ -n $line ]] prevents the last line from being ignored if it doesn't end with a \\n (since read returns a non-zero exit code when it encounters EOF)."", 'If the commands inside the loop also read from standard input, the file descriptor used by read can be chanced to something else (avoid the standard file descriptors), e.g.:', '(Non-Bash shells might not know read -u3; use read <&3 instead.)']","[<code>while IFS= read -r line; do
    echo ""Text read from file: $line""
done &lt; my_filename.txt
</code>, <code>IFS=</code>, <code>IFS=''</code>, <code>-r</code>, <code>#!/bin/bash
while IFS= read -r line; do
    echo ""Text read from file: $line""
done &lt; ""$1""
</code>, <code>readfile</code>, <code>chmod +x readfile
./readfile filename.txt
</code>, <code>while IFS= read -r line || [[ -n ""$line"" ]]; do
    echo ""Text read from file: $line""
done &lt; ""$1""
</code>, <code>|| [[ -n $line ]]</code>, <code>\n</code>, <code>read</code>, <code>read</code>, <code>while IFS= read -r -u3 line; do
    echo ""Text read from file: $line""
done 3&lt; ""$1""
</code>, <code>read -u3</code>, <code>read &lt;&amp;3</code>]"
56,https://stackoverflow.com/questions/2013547/,"['Very close to what you posted, actually.', ""To get the assigned value, or default if it's missing:"", 'Or to assign default to VARIABLE at the same time:']","[<code>default</code>, <code>FOO=${VARIABLE:-default}  # If variable not set or null, use default.
</code>, <code>default</code>, <code>VARIABLE</code>, <code>FOO=${VARIABLE:=default}  # If variable not set or null, set it to default.
</code>]"
57,https://stackoverflow.com/questions/18568706/,"['Just like any other simple command, [ ... ] or test requires spaces between its arguments.', 'Or', ""When in Bash, prefer using [[ ]] instead as it doesn't do word splitting and pathname expansion to its variables that quoting may not be necessary unless it's part of an expression."", 'It also has some other features like unquoted condition grouping, pattern matching (extended pattern matching with extglob) and regex matching.', 'The following example checks if arguments are valid. It allows a single argument or two.', 'For pure arithmetic expressions, using (( )) to some may still be better, but they are still possible in [[ ]] with its arithmetic operators like -eq, -ne, -lt, -le, -gt, or -ge by placing the expression as a single string argument:', 'That should be helpful if you would need to combine it with other features of [[ ]] as well.', 'Take note that [[ ]] and (( )) are keywords which have same level of parsing as if, case, while, and for.', ""Also as Dave suggested, error messages are better sent to stderr so they don't get included when stdout is redirected:"", ""It's also logical to make the script exit when invalid parameters are passed to it.  This has already been suggested in the comments by ekangas but someone edited this answer to have it with -1 as the returned value, so I might as well do it right."", ""-1 though accepted by Bash as an argument to exit is not explicitly documented and is not right to be used as a common suggestion.  64 is also the most formal value since it's defined in sysexits.h with #define EX_USAGE 64 /* command line usage error */.  Most tools like ls also return 2 on invalid arguments.  I also used to return 2 in my scripts but lately I no longer really cared, and simply used 1 in all errors.  But let's just place 2 here since it's most common and probably not OS-specific.""]","[<code>[ ... ]</code>, <code>test</code>, <code>if [ ""$#"" -ne 1 ]; then
    echo ""Illegal number of parameters""
fi
</code>, <code>if test ""$#"" -ne 1; then
    echo ""Illegal number of parameters""
fi
</code>, <code>[[ ]]</code>, <code>[[ $# -ne 1 ]]
</code>, <code>extglob</code>, <code>[[ ($# -eq 1 || ($# -eq 2 &amp;&amp; $2 == &lt;glob pattern&gt;)) &amp;&amp; $1 =~ &lt;regex pattern&gt; ]]
</code>, <code>(( ))</code>, <code>[[ ]]</code>, <code>-eq</code>, <code>-ne</code>, <code>-lt</code>, <code>-le</code>, <code>-gt</code>, <code>-ge</code>, <code>A=1
[[ 'A + 1' -eq 2 ]] &amp;&amp; echo true  ## Prints true.
</code>, <code>[[ ]]</code>, <code>[[ ]]</code>, <code>(( ))</code>, <code>if</code>, <code>case</code>, <code>while</code>, <code>for</code>, <code>echo ""Illegal number of parameters"" &gt;&amp;2
</code>, <code>-1</code>, <code>-1</code>, <code>exit</code>, <code>64</code>, <code>sysexits.h</code>, <code>#define EX_USAGE 64 /* command line usage error */</code>, <code>ls</code>, <code>2</code>, <code>2</code>, <code>1</code>, <code>2</code>, <code>if [[ $# -ne 1 ]]; then
    echo ""Illegal number of parameters""
    exit 2
fi
</code>]"
58,https://stackoverflow.com/questions/428109/,"['Use cut:', 'More generic:']","[<code>echo 'someletters_12345_moreleters.ext' | cut -d'_' -f 2
</code>, <code>INPUT='someletters_12345_moreleters.ext'
SUBSTRING=$(echo $INPUT| cut -d'_' -f 2)
echo $SUBSTRING
</code>]"
59,https://stackoverflow.com/questions/6674327/,"['That part is written to stderr, use 2> to redirect it. For example:', 'or if you want in same file:', 'Note: this works in (ba)sh, check your shell for proper syntax']","[<code>2&gt;</code>, <code>foo &gt; stdout.txt 2&gt; stderr.txt
</code>, <code>foo &gt; allout.txt 2&gt;&amp;1
</code>]"
60,https://stackoverflow.com/questions/7161821/,"[""Turn on grep's line buffering mode when using BSD grep (FreeBSD, Mac OS X etc.)"", ""It looks like a while ago --line-buffered didn't matter for GNU grep (used on pretty much any Linux) as it flushed by default (YMMV for other Unix-likes such as SmartOS, AIX or QNX). However, as of November 2020, --line-buffered is needed (at least with GNU grep 3.5 in openSUSE, but it seems generally needed based on comments below).""]","[<code>grep</code>, <code>tail -f file | grep --line-buffered my_pattern
</code>, <code>--line-buffered</code>, <code>--line-buffered</code>]"
61,https://stackoverflow.com/questions/1378274/,"['Try this statement:', 'Replace 1 with appropriate error codes. See also Exit Codes With Special Meanings.']","[<code>exit 1
</code>, <code>1</code>]"
62,https://stackoverflow.com/questions/4774054/,"['Here\'s what I\'ve come up with (edit: plus some tweaks provided by sfstewman, levigroker, Kyle Strand, and Rob Kennedy), that seems to mostly fit my ""better"" criteria:', 'That SCRIPTPATH line seems particularly roundabout, but we need it rather than SCRIPTPATH=`pwd` in order to properly handle spaces and symlinks.', 'The inclusion of output redirection (>/dev/null 2>&1) handles the rare(?) case where cd might produce output that would interfere with the surrounding $( ... ) capture. (Such as cd being overridden to also ls a directory after switching to it.)', ""Note also that esoteric situations, such as executing a script that isn't coming from a file in an accessible file system at all (which is perfectly possible), is not catered to there (or in any of the other answers I've seen).""]","[<code>SCRIPTPATH=""$( cd ""$(dirname ""$0"")"" &gt;/dev/null 2&gt;&amp;1 ; pwd -P )""
</code>, <code>SCRIPTPATH</code>, <code>SCRIPTPATH=`pwd`</code>, <code>&gt;/dev/null 2&gt;&amp;1</code>, <code>cd</code>, <code>$( ... )</code>, <code>cd</code>, <code>ls</code>]"
63,https://stackoverflow.com/questions/637827/,"['Take a look here. Should be:', '(redirects both stdout and stderr to filename).']","[<code>yourcommand &amp;&gt;filename
</code>, <code>stdout</code>, <code>stderr</code>]"
64,https://stackoverflow.com/questions/8748831/,"['In this particular example, it makes no difference. However, the {} in ${} are useful if you want to expand the variable foo in the string', 'since ""$foobar"" would instead expand the variable identified by foobar.', 'Curly braces are also unconditionally required when:', ""Doing this everywhere, instead of just in potentially ambiguous cases, can be considered good programming practice. This is both for consistency and to avoid surprises like $foo_$bar.jpg, where it's not visually obvious that the underscore becomes part of the variable name.""]","[<code>{}</code>, <code>${}</code>, <code>foo</code>, <code>""${foo}bar""
</code>, <code>""$foobar""</code>, <code>foobar</code>, <code>${array[42]}</code>, <code>${filename%.*}</code>, <code>""$8 $9 ${10} ${11}""</code>, <code>$foo_$bar.jpg</code>]"
65,https://stackoverflow.com/questions/2500436/,"['This is called heredoc format to provide a string into stdin. See https://en.wikipedia.org/wiki/Here_document#Unix_shells for more details.', 'From man bash:', 'This type of redirection instructs the shell to read input from\n  the current source until a line\n  containing only word (with no trailing\n  blanks)  is  seen.', 'All of the lines read up to that point are then used as the\n  standard input for a command.', 'The format of here-documents is:', 'No parameter expansion, command substitution, arithmetic expansion, or\n  pathname expansion is performed on\n  word.  If any characters in word are\n  quoted, the\n  delimiter is the result of quote removal on word, and the lines\n  in the here-document are not expanded.\n  If word is unquoted, all lines of  the\n  here-document  are  subjected  to  parameter  expansion,  command\n  substitution, and arithmetic\n  expansion.  In the latter case, the\n  character sequence \\<newline> is\n  ignored, and \\ must be used to quote the characters \\, $, and `.', 'If the redirection operator is <<-, then all leading tab characters\n  are stripped from input lines and the\n  line containing delimiter.   This \n  allows  here-documents within shell scripts to be indented in a natural fashion.']","[<code>man bash</code>, <code>          &lt;&lt;[-]word
                  here-document
          delimiter
</code>, <code>\&lt;newline&gt;</code>, <code>\</code>, <code>\</code>, <code>$</code>, <code>`</code>, <code>&lt;&lt;-</code>]"
66,https://stackoverflow.com/questions/785519/,[],"[<code>find . -name ""*.pyc"" -exec rm -f {} \;
</code>]"
67,https://stackoverflow.com/questions/10586153/,"[""Note that the characters in $IFS are treated individually as separators so that in this case fields may be separated by either a comma or a space rather than the sequence of the two characters. Interestingly though, empty fields aren't created when comma-space appears in the input because the space is treated specially."", 'To access an individual element:', 'To iterate over the elements:', 'To get both the index and the value:', 'The last example is useful because Bash arrays are sparse. In other words, you can delete an element or add an element and then the indices are not contiguous.', 'To get the number of elements in an array:', ""As mentioned above, arrays can be sparse so you shouldn't use the length to get the last element. Here's how you can in Bash 4.2 and later:"", 'in any version of Bash (from somewhere after 2.05b):', 'Larger negative offsets select farther from the end of the array. Note the space before the minus sign in the older form. It is required.']","[<code>IFS=', ' read -r -a array &lt;&lt;&lt; ""$string""
</code>, <code>$IFS</code>, <code>echo ""${array[0]}""
</code>, <code>for element in ""${array[@]}""
do
    echo ""$element""
done
</code>, <code>for index in ""${!array[@]}""
do
    echo ""$index ${array[index]}""
done
</code>, <code>unset ""array[1]""
array[42]=Earth
</code>, <code>echo ""${#array[@]}""
</code>, <code>echo ""${array[-1]}""
</code>, <code>echo ""${array[@]: -1:1}""
</code>]"
68,https://stackoverflow.com/questions/2188199/,"['In Bash, test and [ are shell builtins.', ""The double bracket, which is a shell keyword, enables additional functionality. For example, you can use && and || instead of -a and -o and there's a regular expression matching operator =~."", 'Also, in a simple test, double square brackets seem to evaluate quite a lot quicker than single ones.', 'The braces, in addition to delimiting a variable name are used for parameter expansion so you can do things like:', 'Truncate the contents of a variable', 'Make substitutions similar to sed', 'Use a default value', 'and several more', 'Also, brace expansions create lists of strings which are typically iterated over in loops:', ""Note that the leading zero and increment features weren't available before Bash 4."", 'Thanks to gboffi for reminding me about brace expansions.', 'Double parentheses are used for arithmetic operations:', 'and they enable you to omit the dollar signs on integer and array variables and include spaces around operators for readability.', 'Single brackets are also used for array indices:', 'Curly brace are required for (most/all?) array references on the right hand side.', ""ephemient's comment reminded me that parentheses are also used for subshells. And that they are used to create arrays.""]","[<code>test</code>, <code>[</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>-a</code>, <code>-o</code>, <code>=~</code>, <code>$ time for ((i=0; i&lt;10000000; i++)); do [[ ""$i"" = 1000 ]]; done

real    0m24.548s
user    0m24.337s
sys 0m0.036s
$ time for ((i=0; i&lt;10000000; i++)); do [ ""$i"" = 1000 ]; done

real    0m33.478s
user    0m33.478s
sys 0m0.000s
</code>, <code>$ var=""abcde""; echo ${var%d*}
abc
</code>, <code>sed</code>, <code>$ var=""abcde""; echo ${var/de/12}
abc12
</code>, <code>$ default=""hello""; unset var; echo ${var:-$default}
hello
</code>, <code>$ echo f{oo,ee,a}d
food feed fad

$ mv error.log{,.OLD}
(error.log is renamed to error.log.OLD because the brace expression
expands to ""mv error.log error.log.OLD"")

$ for num in {000..2}; do echo ""$num""; done
000
001
002

$ echo {00..8..2}
00 02 04 06 08

$ echo {D..T..4}
D H L P T
</code>, <code>((a++))

((meaning = 42))

for ((i=0; i&lt;10; i++))

echo $((a + b + (14 * c)))
</code>, <code>array[4]=""hello""

element=${array[index]}
</code>, <code>array=(1 2 3)
echo ${array[1]}
2
</code>]"
69,https://stackoverflow.com/questions/3811345/,"['The $@ variable expands to all command-line parameters separated by spaces.  Here is an example.', 'When using $@, you should (almost) always put it in double-quotes to avoid misparsing of arguments containing spaces or wildcards (see below).  This works for multiple arguments. It is also portable to all POSIX-compliant shells.', ""It is also worth nothing that $0 (generally the script's name or path) is not in $@."", 'The Bash Reference Manual Special Parameters Section says that $@ expands to the positional parameters starting from one.  When the expansion occurs within double quotes, each parameter expands to a separate word.  That is ""$@"" is equivalent to ""$1"" ""$2"" ""$3""....', 'If you want to pass all but the first arguments, you can first use shift to ""consume"" the first argument and then pass ""$@"" to pass the remaining arguments to another command.  In bash (and zsh and ksh, but not in plain POSIX shells like dash), you can do this without messing with the argument list using a variant of array slicing: ""${@:3}"" will get you the arguments starting with ""$3"".  ""${@:3:4}"" will get you up to four arguments starting at ""$3"" (i.e. ""$3"" ""$4"" ""$5"" ""$6""), if that many arguments were passed.', '""$*"" gives all of the arguments stuck together into a single string (separated by spaces, or whatever the first character of $IFS is). This looses the distinction between spaces within arguments and the spaces between arguments, so is generally a bad idea. Although it might be ok for printing the arguments, e.g. echo ""$*"", provided you don\'t care about preserving the space within/between distinction.', 'Assigning the arguments to a regular variable (as in args=""$@"") mashes all the arguments together just like ""$*"" does. If you want to store the arguments in a variable, use an array with args=(""$@"") (the parentheses make it an array), and then reference them as e.g. ""${args[0]}"" etc (note that bash array indexes start at 0, so $1 will be in args[0], etc).', ""Leaving off the double-quotes, with either $@ or $*, will try to split each argument up into separate words (based on whitespace or whatever's in $IFS), and also try to expand anything that looks like a filename wildcard into a list of matching filenames. This can have really weird effects, and should almost always be avoided.""]","[<code>$@</code>, <code>abc ""$@""
</code>, <code>$@</code>, <code>$0</code>, <code>$@</code>, <code>$@</code>, <code>""$@""</code>, <code>""$1"" ""$2"" ""$3""...</code>, <code>shift</code>, <code>""$@""</code>, <code>""${@:3}""</code>, <code>""$3""</code>, <code>""${@:3:4}""</code>, <code>""$3""</code>, <code>""$3"" ""$4"" ""$5"" ""$6""</code>, <code>""$*""</code>, <code>$IFS</code>, <code>echo ""$*""</code>, <code>args=""$@""</code>, <code>""$*""</code>, <code>args=(""$@"")</code>, <code>""${args[0]}""</code>, <code>$1</code>, <code>args[0]</code>, <code>$@</code>, <code>$*</code>, <code>$IFS</code>]"
70,https://stackoverflow.com/questions/3510673/,"['In bash, you should be able to do:', 'Details on its workings are as follows:', ""Here's a transcript showing it in action:"", 'and you can see it terminating all the sleepers.', ""Explaining the grep '[p]ython csp_build.py' bit in a bit more detail:"", ""When you do sleep 3600 & followed by ps -ef | grep sleep, you tend to get two processes with sleep in it, the sleep 3600 and the grep sleep (because they both have sleep in them, that's not rocket science)."", 'However, ps -ef | grep \'[s]leep\' won\'t create a process with sleep in it, it instead creates grep \'[s]leep\' and here\'s the tricky bit: the grep doesn\'t find it because it\'s looking for the regular expression ""any character from the character class [s] (which is s) followed by leep.', ""In other words, it's looking for sleep but the grep process is grep '[s]leep' which doesn't have sleep in it."", 'When I was shown this (by someone here on SO), I immediately started using it because']","[<code>bash</code>, <code>kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')
</code>, <code>ps</code>, <code>grep</code>, <code>[p]</code>, <code>grep</code>, <code>awk</code>, <code>$(x)</code>, <code>x</code>, <code>ps</code>, <code>kill 1234 1122 7654</code>, <code>pax&gt; sleep 3600 &amp;
[1] 2225
pax&gt; sleep 3600 &amp;
[2] 2226
pax&gt; sleep 3600 &amp;
[3] 2227
pax&gt; sleep 3600 &amp;
[4] 2228
pax&gt; sleep 3600 &amp;
[5] 2229
pax&gt; kill $(ps aux | grep '[s]leep' | awk '{print $2}')
[5]+  Terminated              sleep 3600
[1]   Terminated              sleep 3600
[2]   Terminated              sleep 3600
[3]-  Terminated              sleep 3600
[4]+  Terminated              sleep 3600
</code>, <code>grep '[p]ython csp_build.py'</code>, <code>sleep 3600 &amp;</code>, <code>ps -ef | grep sleep</code>, <code>sleep</code>, <code>sleep 3600</code>, <code>grep sleep</code>, <code>sleep</code>, <code>ps -ef | grep '[s]leep'</code>, <code>sleep</code>, <code>grep '[s]leep'</code>, <code>grep</code>, <code>[s]</code>, <code>s</code>, <code>leep</code>, <code>sleep</code>, <code>grep '[s]leep'</code>, <code>sleep</code>, <code>| grep -v grep</code>]"
71,https://stackoverflow.com/questions/1092631/,['This should work:'],"[<code>date +%s
</code>]"
72,https://stackoverflow.com/questions/1289026/,"['By the way, if you type it as a multiline (as you are showing) at the command prompt and then call the history with arrow up, you will get it on a single line, correctly punctuated.']","[<code>while true; do foo; sleep 2; done
</code>, <code>$ while true
&gt; do
&gt;    echo ""hello""
&gt;    sleep 2
&gt; done
hello
hello
hello
^C
$ &lt;arrow up&gt; while true; do    echo ""hello"";    sleep 2; done
</code>]"
73,https://stackoverflow.com/questions/6022384/,"['head and pipe with tail will be slow for a huge file. I would suggest sed like this:', ""Where NUM is the number of the line you want to print; so, for example, sed '10q;d' file to print the 10th line of file."", 'Explanation:', 'NUMq will quit immediately when the line number is NUM.', 'd will delete the line instead of printing it; this is inhibited on the last line because the q causes the rest of the script to be skipped when quitting.', 'If you have NUM in a variable, you will want to use double quotes instead of single:']","[<code>head</code>, <code>tail</code>, <code>sed</code>, <code>sed 'NUMq;d' file
</code>, <code>NUM</code>, <code>sed '10q;d' file</code>, <code>file</code>, <code>NUMq</code>, <code>NUM</code>, <code>d</code>, <code>q</code>, <code>NUM</code>, <code>sed ""${NUM}q;d"" file
</code>]"
74,https://stackoverflow.com/questions/8987037/,"['Use pkill -f, which matches the pattern for any part of the command line']","[<code>pkill -f</code>, <code>pkill -f my_pattern
</code>]"
75,https://stackoverflow.com/questions/3327013/,"[""There are three approaches to finding the name of the current shell's executable:"", ""Please note that all three approaches can be fooled if the executable of the shell is /bin/sh, but it's really a renamed bash, for example (which frequently happens)."", 'Thus your second question of whether ps output will do is answered with ""not always"".', 'echo $0 - will print the program name... which in the case of the shell is the actual shell.', 'ps  -ef | grep $$ | grep -v grep - this will look for the current process ID in the list of running processes. Since the current process is the shell, it will be included.', 'This is not 100% reliable, as you might have other processes whose ps listing includes the same number as shell\'s process ID, especially if that ID is a small number (for example, if the shell\'s PID is ""5"", you may find processes called ""java5"" or ""perl5"" in the same grep output!). This is the second problem with the ""ps"" approach, on top of not being able to rely on the shell name.', ""echo $SHELL - The path to the current shell is stored as the SHELL variable for any shell. The caveat for this one is that if you launch a shell explicitly as a subprocess (for example, it's not your login shell), you will get your login shell's value instead. If that's a possibility, use the ps or $0 approach."", ""If, however, the executable doesn't match your actual shell (e.g. /bin/sh is actually bash or ksh), you need heuristics. Here are some environmental variables specific to various shells:"", '$version is set on tcsh', '$BASH is set on bash', '$shell (lowercase) is set to actual shell name in csh or tcsh', '$ZSH_NAME is set on zsh', 'ksh has $PS3 and $PS4 set, whereas the normal Bourne shell (sh) only has $PS1 and $PS2 set. This generally seems like the hardest to distinguish - the only difference in the entire set of environment variables between sh and ksh we have installed on Solaris boxen is $ERRNO, $FCEDIT, $LINENO, $PPID, $PS3, $PS4, $RANDOM, $SECONDS, and $TMOUT.']","[<code>/bin/sh</code>, <code>bash</code>, <code>ps</code>, <code>echo $0</code>, <code>ps  -ef | grep $$ | grep -v grep</code>, <code>ps</code>, <code>grep</code>, <code>echo $SHELL</code>, <code>SHELL</code>, <code>ps</code>, <code>$0</code>, <code>/bin/sh</code>, <code>$version</code>, <code>$BASH</code>, <code>$shell</code>, <code>$ZSH_NAME</code>, <code>$PS3</code>, <code>$PS4</code>, <code>sh</code>, <code>$PS1</code>, <code>$PS2</code>, <code>sh</code>, <code>ksh</code>, <code>$ERRNO</code>, <code>$FCEDIT</code>, <code>$LINENO</code>, <code>$PPID</code>, <code>$PS3</code>, <code>$PS4</code>, <code>$RANDOM</code>, <code>$SECONDS</code>, <code>$TMOUT</code>]"
76,https://stackoverflow.com/questions/1885525/,"[""I incorporated levislevis85's suggestion (thanks!) and added the -n option to read to accept one character without the need to press Enter. You can use one or both of these."", 'Also, the negated form might look like this:', 'However, as pointed out by Erich, under some circumstances such as a syntax error caused by the script being run in the wrong shell, the negated form could allow the script to continue to the ""dangerous stuff"". The failure mode should favor the safest outcome so only the first, non-negated if should be used.', 'The read command outputs the prompt (-p ""prompt"") then accepts one character (-n 1) and accepts backslashes literally (-r) (otherwise read would see the backslash as an escape and wait for a second character). The default variable for read to store the result in is $REPLY if you don\'t supply a name like this: read -p ""my prompt"" -n 1 -r my_var', 'The if statement uses a regular expression to check if the character in $REPLY matches (=~) an upper or lower case ""Y"". The regular expression used here says ""a string starting (^) and consisting solely of one of a list of characters in a bracket expression ([Yy]) and ending ($)"". The anchors (^ and $) prevent matching longer strings. In this case they help reinforce the one-character limit set in the read command.', 'The negated form uses the logical ""not"" operator (!) to match (=~) any character that is not ""Y"" or ""y"". An alternative way to express this is less readable and doesn\'t as clearly express the intent in my opinion in this instance. However, this is what it would look like: if [[ $REPLY =~ ^[^Yy]$ ]]']","[<code>read -p ""Are you sure? "" -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # do dangerous stuff
fi
</code>, <code>-n</code>, <code>read</code>, <code>read -p ""Are you sure? "" -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    [[ ""$0"" = ""$BASH_SOURCE"" ]] &amp;&amp; exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi
</code>, <code>if</code>, <code>read</code>, <code>-p ""prompt""</code>, <code>-n 1</code>, <code>-r</code>, <code>read</code>, <code>read</code>, <code>$REPLY</code>, <code>read -p ""my prompt"" -n 1 -r my_var</code>, <code>if</code>, <code>$REPLY</code>, <code>=~</code>, <code>^</code>, <code>[Yy]</code>, <code>$</code>, <code>^</code>, <code>$</code>, <code>read</code>, <code>!</code>, <code>=~</code>, <code>if [[ $REPLY =~ ^[^Yy]$ ]]</code>]"
77,https://stackoverflow.com/questions/806906/,"['One approach is to use a regular expression, like so:', 'If the value is not necessarily an integer, consider amending the regex appropriately; for instance:', '...or, to handle numbers with a sign:']","[<code>re='^[0-9]+$'
if ! [[ $yournumber =~ $re ]] ; then
   echo ""error: Not a number"" &gt;&amp;2; exit 1
fi
</code>, <code>^[0-9]+([.][0-9]+)?$
</code>, <code>^[+-]?[0-9]+([.][0-9]+)?$
</code>]"
78,https://stackoverflow.com/questions/3258243/,"['First use git remote update, to bring your remote refs up to date. Then you can do one of several things, such as:', 'git status -uno will tell you whether the branch you are tracking is ahead, behind or has diverged. If it says nothing, the local and remote are the same.', ""git show-branch *master will show you the commits in all of the branches whose names end in 'master' (eg master and origin/master)."", ""If you use -v with git remote update (git remote -v update) you can see which branches got updated, so you don't really need any further commands."", 'However, it looks like you want to do this in a script or program and end up with a true/false value. If so, there are ways to check the relationship between your current HEAD commit and the head of the branch you\'re tracking, although since there are four possible outcomes you can\'t reduce it to a yes/no answer. However, if you\'re prepared to do a pull --rebase then you can treat ""local is behind"" and ""local has diverged"" as ""need to pull"", and the other two as ""don\'t need to pull"".', ""You can get the commit id of any ref using git rev-parse <ref>, so you can do this for master and origin/master and compare them. If they're equal, the branches are the same. If they're unequal, you want to know which is ahead of the other. Using git merge-base master origin/master will tell you the common ancestor of both branches, and if they haven't diverged this will be the same as one or the other. If you get three different ids, the branches have diverged."", ""To do this properly, eg in a script, you need to be able to refer to the current branch, and the remote branch it's tracking. The bash prompt-setting function in /etc/bash_completion.d has some useful code for getting branch names. However, you probably don't actually need to get the names. Git has some neat shorthands for referring to branches and commits (as documented in git rev-parse --help). In particular, you can use @ for the current branch (assuming you're not in a detached-head state) and @{u} for its upstream branch (eg origin/master). So git merge-base @ @{u} will return the (hash of the) commit at which the current branch and its upstream diverge and git rev-parse @ and git rev-parse @{u} will give you the hashes of the two tips. This can be summarized in the following script:"", ""Note: older versions of git didn't allow @ on its own, so you may have to use @{0} instead."", ""The line UPSTREAM=${1:-'@{u}'} allows you optionally to pass an upstream branch explicitly, in case you want to check against a different remote branch than the one configured for the current branch. This would typically be of the form remotename/branchname. If no parameter is given, the value defaults to @{u}."", ""The script assumes that you've done a git fetch or git remote update first, to bring the tracking branches up to date. I didn't build this into the script because it's more flexible to be able to do the fetching and the comparing as separate operations, for example if you want to compare without fetching because you already fetched recently.""]","[<code>git remote update</code>, <code>git status -uno</code>, <code>git show-branch *master</code>, <code>-v</code>, <code>git remote update</code>, <code>git remote -v update</code>, <code>pull --rebase</code>, <code>git rev-parse &lt;ref&gt;</code>, <code>git merge-base master origin/master</code>, <code>/etc/bash_completion.d</code>, <code>git rev-parse --help</code>, <code>@</code>, <code>@{u}</code>, <code>origin/master</code>, <code>git merge-base @ @{u}</code>, <code>git rev-parse @</code>, <code>git rev-parse @{u}</code>, <code>#!/bin/sh

UPSTREAM=${1:-'@{u}'}
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse ""$UPSTREAM"")
BASE=$(git merge-base @ ""$UPSTREAM"")

if [ $LOCAL = $REMOTE ]; then
    echo ""Up-to-date""
elif [ $LOCAL = $BASE ]; then
    echo ""Need to pull""
elif [ $REMOTE = $BASE ]; then
    echo ""Need to push""
else
    echo ""Diverged""
fi
</code>, <code>@</code>, <code>@{0}</code>, <code>UPSTREAM=${1:-'@{u}'}</code>, <code>@{u}</code>, <code>git fetch</code>, <code>git remote update</code>]"
79,https://stackoverflow.com/questions/192319/,"[""For reading through a symlink1, which is usually not what you want (you usually don't want to confuse the user this way), try:"", 'IMO, that\'ll produce confusing output.  ""I ran foo.sh, but it\'s saying I\'m running bar.sh!?  Must be a bug!""   Besides, one of the purposes of having differently-named symlinks is to provide different functionality based on the name it\'s called as (think gzip and gunzip on some platforms).', '1 That is, to resolve symlinks such that when the user executes foo.sh which is actually a symlink to bar.sh, you wish to use the resolved name bar.sh rather than foo.sh.']","[<code>me=`basename ""$0""`
</code>, <code>me=""$(basename ""$(test -L ""$0"" &amp;&amp; readlink ""$0"" || echo ""$0"")"")""
</code>, <code>foo.sh</code>, <code>bar.sh</code>, <code>bar.sh</code>, <code>foo.sh</code>]"
80,https://stackoverflow.com/questions/669452/,"[""[[ has fewer surprises and is generally safer to use. But it is not portable - POSIX doesn't specify what it does and only some shells support it (beside bash, I heard ksh supports it too). For example, you can do "", 'to test whether a file exists. But with [, you have to quote $b, because it splits the argument and expands things like ""a*"" (where [[ takes it literally). That has also to do with how [ can be an external program and receives its argument just normally like every other program (although it can also be a builtin, but then it still has not this special handling).', '[[ also has some other nice features, like regular expression matching with =~ along with operators like they are known in C-like languages. Here is a good page about it: What is the difference between test, [ and [[ ? and Bash Tests']","[<code>[[</code>, <code>[[ -e $b ]]
</code>, <code>[</code>, <code>$b</code>, <code>""a*""</code>, <code>[[</code>, <code>[</code>, <code>[[</code>, <code>=~</code>, <code>[</code>, <code>[[</code>]"
81,https://stackoverflow.com/questions/2870992/,"['Use the set -e builtin:', 'Alternatively, you can pass -e on the command line:', 'You can also disable this behavior with set +e.', 'You may also want to employ all or some of the the -e -u -x and -o pipefail options like so:', '-e exits on error, -u errors on undefined variables, and -o (for option) pipefail exits on command pipe failures. Some gotchas and workarounds are documented well here.', '(*) Note:', ""The shell does not exit if the command that fails is part of the\n  command list immediately following a while or until keyword,\n  part of the test following the if or elif reserved words, part\n  of any command executed in a && or || list except the command\n  following the final && or ||, any command in a pipeline but\n  the last, or if the command's return value is being inverted with\n  !"", '(from man bash)']","[<code>set -e</code>, <code>#!/bin/bash
set -e
# Any subsequent(*) commands which fail will cause the shell script to exit immediately
</code>, <code>-e</code>, <code>bash -e my_script.sh
</code>, <code>set +e</code>, <code>-e</code>, <code>-u</code>, <code>-x</code>, <code>-o pipefail</code>, <code>set -euxo pipefail
</code>, <code>-e</code>, <code>-u</code>, <code>-o (for option) pipefail</code>, <code>man bash</code>]"
82,https://stackoverflow.com/questions/4277665/,"['For string equality comparison, use:', 'For string does NOT equal comparison, use:', 'For the a contains b, use:', '(and make sure to add spaces between the symbols):', 'Bad:', 'Good:']","[<code>if [[ ""$s1"" == ""$s2"" ]]
</code>, <code>if [[ ""$s1"" != ""$s2"" ]]
</code>, <code>a</code>, <code>b</code>, <code>if [[ $s1 == *""$s2""* ]]
</code>, <code>if [[""$s1"" == ""$s2""]]
</code>, <code>if [[ ""$s1"" == ""$s2"" ]]
</code>]"
83,https://stackoverflow.com/questions/6697753/,"[""Single quotes won't interpolate anything, but double quotes will. For example: variables, backticks, certain \\ escapes, etc. "", 'Example:', 'The Bash manual has this to say:', '3.1.2.2 Single Quotes', ""Enclosing characters in single quotes (') preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash. "", '3.1.2.3 Double Quotes', 'Enclosing characters in double quotes ("") preserves the literal value of all characters within the quotes, with the exception of $, `, \\, and, when history expansion is enabled, !. The characters $ and ` retain their special meaning within double quotes (see Shell Expansions). The backslash retains its special meaning only when followed by one of the following characters: $, `, "", \\, or newline. Within double quotes, backslashes that are followed by one of these characters are removed. Backslashes preceding characters without a special meaning are left unmodified. A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion will be performed unless an ! appearing in double quotes is escaped using a backslash. The backslash preceding the ! is not removed.', 'The special parameters * and @ have special meaning when in double quotes (see Shell Parameter Expansion). ']","[<code>\</code>, <code>$ echo ""$(echo ""upg"")""
upg
$ echo '$(echo ""upg"")'
$(echo ""upg"")
</code>, <code>'</code>, <code>""</code>, <code>$</code>, <code>`</code>, <code>\</code>, <code>!</code>, <code>$</code>, <code>`</code>, <code>$</code>, <code>`</code>, <code>""</code>, <code>\</code>, <code>!</code>, <code>!</code>, <code>*</code>, <code>@</code>]"
84,https://stackoverflow.com/questions/3349105/,[],"[<code>#!/bin/bash
cd ""$(dirname ""$0"")""
</code>]"
85,https://stackoverflow.com/questions/18668556/,"['In bash, you should do your check in arithmetic context:', ""For POSIX shells that don't support (()), you can use -lt and -gt."", 'You can get a full list of comparison operators with help test or man test.']","[<code>if (( a &gt; b )); then
    ...
fi
</code>, <code>(())</code>, <code>-lt</code>, <code>-gt</code>, <code>if [ ""$a"" -gt ""$b"" ]; then
    ...
fi
</code>, <code>help test</code>, <code>man test</code>]"
86,https://stackoverflow.com/questions/84882/,"['Use tee --append or tee -a.', 'Make sure to avoid quotes inside quotes.', 'To avoid printing data back to the console, redirect the output to /dev/null.', 'Remember about the (-a/--append) flag! \nJust tee works like > and will overwrite your file. tee -a works like >> and will write at the end of the file.']","[<code>tee --append</code>, <code>tee -a</code>, <code>echo 'deb blah ... blah' | sudo tee -a /etc/apt/sources.list
</code>, <code>echo 'deb blah ... blah' | sudo tee -a /etc/apt/sources.list &gt; /dev/null
</code>, <code>-a</code>, <code>--append</code>, <code>tee</code>, <code>&gt;</code>, <code>tee -a</code>, <code>&gt;&gt;</code>]"
87,https://stackoverflow.com/questions/20796200/,"[""A couple of notes first: when you use Data/data1.txt as an argument, should it really be /Data/data1.txt (with a leading slash)? Also, should the outer loop scan only for .txt files, or all files in /Data? Here's an answer, assuming /Data/data1.txt and .txt files only:"", 'Notes:', 'If you needed to run MyProgram with Data/file.txt instead of /Data/file.txt, use ""${filename#/}"" to remove the leading slash. On the other hand, if it\'s really Data not /Data you want to scan, just use for filename in Data/*.txt.']","[<code>Data/data1.txt</code>, <code>/Data/data1.txt</code>, <code>/Data/data1.txt</code>, <code>#!/bin/bash
for filename in /Data/*.txt; do
    for ((i=0; i&lt;=3; i++)); do
        ./MyProgram.exe ""$filename"" ""Logs/$(basename ""$filename"" .txt)_Log$i.txt""
    done
done
</code>, <code>/Data/*.txt</code>, <code>$( ... )</code>, <code>basename somepath .txt</code>, <code>/Data/file.txt</code>, <code>file</code>, <code>Data/file.txt</code>, <code>/Data/file.txt</code>, <code>""${filename#/}""</code>, <code>Data</code>, <code>/Data</code>, <code>for filename in Data/*.txt</code>]"
88,https://stackoverflow.com/questions/613572/,"['Actually, RESULT contains what you want — to demonstrate:', 'What you show is what you get from:', 'As noted in the comments, the difference is that (1) the double-quoted version of the variable (echo ""$RESULT"") preserves internal spacing of the value exactly as it is represented in the variable — newlines, tabs, multiple blanks and all — whereas (2) the unquoted version (echo $RESULT) replaces each sequence of one or more blanks, tabs and newlines with a single space. Thus (1) preserves the shape of the input variable, whereas (2) creates a potentially very long single line of output with \'words\' separated by single spaces (where a \'word\' is a sequence of non-whitespace characters; there needn\'t be any alphanumerics in any of the words).']","[<code>echo ""$RESULT""
</code>, <code>echo $RESULT
</code>, <code>echo ""$RESULT""</code>, <code>echo $RESULT</code>]"
89,https://stackoverflow.com/questions/339483/,"['Try tail:', '-n x: Just print the last x lines. tail -n 5 would give you the last 5 lines of the input. The + sign kind of inverts the argument and make tail print anything but the first x-1 lines. tail -n +1 would print the whole file, tail -n +2 everything but the first line, etc.', 'GNU tail is much faster than sed. tail is also available on BSD and the -n +2 flag is consistent across both tools. Check the FreeBSD or OS X man pages for more. ', 'The BSD version can be much slower than sed, though. I wonder how they managed that; tail should just read a file line by line while sed does pretty complex operations involving interpreting a script, applying regular expressions and the like.', 'Note: You may be tempted to use', 'but this will give you an empty file. The reason is that the redirection (>) happens before tail is invoked by the shell:', 'If you want to remove the first line inside the file, you should use:', ""The && will make sure that the file doesn't get overwritten when there is a problem.""]","[<code>tail -n +2 ""$FILE""
</code>, <code>-n x</code>, <code>x</code>, <code>tail -n 5</code>, <code>+</code>, <code>tail</code>, <code>x-1</code>, <code>tail -n +1</code>, <code>tail -n +2</code>, <code>tail</code>, <code>sed</code>, <code>tail</code>, <code>-n +2</code>, <code>sed</code>, <code>tail</code>, <code>sed</code>, <code># THIS WILL GIVE YOU AN EMPTY FILE!
tail -n +2 ""$FILE"" &gt; ""$FILE""
</code>, <code>&gt;</code>, <code>tail</code>, <code>$FILE</code>, <code>tail</code>, <code>tail</code>, <code>$FILE</code>, <code>tail</code>, <code>$FILE</code>, <code>tail -n +2 ""$FILE"" &gt; ""$FILE.tmp"" &amp;&amp; mv ""$FILE.tmp"" ""$FILE""
</code>, <code>&amp;&amp;</code>]"
90,https://stackoverflow.com/questions/356100/,"['wait also (optionally) takes the PID of the process to wait for, and with $! you get the PID of the last command launched in background.\nModify the loop to store the PID of each spawned sub-process into an array, and then loop again waiting on each PID.']","[<code>wait</code>, <code># run processes and store pids in array
for i in $n_procs; do
    ./procs[${i}] &amp;
    pids[${i}]=$!
done

# wait for all pids
for pid in ${pids[*]}; do
    wait $pid
done
</code>]"
91,https://stackoverflow.com/questions/7373752/,"['works for curl version 7.19.5 on Ubuntu 9.10 (no progress bar). But if for some reason that does not work on your platform, you could always redirect stderr to /dev/null:']","[<code>curl -s http://google.com &gt; temp.html
</code>, <code>curl  http://google.com 2&gt;/dev/null &gt; temp.html
</code>]"
92,https://stackoverflow.com/questions/19331497/,"['Problem with your approach is the export in the while loop is happening in a sub shell, and those variable will not be available in current shell (parent shell of while loop).', 'Add export command in the file itself:', 'Then you need to source in the file in current shell using:', 'OR']","[<code>export</code>, <code>while</code>, <code>export</code>, <code>export MINIENTREGA_FECHALIMITE=""2011-03-31""
export MINIENTREGA_FICHEROS=""informe.txt programa.c""
export MINIENTREGA_DESTINO=""./destino/entrega-prac1""
</code>, <code>. ./conf/prac1
</code>, <code>source ./conf/prac1
</code>]"
93,https://stackoverflow.com/questions/1494178/,"[""Bash 4 natively supports this feature.  Make sure your script's hashbang is #!/usr/bin/env bash or #!/bin/bash so you don't end up using sh.  Make sure you're either executing your script directly, or execute script with bash script. (Not actually executing a Bash script with Bash does happen, and will be really confusing!)"", 'You declare an associative array by doing:', 'You can fill it up with elements using the normal array assignment operator. For example, if you want to have a map of animal[sound(key)] = animal(value):', 'Or merge them:', 'Then use them just like normal arrays. Use', ""animals['key']='value' to set value"", '""${animals[@]}"" to expand the values', '""${!animals[@]}"" (notice the !) to expand the keys  ', ""Don't forget to quote them:"", ""Before bash 4, you don't have associative arrays.  Do not use eval to emulate them.  Avoid eval like the plague, because it is the plague of shell scripting.  The most important reason is that eval treats your data as executable code (there are many other reasons too)."", 'First and foremost: Consider upgrading to bash 4.  This will make the whole process much easier for you.', ""If there's a reason you can't upgrade, declare is a far safer option.  It does not evaluate data as bash code like eval does, and as such does not allow arbitrary code injection quite so easily."", ""Let's prepare the answer by introducing the concepts:"", 'First, indirection.', 'Secondly, declare:', 'Bring them together:', ""Let's use it:"", ""Note: declare cannot be put in a function.  Any use of declare inside a bash function turns the variable it creates local to the scope of that function, meaning we can't access or modify global arrays with it. (In bash 4 you can use declare -g to declare global variables - but in bash 4, you can use associative arrays in the first place, avoiding this workaround.)"", 'Summary:']","[<code>#!/usr/bin/env bash</code>, <code>#!/bin/bash</code>, <code>sh</code>, <code>script</code>, <code>bash script</code>, <code>declare -A animals
</code>, <code>animal[sound(key)] = animal(value)</code>, <code>animals=( [""moo""]=""cow"" [""woof""]=""dog"")
</code>, <code>declare -A animals=( [""moo""]=""cow"" [""woof""]=""dog"")
</code>, <code>animals['key']='value'</code>, <code>""${animals[@]}""</code>, <code>""${!animals[@]}""</code>, <code>!</code>, <code>echo ""${animals[moo]}""
for sound in ""${!animals[@]}""; do echo ""$sound - ${animals[$sound]}""; done
</code>, <code>eval</code>, <code>eval</code>, <code>eval</code>, <code>declare</code>, <code>eval</code>, <code>$ animals_moo=cow; sound=moo; i=""animals_$sound""; echo ""${!i}""
cow
</code>, <code>declare</code>, <code>$ sound=moo; animal=cow; declare ""animals_$sound=$animal""; echo ""$animals_moo""
cow
</code>, <code># Set a value:
declare ""array_$index=$value""

# Get a value:
arrayGet() { 
    local array=$1 index=$2
    local i=""${array}_$index""
    printf '%s' ""${!i}""
}
</code>, <code>$ sound=moo
$ animal=cow
$ declare ""animals_$sound=$animal""
$ arrayGet animals ""$sound""
cow
</code>, <code>declare</code>, <code>declare</code>, <code>declare -A</code>, <code>declare</code>, <code>awk</code>]"
94,https://stackoverflow.com/questions/394230/,"[""I think the following should work. I'm not sure about win32 though.""]","[<code>win32</code>, <code>if [[ ""$OSTYPE"" == ""linux-gnu""* ]]; then
        # ...
elif [[ ""$OSTYPE"" == ""darwin""* ]]; then
        # Mac OSX
elif [[ ""$OSTYPE"" == ""cygwin"" ]]; then
        # POSIX compatibility layer and Linux environment emulation for Windows
elif [[ ""$OSTYPE"" == ""msys"" ]]; then
        # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
elif [[ ""$OSTYPE"" == ""win32"" ]]; then
        # I'm not sure this can happen.
elif [[ ""$OSTYPE"" == ""freebsd""* ]]; then
        # ...
else
        # Unknown.
fi
</code>]"
95,https://stackoverflow.com/questions/692000/,"[""I'm assuming you want to still see STDERR and STDOUT on the terminal.  You could go for Josh Kelley's answer, but I find keeping a tail around in the background which outputs your log file very hackish and cludgy.  Notice how you need to keep an exra FD and do cleanup afterward by killing it and technically should be doing that in a trap '...' EXIT."", ""There is a better way to do this, and you've already discovered it: tee."", 'Only, instead of just using it for your stdout, have a tee for stdout and one for stderr.  How will you accomplish this?  Process substitution and file redirection:', ""Let's split it up and explain:"", '>(...) (process substitution) creates a FIFO and lets tee listen on it.  Then, it uses > (file redirection) to redirect the STDOUT of command to the FIFO that your first tee is listening on.', 'Same thing for the second:', ""We use process substitution again to make a tee process that reads from STDIN and dumps it into stderr.log.  tee outputs its input back on STDOUT, but since its input is our STDERR, we want to redirect tee's STDOUT to our STDERR again.  Then we use file redirection to redirect command's STDERR to the FIFO's input (tee's STDIN)."", 'See http://mywiki.wooledge.org/BashGuide/InputAndOutput', 'Process substitution is one of those really lovely things you get as a bonus of choosing bash as your shell as opposed to sh (POSIX or Bourne).', ""In sh, you'd have to do things manually:""]","[<code>tail</code>, <code>trap '...' EXIT</code>, <code>tee</code>, <code>command &gt; &gt;(tee -a stdout.log) 2&gt; &gt;(tee -a stderr.log &gt;&amp;2)
</code>, <code>&gt; &gt;(..)
</code>, <code>&gt;(...)</code>, <code>tee</code>, <code>&gt;</code>, <code>command</code>, <code>tee</code>, <code>2&gt; &gt;(tee -a stderr.log &gt;&amp;2)
</code>, <code>tee</code>, <code>stderr.log</code>, <code>tee</code>, <code>tee</code>, <code>command</code>, <code>tee</code>, <code>bash</code>, <code>sh</code>, <code>sh</code>, <code>out=""${TMPDIR:-/tmp}/out.$$"" err=""${TMPDIR:-/tmp}/err.$$""
mkfifo ""$out"" ""$err""
trap 'rm ""$out"" ""$err""' EXIT
tee -a stdout.log &lt; ""$out"" &amp;
tee -a stderr.log &lt; ""$err"" &gt;&amp;2 &amp;
command &gt;""$out"" 2&gt;""$err""
</code>]"
96,https://stackoverflow.com/questions/525592/,"['The easiest way is to use sed (or perl):', 'Which will invoke sed to do an in-place edit due to the -i option.  This can be called from bash.', 'If you really really want to use just bash, then the following can work:', ""This loops over each line, doing a substitution, and writing to a temporary file (don't want to clobber the input).  The move at the end just moves temporary to the original name.""]","[<code>sed -i -e 's/abc/XYZ/g' /tmp/file.txt
</code>, <code>-i</code>, <code>while read a; do
    echo ${a//abc/XYZ}
done &lt; /tmp/file.txt &gt; /tmp/file.txt.t
mv /tmp/file.txt{.t,}
</code>]"
97,https://stackoverflow.com/questions/604864/,"[""You'll need tail.  Some examples: "", 'If you really need to SKIP a particular number of ""first"" lines, use', 'That is, if you want to skip N lines, you start printing line N+1. Example:', 'If you want to just see the last so many lines, omit the ""+"":']","[<code>$ tail great-big-file.log
&lt; Last 10 lines of great-big-file.log &gt;
</code>, <code>$ tail -n +&lt;N+1&gt; &lt;filename&gt;
&lt; filename, excluding first N lines. &gt;
</code>, <code>$ tail -n +11 /tmp/myfile
&lt; /tmp/myfile, starting at line 11, or skipping the first 10 lines. &gt;
</code>, <code>$ tail -n &lt;N&gt; &lt;filename&gt;
&lt; last N lines of file. &gt;
</code>]"
98,https://stackoverflow.com/questions/4111475/,"['This should work:', ""I'm not sure if this is different in other shells but if you wish to use <, >, you need to put them inside double parenthesis like so: ""]","[<code>#!/bin/bash

if [ ""$#"" -eq 0 ] || [ ""$#"" -gt 1 ] ; then
    echo ""hello""
fi
</code>, <code>if ((""$#"" &gt; 1))
 ...
</code>]"
99,https://stackoverflow.com/questions/6481005/,"['will count the number of lines starting with ""processor"" in /proc/cpuinfo', 'For systems with hyper-threading, you can use', 'which should return (for example) 8 (whereas the command above would return 16)']","[<code>grep -c ^processor /proc/cpuinfo     
</code>, <code>/proc/cpuinfo</code>, <code>grep ^cpu\\scores /proc/cpuinfo | uniq |  awk '{print $4}' 
</code>, <code>8</code>, <code>16</code>]"
100,https://stackoverflow.com/questions/2268104/,"[""You cannot have spaces around your '=' sign."", 'When you write:', ""bash tries to run a command named STR with 2 arguments (the strings '=' and 'foo')"", 'When you write:', ""bash tries to run a command named STR with 1 argument (the string '=foo')"", 'When you write:', 'bash tries to run the command foo with STR set to the empty string in its environment.', ""I'm not sure if this helps to clarify or if it is mere obfuscation, but note that:"", 'The relevant section of the sh language spec, section 2.9.1 states:', 'A ""simple command"" is a sequence of optional variable assignments and redirections, in any sequence, optionally followed by words and redirections, terminated by a control operator.', 'In that context, a word is the command that bash is going to run.  Any string containing = (in any position other than at the beginning of the string) which is not a redirection and in which the portion of the string before the = is a valid variable name is a variable assignment, while any string that is not a redirection or a variable assignment is a command.  In STR = ""foo"", STR is not a variable assignment.']","[<code>STR = ""foo""
</code>, <code>STR =foo
</code>, <code>STR= foo
</code>, <code>STR ""="" ""foo""</code>, <code>STR ""=foo""</code>, <code>STR="""" foo</code>, <code>word</code>, <code>=</code>, <code>=</code>, <code>STR = ""foo""</code>, <code>STR</code>]"
101,https://stackoverflow.com/questions/2016894/,"['Have you looked at the split command?', 'You could do something like this:', 'which will create files each with 200000 lines named xaa xab xac ...', 'Another option, split by size of output file (still splits on line breaks):', 'creates files like output_prefix01 output_prefix02 output_prefix03 ... each of max size 20 megabytes.']","[<code>$ split --help
Usage: split [OPTION] [INPUT [PREFIX]]
Output fixed-size pieces of INPUT to PREFIXaa, PREFIXab, ...; default
size is 1000 lines, and default PREFIX is `x'.  With no INPUT, or when INPUT
is -, read standard input.

Mandatory arguments to long options are mandatory for short options too.
  -a, --suffix-length=N   use suffixes of length N (default 2)
  -b, --bytes=SIZE        put SIZE bytes per output file
  -C, --line-bytes=SIZE   put at most SIZE bytes of lines per output file
  -d, --numeric-suffixes  use numeric suffixes instead of alphabetic
  -l, --lines=NUMBER      put NUMBER lines per output file
      --verbose           print a diagnostic to standard error just
                            before each output file is opened
      --help     display this help and exit
      --version  output version information and exit
</code>, <code>split -l 200000 filename
</code>, <code>xaa xab xac</code>, <code> split -C 20m --numeric-suffixes input_filename output_prefix
</code>, <code>output_prefix01 output_prefix02 output_prefix03 ...</code>]"
102,https://stackoverflow.com/questions/16623835/,"['This is documented in the Shell Parameter Expansion section of the manual:', '${parameter#word}\n${parameter##word}', 'The word is expanded to produce a pattern and matched according to the rules described below (see Pattern Matching). If the pattern matches the beginning of the expanded value of parameter, then the result of the expansion is the expanded value of parameter with the shortest matching pattern (the # case) or the longest matching pattern (the ## case) deleted. […]', '${parameter%word}\n${parameter%%word}', 'The word is expanded to produce a pattern and matched according to the rules described below (see Pattern Matching). If the pattern matches a trailing portion of the expanded value of parameter, then the result of the expansion is the value of parameter with the shortest matching pattern (the % case) or the longest matching pattern (the %% case) deleted. […]']","[<code>$ foo=${string#""$prefix""}
$ foo=${foo%""$suffix""}
$ echo ""${foo}""
o-wor
</code>, <code>${parameter#word}</code>, <code>${parameter##word}</code>, <code>#</code>, <code>##</code>, <code>${parameter%word}</code>, <code>${parameter%%word}</code>, <code>%</code>, <code>%%</code>]"
103,https://stackoverflow.com/questions/21186724/,"['There is a list of characters that separate tokens in BASH. These characters are called metacharacters and they are |, &, ;, (, ), <, >, space and tab. On the other hand, curly braces ({ and }) are just ordinary characters that make up words.', 'Omitting the second space before } will do, since & is a metacharacter. Therefore, your tattoo should have at least one space character.']","[<code>|</code>, <code>&amp;</code>, <code>;</code>, <code>(</code>, <code>)</code>, <code>&lt;</code>, <code>&gt;</code>, <code>{</code>, <code>}</code>, <code>}</code>, <code>&amp;</code>, <code>:(){ :|:&amp;};:
</code>]"
104,https://stackoverflow.com/questions/981601/,"['Here are some ways to do it:', 'The | symbol is the OR operator. Either escape it using \\ or tell grep that the search text has to be interpreted as regular expressions by adding -E or using the egrep command instead of grep.', 'The search text ""pattern|$"" is actually a trick, it will match lines that have pattern OR lines that have an end. Because all lines have an end, all lines are matched, but the end of a line isn\'t actually any characters, so it won\'t be colored.']","[<code>grep --color 'pattern\|$' file
grep --color -E 'pattern|$' file
egrep --color 'pattern|$' file
</code>, <code>|</code>, <code>\</code>, <code>egrep</code>, <code>grep</code>, <code>pattern</code>]"
105,https://stackoverflow.com/questions/8967902/,"[""It's a convention so the *nix shell knows what kind of interpreter to run."", 'For example, older flavors of ATT defaulted to sh (the Bourne shell), while older versions of BSD defaulted to csh (the C shell).', 'Even today (where most systems run bash, the ""Bourne Again Shell""), scripts can be in bash, python, perl, ruby, PHP, etc, etc.  For example, you might see #!/bin/perl or #!/bin/perl5.', 'PS:\nThe exclamation mark (!) is affectionately called ""bang"".  The shell comment symbol (#) is sometimes called ""hash"".', 'PPS:\nRemember - under *nix, associating a suffix with a file type is merely a convention, not a ""rule"".  An executable can be a binary program, any one of a million script types and other things as well. Hence the need for #!/bin/bash.']","[<code>#!/bin/perl</code>, <code>#!/bin/perl5</code>, <code>!</code>, <code>#</code>, <code>#!/bin/bash</code>]"
106,https://stackoverflow.com/questions/733824/,"['To run a non-executable sh script, use:', 'To run a non-executable bash script, use:', 'To start an executable (which is any file with executable permission); you just specify it by its path:', 'To make a script executable, give it the necessary permission:', 'When a file is executable, the kernel is responsible for figuring out how to execte it.  For non-binaries, this is done by looking at the first line of the file.  It should contain a hashbang:', 'The hashbang tells the kernel what program to run (in this case the command /usr/bin/env is ran with the argument bash).  Then, the script is passed to the program (as second argument) along with all the arguments you gave the script as subsequent arguments.', ""That means every script that is executable should have a hashbang.  If it doesn't, you're not telling the kernel what it is, and therefore the kernel doesn't know what program to use to interprete it.  It could be bash, perl, python, sh, or something else.  (In reality, the kernel will often use the user's default shell to interprete the file, which is very dangerous because it might not be the right interpreter at all or it might be able to parse some of it but with subtle behavioural differences such as is the case between sh and bash)."", ""Most commonly, you'll see hash bangs like so:"", 'The result is that the kernel will run the program /bin/bash to interpret the script.  Unfortunately, bash is not always shipped by default, and it is not always available in /bin.  While on Linux machines it usually is, there are a range of other POSIX machines where bash ships in various locations, such as /usr/xpg/bin/bash or /usr/local/bin/bash.', 'To write a portable bash script, we can therefore not rely on hard-coding the location of the bash program.  POSIX already has a mechanism for dealing with that: PATH.  The idea is that you install your programs in one of the directories that are in PATH and the system should be able to find your program when you want to run it by name.', 'Sadly, you cannot just do this:', ""The kernel won't (some might) do a PATH search for you.  There is a program that can do a PATH search for you, though, it's called env.  Luckily, nearly all systems have an env program installed in /usr/bin.  So we start env using a hardcoded path, which then does a PATH search for bash and runs it so that it can interpret your script:"", ""This approach has one downside: According to POSIX, the hashbang can have one argument.  In this case, we use bash as the argument to the env program.  That means we have no space left to pass arguments to bash.  So there's no way to convert something like #!/bin/bash -exu to this scheme.  You'll have to put set -exu after the hashbang instead."", ""This approach also has another advantage: Some systems may ship with a /bin/bash, but the user may not like it, may find it's buggy or outdated, and may have installed his own bash somewhere else.  This is often the case on OS X (Macs) where Apple ships an outdated /bin/bash and users install an up-to-date /usr/local/bin/bash using something like Homebrew.  When you use the env approach which does a PATH search, you take the user's preference into account and use his preferred bash over the one his system shipped with.""]","[<code>sh</code>, <code>sh myscript
</code>, <code>bash</code>, <code>bash myscript
</code>, <code>/foo/bar
/bin/bar
./bar
</code>, <code>chmod +x bar
./bar
</code>, <code>hashbang</code>, <code>#! /usr/bin/env bash
</code>, <code>/usr/bin/env</code>, <code>bash</code>, <code>bash</code>, <code>perl</code>, <code>python</code>, <code>sh</code>, <code>sh</code>, <code>bash</code>, <code>/usr/bin/env</code>, <code>#!/bin/bash
</code>, <code>/bin/bash</code>, <code>bash</code>, <code>/bin</code>, <code>bash</code>, <code>/usr/xpg/bin/bash</code>, <code>/usr/local/bin/bash</code>, <code>bash</code>, <code>PATH</code>, <code>PATH</code>, <code>#!bash
</code>, <code>PATH</code>, <code>PATH</code>, <code>env</code>, <code>env</code>, <code>/usr/bin</code>, <code>env</code>, <code>PATH</code>, <code>bash</code>, <code>#!/usr/bin/env bash
</code>, <code>bash</code>, <code>env</code>, <code>bash</code>, <code>#!/bin/bash -exu</code>, <code>set -exu</code>, <code>/bin/bash</code>, <code>bash</code>, <code>/bin/bash</code>, <code>/usr/local/bin/bash</code>, <code>env</code>, <code>PATH</code>]"
107,https://stackoverflow.com/questions/9332802/,"['You could use the default-value syntax:', 'The above will, as described in Bash Reference Manual - 3.5.3 Shell Parameter Expansion [emphasis mine]:', 'If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted.', ""If you only want to substitute a default value if the parameter is unset (but not if it's null, e.g. not if it's an empty string), use this syntax instead:"", 'Again from Bash Reference Manual - 3.5.3 Shell Parameter Expansion:', 'Omitting the colon results in a test only for a parameter that is unset. Put another way, if the colon is included, the operator tests for both parameter’s existence and that its value is not null; if the colon is omitted, the operator tests only for existence.']","[<code>somecommand ${1:-foo}
</code>, <code>somecommand ${1-foo}
</code>]"
108,https://stackoverflow.com/questions/1767384/,"['If you really want to use ls, then format its output using awk:']","[<code>ls</code>, <code>ls -R /path | awk '
/:$/&amp;&amp;f{s=$0;f=0}
/:$/&amp;&amp;!f{sub(/:$/,"""");s=$0;f=1;next}
NF&amp;&amp;f{ print s""/""$0 }'
</code>]"
109,https://stackoverflow.com/questions/1224766/,"['For an better solution (with only bash functionality, as opposed to external calls), see one of the other answers.', 'The following would do and does not require the system to have the rename program (although you would most often have this on a system):', 'EDIT: As pointed out in the comments, this does not work for filenames with spaces in them without proper quoting (now added above). When working purely on your own files that you know do not have spaces in the filenames this will work but whenever you write something that may be reused at a later time, do not skip proper quoting. ']","[<code>rename</code>, <code>for file in *.html; do
    mv ""$file"" ""$(basename ""$file"" .html).txt""
done
</code>]"
110,https://stackoverflow.com/questions/307503/,"['The obvious answer is to use one of the special forms of parameter expansion:', ""Or, better (see section on 'Position of double quotes' below):"", 'The first variant (using just ?) requires STATE to be set, but STATE="""" (an empty string) is OK — not exactly what you want, but the alternative and older notation.', 'The second variant (using :?) requires DEST to be set and non-empty.', 'If you supply no message, the shell provides a default message.', 'The ${var?} construct is portable back to Version 7 UNIX and the Bourne Shell (1978 or thereabouts).  The ${var:?} construct is slightly more recent: I think it was in System III UNIX circa 1981, but it may have been in PWB UNIX before that.  It is therefore in the Korn Shell, and in the POSIX shells, including specifically Bash.', ""It is usually documented in the shell's man page in a section called Parameter Expansion.  For example, the bash manual says:"", 'Display Error if Null or Unset.  If parameter is null or unset, the expansion of word (or a message to that effect if word is not present) is written to the standard error and the shell, if it is not interactive, exits.  Otherwise, the value of parameter is substituted.', ""I should probably add that the colon command simply has its arguments evaluated and then succeeds.  It is the original shell comment notation (before '#' to end of line).  For a long time, Bourne shell scripts had a colon as the first character.  The C Shell would read a script and use the first character to determine whether it was for the C Shell (a '#' hash) or the Bourne shell (a ':' colon).  Then the kernel got in on the act and added support for '#!/path/to/program' and the Bourne shell got '#' comments, and the colon convention went by the wayside.  But if you come across a script that starts with a colon, now you will know why."", 'blong asked in a comment:', 'Any thoughts on this discussion? https://github.com/koalaman/shellcheck/issues/380#issuecomment-145872749', 'The gist of the discussion is:', '…\xa0However, when I shellcheck it (with version 0.4.1), I get this message:', 'Any advice on what I should do in this case?', 'The short answer is ""do as shellcheck suggests"":', 'To illustrate why, study the following.  Note that the : command doesn\'t echo its arguments (but the shell does evaluate the arguments).  We want to see the arguments, so the code below uses printf ""%s\\n"" in place of :.', ""Note how the value in $x is expanded to first * and then a list of file names when the overall expression is not in double quotes.  This is what shellcheck is recommending should be fixed.  I have not verified that it doesn't object to the form where the expression is enclosed in double quotes, but it is a reasonable assumption that it would be OK.""]","[<code>: ${STATE?""Need to set STATE""}
: ${DEST:?""Need to set DEST non-empty""}
</code>, <code>: ""${STATE?Need to set STATE}""
: ""${DEST:?Need to set DEST non-empty}""
</code>, <code>?</code>, <code>:?</code>, <code>${var?}</code>, <code>${var:?}</code>, <code>bash</code>, <code>${parameter:?word}
</code>, <code>#</code>, <code>#</code>, <code>:</code>, <code>#!/path/to/program</code>, <code>#</code>, <code>shellcheck</code>, <code>In script.sh line 13:
: ${FOO:?""The environment variable 'FOO' must be set and non-empty""}
  ^-- SC2086: Double quote to prevent globbing and word splitting.
</code>, <code>shellcheck</code>, <code>: ""${STATE?Need to set STATE}""
: ""${DEST:?Need to set DEST non-empty}""
</code>, <code>:</code>, <code>printf ""%s\n""</code>, <code>:</code>, <code>$ mkdir junk
$ cd junk
$ &gt; abc
$ &gt; def
$ &gt; ghi
$ 
$ x=""*""
$ printf ""%s\n"" ${x:?You must set x}    # Careless; not recommended
abc
def
ghi
$ unset x
$ printf ""%s\n"" ${x:?You must set x}    # Careless; not recommended
bash: x: You must set x
$ printf ""%s\n"" ""${x:?You must set x}""  # Careful: should be used
bash: x: You must set x
$ x=""*""
$ printf ""%s\n"" ""${x:?You must set x}""  # Careful: should be used
*
$ printf ""%s\n"" ${x:?""You must set x""}  # Not quite careful enough
abc
def
ghi
$ x=
$ printf ""%s\n"" ${x:?""You must set x""}  # Not quite careful enough
bash: x: You must set x
$ unset x
$ printf ""%s\n"" ${x:?""You must set x""}  # Not quite careful enough
bash: x: You must set x
$ 
</code>, <code>$x</code>, <code>*</code>, <code>shellcheck</code>]"
111,https://stackoverflow.com/questions/11231937/,"['The solution:', 'Example:', 'three will be never printed.', 'Also, I want to add that when pipefail is on,\nit is enough for shell to think that the entire pipe has non-zero exit code\nwhen one of commands in the pipe has non-zero exit code (with pipefail off it must the last one).']","[<code>particular_script || true
</code>, <code>$ cat /tmp/1.sh
particular_script()
{
    false
}

set -e

echo one
particular_script || true
echo two
particular_script
echo three

$ bash /tmp/1.sh
one
two
</code>, <code>three</code>, <code>pipefail</code>, <code>pipefail</code>, <code>$ set -o pipefail
$ false | true ; echo $?
1
$ set +o pipefail
$ false | true ; echo $?
0
</code>]"
112,https://stackoverflow.com/questions/3915040/,['Use realpath'],"[<code>realpath</code>, <code>$ realpath example.txt
/home/username/example.txt
</code>]"
113,https://stackoverflow.com/questions/3953645/,"['ternary operator ? : is just short form of if/else', 'Or']","[<code>? :</code>, <code>if/else</code>, <code>case ""$b"" in
 5) a=$c ;;
 *) a=$d ;;
esac
</code>, <code> [[ $b = 5 ]] &amp;&amp; a=""$c"" || a=""$d""
</code>]"
114,https://stackoverflow.com/questions/3236871/,['There is no better way I know of. Bash knows only status codes (integers) and strings written to the stdout.'],[]
115,https://stackoverflow.com/questions/9057387/,"['Use this:', 'The following syntax:', ""would work as well, but is not recommended, because as @Gordon already explained, that using *, it runs all of the arguments together as a single argument with spaces, while @ preserves the breaks between them (even if some of the arguments themselves contain spaces). It doesn't make the difference with echo, but it matters for many other commands.""]","[<code>echo ""${@:2}""
</code>, <code>echo ""${*:2}""
</code>, <code>*</code>, <code>@</code>, <code>echo</code>]"
116,https://stackoverflow.com/questions/14219092/,"['I have seen this issue when creating scripts in Windows env and then porting over to run on a Unix environment.', 'Try running dos2unix  on the script:', 'http://dos2unix.sourceforge.net/', 'Or just rewrite the script in your Unix env using vi and test.', ""Unix uses different line endings so can't read the file you created on Windows. Hence it is seeing ^M as an illegal character."", 'If you want to write a file on Windows and then port over, make sure your editor is set to create files in UNIX format.', 'In notepad++ in the bottom right of the screen, it tells you the document format. By default, it will say Dos\\Windows. To change it go to ']","[<code>dos2unix</code>, <code>vi</code>, <code>Dos\Windows</code>]"
117,https://stackoverflow.com/questions/2764051/,['Similar to the very first option but omits the trailing delimiter '],"[<code>ls -1 | paste -sd "","" -
</code>]"
118,https://stackoverflow.com/questions/9381463/,"['Depending on what you want the file to contain:', 'somecommand > /path/to/file for a file containing the output of some command.', ""nano /path/to/file or vi /path/to/file (or any other editor emacs,gedit etc)\nIt either opens the existing one for editing or creates & opens the empty file to enter, if it doesn't exist""]","[<code>touch /path/to/file</code>, <code>somecommand &gt; /path/to/file</code>, <code>  eg: grep --help &gt; randomtext.txt
      echo ""This is some text"" &gt; randomtext.txt
</code>, <code>nano /path/to/file</code>, <code>vi /path/to/file</code>, <code>any other editor emacs,gedit etc</code>]"
119,https://stackoverflow.com/questions/821396/,"['Add this to the beginning of the script:', 'This will cause the shell to exit immediately if a simple command exits with a nonzero exit value.  A simple command is any command not part of an if, while, or until test, or part of an && or || list.', 'See the bash(1) man page on the ""set"" internal command for more details.', 'I personally start almost all shell scripts with ""set -e"".  It\'s really annoying to have a script stubbornly continue when something fails in the middle and breaks assumptions for the rest of the script.']","[<code>set -e
</code>]"
120,https://stackoverflow.com/questions/23929235/,"['Heredoc sounds more convenient for this purpose. It is used to send multiple commands to a command interpreter program like ex or cat', 'The string after << indicates where to stop.', 'To send these lines to a file, use:', 'You could also store these lines to a variable:', 'This stores the lines to the variable named VAR.', ""When printing, remember the quotes around the variable otherwise you won't see the newline characters."", 'Even better, you can use indentation to make it stand out more in your code. This time just add a - after << to stop the tabs from appearing.', 'But then you must use tabs, not spaces, for indentation in your code.']","[<code>cat &lt;&lt; EndOfMessage
This is line 1.
This is line 2.
Line 3.
EndOfMessage
</code>, <code>&lt;&lt;</code>, <code>cat &gt; $FILE &lt;&lt;- EOM
Line 1.
Line 2.
EOM
</code>, <code>read -r -d '' VAR &lt;&lt; EOM
This is line 1.
This is line 2.
Line 3.
EOM
</code>, <code>VAR</code>, <code>echo ""$VAR""
</code>, <code>-</code>, <code>&lt;&lt;</code>, <code>read -r -d '' VAR &lt;&lt;- EOM
    This is line 1.
    This is line 2.
    Line 3.
EOM
</code>]"
121,https://stackoverflow.com/questions/8789729/,"[""In your specific case though it's probably easiest to use the -f flag to seq to get it to format the numbers as it outputs the list.  For example:"", 'will produce the following output:', 'More generally, bash has printf as a built-in so you can pad output with zeroes as follows:', 'You can use the -v flag to store the output in another variable:', 'Notice that printf supports a slightly different format to seq so you need to use %05d instead of %05g.']","[<code>-f</code>, <code>seq</code>, <code>for i in $(seq -f ""%05g"" 10 15)
do
  echo $i
done
</code>, <code>00010
00011
00012
00013
00014
00015
</code>, <code>bash</code>, <code>printf</code>, <code>$ i=99
$ printf ""%05d\n"" $i
00099
</code>, <code>-v</code>, <code>$ i=99
$ printf -v j ""%05d"" $i
$ echo $j
00099
</code>, <code>printf</code>, <code>seq</code>, <code>%05d</code>, <code>%05g</code>]"
122,https://stackoverflow.com/questions/4419952/,"['From man bash on return [n];', 'Causes a function to stop executing and return  the value  specified by n to its caller.  If n is omitted, the return status is that of the last  command executed  in  the function body.', '... on exit [n]:', 'Cause  the  shell to exit with a status of n.  If n is omitted, the exit status is  that  of  the  last command  executed.   A  trap  on  EXIT  is executed before the shell terminates.', 'EDIT:', 'As per your edit of the question, regarding exit codes, return has nothing to do with exit codes. Exit codes are intended for applications/scripts, not functions. So in this regard, the only keyword that sets the exit code of the script (the one that can be caught by the calling program using the $? shell variable) is exit.', 'EDIT 2:', 'My last statement referring exit is causing some comments. It was made to differentiate return and exit for the understanding of the OP, and in fact, at any given point of a program/shell script, exit is the only way of ending the script with an exit code to the calling process.', 'Every command executed in the shell produces a local ""exit code"": it sets the $? variable to that code, and can be used with if,  && and other operators to conditionally execute other commands.', 'These exit codes (and the value of the $? variable) are reset by each command execution.', 'Incidentally, the exit code of the last command executed by the script is used as the exit code of the script itself as seen by the calling process. ', 'Finally, functions, when called, act as shell commands with respect to exit codes. The exit code of the function (within the function) is set by using return. So when in a function return 0 is run, the function execution terminates, giving an exit code of 0.']","[<code>man bash</code>, <code>return [n]</code>, <code>exit [n]</code>, <code>return</code>, <code>$?</code>, <code>exit</code>, <code>exit</code>, <code>return</code>, <code>exit</code>, <code>exit</code>, <code>$?</code>, <code>if</code>, <code>&amp;&amp;</code>, <code>$?</code>, <code>return</code>, <code>return 0</code>]"
123,https://stackoverflow.com/questions/17368067/,"[""In addition to fedorqui's correct answer, I would like to show the difference between string length and byte length:"", 'will render:', 'you could even have a look at stored chars:', 'will answer:', ""Nota: According to Isabell Cowan's comment, I've added setting to $LC_ALL along with $LANG."", 'Argument work same as regular variables', 'will work as', 'If you:', 'Not really pretty... For this, there is a little function:', 'Then now:', 'But there left some strange UTF-8 behaviour, like double-spaced chars, zero spaced chars, reverse deplacement and other that could not be as simple...', 'Have a look at diffU8test.sh or diffU8test.sh.txt for more limitations.']","[<code>myvar='Généralités'
chrlen=${#myvar}
oLang=$LANG oLcAll=$LC_ALL
LANG=C LC_ALL=C
bytlen=${#myvar}
LANG=$oLang LC_ALL=$oLcAll
printf ""%s is %d char len, but %d bytes len.\n"" ""${myvar}"" $chrlen $bytlen
</code>, <code>Généralités is 11 char len, but 14 bytes len.
</code>, <code>myvar='Généralités'
chrlen=${#myvar}
oLang=$LANG oLcAll=$LC_ALL
LANG=C LC_ALL=C
bytlen=${#myvar}
printf -v myreal ""%q"" ""$myvar""
LANG=$oLang LC_ALL=$oLcAll
printf ""%s has %d chars, %d bytes: (%s).\n"" ""${myvar}"" $chrlen $bytlen ""$myreal""
</code>, <code>Généralités has 11 chars, 14 bytes: ($'G\303\251n\303\251ralit\303\251s').
</code>, <code>$LC_ALL</code>, <code>$LANG</code>, <code>strLen() {
    local bytlen sreal oLang=$LANG oLcAll=$LC_ALL
    LANG=C LC_ALL=C
    bytlen=${#1}
    printf -v sreal %q ""$1""
    LANG=$oLang LC_ALL=$oLcAll
    printf ""String '%s' is %d bytes, but %d chars len: %s.\n"" ""$1"" $bytlen ${#1} ""$sreal""
}
</code>, <code>strLen théorème
String 'théorème' is 10 bytes, but 8 chars len: $'th\303\251or\303\250me'
</code>, <code>printf</code>, <code>for string in Généralités Language Théorème Février  ""Left: ←"" ""Yin Yang ☯"";do
    printf "" - %-14s is %2d char length\n"" ""'$string'""  ${#string}
done

 - 'Généralités' is 11 char length
 - 'Language'     is  8 char length
 - 'Théorème'   is  8 char length
 - 'Février'     is  7 char length
 - 'Left: ←'    is  7 char length
 - 'Yin Yang ☯' is 10 char length
</code>, <code>strU8DiffLen () { 
    local bytlen oLang=$LANG oLcAll=$LC_ALL
    LANG=C LC_ALL=C
    bytlen=${#1}
    LANG=$oLang LC_ALL=$oLcAll
    return $(( bytlen - ${#1} ))
}
</code>, <code>for string in Généralités Language Théorème Février  ""Left: ←"" ""Yin Yang ☯"";do
    strU8DiffLen ""$string""
    printf "" - %-$((14+$?))s is %2d chars length, but uses %2d bytes\n"" \
        ""'$string'"" ${#string} $((${#string}+$?))
  done 

 - 'Généralités'  is 11 chars length, but uses 14 bytes
 - 'Language'     is  8 chars length, but uses  8 bytes
 - 'Théorème'     is  8 chars length, but uses 10 bytes
 - 'Février'      is  7 chars length, but uses  8 bytes
 - 'Left: ←'      is  7 chars length, but uses  9 bytes
 - 'Yin Yang ☯'   is 10 chars length, but uses 12 bytes
</code>]"
124,https://stackoverflow.com/questions/3980668/,"['Here is another way to do it:', 'The read -s will turn off echo for you. Just replace the echo on the last line with the command you want to run.']","[<code>#!/bin/bash
# Read Password
echo -n Password: 
read -s password
echo
# Run Command
echo $password
</code>, <code>read -s</code>, <code>echo</code>]"
125,https://stackoverflow.com/questions/1527049/,"['A 100% pure Bash function that supports multi-character delimiters is:', 'For example,', 'The code above is based on the ideas by @gniourf_gniourf, @AdamKatz, and @MattCowell.', 'Alternatively, a simpler function that supports only a single character delimiter, would be:', 'For example,', ""This solution is based on Pascal Pilz's original suggestion."", 'A detailed explanation of the solutions proposed here can be found in ""How to join() array elements in a bash script"", an article by meleu at dev.to.']","[<code>function join_by { local d=$1; shift; local f=$1; shift; printf %s ""$f"" ""${@/#/$d}""; }
</code>, <code>join_by , a b c #a,b,c
join_by ' , ' a b c #a , b , c
join_by ')|(' a b c #a)|(b)|(c
join_by ' %s ' a b c #a %s b %s c
join_by $'\n' a b c #a&lt;newline&gt;b&lt;newline&gt;c
join_by - a b c #a-b-c
join_by '\' a b c #a\b\c
join_by '-n' '-e' '-E' '-n' #-e-n-E-n-n
join_by , #
join_by , a #a
</code>, <code>function join_by { local IFS=""$1""; shift; echo ""$*""; }
</code>, <code>join_by , a ""b c"" d #a,b c,d
join_by / var local tmp #var/local/tmp
join_by , ""${FOO[@]}"" #a,b,c
</code>]"
126,https://stackoverflow.com/questions/496702/,"[""Your shell process has a copy of the parent's environment and no access to the parent process's environment whatsoever. When your shell process terminates any changes you've made to its environment are lost. Sourcing a script file is the most commonly used method for configuring a shell environment, you may just want to bite the bullet and maintain one for each of the two flavors of shell.""]",[]
127,https://stackoverflow.com/questions/13799789/,"['Inside single quotes everything is preserved literally, without exception.', 'That means you have to close the quotes, insert something, and then re-enter again.', ""Word concatenation is simply done by juxtaposition. As you can verify, each of the above lines is a single word to the shell. Quotes (single or double quotes, depending on the situation) don't isolate words. They are only used to disable interpretation of various special characters, like whitespace, $, ;... For a good tutorial on quoting see Mark Reed's answer. Also relevant: Which characters need to be escaped in bash?"", 'You should absolutely avoid building shell commands by concatenating variables. This is a bad idea similar to concatenation of SQL fragments (SQL injection!).', 'Usually it is possible to have placeholders in the command, and to supply the command together with variables so that the callee can receive them from the invocation arguments list.', ""For example, the following is very unsafe. DON'T DO THIS"", 'If the contents of $myvar is untrusted, here is an exploit:', ""Instead of the above invocation, use positional arguments. The following invocation is better -- it's not exploitable:"", ""Note the use of single ticks in the assignment to script, which means that it's taken literally, without variable expansion or any other form of interpretation.""]","[<code>'before'""$variable""'after'
'before'""'""'after'
'before'\''after'
</code>, <code>$</code>, <code>;</code>, <code>script=""echo \""Argument 1 is: $myvar\""""
/bin/sh -c ""$script""
</code>, <code>$myvar</code>, <code>myvar='foo""; echo ""you were hacked'
</code>, <code>script='echo ""arg 1 is: $1""'
/bin/sh -c ""$script"" -- ""$myvar""
</code>, <code>script</code>]"
128,https://stackoverflow.com/questions/36724209/,"['To disable the beep in bash you need to uncomment (or add if not already there) the line set bell-style none in your /etc/inputrc file.', 'Note: Since it is a protected file you need to be a privileged user to edit it (i.e. launch your text editor with something like sudo <editor> /etc/inputrc).', 'To disable the beep also in vim you need to add set visualbell in your ~/.vimrc file.', 'To disable the beep also in less (i.e. also in man pages and when using ""git diff"") you need to add export LESS=""$LESS -R -Q"" in your ~/.profile file.']","[<code>set bell-style none</code>, <code>/etc/inputrc</code>, <code>sudo &lt;editor&gt; /etc/inputrc</code>, <code>set visualbell</code>, <code>~/.vimrc</code>, <code>export LESS=""$LESS -R -Q""</code>, <code>~/.profile</code>]"
129,https://stackoverflow.com/questions/4485059/,"['It appears that completely uninstalling Git, restarting (the classic Windows cure), and reinstalling Git was the cure.  I also wiped out all bash config files which were left over (they were manually created).  Everything is fast again.', ""If for some reason reinstalling isn't possible (or desirable), then I would definitely try changing the PS1 variable referenced in Chris Dolan's answer; it resulted in significant speedups in certain operations.""]",[]
130,https://stackoverflow.com/questions/238073/,"['You can implement this by overwriting a line.  Use \\r to go back to the beginning of the line without writing \\n to the terminal.', ""Write \\n when you're done to advance the line."", 'Use echo -ne to:', ""Here's a demo:"", 'In a comment below, puk mentions this ""fails"" if you start with a long line and then want to write a short line: In this case, you\'ll need to overwrite the length of the long line (e.g., with spaces).']","[<code>\r</code>, <code>\n</code>, <code>\n</code>, <code>echo -ne</code>, <code>\n</code>, <code>\r</code>, <code>echo -ne '#####                     (33%)\r'
sleep 1
echo -ne '#############             (66%)\r'
sleep 1
echo -ne '#######################   (100%)\r'
echo -ne '\n'
</code>]"
131,https://stackoverflow.com/questions/6121091/,"[""dirname and basename are the tools you're looking for for extracting path components:"", ""They're not internal Bash commands but they're part of the POSIX standard -  see dirname and basename. Hence, they're probably available on, or can be obtained for, most platforms that are capable of running bash.""]","[<code>dirname</code>, <code>basename</code>, <code>$ export VAR='/home/pax/file.c'
$ echo ""$(dirname ""${VAR}"")"" ; echo ""$(basename ""${VAR}"")""
/home/pax
file.c
</code>, <code>dirname</code>, <code>basename</code>, <code>bash</code>]"
132,https://stackoverflow.com/questions/1221833/,"['There is an internal Bash variable called $PIPESTATUS; it’s an array that holds the exit status of each command in your last foreground pipeline of commands.', 'Or another alternative which also works with other shells (like zsh) would be to enable pipefail:', 'The first option does not work with zsh due to a little bit different syntax.']","[<code>$PIPESTATUS</code>, <code>&lt;command&gt; | tee out.txt ; test ${PIPESTATUS[0]} -eq 0
</code>, <code>set -o pipefail
...
</code>, <code>zsh</code>]"
133,https://stackoverflow.com/questions/402377/,"['There are three implementations that may be considered:', 'Bash builtin getopts. This does not support long option names with the double-dash prefix.  It only supports single-character options.', 'BSD UNIX implementation of standalone getopt command (which is what MacOS uses). This does not support long options either.', 'GNU implementation of standalone getopt.  GNU getopt(3) (used by the command-line getopt(1) on Linux) supports parsing long options.  ', 'Some other answers show a solution for using the bash builtin getopts to mimic long options. That solution actually makes a short option whose character is ""-"". So you get ""--"" as the flag. Then anything following that becomes OPTARG, and you test the OPTARG with a nested case.', 'This is clever, but it comes with caveats: ', 'So while it is possible to write more code to work around the lack of support for long options, this is a lot more work and partially defeats the purpose of using a getopt parser to simplify your code.']","[<code>getopts</code>, <code>getopt</code>, <code>getopt</code>, <code>getopt(3)</code>, <code>getopt(1)</code>, <code>getopts</code>, <code>case</code>, <code>getopts</code>]"
134,https://stackoverflow.com/questions/6205157/,"['Add in iTerm2 the following Profile Shortcut Keys', 'Here is a visual for those who need it', '']",[]
135,https://stackoverflow.com/questions/5130847/,"['You are using | (pipe) to direct the output of a command into another command. What you are looking for is && operator to execute the next command only if the previous one succeeded:', 'Or ', ""To summarize (non-exhaustively) bash's command operators/separators:""]","[<code>|</code>, <code>&amp;&amp;</code>, <code>cp /templates/apple /templates/used &amp;&amp; cp /templates/apple /templates/inuse &amp;&amp; rm /templates/apple
</code>, <code>cp /templates/apple /templates/used &amp;&amp; mv /templates/apple /templates/inuse
</code>, <code>|</code>, <code>stdout</code>, <code>stderr</code>, <code>|&amp;</code>, <code>stdout</code>, <code>stderr</code>, <code>&amp;&amp;</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>||</code>, <code>;</code>, <code>;</code>, <code>set -e</code>, <code>bash</code>]"
136,https://stackoverflow.com/questions/878600/,"['You can add to the crontab as follows:', 'Source nixCraft.']","[<code>#write out current crontab
crontab -l &gt; mycron
#echo new cron into cron file
echo ""00 09 * * 1-5 echo hello"" &gt;&gt; mycron
#install new cron file
crontab mycron
rm mycron
</code>, <code>* * * * * ""command to be executed""
- - - - -
| | | | |
| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
| | | ------- Month (1 - 12)
| | --------- Day of month (1 - 31)
| ----------- Hour (0 - 23)
------------- Minute (0 - 59)
</code>]"
137,https://stackoverflow.com/questions/9392735/,"['Taken from the man page:', 'Example:']","[<code>-n, --no-clobber
              do not overwrite an existing file (overrides a previous -i option)
</code>, <code>cp -n myoldfile.txt mycopiedfile.txt
</code>]"
138,https://stackoverflow.com/questions/4837673/,"['You can also evaluate a command using the --eval flag, if it is just a single command.', ""Please note: if you are using Mongo operators, starting with a $ sign, you'll want to surround the eval argument in single quotes to keep the shell from evaluating the operator as an environment variable:"", 'Otherwise you may see something like this:']","[<code>--eval</code>, <code>mongo --eval ""printjson(db.serverStatus())""
</code>, <code>mongo --eval 'db.mycollection.update({""name"":""foo""},{$set:{""this"":""that""}});' myDbName
</code>, <code>mongo --eval ""db.test.update({\""name\"":\""foo\""},{$set:{\""this\"":\""that\""}});""
&gt; E QUERY    SyntaxError: Unexpected token :
</code>]"
139,https://stackoverflow.com/questions/16365130/,"['Running a command through /usr/bin/env has the benefit of looking for whatever the default version of the program is in your current environment.', ""This way, you don't have to look for it in a specific place on the system, as those paths may be in different locations on different systems.  As long as it's in your path, it will find it."", 'One downside is that you will be unable to pass more than one argument (e.g. you will be unable to write /usr/bin/env awk -f) if you wish to support Linux, as POSIX is vague on how the line is to be interpreted, and Linux interprets everything after the first space to denote a single argument. You can use /usr/bin/env -S on some versions of env to get around this, but then the script will become even less portable and break on fairly recent systems (e.g. even Ubuntu 16.04 if not later).', ""Another downside is that since you aren't calling an explicit executable, it's got the potential for mistakes, and on multiuser systems security problems (if someone managed to get their executable called bash in your path, for example)."", 'In some situations, the first may be preferred (like running python scripts with multiple versions of python, without having to rework the executable line).  But in situations where security is the focus, the latter would be preferred, as it limits code injection possibilities.']","[<code>/usr/bin/env</code>, <code>/usr/bin/env awk -f</code>, <code>/usr/bin/env -S</code>, <code>env</code>, <code>bash</code>, <code>#!/usr/bin/env bash #lends you some flexibility on different systems
#!/usr/bin/bash     #gives you explicit control on a given system of what executable is called
</code>]"
140,https://stackoverflow.com/questions/385408/,"['Use the built-in time keyword:', 'Example:']","[<code>time</code>, <code>$ time sleep 2
</code>]"
141,https://stackoverflow.com/questions/17066250/,"['In order to get the current timestamp and not the time of when a fixed variable is defined, the trick is to use a function and not a variable:', ""If you don't like the format given by the %T specifier you can combine the other time conversion specifiers accepted by date.  For GNU date, you can find the complete list of these specifiers in the official documentation here: https://www.gnu.org/software/coreutils/manual/html_node/Time-conversion-specifiers.html#Time-conversion-specifiers""]","[<code>#!/bin/bash

# Define a timestamp function
timestamp() {
  date +""%T"" # current time
}

# do something...
timestamp # print timestamp
# do something else...
timestamp # print another timestamp
# continue...
</code>, <code>%T</code>, <code>date</code>, <code>date</code>]"
142,https://stackoverflow.com/questions/125281/,"[""Here's how to do it with the # and % operators in Bash."", '${x%.bar} could also be ${x%.*} to remove everything after a dot or ${x%%.*} to remove everything after the first dot.', 'Example:', 'Documentation can be found in the Bash manual. Look for ${parameter%word} and ${parameter%%word} trailing portion matching section.']","[<code>$ x=""/foo/fizzbuzz.bar""
$ y=${x%.bar}
$ echo ${y##*/}
fizzbuzz
</code>, <code>${x%.bar}</code>, <code>${x%.*}</code>, <code>${x%%.*}</code>, <code>$ x=""/foo/fizzbuzz.bar.quux""
$ y=${x%.*}
$ echo $y
/foo/fizzbuzz.bar
$ y=${x%%.*}
$ echo $y
/foo/fizzbuzz
</code>, <code>${parameter%word}</code>, <code>${parameter%%word}</code>]"
143,https://stackoverflow.com/questions/2920416/,"['To fix, open your script with vi or vim and enter in vi command mode (key Esc), then type this:', 'Finally save it', ':x! or :wq!']","[<code>:set fileformat=unix
</code>, <code>:x!</code>, <code>:wq!</code>]"
144,https://stackoverflow.com/questions/3096259/,"['Edit:\nWith some paste implementations you need to be more explicit when reading from stdin:', '<cmd> | paste -sd+ - | bc']","[<code>paste -sd+ infile | bc
</code>, <code>&lt;cmd&gt; | paste -sd+ | bc
</code>, <code>&lt;cmd&gt; | paste -sd+ - | bc</code>]"
145,https://stackoverflow.com/questions/1167746/,"['You can avoid a useless use of cat and handle mismatched quotes better with this:', ""If you don't quote the variable when you echo it, newlines are lost. Quoting it preserves them:"", 'If you want to use indentation for readability in the source code, use a dash after the less-thans. The indentation must be done using only tabs (no spaces).', 'If, instead, you want to preserve the tabs in the contents of the resulting variable, you need to remove tab from IFS. The terminal marker for the here doc (EOF) must not be indented.', 'Tabs can be inserted at the command line by pressing Ctrl-V Tab. If you are using an editor, depending on which one, that may also work or you may have to turn off the feature that automatically converts tabs to spaces.']","[<code>cat</code>, <code>$ read -r -d '' VAR &lt;&lt;'EOF'
abc'asdf""
$(dont-execute-this)
foo""bar""''
EOF
</code>, <code>$ echo ""$VAR""
abc'asdf""
$(dont-execute-this)
foo""bar""''
</code>, <code>$ read -r -d '' VAR &lt;&lt;-'EOF'
    abc'asdf""
    $(dont-execute-this)
    foo""bar""''
    EOF
$ echo ""$VAR""
abc'asdf""
$(dont-execute-this)
foo""bar""''
</code>, <code>IFS</code>, <code>EOF</code>, <code>$ IFS='' read -r -d '' VAR &lt;&lt;'EOF'
    abc'asdf""
    $(dont-execute-this)
    foo""bar""''
EOF
$ echo ""$VAR""
    abc'asdf""
    $(dont-execute-this)
    foo""bar""''
</code>]"
146,https://stackoverflow.com/questions/820517/,['.bashrc is not sourced when you log in using SSH. You need to source it in your .bash_profile like this:'],"[<code>.bashrc</code>, <code>.bash_profile</code>, <code>if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi
</code>]"
147,https://stackoverflow.com/questions/1891797/,"[""If you're using Bash, you don't even have to use grep:"", ""It's better to put the regex in a variable. Some patterns won't work if included literally."", ""This uses  =~ which is Bash's regex match operator. The results of the match are saved to an array called $BASH_REMATCH. The first capture group is stored in index 1, the second (if any) in index 2, etc. Index zero is the full match."", ""You should be aware that without anchors, this regex (and the one using grep) will match any of the following examples and more, which may not be what you're looking for:"", 'To eliminate the second and fourth examples, make your regex like this:', 'which says the string must start with one or more digits. The carat represents the beginning of the string. If you add a dollar sign at the end of the regex, like this:', 'then the third example will also be eliminated since the dot is not among the characters in the regex and the dollar sign represents the end of the string. Note that the fourth example fails this match as well.', 'If you have GNU grep (around 2.5 or later, I think, when the \\K operator was added):', ""The \\K operator (variable-length look-behind) causes the preceding pattern to match, but doesn't include the match in the result. The fixed-length equivalent is (?<=) - the pattern would be included before the closing parenthesis. You must use \\K if quantifiers may match strings of different lengths (e.g. +, *, {2,4})."", 'The (?=) operator matches fixed or variable-length patterns and is called ""look-ahead"". It also does not include the matched string in the result.', 'In order to make the match case-insensitive, the (?i) operator is used. It affects the patterns that follow it so its position is significant.', ""The regex might need to be adjusted depending on whether there are other characters in the filename. You'll note that in this case, I show an example of concatenating a string at the same time that the substring is captured.""]","[<code>grep</code>, <code>files=""*.jpg""
regex=""[0-9]+_([a-z]+)_[0-9a-z]*""
for f in $files    # unquoted in order to allow the glob to expand
do
    if [[ $f =~ $regex ]]
    then
        name=""${BASH_REMATCH[1]}""
        echo ""${name}.jpg""    # concatenate strings
        name=""${name}.jpg""    # same thing stored in a variable
    else
        echo ""$f doesn't match"" &gt;&amp;2 # this could get noisy if there are a lot of non-matching files
    fi
done
</code>, <code>=~</code>, <code>$BASH_REMATCH</code>, <code>grep</code>, <code>123_abc_d4e5
xyz123_abc_d4e5
123_abc_d4e5.xyz
xyz123_abc_d4e5.xyz
</code>, <code>^[0-9]+_([a-z]+)_[0-9a-z]*
</code>, <code>^[0-9]+_([a-z]+)_[0-9a-z]*$
</code>, <code>grep</code>, <code>\K</code>, <code>name=$(echo ""$f"" | grep -Po '(?i)[0-9]+_\K[a-z]+(?=_[0-9a-z]*)').jpg
</code>, <code>\K</code>, <code>(?&lt;=)</code>, <code>\K</code>, <code>+</code>, <code>*</code>, <code>{2,4}</code>, <code>(?=)</code>, <code>(?i)</code>]"
148,https://stackoverflow.com/questions/3968103/,"['-n returns line number.', '-i is for ignore-case. Only to be used if case matching is not necessary', 'Combine with awk to print out the line number after the match:', 'Use command substitution to print out the total null count:']","[<code>-n</code>, <code>-i</code>, <code>$ grep -in null myfile.txt

2:example two null,
4:example four null,
</code>, <code>awk</code>, <code>$ grep -in null myfile.txt | awk -F: '{print $2"" - Line number : ""$1}'

example two null, - Line number : 2
example four null, - Line number : 4
</code>, <code>$ echo ""Total null count :"" $(grep -ic null myfile.txt)

Total null count : 2
</code>]"
149,https://stackoverflow.com/questions/1529946/,"[""(there's no such option for cp).""]","[<code>mkdir -p ""$d"" &amp;&amp; cp file ""$d""
</code>, <code>cp</code>]"
150,https://stackoverflow.com/questions/22009364/,"['Is there a TRY CATCH command in Bash?', 'No.  ', ""Bash doesn't have as many luxuries as one can find in many programming languages."", 'There is no try/catch in bash; however, one can achieve similar behavior using && or ||.', 'Using ||:', 'if command1 fails then command2 runs as follows', 'Similarly, using &&, command2 will run if command1 is successful', 'The closest approximation of try/catch is as follows', 'Also bash contains some error handling mechanisms, as well ', 'it stops your script if any simple command fails. ', 'And also why not if...else. It is your best friend.']","[<code>try/catch</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>||</code>, <code>command1</code>, <code>command2</code>, <code>command1 || command2
</code>, <code>&amp;&amp;</code>, <code>command2</code>, <code>command1</code>, <code>try/catch</code>, <code>{ # try

    command1 &amp;&amp;
    #save your output

} || { # catch
    # save log for exception 
}
</code>, <code>set -e
</code>, <code>if...else</code>]"
151,https://stackoverflow.com/questions/6405127/,"['From the official documentation:', 'It is also convenient to have a ~/.pgpass file to avoid regularly having to type in passwords. See Section 30.13 for more information.', '...', 'This file should contain lines of the following format:', 'The password field from the first line that matches the current connection parameters will be used. ']","[<code>hostname:port:database:username:password
</code>]"
152,https://stackoverflow.com/questions/3427872/,"[""[[ is bash's improvement to the [ command. It has several enhancements that make it a better choice if you write scripts that target bash. My favorites are:"", ""It is a syntactical feature of the shell, so it has some special behavior that [ doesn't have. You no longer have to quote variables like mad because [[ handles empty strings and strings with whitespace more intuitively. For example, with [ you have to write"", 'to correctly handle empty strings or file names with spaces in them. With [[ the quotes are unnecessary:', 'Because it is a syntactical feature, it lets you use && and || operators for boolean tests and < and > for string comparisons. [ cannot do this because it is a regular command and  &&, ||, <, and > are not passed to regular commands as command-line arguments.', 'It has a wonderful =~ operator for doing regular expression matches. With [ you might write', 'With [[ you can write this as', 'It even lets you access the captured groups which it stores in BASH_REMATCH. For instance, ${BASH_REMATCH[1]} would be ""es"" if you typed a full ""yes"" above.', ""You get pattern matching aka globbing for free. Maybe you're less strict about how to type yes. Maybe you're okay if the user types y-anything. Got you covered:"", 'Keep in mind that it is a bash extension, so if you are writing sh-compatible scripts then you need to stick with [. Make sure you have the #!/bin/bash shebang line for your script if you use double brackets.']","[<code>[[</code>, <code>[</code>, <code>[</code>, <code>[[</code>, <code>[</code>, <code>if [ -f ""$file"" ]
</code>, <code>[[</code>, <code>if [[ -f $file ]]
</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>&lt;</code>, <code>&gt;</code>, <code>[</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>&lt;</code>, <code>&gt;</code>, <code>=~</code>, <code>[</code>, <code>if [ ""$answer"" = y -o ""$answer"" = yes ]
</code>, <code>[[</code>, <code>if [[ $answer =~ ^y(es)?$ ]]
</code>, <code>BASH_REMATCH</code>, <code>${BASH_REMATCH[1]}</code>, <code>if [[ $ANSWER = y* ]]
</code>, <code>[</code>, <code>#!/bin/bash</code>]"
153,https://stackoverflow.com/questions/90418/,"['After each command, the exit code can be found in the $? variable so you would have something like:', 'You need to be careful of piped commands since the $? only gives you the return code of the last element in the pipe so, in the code:', ""will not return an error code if the file doesn't exist (since the sed part of the pipeline actually works, returning 0)."", 'The bash shell actually provides an array which can assist in that case, that being PIPESTATUS. This array has one element for each of the pipeline components, that you can access individually like ${PIPESTATUS[0]}:', 'Note that this is getting you the result of the false command, not the entire pipeline. You can also get the entire list to process as you see fit:', 'If you wanted to get the largest error code from a pipeline, you could use something like:', 'This goes through each of the PIPESTATUS elements in turn, storing it in rc if it was greater than the previous rc value.']","[<code>$?</code>, <code>ls -al file.ext
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi
</code>, <code>$?</code>, <code>ls -al file.ext | sed 's/^/xx: /""
</code>, <code>sed</code>, <code>bash</code>, <code>PIPESTATUS</code>, <code>${PIPESTATUS[0]}</code>, <code>pax&gt; false | true ; echo ${PIPESTATUS[0]}
1
</code>, <code>false</code>, <code>pax&gt; false | true | false; echo ${PIPESTATUS[*]}
1 0 1
</code>, <code>true | true | false | true | false
rcs=${PIPESTATUS[*]}; rc=0; for i in ${rcs}; do rc=$(($i &gt; $rc ? $i : $rc)); done
echo $rc
</code>, <code>PIPESTATUS</code>, <code>rc</code>, <code>rc</code>]"
154,https://stackoverflow.com/questions/9457233/,"['Set HISTSIZE and HISTFILESIZE in .bashrc to an empty string:', 'In bash 4.3 and later you can also use HISTSIZE=-1 HISTFILESIZE=-1:']","[<code>HISTSIZE</code>, <code>HISTFILESIZE</code>, <code>HISTSIZE= 
HISTFILESIZE=
</code>, <code>HISTSIZE=-1 HISTFILESIZE=-1</code>, <code>n.  Setting HISTSIZE to a value less than zero causes the history list to be
    unlimited (setting it 0 zero disables the history list).

o.  Setting HISTFILESIZE to a value less than zero causes the history file size
    to be unlimited (setting it to 0 causes the history file to be truncated
    to zero size).
</code>]"
155,https://stackoverflow.com/questions/16034749/,"['There is a space missing between elif and [:', 'should be', 'As I see this question is getting a lot of views, it is important to indicate that the syntax to follow is:', ""meaning that spaces are needed around the brackets. Otherwise, it won't work. This is because [ itself is a command."", 'The reason why you are not seeing something like elif[: command not found (or similar) is that after seeing if and then, the shell is looking for either elif, else, or fi.  However it finds another then (after the mis-formatted elif[).  Only after having parsed the statement it would be executed (and an error message like elif[: command not found would be output).']","[<code>elif</code>, <code>[</code>, <code>elif[ ""$seconds"" -gt 0 ]
</code>, <code>elif [ ""$seconds"" -gt 0 ]
</code>, <code>if [ conditions ]
# ^ ^          ^
</code>, <code>[</code>, <code>elif[: command not found</code>, <code>if</code>, <code>then</code>, <code>elif</code>, <code>else</code>, <code>fi</code>, <code>then</code>, <code>elif[</code>, <code>elif[: command not found</code>]"
156,https://stackoverflow.com/questions/10856129/,[],"[<code>FOO=bar bash -c 'somecommand someargs | somecommand2'
</code>]"
157,https://stackoverflow.com/questions/160924/,['More information: http://linux.about.com/library/cmd/blcmdl1_pkill.htm'],"[<code>pkill firefox
</code>]"
158,https://stackoverflow.com/questions/192292/,['I tend to make my scripts all be relative to one another. \nThat way I can use dirname:'],"[<code>#!/bin/sh

my_dir=""$(dirname ""$0"")""

""$my_dir/other_script.sh""
</code>]"
159,https://stackoverflow.com/questions/3112687/,"['The keys are accessed using an exclamation point: ${!array[@]}, the values are accessed using ${array[@]}.', 'You can iterate over the key/value pairs like this:', 'Note the use of quotes around the variable in the for statement (plus the use of @ instead of *). This is necessary in case any keys include spaces.', 'The confusion in the other answer comes from the fact that your question includes ""foo"" and ""bar"" for both the keys and the values.']","[<code>${!array[@]}</code>, <code>${array[@]}</code>, <code>for i in ""${!array[@]}""
do
  echo ""key  : $i""
  echo ""value: ${array[$i]}""
done
</code>, <code>for</code>, <code>@</code>, <code>*</code>]"
160,https://stackoverflow.com/questions/4412238/,"['How about a Bash Here Document:', ""To avoid the problems mentioned by @Globalz in the comments, you may be able to (depending what you're doing on the remote site) get away with replacing the first line with"", 'Note that you can do variable substitution in the Here document, but you may have to deal with quoting issues. For instance, if you quote the ""limit string"" (ie. EOF in the above), then you can\'t do variable substitutions. But without quoting the limit string, variables are substituted. For example, if you have defined $NAME above in your shell script, you could do', ""and it would create a file on the destination otherhost with the name of whatever you'd assigned to $NAME. Other rules about shell script quoting also apply, but are too complicated to go into here.""]","[<code>ssh otherhost &lt;&lt; EOF
  ls some_folder; 
  ./someaction.sh 'some params'
  pwd
  ./some_other_action 'other params'
EOF
</code>, <code>ssh otherhost /bin/bash &lt;&lt; EOF
</code>, <code>EOF</code>, <code>$NAME</code>, <code>ssh otherhost /bin/bash &lt;&lt; EOF
touch ""/tmp/${NAME}""
EOF
</code>, <code>otherhost</code>, <code>$NAME</code>]"
161,https://stackoverflow.com/questions/16483119/,['Example runs:'],"[<code>#!/bin/bash

usage() { echo ""Usage: $0 [-s &lt;45|90&gt;] [-p &lt;string&gt;]"" 1&gt;&amp;2; exit 1; }

while getopts "":s:p:"" o; do
    case ""${o}"" in
        s)
            s=${OPTARG}
            ((s == 45 || s == 90)) || usage
            ;;
        p)
            p=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z ""${s}"" ] || [ -z ""${p}"" ]; then
    usage
fi

echo ""s = ${s}""
echo ""p = ${p}""
</code>, <code>$ ./myscript.sh
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -h
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -s """" -p """"
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -s 10 -p foo
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -s 45 -p foo
s = 45
p = foo

$ ./myscript.sh -s 90 -p bar
s = 90
p = bar
</code>]"
162,https://stackoverflow.com/questions/7114990/,"[""Try ssh -t -t(or ssh -tt for short) to force pseudo-tty allocation even if stdin isn't a terminal."", 'See also: Terminating SSH session executed by bash script', 'From ssh manpage:']","[<code>ssh -t -t</code>, <code>ssh -tt</code>, <code>-T      Disable pseudo-tty allocation.

-t      Force pseudo-tty allocation.  This can be used to execute arbitrary 
        screen-based programs on a remote machine, which can be very useful,
        e.g. when implementing menu services.  Multiple -t options force tty
        allocation, even if ssh has no local tty.
</code>]"
163,https://stackoverflow.com/questions/9522631/,"[""I'm afraid that, in general, you can't do what you're asking for. The best you can do is a comment on the lines before the command, or one single comment at the end of the command line, or a comment after the command."", ""You can't manage to intersperse comments inside a command this way. The \\s express an intent to merge lines, so for all intents and purposes you're trying to intersperse comments in a single line, which doesn't work anyway because a \\ has to be at the end of the line to have that effect.""]","[<code>\</code>, <code>\</code>]"
164,https://stackoverflow.com/questions/21297853/,"['With openssl:', 'The output is on the form:', ""Also see MikeW's answer for how to easily check whether the certificate has expired or not, or whether it will within a certain time period, without having to parse the date above.""]","[<code>openssl</code>, <code>openssl x509 -enddate -noout -in file.pem
</code>, <code>notAfter=Nov  3 22:23:50 2014 GMT
</code>]"
165,https://stackoverflow.com/questions/10610327/,"[""The 'git branch -d' subcommand can delete more than one branch.  So, simplifying @sblom's answer but adding a critical xargs:"", 'or, further simplified to:', 'Importantly, as noted by @AndrewC, using git branch for scripting is discouraged.  To avoid it use something like:', 'Caution warranted on deletes!']","[<code>git branch -D `git branch --merged | grep -v \* | xargs`
</code>, <code>git branch --merged | grep -v \* | xargs git branch -D 
</code>, <code>git branch</code>, <code>git for-each-ref --format '%(refname:short)' refs/heads | grep -v master | xargs git branch -D
</code>, <code>$ mkdir br
$ cd br; git init
Initialized empty Git repository in /Users/ebg/test/br/.git/
$ touch README; git add README; git commit -m 'First commit'
[master (root-commit) 1d738b5] First commit
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README
$ git branch Story-123-a
$ git branch Story-123-b
$ git branch Story-123-c
$ git branch --merged
  Story-123-a
  Story-123-b
  Story-123-c
* master
$ git branch --merged | grep -v \* | xargs
Story-123-a Story-123-b Story-123-c
$ git branch --merged | grep -v \* | xargs git branch -D
Deleted branch Story-123-a (was 1d738b5).
Deleted branch Story-123-b (was 1d738b5).
Deleted branch Story-123-c (was 1d738b5).
</code>]"
166,https://stackoverflow.com/questions/4509624/,"['Checkout the -maxdepth flag of find', 'Here I used 1 as max level depth, -type d means find only directories, which then ls -ld lists contents of, in long format.']","[<code>-maxdepth</code>, <code>find</code>, <code>find . -maxdepth 1 -type d -exec ls -ld ""{}"" \;
</code>, <code>-type d</code>, <code>ls -ld</code>]"
167,https://stackoverflow.com/questions/2664740/,"[""You don't have to call the external basename command. Instead, you could use the following commands:"", 'Note that this solution should work in all recent (post 2004) POSIX compliant shells, (e.g. bash, dash, ksh, etc.).', 'Source: Shell Command Language 2.6.2 Parameter Expansion', 'More on bash String Manipulations:  http://tldp.org/LDP/LG/issue18/bash.html']","[<code>basename</code>, <code>$ s=/the/path/foo.txt
$ echo ""${s##*/}""
foo.txt
$ s=${s##*/}
$ echo ""${s%.txt}""
foo
$ echo ""${s%.*}""
foo
</code>, <code>bash</code>, <code>dash</code>, <code>ksh</code>]"
168,https://stackoverflow.com/questions/19306771/,"['On the command line, enter', 'or', 'To save these values to a variable, do', 'or', ""Of course, you don't need to make a variable since that is what the $USER variable is for.""]","[<code>whoami
</code>, <code>echo ""$USER""
</code>, <code>myvariable=$(whoami)
</code>, <code>myvariable=$USER
</code>, <code>$USER</code>]"
169,https://stackoverflow.com/questions/4749330/,"['The exit status is 0 (true) if the name was found, 1 (false) if not, so:', 'Here are the relevant sections of the man page for grep:', '-F, --fixed-strings', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Interpret PATTERN as a list of fixed strings, separated by  newlines, any of which is to be matched.', '-x, --line-regexp', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Select only those matches that exactly match the whole line.', '-q, --quiet, --silent', '\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Quiet; do not write anything to standard output. Exit immediately  with  zero status if any match is found, even if an error  was detected. Also see the -s or --no-messages option.', ""As rightfully pointed out in the comments, the above approach silently treats error cases as if the string was found. If you want to handle errors in a different way, you'll have to omit the -q option, and detect errors based on the exit status:"", 'Normally, the exit status is 0 if selected lines are found and 1 otherwise. But the exit status is 2 if an error occurred, unless the -q or --quiet or --silent option is used and a selected line is found. Note, however, that POSIX only mandates, for programs such as grep, cmp, and diff, that the exit status in case of error be greater than 1; it is therefore advisable, for the sake of portability, to use logic that tests for this general condition instead of strict equality with 2.', ""To suppress the normal output from grep, you can redirect it to /dev/null. Note that standard error remains undirected, so any error messages that grep might print will end up on the console as you'd probably want."", 'To handle the three cases, we can use a case statement:']","[<code>grep -Fxq ""$FILENAME"" my_list.txt
</code>, <code>if grep -Fxq ""$FILENAME"" my_list.txt
then
    # code if found
else
    # code if not found
fi
</code>, <code>grep</code>, <code>grep [options] PATTERN [FILE...]
</code>, <code>-F</code>, <code>--fixed-strings</code>, <code>-x</code>, <code>--line-regexp</code>, <code>-q</code>, <code>--quiet</code>, <code>--silent</code>, <code>-s</code>, <code>--no-messages</code>, <code>-q</code>, <code>-q</code>, <code>--quiet</code>, <code>--silent</code>, <code>grep</code>, <code>cmp</code>, <code>diff</code>, <code>grep</code>, <code>/dev/null</code>, <code>grep</code>, <code>case</code>, <code>case `grep -Fx ""$FILENAME"" ""$LIST"" &gt;/dev/null; echo $?` in
  0)
    # code if found
    ;;
  1)
    # code if not found
    ;;
  *)
    # code if an error occurred
    ;;
esac
</code>]"
170,https://stackoverflow.com/questions/3224878/,"[""Historically, Bourne shells didn't have true and false as built-in commands. true was instead simply aliased to :, and false to something like let 0."", ': is slightly better than true for portability to ancient Bourne-derived shells. As a simple example, consider having neither the ! pipeline operator nor the || list operator (as was the case for some ancient Bourne shells). This leaves the else clause of the if statement as the only means for branching based on exit status:', ""Since if requires a non-empty then clause and comments don't count as non-empty, : serves as a no-op."", 'Nowadays (that is: in a modern context) you can usually use either : or true. Both are specified by POSIX, and some find true easier to read. However there is one interesting difference: : is a so-called POSIX special built-in, whereas true is a regular built-in.', 'Special built-ins are required to be built into the shell; Regular built-ins are only ""typically"" built in, but it isn\'t strictly guaranteed. There usually shouldn\'t be a regular program named : with the function of true in PATH of most systems.', 'Probably the most crucial difference is that with special built-ins, any variable set by the built-in - even in the environment during simple command evaluation - persists after the command completes, as demonstrated here using ksh93:', 'Note that Zsh ignores this requirement, as does GNU Bash except when operating in POSIX compatibility mode, but all other major ""POSIX sh derived"" shells observe this including dash, ksh93, and mksh.', 'Another difference is that regular built-ins must be compatible with exec - demonstrated here using Bash:', 'POSIX also explicitly notes that : may be faster than true, though  this is of course an implementation-specific detail.']","[<code>true</code>, <code>false</code>, <code>true</code>, <code>:</code>, <code>false</code>, <code>let 0</code>, <code>:</code>, <code>true</code>, <code>!</code>, <code>||</code>, <code>else</code>, <code>if</code>, <code>if command; then :; else ...; fi
</code>, <code>if</code>, <code>then</code>, <code>:</code>, <code>:</code>, <code>true</code>, <code>true</code>, <code>:</code>, <code>true</code>, <code>:</code>, <code>true</code>, <code>$ unset x; ( x=hi :; echo ""$x"" )
hi
$ ( x=hi true; echo ""$x"" )

$
</code>, <code>exec</code>, <code>$ ( exec : )
-bash: exec: :: not found
$ ( exec true )
$
</code>, <code>:</code>, <code>true</code>]"
171,https://stackoverflow.com/questions/3466166/,"[""Usually, uname with its various options will tell you what environment you're running in:"", 'And, according to the very helpful schot (in the comments), uname -s gives Darwin for OSX and Linux for Linux, while my Cygwin gives CYGWIN_NT-5.1. But you may have to experiment with all sorts of different versions.', 'So the bash code to do such a check would be along the lines of:', ""Note that I'm assuming here that you're actually running within CygWin (the bash shell of it) so paths should already be correctly set up. As one commenter notes, you can run the bash program, passing the script, from cmd itself and this may result in the paths not being set up as needed."", ""If you are doing that, it's your responsibility to ensure the correct executables (i.e., the CygWin ones) are being called, possibly by modifying the path beforehand or fully specifying the executable locations (e.g., /c/cygwin/bin/uname).""]","[<code>uname</code>, <code>pax&gt; uname -a
CYGWIN_NT-5.1 IBM-L3F3936 1.5.25(0.156/4/2) 2008-06-12 19:34 i686 Cygwin

pax&gt; uname -s
CYGWIN_NT-5.1
</code>, <code>schot</code>, <code>uname -s</code>, <code>Darwin</code>, <code>Linux</code>, <code>CYGWIN_NT-5.1</code>, <code>bash</code>, <code>unameOut=""$(uname -s)""
case ""${unameOut}"" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine=""UNKNOWN:${unameOut}""
esac
echo ${machine}
</code>, <code>bash</code>, <code>bash</code>, <code>cmd</code>, <code>/c/cygwin/bin/uname</code>]"
172,https://stackoverflow.com/questions/17336915/,"['Although bash has a return statement, the only thing you can specify with it is the function\'s own exit status (a value between 0 and 255, 0 meaning ""success""). So return is not what you want.', 'You might want to convert your return statement to an echo statement - that way your function output could be captured using $() braces, which seems to be exactly what you want.', 'Here is an example:', 'Another way to get the return value (if you just want to return an integer 0-255) is $?.', 'Also, note that you can use the return value to use boolean logic like fun1 || fun2 will only run fun2 if fun1 returns a non-0 value.  The default return value is the exit value of the last statement executed within the function.']","[<code>return</code>, <code>exit</code>, <code>0</code>, <code>255</code>, <code>return</code>, <code>return</code>, <code>echo</code>, <code>$()</code>, <code>function fun1(){
  echo 34
}

function fun2(){
  local res=$(fun1)
  echo $res
}
</code>, <code>$?</code>, <code>function fun1(){
  return 34
}

function fun2(){
  fun1
  local res=$?
  echo $res
}
</code>, <code>fun1 || fun2</code>, <code>fun2</code>, <code>fun1</code>, <code>0</code>]"
173,https://stackoverflow.com/questions/20303826/,"['It depends on the Markdown rendering engine and the Markdown flavour. There is no standard for this. If you mean GitHub flavoured Markdown for example, shell should work fine. Aliases are sh, bash or zsh. You can find the list of available syntax lexers here.']","[<code>shell</code>, <code>sh</code>, <code>bash</code>, <code>zsh</code>]"
174,https://stackoverflow.com/questions/13322485/,"['Use grep to filter IP address from ifconfig: ', ""ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"", 'Or with sed:', ""ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\\.){3}[0-9]*).*/\\2/p'"", 'If you are only interested in certain interfaces, wlan0, eth0, etc. then:', 'ifconfig wlan0 | ...', 'You can alias the command in your .bashrc to create your own command called myip for instance.', 'alias myip=""ifconfig | sed -En \'s/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\\.){3}[0-9]*).*/\\2/p\'""', 'A much simpler way is hostname -I (hostname -i for older versions of hostname but see comments). However, this is on Linux only. ']","[<code>grep</code>, <code>ifconfig</code>, <code>ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'</code>, <code>sed</code>, <code>ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'</code>, <code>ifconfig wlan0 | ...</code>, <code>.bashrc</code>, <code>myip</code>, <code>alias myip=""ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'""</code>, <code>hostname -I</code>, <code>hostname -i</code>, <code>hostname</code>]"
175,https://stackoverflow.com/questions/296536/,"['Use curl --data-urlencode; from man curl:', 'This posts data, similar to the other --data options with the exception that this performs URL-encoding. To be CGI-compliant, the <data> part should begin with a name followed by a separator and a content specification.', 'Example usage:', 'See the man page for more info.', 'This requires curl 7.18.0 or newer (released January 2008). Use  curl -V to check which version you have.', 'You can as well encode the query string:']","[<code>curl --data-urlencode</code>, <code>man curl</code>, <code>--data</code>, <code>&lt;data&gt;</code>, <code>curl \
    --data-urlencode ""paramName=value"" \
    --data-urlencode ""secondParam=value"" \
    http://example.com
</code>, <code>curl -V</code>, <code>curl -G \
    --data-urlencode ""p1=value 1"" \
    --data-urlencode ""p2=value 2"" \
    http://example.com
    # http://example.com?p1=value%201&amp;p2=value%202
</code>]"
176,https://stackoverflow.com/questions/12314451/,"['The difference appears when the special parameters are quoted. Let me illustrate the differences:', 'one further example on the importance of quoting: note there are 2 spaces between ""arg"" and the number, but if I fail to quote $word:', 'and in bash, ""$@"" is the ""default"" list to iterate over:']","[<code>$ set -- ""arg  1"" ""arg  2"" ""arg  3""

$ for word in $*; do echo ""$word""; done
arg
1
arg
2
arg
3

$ for word in $@; do echo ""$word""; done
arg
1
arg
2
arg
3

$ for word in ""$*""; do echo ""$word""; done
arg  1 arg  2 arg  3

$ for word in ""$@""; do echo ""$word""; done
arg  1
arg  2
arg  3
</code>, <code>$ for word in ""$@""; do echo $word; done
arg 1
arg 2
arg 3
</code>, <code>""$@""</code>, <code>$ for word; do echo ""$word""; done
arg  1
arg  2
arg  3
</code>]"
177,https://stackoverflow.com/questions/10552711/,"['try', ""grep returns true if it finds the search target, and false if it doesn't."", 'So NOT false == true.', ""if evaluation in shells are designed to be very flexible, and many times doesn't require chains of commands (as you have written). "", 'Also, looking at your code as is, your use of the $( ... ) form of cmd-substitution is to be commended, but think about what is coming out of the process. Try echo $(cat /etc/passwd | grep ""sysa"") to see what I mean. You can take that further by using the -c (count) option to grep and then do if ! [ $(grep -c ""sysa"" /etc/passwd) -eq 0 ] ; then which works but is rather old school.', 'BUT, you could use the newest shell features (arithmetic evaluation) like', 'which also gives you the benefit of using the c-lang based comparison operators, ==,<,>,>=,<=,% and maybe a few others.', 'In this case, per a comment by  Orwellophile, the arithmetic evaluation can be pared down even further, like', 'OR', ""Finally, there is an award called the Useless Use of Cat (UUOC). :-) Some people will jump up and down and cry gothca! I'll just say that grep can take a file name on its cmd-line, so why invoke extra processes and pipe constructions when you don't have to? ;-) "", 'I hope this helps.']","[<code>if ! grep -q sysa /etc/passwd ; then
</code>, <code>grep</code>, <code>true</code>, <code>false</code>, <code>false</code>, <code>true</code>, <code>if</code>, <code>$( ... )</code>, <code>echo $(cat /etc/passwd | grep ""sysa"")</code>, <code>-c</code>, <code>if ! [ $(grep -c ""sysa"" /etc/passwd) -eq 0 ] ; then</code>, <code>if ! (( $(grep -c ""sysa"" /etc/passwd) == 0 )) ; then ...`
</code>, <code>==,&lt;,&gt;,&gt;=,&lt;=,%</code>, <code>if ! (( $(grep -c ""sysa"" /etc/passwd) )) ; then ....
</code>, <code>if (( ! $(grep -c ""sysa"" /etc/passwd) )) ; then ....
</code>, <code>Useless Use of Cat (UUOC)</code>, <code>grep</code>]"
178,https://stackoverflow.com/questions/22727107/,"['You could try something like this:', 'Explanation']","[<code>echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev
</code>, <code>rev</code>, <code>moc.elgoog.spam</code>, <code>cut</code>, <code>moc</code>, <code>com</code>]"
179,https://stackoverflow.com/questions/3474526/,"['Maybe you want set -e:', 'www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2382181:', 'This tells bash that it should exit the script if any statement returns a non-true return value. The benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier. Again, for readability you may want to use set -o errexit.']",[<code>set -e</code>]
180,https://stackoverflow.com/questions/4881930/,"['Using GNU sed:', 'The -i option does not exist in GNU sed versions older than 3.95, so you have to use it as a filter with a temporary file:', 'Of course, in that case you could also use head -n -1 instead of sed.', 'MacOS:', 'On Mac OS X (as of 10.7.4), the equivalent of the sed -i command above is']","[<code>GNU sed</code>, <code>sed -i '$ d' foo.txt
</code>, <code>-i</code>, <code>GNU sed</code>, <code>cp foo.txt foo.txt.tmp
sed '$ d' foo.txt.tmp &gt; foo.txt
rm -f foo.txt.tmp
</code>, <code>head -n -1</code>, <code>sed</code>, <code>sed -i</code>, <code>sed -i '' -e '$ d' foo.txt
</code>]"
181,https://stackoverflow.com/questions/54429210/,"[""I have conda 4.6 with a similar block of code that was added by conda. In my case, there's a conda configuration setting to disable the automatic base activation:"", ""The first time you run it, it'll create a ./condarc in your home directory with that setting to override the default."", ""This wouldn't de-clutter your .bash_profile but it's a cleaner solution without manual editing that section that conda manages.""]","[<code>conda config --set auto_activate_base false
</code>, <code>./condarc</code>, <code>.bash_profile</code>]"
182,https://stackoverflow.com/questions/216995/,"['In Bash you can do it by enabling the extglob option, like this (replace ls with cp and add the target directory, of course)', 'You can later disable extglob with']","[<code>extglob</code>, <code>ls</code>, <code>cp</code>, <code>~/foobar&gt; shopt extglob
extglob        off
~/foobar&gt; ls
abar  afoo  bbar  bfoo
~/foobar&gt; ls !(b*)
-bash: !: event not found
~/foobar&gt; shopt -s extglob  # Enables extglob
~/foobar&gt; ls !(b*)
abar  afoo
~/foobar&gt; ls !(a*)
bbar  bfoo
~/foobar&gt; ls !(*foo)
abar  bbar
</code>, <code>shopt -u extglob
</code>]"
183,https://stackoverflow.com/questions/816820/,['Where 2 is the field number of the space-delimited field you want.'],"[<code>cut -d ' ' -f 2
</code>]"
184,https://stackoverflow.com/questions/18096670/,['-z string   True if the string is null (an empty string)'],[<code>-z string</code>]
185,https://stackoverflow.com/questions/3637668/,"['There are a couple of differences that I can think of; just thoughtstreaming here, in no particular order:', 'Python & Co. are designed to be good at scripting. Bash & Co. are designed to be only good at scripting, with absolutely no compromise. IOW: Python is designed to be good both at scripting and non-scripting, Bash cares only about scripting.', 'Bash & Co. are untyped, Python & Co. are strongly typed, which means that the number 123, the string 123 and the file 123 are quite different. They are, however, not statically typed, which means they need to have different literals for those, in order to keep them apart.\nExample:', 'Python & Co. are designed to scale up to 10000, 100000, maybe even 1000000 line programs, Bash & Co. are designed to scale down to 10 character programs.', 'In Bash & Co., files, directories, file descriptors, processes are all first-class objects, in Python, only Python objects are first-class, if you want to manipulate files, directories etc., you have to wrap them in a Python object first.', 'Shell programming is basically dataflow programming. Nobody realizes that, not even the people who write shells, but it turns out that shells are quite good at that, and general-purpose languages not so much. In the general-purpose programming world, dataflow seems to be mostly viewed as a concurrency model, not so much as a programming paradigm.', ""I have the feeling that trying to address these points by bolting features or DSLs onto a general-purpose programming language doesn't work. At least, I have yet to see a convincing implementation of it. There is RuSH (Ruby shell), which tries to implement a shell in Ruby, there is rush, which is an internal DSL for shell programming in Ruby, there is Hotwire, which is a Python shell, but IMO none of those come even close to competing with Bash, Zsh, fish and friends."", 'Actually, IMHO, the best current shell is Microsoft PowerShell, which is very surprising considering that for several decades now, Microsoft has continually had the worst shells evar. I mean, COMMAND.COM? Really? (Unfortunately, they still have a crappy terminal. It\'s still the ""command prompt"" that has been around since, what? Windows 3.0?)', 'PowerShell was basically created by ignoring everything Microsoft has ever done (COMMAND.COM, CMD.EXE, VBScript, JScript) and instead starting from the Unix shell, then removing all backwards-compatibility cruft (like backticks for command substitution) and massaging it a bit to make it more Windows-friendly (like using the now unused backtick as an escape character instead of the backslash which is the path component separator character in Windows). After that, is when the magic happens.', 'They address problem 1 and 3 from above, by basically making the opposite choice compared to Python. Python cares about large programs first, scripting second. Bash cares only about scripting. PowerShell cares about scripting first, large programs second. A defining moment for me was watching a video of an interview with Jeffrey Snover (PowerShell\'s lead designer), when the interviewer asked him how big of a program one could write with PowerShell and Snover answered without missing a beat: ""80 characters."" At that moment I realized that this is finally a guy at Microsoft who ""gets"" shell programming (probably related to the fact that PowerShell was neither developed by Microsoft\'s programming language group (i.e. lambda-calculus math nerds) nor the OS group (kernel nerds) but rather the server group (i.e. sysadmins who actually use shells)), and that I should probably take a serious look at PowerShell.', ""Number 2 is solved by having arguments be statically typed. So, you can write just 123 and PowerShell knows whether it is a string or a number or a file, because the cmdlet (which is what shell commands are called in PowerShell) declares the types of its arguments to the shell. This has pretty deep ramifications: unlike Unix, where each command is responsible for parsing its own arguments (the shell basically passes the arguments as an array of strings), argument parsing in PowerShell is done by the shell. The cmdlets specify all their options and flags and arguments, as well as their types and names and documentation(!) to the shell, which then can perform argument parsing, tab completion, IntelliSense, inline documentation popups etc. in one centralized place. (This is not revolutionary, and the PowerShell designers acknowledge shells like the DIGITAL Command Language (DCL) and the IBM OS/400 Command Language (CL) as prior art. For anyone who has ever used an AS/400, this should sound familiar. In OS/400, you can write a shell command and if you don't know the syntax of certain arguments, you can simply leave them out and hit F4, which will bring a menu (similar to an HTML form) with labelled fields, dropdown, help texts etc. This is only possible because the OS knows about all the possible arguments and their types.) In the Unix shell, this information is often duplicated three times: in the argument parsing code in the command itself, in the bash-completion script for tab-completion and in the manpage."", 'Number 4 is solved by the fact that PowerShell operates on strongly typed objects, which includes stuff like files, processes, folders and so on.', 'Number 5 is particularly interesting, because PowerShell is the only shell I know of, where the people who wrote it were actually aware of the fact that shells are essentially dataflow engines and deliberately implemented it as a dataflow engine.', 'Another nice thing about PowerShell are the naming conventions: all cmdlets are named Action-Object and moreover, there are also standardized names for specific actions and specific objects. (Again, this should sound familar to OS/400 users.) For example, everything which is related to receiving some information is called Get-Foo. And everything operating on (sub-)objects is called Bar-ChildItem. So, the equivalent to ls is Get-ChildItem (although PowerShell also provides builtin aliases ls and dir\xa0– in fact, whenever it makes sense, they provide both Unix and CMD.EXE aliases as well as abbreviations (gci in this case)).', ""But the killer feature IMO is the strongly typed object pipelines. While PowerShell is derived from the Unix shell, there is one very important distinction: in Unix, all communication (both via pipes and redirections as well as via command arguments) is done with untyped, unstructured strings. In PowerShell, it's all strongly typed, structured objects. This is so incredibly powerful that I seriously wonder why noone else has thought of it. (Well, they have, but they never became popular.) In my shell scripts, I estimate that up to one third of the commands is only there to act as an adapter between two other commands that don't agree on a common textual format. Many of those adapters go away in PowerShell, because the cmdlets exchange structured objects instead of unstructured text. And if you look inside the commands, then they pretty much consist of three stages: parse the textual input into an internal object representation, manipulate the objects, convert them back into text. Again, the first and third stage basically go away, because the data already comes in as objects."", 'However, the designers have taken great care to preserve the dynamicity and flexibility of shell scripting through what they call an Adaptive Type System. ', ""Anyway, I don't want to turn this into a PowerShell commercial. There are plenty of things that are not so great about PowerShell, although most of those have to do either with Windows or with the specific implementation, and not so much with the concepts. (E.g. the fact that it is implemented in .NET means that the very first time you start up the shell can take up to several seconds if the .NET framework is not already in the filesystem cache due to some other application that needs it. Considering that you often use the shell for well under a second, that is completely unacceptable.)"", ""The most important point I want to make is that if you want to look at existing work in scripting languages and shells, you shouldn't stop at Unix and the Ruby/Python/Perl/PHP family. For example, Tcl was already mentioned. Rexx would be another scripting language. Emacs Lisp would be yet another. And in the shell realm there are some of the already mentioned mainframe/midrange shells such as the OS/400 command line and DCL. Also, Plan9's rc.""]","[<code>123</code>, <code>123</code>, <code>123</code>, <code>                | Ruby             | Bash    
-----------------------------------------
number          | 123              | 123
string          | '123'            | 123
regexp          | /123/            | 123
file            | File.open('123') | 123
file descriptor | IO.open('123')   | 123
URI             | URI.parse('123') | 123
command         | `123`            | 123
</code>, <code>COMMAND.COM</code>, <code>COMMAND.COM</code>, <code>CMD.EXE</code>, <code>123</code>, <code>bash-completion</code>, <code>Action-Object</code>, <code>Get-Foo</code>, <code>Bar-ChildItem</code>, <code>ls</code>, <code>Get-ChildItem</code>, <code>ls</code>, <code>dir</code>, <code>CMD.EXE</code>, <code>gci</code>]"
186,https://stackoverflow.com/questions/16661982/,"['You can do:', 'which will give you the size of your target directory.', 'If you want a brief output, du -hcs your_directory is nice.']","[<code>du -h your_directory
</code>, <code>du -hcs your_directory</code>]"
187,https://stackoverflow.com/questions/525872/,"[""will echo 'space tab space newline' (-e means 'enable interpretation of backslash escapes'):""]","[<code>echo -e ' \t '
</code>, <code>-e</code>, <code>$ echo -e ' \t ' | hexdump -C
00000000  20 09 20 0a                                       | . .|
</code>]"
188,https://stackoverflow.com/questions/13296863/,['wait waits for a process to finish; sleep sleeps for a certain amount of seconds.'],"[<code>wait</code>, <code>sleep</code>]"
189,https://stackoverflow.com/questions/3371294/,"['You can use $_ or !$ to recall the last argument of the previous command.', 'Also Alt + . can be used to recall the last argument of any of the previous commands.']","[<code>$_</code>, <code>!$</code>, <code>Alt + .</code>]"
190,https://stackoverflow.com/questions/3826425/,"['Classic technique (escape metacharacters):', ""I've enclosed the references to $g in double quotes; that's good practice, in general.  Strictly, the parentheses aren't needed because the precedence of -a and -o makes it correct even without them."", ""Note that the -a and -o operators are part of the POSIX specification for test, aka [, mainly for backwards compatibility (since they were a part of test in 7th Edition UNIX, for example), but they are explicitly marked as 'obsolescent' by POSIX.  Bash (see conditional expressions) seems to preempt the classic and POSIX meanings for -a and -o with its own alternative operators that take arguments."", 'With some care, you can use the more modern [[ operator, but be aware that the versions in Bash and Korn Shell (for example) need not be identical.', 'Example run, using Bash 3.2.57 on Mac OS X:', ""You don't need to quote the variables in [[ as you do with [ because it is not a separate command in the same way that [ is."", ""Isn't it a classic question?"", 'I would have thought so.  However, there is another alternative, namely:', ""Indeed, if you read the 'portable shell' guidelines for the autoconf tool or related packages, this notation — using '||' and '&&' — is what they recommend.  I suppose you could even go so far as:"", ""Where the actions are as trivial as echoing, this isn't bad.  When the action block to be repeated is multiple lines, the repetition is too painful and one of the earlier versions is preferable — or you need to wrap the actions into a function that is invoked in the different then blocks.""]","[<code>if [ \( ""$g"" -eq 1 -a ""$c"" = ""123"" \) -o \( ""$g"" -eq 2 -a ""$c"" = ""456"" \) ]
then echo abc
else echo efg
fi
</code>, <code>$g</code>, <code>-a</code>, <code>-o</code>, <code>-a</code>, <code>-o</code>, <code>test</code>, <code>[</code>, <code>test</code>, <code>-a</code>, <code>-o</code>, <code>[[</code>, <code>for g in 1 2 3
do
    for c in 123 456 789
    do
        if [[ ( ""$g"" -eq 1 &amp;&amp; ""$c"" = ""123"" ) || ( ""$g"" -eq 2 &amp;&amp; ""$c"" = ""456"" ) ]]
        then echo ""g = $g; c = $c; true""
        else echo ""g = $g; c = $c; false""
        fi
    done
done
</code>, <code>g = 1; c = 123; true
g = 1; c = 456; false
g = 1; c = 789; false
g = 2; c = 123; false
g = 2; c = 456; true
g = 2; c = 789; false
g = 3; c = 123; false
g = 3; c = 456; false
g = 3; c = 789; false
</code>, <code>[[</code>, <code>[</code>, <code>[</code>, <code>if [ ""$g"" -eq 1 -a ""$c"" = ""123"" ] || [ ""$g"" -eq 2 -a ""$c"" = ""456"" ]
then echo abc
else echo efg
fi
</code>, <code>autoconf</code>, <code>||</code>, <code>&amp;&amp;</code>, <code>if [ ""$g"" -eq 1 ] &amp;&amp; [ ""$c"" = ""123"" ]
then echo abc
elif [ ""$g"" -eq 2 ] &amp;&amp; [ ""$c"" = ""456"" ]
then echo abc
else echo efg
fi
</code>, <code>then</code>]"
191,https://stackoverflow.com/questions/6958689/,"['...or, without a Useless Use Of cat:', 'To explain some of the finer points:', 'The use of ""$arg"" instead of % (and the absence of -I in the xargs command line) is for security reasons: Passing data on sh\'s command-line argument list instead of substituting it into code prevents content that data might contain (such as $(rm -rf ~), to take a particularly malicious example) from being executed as code.', ""Similarly, the use of -d $'\\n' is a GNU extension which causes xargs to treat each line of the input file as a separate data item. Either this or -0 (which expects NULs instead of newlines) is necessary to prevent xargs from trying to apply shell-like (but not quite shell-compatible) parsing to the stream it reads. (If you don't have GNU xargs, you can use tr '\\n' '\\0' <a.txt | xargs -0 ... to get line-oriented reading without -d)."", 'The _ is a placeholder for $0, such that other data values added by xargs become $1 and onward, which happens to be the default set of values a for loop iterates over.']","[<code>cat a.txt | xargs -d $'\n' sh -c 'for arg do command1 ""$arg""; command2 ""$arg""; ...; done' _
</code>, <code>&lt;a.txt xargs -d $'\n' sh -c 'for arg do command1 ""$arg""; command2 ""$arg""; ...; done' _
</code>, <code>""$arg""</code>, <code>%</code>, <code>-I</code>, <code>xargs</code>, <code>sh</code>, <code>$(rm -rf ~)</code>, <code>-d $'\n'</code>, <code>xargs</code>, <code>-0</code>, <code>tr '\n' '\0' &lt;a.txt | xargs -0 ...</code>, <code>-d</code>, <code>_</code>, <code>$0</code>, <code>xargs</code>, <code>$1</code>, <code>for</code>]"
192,https://stackoverflow.com/questions/4247068/,"['If you use the -i option you need to provide an extension for your backups.', 'If you have:', ""The command (note the lack of space between -i and '' and the -e to make it work on new versions of Mac and on GNU):"", 'Create 2 backup files like:', 'There is no portable way to avoid making backup files because it is impossible to find a mix of sed commands that works on all cases:', ""Note Given that there isn't a sed command working on all platforms, you can try to use another command to achieve the same result."", ""E.g., perl -i -pe's/old_link/new_link/g' *""]","[<code>-i</code>, <code>File1.txt
File2.cfg
</code>, <code>-i</code>, <code>''</code>, <code>-e</code>, <code>sed -i'.original' -e 's/old_link/new_link/g' *
</code>, <code>File1.txt.original
File2.cfg.original
</code>, <code>sed -i -e ...</code>, <code>-e</code>, <code>sed -i'' -e ...</code>, <code>sed -i '' -e ...</code>, <code>perl -i -pe's/old_link/new_link/g' *</code>]"
193,https://stackoverflow.com/questions/3737740/,['Or as a one-liner for those that want to copy and paste easily:'],"[<code>for run in {1..10}; do
  command
done
</code>, <code>for run in {1..10}; do command; done
</code>]"
194,https://stackoverflow.com/questions/16618071/,"['Is there any way to access to the $VAR by just executing export.bash without sourcing it ?', 'Quick answer: No.', 'But there are several possible workarounds.', ""The most obvious one, which you've already mentioned, is to use source or . to execute the script in the context of the calling shell:"", 'Another way is to have the script, rather than setting an environment variable, print commands that will set the environment variable:', 'A third approach is to have a script that sets your environment variable(s) internally and then invokes a specified command with that environment:', ""This last approach can be quite useful, though it's inconvenient for interactive use since it doesn't give you the settings in your current shell (with all the other settings and history you've built up).""]","[<code>$VAR</code>, <code>export.bash</code>, <code>source</code>, <code>.</code>, <code>$ cat set-vars1.sh 
export FOO=BAR
$ . set-vars1.sh 
$ echo $FOO
BAR
</code>, <code>$ cat set-vars2.sh
#!/bin/bash
echo export FOO=BAR
$ eval ""$(./set-vars2.sh)""
$ echo ""$FOO""
BAR
</code>, <code>$ cat set-vars3.sh
#!/bin/bash
export FOO=BAR
exec ""$@""
$ ./set-vars3.sh printenv | grep FOO
FOO=BAR
</code>]"
195,https://stackoverflow.com/questions/10523415/,"['The following bash code will pass $file to command where $file will represent every file in /dir', 'Example']","[<code>for file in /dir/*
do
  cmd [option] ""$file"" &gt;&gt; results.out
done
</code>, <code>el@defiant ~/foo $ touch foo.txt bar.txt baz.txt
el@defiant ~/foo $ for i in *.txt; do echo ""hello $i""; done
hello bar.txt
hello baz.txt
hello foo.txt
</code>]"
196,https://stackoverflow.com/questions/3569997/,"['You can use the file utility to give you an indication of the type of line endings.', 'Unix:', '""DOS"":', 'To convert from ""DOS"" to Unix:', 'To convert from Unix to ""DOS"":', ""Converting an already converted file has no effect so it's safe to run blindly (i.e. without testing the format first) although the usual disclaimers apply, as always.""]","[<code>file</code>, <code>$ file testfile1.txt
testfile.txt: ASCII text
</code>, <code>$ file testfile2.txt
testfile2.txt: ASCII text, with CRLF line terminators
</code>, <code>$ dos2unix testfile2.txt
</code>, <code>$ unix2dos testfile1.txt
</code>]"
197,https://stackoverflow.com/questions/19075671/,"['may be done in several ways. Some are better than others. This should cover most of them.  If you have a comment, please leave below.\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0v1.5', 'Use the -v option: (P.S. use a space after -v or it will be less portable. E.g., awk -v var= not awk -vvar=)', 'This should be compatible with most awk, and the variable is available in the BEGIN block as well:', 'If you have multiple variables:', 'Warning.  As Ed Morton writes, escape sequences will be interpreted so \\t becomes a real tab and not \\t if that is what you search for. Can be solved by using ENVIRON[] or access it via ARGV[]', 'PS If you like three vertical bar as separator |||, it can\'t be escaped, so use -F""[|][|][|]""', 'Example on getting data from a program/function inn to awk (here date is used)', 'Here we get the variable after the awk code. This will work fine as long as you do not need the variable in the BEGIN block:', 'awk \'{print a,b,$0}\' a=""$var1"" b=""$var2"" file', ""awk 'some code' FS=',' file1.txt FS=';' file2.ext"", 'echo ""input data"" | awk \'BEGIN {print var}\' var=""${variable}""', 'Variable can also be added to awk using a here-string from shells that support them (including Bash):', 'This is the same as:', 'P.S. this treats the variable as a file input.', 'As TrueY writes, you can use the ENVIRON to print Environment Variables.\nSetting a variable before running AWK, you can print it out like this:', 'As Steven Penny writes, you can use ARGV to get the data into awk:', 'To get the data into the code itself, not just the BEGIN:', ""You can use a variable within the awk code, but it's messy and hard to read, and as Charles Duffy points out, this version may also be a victim of code injection.  If someone adds bad stuff to the variable, it will be executed as part of the awk code."", 'This works by extracting the variable within the code, so it becomes a part of it.', 'If you want to make an awk that changes dynamically with use of variables, you can do it this way, but DO NOT use it for normal variables.', 'Here is an example of code injection:', 'You can add lots of commands to awk this way.  Even make it crash with non valid commands.', 'It\'s always good to double quote variable ""$variable""\nIf not, multiple lines will be added as a long single line.', 'Example:', 'Other errors you can get without double quote:', 'And with single quote, it does not expand the value of the variable:', 'Read this faq.']","[<code>awk</code>, <code>-v</code>, <code>-v</code>, <code>-v</code>, <code>awk -v var=</code>, <code>awk -vvar=</code>, <code>variable=""line one\nline two""
awk -v var=""$variable"" 'BEGIN {print var}'
line one
line two
</code>, <code>awk</code>, <code>BEGIN</code>, <code>awk -v a=""$var1"" -v b=""$var2"" 'BEGIN {print a,b}'
</code>, <code>\t</code>, <code>tab</code>, <code>\t</code>, <code>ENVIRON[]</code>, <code>ARGV[]</code>, <code>|||</code>, <code>-F""[|][|][|]""</code>, <code>awk</code>, <code>awk -v time=""$(date +""%F %H:%M"" -d '-1 minute')"" 'BEGIN {print time}'
</code>, <code>awk</code>, <code>BEGIN</code>, <code>variable=""line one\nline two""
echo ""input data"" | awk '{print var}' var=""${variable}""
or
awk '{print var}' var=""${variable}"" file
</code>, <code>awk '{print a,b,$0}' a=""$var1"" b=""$var2"" file</code>, <code>FS</code>, <code>awk 'some code' FS=',' file1.txt FS=';' file2.ext</code>, <code>BEGIN</code>, <code>echo ""input data"" | awk 'BEGIN {print var}' var=""${variable}""</code>, <code>awk</code>, <code>awk '{print $0}' &lt;&lt;&lt; ""$variable""
test
</code>, <code>printf '%s' ""$variable"" | awk '{print $0}'
</code>, <code>ENVIRON</code>, <code>ENVIRON</code>, <code>X=MyVar
awk 'BEGIN{print ENVIRON[""X""],ENVIRON[""SHELL""]}'
MyVar /bin/bash
</code>, <code>ARGV</code>, <code>ARGV</code>, <code>v=""my data""
awk 'BEGIN {print ARGV[1]}' ""$v""
my data
</code>, <code>v=""my data""
echo ""test"" | awk 'BEGIN{var=ARGV[1];ARGV[1]=""""} {print var, $0}' ""$v""
my data test
</code>, <code>awk</code>, <code>Charles Duffy</code>, <code>awk</code>, <code>awk</code>, <code>variable=""line one\nline two""
awk 'BEGIN {print ""'""$variable""'""}'
line one
line two
</code>, <code>variable='line one\nline two"" ; for (i=1;i&lt;=1000;++i) print i""'
awk 'BEGIN {print ""'""$variable""'""}'
line one
line two
1
2
3
.
.
1000
</code>, <code>awk</code>, <code>""$variable""</code>, <code>var=""Line one
This is line two""

echo $var
Line one This is line two

echo ""$var""
Line one
This is line two
</code>, <code>variable=""line one\nline two""
awk -v var=$variable 'BEGIN {print var}'
awk: cmd. line:1: one\nline
awk: cmd. line:1:    ^ backslash not last character on line
awk: cmd. line:1: one\nline
awk: cmd. line:1:    ^ syntax error
</code>, <code>awk -v var='$variable' 'BEGIN {print var}'
$variable
</code>]"
198,https://stackoverflow.com/questions/2150614/,"['This appends the output to all.txt', 'This overwrites all.txt']","[<code>cat *.txt &gt;&gt; all.txt
</code>, <code>cat *.txt &gt; all.txt
</code>]"
199,https://stackoverflow.com/questions/13046192/,"['Try linux command chsh.', 'The detailed command is chsh -s /bin/bash.\nIt will prompt you to enter your password.\nYour default login shell is /bin/bash now. You must log out and log back in to see this change.', 'The following is quoted from man page:', 'The chsh command changes the user login shell. This determines the\n  name\n         of the users initial login command. A normal user may only change the\n         login shell for her own account, the superuser may change the login\n         shell for any account', 'This command will change the default login shell permanently.', 'Note: If your user account is remote such as on Kerberos authentication (e.g. Enterprise RHEL) then you will not be able to use chsh. ']","[<code>chsh</code>, <code>chsh -s /bin/bash</code>, <code>/bin/bash</code>, <code>chsh</code>]"
200,https://stackoverflow.com/questions/18681595/,"['In the above example, tar will change to directory /var/www/site1 before doing its thing because the option -C /var/www/site1 was given.', 'From man tar:']","[<code>tar -cjf site1.tar.bz2 -C /var/www/site1 .
</code>, <code>/var/www/site1</code>, <code>-C /var/www/site1</code>, <code>man tar</code>, <code>OTHER OPTIONS

  -C, --directory DIR
       change to directory DIR
</code>]"
201,https://stackoverflow.com/questions/2893954/,"['Create a .pgpass file in the home directory of the account that pg_dump will run as.', 'The format is:', ""Then, set the file's mode to 0600. Otherwise, it will be ignored."", 'See the Postgresql documentation libpq-pgpass for more details.']","[<code>.pgpass</code>, <code>pg_dump</code>, <code>hostname:port:database:username:password
</code>, <code>0600</code>, <code>chmod 600 ~/.pgpass
</code>]"
202,https://stackoverflow.com/questions/16548528/,"['date +%s%N returns the number of seconds + current nanoseconds.', 'Therefore, echo $(($(date +%s%N)/1000000)) is what you need.', 'Example:', ""date +%s returns the number of seconds since the epoch, if that's useful.""]","[<code>date +%s%N</code>, <code>echo $(($(date +%s%N)/1000000))</code>, <code>$ echo $(($(date +%s%N)/1000000))
1535546718115
</code>, <code>date +%s</code>]"
203,https://stackoverflow.com/questions/4143252/,"['Try:', 'From the tr man page:']","[<code>tr -s ' ' &lt;text.txt | cut -d ' ' -f4
</code>, <code>tr</code>]"
204,https://stackoverflow.com/questions/617182/,"['The following sends standard output to the null device (bit bucket).', 'And if you also want error messages to be sent there, use one of (the first may not work in all shells):', 'And, if you want to record the messages, but not see them, replace /dev/null with an actual file, such as:', 'For completeness, under Windows cmd.exe (where ""nul"" is the equivalent of ""/dev/null""), it is:']","[<code>scriptname &gt;/dev/null
</code>, <code>scriptname &amp;&gt;/dev/null
scriptname &gt;/dev/null 2&gt;&amp;1
scriptname &gt;/dev/null 2&gt;/dev/null
</code>, <code>/dev/null</code>, <code>scriptname &amp;&gt;scriptname.out
</code>, <code>scriptname &gt;nul 2&gt;nul
</code>]"
205,https://stackoverflow.com/questions/29142/,"[""I had this problem in a program I wrote a year ago -- turns out the answer is rather complicated. You'll need to use nohup as well as output redirection, as explained in the wikipedia artcle on nohup, copied here for your convenience. "", 'Nohuping backgrounded jobs is for\n  example useful when logged in via SSH,\n  since backgrounded jobs can cause the\n  shell to hang on logout due to a race\n  condition [2]. This problem can also\n  be overcome by redirecting all three\n  I/O streams:']","[<code>nohup myprogram &gt; foo.out 2&gt; foo.err &lt; /dev/null &amp;
</code>]"
206,https://stackoverflow.com/questions/9574089/,"['You can emulate the basic functionality with the shell loop:', 'That will loop forever, clear the screen, run your command, and wait two seconds - the basic watch your_command implementation.', 'You can take this a step further and create a watch.sh script that can accept your_command and sleep_duration as parameters:']","[<code>while :; do clear; your_command; sleep 2; done
</code>, <code>watch your_command</code>, <code>watch.sh</code>, <code>your_command</code>, <code>sleep_duration</code>, <code>#!/bin/bash
# usage: watch.sh &lt;your_command&gt; &lt;sleep_duration&gt;

while :; 
  do 
  clear
  date
  $1
  sleep $2
done
</code>]"
207,https://stackoverflow.com/questions/3162385/,"['You can use string operators:', ""This trims everything from the front until a ':', greedily.""]","[<code>$ foo=1:2:3:4:5
$ echo ${foo##*:}
5
</code>, <code>${foo  &lt;-- from variable foo
  ##   &lt;-- greedy front trim
  *    &lt;-- matches anything
  :    &lt;-- until the last ':'
 }
</code>]"
208,https://stackoverflow.com/questions/1765311/,"['xxd does both binary and hexadecimal.', 'bin:', 'hex:']","[<code>xxd</code>, <code>xxd -b file
</code>, <code>xxd file
</code>]"
209,https://stackoverflow.com/questions/13593771/,"['Watch every 5 seconds ...', 'watch -n 5 ls -l', 'If you wish to have visual confirmation of changes, append --differences prior to the ls command.', ""According to the OSX man page, there's also"", 'The --cumulative option makes highlighting ""sticky"", presenting a\n  running display of  all  positions  that  have  ever changed.  The -t\n  or --no-title option turns off the header showing the interval,\n  command, and current time at the top of the display, as well as the\n  following blank line.', 'Linux/Unix man page can be found here ']","[<code>watch -n 5 ls -l</code>, <code>--differences</code>, <code>ls</code>]"
210,https://stackoverflow.com/questions/7739645/,"[""For specific versions, such as mysql-server-5.6, you'll need to specify the version in like this:"", 'For mysql-community-server, the keys are slightly different:', 'Replace your_password with the desired root password. (it seems your_password can also be left blank for a blank root password.)', ""If your shell doesn't support here-strings (zsh, ksh93 and bash support them), use:""]","[<code>sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password your_password'
sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password your_password'
sudo apt-get -y install mysql-server
</code>, <code>mysql-server-5.6</code>, <code>sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server-5.6 mysql-server/root_password password your_password'
sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server-5.6 mysql-server/root_password_again password your_password'
sudo apt-get -y install mysql-server-5.6
</code>, <code>sudo debconf-set-selections &lt;&lt;&lt; 'mysql-community-server mysql-community-server/root-pass password your_password'
sudo debconf-set-selections &lt;&lt;&lt; 'mysql-community-server mysql-community-server/re-root-pass password your_password'
sudo apt-get -y install mysql-community-server
</code>, <code>echo ... | sudo debconf-set-selections 
</code>]"
211,https://stackoverflow.com/questions/6331075/,"['Because on Unix, usually, the current directory is not in $PATH.', 'When you type a command the shell looks up a list of directories, as specified by the PATH variable. The current directory is not in that list.', 'The reason for not having the current directory on that list is security.', ""Let's say you're root and go into another user's directory and type sl instead of ls. If the current directory is in PATH, the shell will try to execute the sl program in that directory (since there is no other sl program). That sl program might be malicious."", 'It works with ./ because POSIX specifies that a command name that contain a / will be used as a filename directly, suppressing a search in $PATH. You could have used full path for the exact same effect, but ./ is shorter and easier to write.', 'EDIT', 'That sl part was just an example. The directories in PATH are searched sequentially and when a match is made that program is executed. So, depending on how PATH looks, typing a normal command may or may not be enough to run the program in the current directory.']","[<code>$PATH</code>, <code>PATH</code>, <code>sl</code>, <code>ls</code>, <code>PATH</code>, <code>sl</code>, <code>sl</code>, <code>sl</code>, <code>./</code>, <code>/</code>, <code>$PATH</code>, <code>./</code>, <code>sl</code>, <code>PATH</code>, <code>PATH</code>]"
212,https://stackoverflow.com/questions/7069682/,"['This is the idiom I usually use:', 'Key points are:']","[<code>while test $# -gt 0; do
  case ""$1"" in
    -h|--help)
      echo ""$package - attempt to capture frames""
      echo "" ""
      echo ""$package [options] application [arguments]""
      echo "" ""
      echo ""options:""
      echo ""-h, --help                show brief help""
      echo ""-a, --action=ACTION       specify an action to use""
      echo ""-o, --output-dir=DIR      specify a directory to store output in""
      exit 0
      ;;
    -a)
      shift
      if test $# -gt 0; then
        export PROCESS=$1
      else
        echo ""no process specified""
        exit 1
      fi
      shift
      ;;
    --action*)
      export PROCESS=`echo $1 | sed -e 's/^[^=]*=//g'`
      shift
      ;;
    -o)
      shift
      if test $# -gt 0; then
        export OUTPUT=$1
      else
        echo ""no output dir specified""
        exit 1
      fi
      shift
      ;;
    --output-dir*)
      export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
      shift
      ;;
    *)
      break
      ;;
  esac
done
</code>, <code>$#</code>]"
213,https://stackoverflow.com/questions/36273665/,"[""set -x enables a mode of the shell where all executed commands are printed to the terminal.  In your case it's clearly used for debugging, which is a typical use case for set -x: printing every command as it is executed may help you to visualize the control flow of the script if it is not functioning as expected."", 'set +x disables it.']","[<code>set -x</code>, <code>set -x</code>, <code>set +x</code>]"
214,https://stackoverflow.com/questions/7526971/,"['If you want to log to the same file:', 'If you want different files:']","[<code>command1 &gt;&gt; log_file 2&gt;&amp;1
</code>, <code>command1 &gt;&gt; log_file 2&gt;&gt; err_file
</code>]"
215,https://stackoverflow.com/questions/18215973/,"['A few answers have been given, but it appears that the best method is to use is:', 'This appears to be more reliable than the other methods, and it seems that it return an id of 0 even if the script is run through sudo. ']","[<code>id -u</code>, <code>sudo</code>]"
216,https://stackoverflow.com/questions/2871181/,"['would replace each occurrence of x, y, or z with _, giving A__BC___DEF__LMN in your example.', 'would replace repeating occurrences of x, y, or z with a single _, giving A_BC_DEF_LMN in your example.']","[<code>echo ""$string"" | tr xyz _
</code>, <code>x</code>, <code>y</code>, <code>z</code>, <code>_</code>, <code>A__BC___DEF__LMN</code>, <code>echo ""$string"" | sed -r 's/[xyz]+/_/g'
</code>, <code>x</code>, <code>y</code>, <code>z</code>, <code>_</code>, <code>A_BC_DEF_LMN</code>]"
217,https://stackoverflow.com/questions/20751352/,"['If your MySQL client/server version is a 5.6.x a way to avoid the WARNING message are using the mysql_config_editor tools:', 'Then you can use in your shell script:', 'Instead of:']","[<code>mysql_config_editor set --login-path=local --host=localhost --user=username --password
</code>, <code>mysql --login-path=local  -e ""statement""
</code>, <code>mysql -u username -p pass -e ""statement""
</code>]"
218,https://stackoverflow.com/questions/11616835/,"['When all else fails in Cygwin...', 'Try running the dos2unix command on the file in question.', 'It might help when you see error messages like this: ', ""-bash: '\\r': command not found"", 'Windows style newline characters can cause issues in Cygwin.', 'The dos2unix command modifies newline characters so they are Unix / Cygwin compatible.', 'CAUTION: the dos2unix command modifies files in place, so take precaution if necessary.', 'If you need to keep the original file, you should back it up first.', 'Note for Mac users: The dos2unix command does not exist on Mac OS X.', 'Check out this answer for a variety of solutions using different tools.', 'There is also a unix2dos command that does the reverse:', ""It modifies Unix newline characters so they're compatible with Windows tools."", 'If you open a file with Notepad and all the lines run together, try unix2dos filename.']","[<code>dos2unix</code>, <code>-bash: '\r': command not found</code>, <code>dos2unix</code>, <code>dos2unix</code>, <code>unix2dos</code>, <code>unix2dos filename</code>]"
219,https://stackoverflow.com/questions/4009412/,"['Just as M-. (meta-dot or esc-dot or alt-dot) is the readline function yank-last-arg, M-C-y (meta-control-y or esc-ctrl-y or ctrl-alt-y) is the readline function yank-nth-arg. Without specifying n, it yanks the first argument of the previous command.', 'To specify an argument, press Escape and a number or hold Alt and press a number. You can do Alt--to begin specifying a negative number then release Alt and press the digit (this will count from the end of the list of arguments.', 'Example:', 'Enter the following command', 'Now at the next prompt, type echo (with a following space), then', ""Press Alt-Ctrl-y and you'll now see:"", 'without pressing Enter yet, do the following', 'Press Alt-3 Alt-Ctrl-y', 'Press Alt-- 2 Alt-Ctrl-y', 'Now you will see:', 'By the way, you could have put the echo on the line by selecting argument 0:', 'Press Alt-0 Alt-Ctrl-y', 'Edit:', 'To answer the question you added to your original:', 'You can press Alt-0 then repeatedly press Alt-. to step through the previous commands (arg 0). Similarly Alt-- then repeating Alt-. would allow you to step through the previous next-to-last arguments.', 'If there is no appropriate argument on a particular line in history, the bell will be rung.', 'If there is a particular combination you use frequently, you can define a macro so one keystroke will perform it. This example will recall the second argument from previous commands by pressing Alt-Shift-Y. You could choose any available keystroke you prefer instead of this one. You can press it repeatedly to step through previous ones.', 'To try it out, enter the macro at a Bash prompt:', 'To make it persistent, add this line to your ~/.inputrc file:', ""Unfortunately, this doesn't seem to work for arg 0 or negative argument numbers.""]","[<code>M-.</code>, <code>yank-last-arg</code>, <code>M-C-y</code>, <code>yank-nth-arg</code>, <code>n</code>, <code>$ echo a b c d e f g
a b c d e f g
</code>, <code>echo</code>, <code>$ echo a
</code>, <code>$ echo ace
</code>, <code>echo</code>, <code>bind '""\eY"": ""\e2\e.""'
</code>, <code>~/.inputrc</code>, <code>""\eY"": ""\e2\e.""
</code>]"
220,https://stackoverflow.com/questions/20635472/,"['RUN /bin/bash -c ""source /usr/local/bin/virtualenvwrapper.sh""']","[<code>RUN /bin/bash -c ""source /usr/local/bin/virtualenvwrapper.sh""</code>]"
221,https://stackoverflow.com/questions/6442364/,"['Follow this:', 'save somewhere (for example you can make an Applications folder in your HOME, you will get an your_name.app)', 'go to System Preferences -> Accounts -> Login items', 'EDIT:', 'I\'ve recently earned a ""Good answer"" badge for this answer. While my solution is simple and working, the cleanest way to run any program or shell script at login time is described in @trisweb\'s answer, unless, you want interactivity.', 'With automator solution you can do things like next:\n', 'so, asking to run a script or quit the app, asking passwords, running other automator workflows at login time, conditionally run applications at login time and so on...']","[<code>Automator.app</code>, <code>Application</code>, <code>Show library</code>, <code>Run shell script</code>, <code>Actions/Utilities</code>, <code>Applications</code>, <code>your_name.app</code>, <code>System Preferences</code>, <code>Accounts</code>, <code>Login items</code>]"
222,https://stackoverflow.com/questions/687948/,"['I think this is precisely what you are asking for:', 'http://www.bashcookbook.com/bashinfo/source/bash-4.0/examples/scripts/timeout3']","[<code>#!/bin/bash
#
# The Bash shell script executes a command with a time-out.
# Upon time-out expiration SIGTERM (15) is sent to the process. If the signal
# is blocked, then the subsequent SIGKILL (9) terminates it.
#
# Based on the Bash documentation example.

# Hello Chet,
# please find attached a ""little easier""  :-)  to comprehend
# time-out example.  If you find it suitable, feel free to include
# anywhere: the very same logic as in the original examples/scripts, a
# little more transparent implementation to my taste.
#
# Dmitry V Golovashkin &lt;Dmitry.Golovashkin@sas.com&gt;

scriptName=""${0##*/}""

declare -i DEFAULT_TIMEOUT=9
declare -i DEFAULT_INTERVAL=1
declare -i DEFAULT_DELAY=1

# Timeout.
declare -i timeout=DEFAULT_TIMEOUT
# Interval between checks if the process is still alive.
declare -i interval=DEFAULT_INTERVAL
# Delay between posting the SIGTERM signal and destroying the process by SIGKILL.
declare -i delay=DEFAULT_DELAY

function printUsage() {
    cat &lt;&lt;EOF

Synopsis
    $scriptName [-t timeout] [-i interval] [-d delay] command
    Execute a command with a time-out.
    Upon time-out expiration SIGTERM (15) is sent to the process. If SIGTERM
    signal is blocked, then the subsequent SIGKILL (9) terminates it.

    -t timeout
        Number of seconds to wait for command completion.
        Default value: $DEFAULT_TIMEOUT seconds.

    -i interval
        Interval between checks if the process is still alive.
        Positive integer, default value: $DEFAULT_INTERVAL seconds.

    -d delay
        Delay between posting the SIGTERM signal and destroying the
        process by SIGKILL. Default value: $DEFAULT_DELAY seconds.

As of today, Bash does not support floating point arithmetic (sleep does),
therefore all delay/time values must be integers.
EOF
}

# Options.
while getopts "":t:i:d:"" option; do
    case ""$option"" in
        t) timeout=$OPTARG ;;
        i) interval=$OPTARG ;;
        d) delay=$OPTARG ;;
        *) printUsage; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

# $# should be at least 1 (the command to execute), however it may be strictly
# greater than 1 if the command itself has options.
if (($# == 0 || interval &lt;= 0)); then
    printUsage
    exit 1
fi

# kill -0 pid   Exit code indicates if a signal may be sent to $pid process.
(
    ((t = timeout))

    while ((t &gt; 0)); do
        sleep $interval
        kill -0 $$ || exit 0
        ((t -= interval))
    done

    # Be nice, post SIGTERM first.
    # The 'exit 0' below will be executed if any preceeding command fails.
    kill -s SIGTERM $$ &amp;&amp; kill -0 $$ || exit 0
    sleep $delay
    kill -s SIGKILL $$
) 2&gt; /dev/null &amp;

exec ""$@""
</code>]"
223,https://stackoverflow.com/questions/16787916/,"['Explanation:', 'diff -r dir1 dir2 shows which files are only in dir1 and those only in dir2 and also the changes of the files present in both directories if any.', 'diff -r dir1 dir2 | grep dir1  shows which files are only in dir1', 'awk to print only filename.']","[<code>diff -r dir1 dir2 | grep dir1 | awk '{print $4}' &gt; difference1.txt
</code>, <code>diff -r dir1 dir2</code>, <code>diff -r dir1 dir2 | grep dir1</code>, <code>awk</code>]"
224,https://stackoverflow.com/questions/1593051/,"['The correct solution is to take a peek at contrib/completions/git-completion.bash does that for bash prompt in __git_ps1.  Removing all extras like selecting how to describe detached HEAD situation, i.e. when we are on unnamed branch, it is:', 'git symbolic-ref is used to extract fully qualified branch name from symbolic reference; we use it for HEAD, which is currently checked out branch.', 'Alternate solution could be:', 'where in last line we deal with the detached HEAD situation, using simply ""HEAD"" to denote such situation.', 'Added 11-06-2013', 'Junio C. Hamano (git maintainer) blog post, Checking the current branch programatically, from June 10, 2013 explains whys (and hows) in more detail.']","[<code>__git_ps1</code>, <code>branch_name=""$(git symbolic-ref HEAD 2&gt;/dev/null)"" ||
branch_name=""(unnamed branch)""     # detached HEAD

branch_name=${branch_name##refs/heads/}
</code>, <code>branch_name=$(git symbolic-ref -q HEAD)
branch_name=${branch_name##refs/heads/}
branch_name=${branch_name:-HEAD}
</code>]"
225,https://stackoverflow.com/questions/2371248/,['On later versions of common Linux distributions you can use:'],"[<code>date -d @1267619929
</code>]"
226,https://stackoverflow.com/questions/16085958/,"['To find all files modified in the last 24 hours (last full day) in a particular specific directory and its sub-directories:', 'Should be to your liking', 'The - before 1 is important - it means anything changed one day or less ago.\nA + before 1 would instead mean anything changed at least one day ago, while having nothing before the 1 would have meant it was changed exacted one day ago, no more, no less.']","[<code>find /directory_path -mtime -1 -ls
</code>, <code>-</code>, <code>1</code>, <code>+</code>, <code>1</code>, <code>1</code>]"
227,https://stackoverflow.com/questions/2925606/,"['You can also do', 'To run more of those to put load on more cores, try to fork it: ', 'Repeat the command in the curly brackets as many times as the number of threads you want to produce (here 4 threads). \nSimple enter hit will stop it (just make sure no other dd is running on this user or you kill it too). ']","[<code>dd if=/dev/zero of=/dev/null
</code>, <code>fulload() { dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null &amp; }; fulload; read; killall dd
</code>]"
228,https://stackoverflow.com/questions/12457457/,['Pipe the result to wc using the -l (line count) switch:'],"[<code>wc</code>, <code>-l</code>, <code>grep -Rl ""curl"" ./ | wc -l
</code>]"
229,https://stackoverflow.com/questions/2005192/,"['Have you tried:', ""For the follow-on question of how to escape * since it has special meaning when it's naked or in double quoted strings: use single quotes."", 'Bonus: It also reads nice: eval mysql query ;-)']","[<code>eval $cmd
</code>, <code>*</code>, <code>MYSQL='mysql AMORE -u username -ppassword -h localhost -e'
QUERY=""SELECT ""'*'"" FROM amoreconfig"" ;# &lt;-- ""double""'single'""double""
eval $MYSQL ""'$QUERY'""
</code>]"
230,https://stackoverflow.com/questions/8920245/,[],"[<code>if [ ! -z ""$var"" ] &amp;&amp; [ -e ""$var"" ]; then
      # something ...
fi
</code>]"
231,https://stackoverflow.com/questions/6916856/,"['Use type. If foobar is e.g. defined in your ~/.profile:', 'This does find out what foobar was, and if it was defined as a function it calls declare -f as explained by pmohandras.', 'To print out just the body of the function (i.e. the code) use sed:']","[<code>type</code>, <code>foobar</code>, <code>~/.profile</code>, <code>$ type foobar
foobar is a function
foobar {
    echo ""I'm foobar""
}
</code>, <code>foobar</code>, <code>declare -f</code>, <code>sed</code>, <code>type foobar | sed '1,3d;$d'
</code>]"
232,https://stackoverflow.com/questions/11287861/,"[""You don't need [[ ]] here. Just run the command directly. Add -q option when you don't need the string displayed when it was found."", 'The grep command returns 0 or 1 in the exit code depending on\nthe result of search. 0 if something was found; 1 otherwise.', 'You can specify commands as an condition of if. If the command returns 0 in its exitcode that means that the condition is true; otherwise false.', 'As you can see you run here the programs directly. No additional [] or [[]].']","[<code>if grep -q SomeString ""$File""; then
  Some Actions # SomeString was found
fi
</code>, <code>[[ ]]</code>, <code>-q</code>, <code>grep</code>, <code>$ echo hello | grep hi ; echo $?
1
$ echo hello | grep he ; echo $?
hello
0
$ echo hello | grep -q he ; echo $?
0
</code>, <code>if</code>, <code>$ if /bin/true; then echo that is true; fi
that is true
$ if /bin/false; then echo that is true; fi
$
</code>, <code>[]</code>, <code>[[]]</code>]"
233,https://stackoverflow.com/questions/11162406/,[],"[<code>echo ""some data for the file"" &gt;&gt; fileName
</code>]"
234,https://stackoverflow.com/questions/2709458/,"['Use rename (aka prename) which is a Perl script which may be on your system already. Do it in two steps:', 'Based on Jürgen\'s answer and able to handle multiple layers of files and directories in a single bound using the ""Revision 1.5  1998/12/18 16:16:31  rmb1"" version of /usr/bin/rename (a Perl script):']","[<code>rename</code>, <code>prename</code>, <code>find -name ""* *"" -type d | rename 's/ /_/g'    # do the directories first
find -name ""* *"" -type f | rename 's/ /_/g'
</code>, <code>/usr/bin/rename</code>, <code>find /tmp/ -depth -name ""* *"" -execdir rename 's/ /_/g' ""{}"" \;
</code>]"
235,https://stackoverflow.com/questions/10969953/,"['Here documents are often used for this purpose.', 'They are supported in all Bourne-derived shells including all versions of Bash.']","[<code>cat &lt;&lt; EOF
usage: up [--level &lt;n&gt;| -n &lt;levels&gt;][--help][--version]

Report bugs to: 
up home page:
EOF
</code>]"
236,https://stackoverflow.com/questions/4708549/,"['The backticks/gravemarks have been deprecated in favor of $() for command substitution because $() can easily nest within itself as in $(echo foo$(echo bar)).  There are other differences such as how backslashes are parsed in the backtick/gravemark version, etc. ', 'See BashFAQ/082 for several reasons to always prefer the $(...) syntax.', 'Also see the POSIX spec for detailed information on the various differences.']","[<code>$()</code>, <code>$()</code>, <code>$(echo foo$(echo bar))</code>]"
237,https://stackoverflow.com/questions/4676459/,"['The >> redirection operator will append lines to the end of the specified file, where-as the single greater than > will empty and overwrite the file.']","[<code>&gt;&gt;</code>, <code>&gt;</code>, <code>echo ""text"" &gt; 'Users/Name/Desktop/TheAccount.txt'
</code>]"
238,https://stackoverflow.com/questions/171924/,"[""Perhaps an obvious caveat: this validates syntax but won't check if your bash script tries to execute a command that isn't in your path, like ech hello instead of echo hello.""]","[<code>bash -n scriptname
</code>, <code>ech hello</code>, <code>echo hello</code>]"
239,https://stackoverflow.com/questions/8513133/,"['This will recursively traverse the /path/to/folder directory and list only the symbolic links:', 'If your intention is to follow the symbolic links too, you should use your find command but you should include the -L option; in fact the find man page says:', 'Then try this:', 'This will probably work: I found in the find man page this diamond: if you are using the -type option you have to change it to the -xtype option:', 'Then:']","[<code>/path/to/folder</code>, <code>ls -lR /path/to/folder | grep ^l
</code>, <code>find</code>, <code>-L</code>, <code>find</code>, <code>   -L     Follow symbolic links.  When find examines or prints information
          about files, the information used shall be taken from the  prop‐
          erties  of  the file to which the link points, not from the link
          itself (unless it is a broken symbolic link or find is unable to
          examine  the file to which the link points).  Use of this option
          implies -noleaf.  If you later use the -P option,  -noleaf  will
          still  be  in  effect.   If -L is in effect and find discovers a
          symbolic link to a subdirectory during its search, the subdirec‐
          tory pointed to by the symbolic link will be searched.

          When the -L option is in effect, the -type predicate will always
          match against the type of the file that a symbolic  link  points
          to rather than the link itself (unless the symbolic link is bro‐
          ken).  Using -L causes the -lname and -ilname predicates  always
          to return false.
</code>, <code>find -L /var/www/ -type l
</code>, <code>find</code>, <code>-type</code>, <code>-xtype</code>, <code>          l      symbolic link; this is never true if the -L option or the
                 -follow option is in effect, unless the symbolic link  is
                 broken.  If you want to search for symbolic links when -L
                 is in effect, use -xtype.
</code>, <code>find -L /var/www/ -xtype l
</code>]"
240,https://stackoverflow.com/questions/3004811/,[],"[<code>prog1 &amp;
prog2 &amp;
</code>]"
241,https://stackoverflow.com/questions/2439579/,"['head takes the first lines from a file, and the -n parameter can be used to specify how many lines should be extracted:']","[<code>head</code>, <code>-n</code>, <code>line=$(head -n 1 filename)
</code>]"
242,https://stackoverflow.com/questions/6270440/,"[""What you've written actually almost works (it would work if all the variables were numbers), but it's not an idiomatic way at all."", 'This is the idiomatic way to write your test in bash:', 'If you need portability to other shells, this would be the way (note the additional quoting and the separate sets of brackets around each individual test, and the use of the traditional = operator rather than the ksh/bash/zsh == variant):']","[<code>(…)</code>, <code>$(…)</code>, <code>{ … }</code>, <code>x=2; { x=4; }; echo $x</code>, <code>x=2; (x=4); echo $x</code>, <code>${VAR}</code>, <code>((…))</code>, <code>$((…))</code>, <code>[[ … ]]</code>, <code>-n $variable</code>, <code>-e $file</code>, <code>""$string1"" == ""$string2""</code>, <code>[[ $foo == a* ]]</code>, <code>$foo</code>, <code>a</code>, <code>[[ $foo == ""a*"" ]]</code>, <code>$foo</code>, <code>a*</code>, <code>!</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>[[ ""$x"" == ""$y"" ]]</code>, <code>[[ ""$x""==""$y"" ]]</code>, <code>;</code>, <code>[[ -n $foo ]]</code>, <code>[[-n $foo]]</code>, <code>[ … ]</code>, <code>if [[ $varA == 1 &amp;&amp; ($varB == ""t1"" || $varC == ""t2"") ]]; then
</code>, <code>=</code>, <code>==</code>, <code>if [ ""$varA"" = 1 ] &amp;&amp; { [ ""$varB"" = ""t1"" ] || [ ""$varC"" = ""t2"" ]; }; then
</code>]"
243,https://stackoverflow.com/questions/18204904/,"['You can achieve this by controlling the formatting of the old/new/unchanged lines in GNU diff output:', 'The input files should be sorted for this to work. With bash (and zsh) you can sort in-place with process substitution <( ):', ""In the above new and unchanged lines are suppressed,  so only changed (i.e. removed lines in your case) are output. You may also use a few diff options that other solutions don't offer, such as -i to ignore case, or various whitespace options (-E, -b, -v etc) for less strict matching."", 'Explanation', 'The options --new-line-format, --old-line-format and --unchanged-line-format let you control the way diff formats the differences, similar to  printf format specifiers. These options format new (added), old (removed) and unchanged lines respectively. Setting one to empty """" prevents output of that kind of line.', 'If you are familiar with unified diff format, you can partly recreate it with:', 'The %L specifier is the line in question, and we prefix each with ""+"" ""-"" or "" "", like diff -u\n(note that it only outputs differences, it lacks the --- +++ and @@ lines at the top of each grouped change).\nYou can also use this to do other useful things like number each line with %dn.', ""The diff method (along with other suggestions comm and join) only produce the expected output with sorted input, though you can use <(sort ...) to sort in place. Here's a simple awk (nawk) script (inspired by the scripts linked-to in Konsolebox's answer) which accepts arbitrarily ordered input files, and outputs the missing lines in the order they occur in file1."", 'This stores the entire contents of file1 line by line in a line-number indexed array ll1[], and the entire contents of file2 line by line in a line-content indexed associative array ss2[]. After both files are read, iterate over ll1 and use the in operator to determine if the line in file1 is present in file2. (This will have have different output to the diff method if there are duplicates.)', 'In the event that the files are sufficiently large that storing them both causes a memory problem, you can trade CPU for memory by storing only file1 and deleting matches along the way as file2 is read.', 'The above stores the entire contents of file1 in two arrays, one indexed by line number ll1[], one indexed by line content ss1[]. Then as file2 is read, each matching line is deleted from ll1[] and ss1[]. At the end the remaining lines from file1 are output, preserving the original order.', 'In this case, with the problem as stated, you can also divide and conquer using GNU split (filtering is a GNU extension), repeated runs with chunks of file1 and reading file2 completely each time:', 'Note the use and placement of - meaning stdin on the gawk command line. This is provided by split from file1 in chunks of 20000 line per-invocation.', 'For users on non-GNU systems, there is almost certainly a GNU coreutils package you can obtain, including on OSX as part of the Apple Xcode tools which provides GNU diff, awk, though only a POSIX/BSD split rather than a GNU version.']","[<code>diff</code>, <code>diff --new-line-format="""" --unchanged-line-format=""""  file1 file2
</code>, <code>bash</code>, <code>zsh</code>, <code>&lt;( )</code>, <code>diff --new-line-format="""" --unchanged-line-format="""" &lt;(sort file1) &lt;(sort file2)
</code>, <code>diff</code>, <code>-i</code>, <code>-E</code>, <code>-b</code>, <code>-v</code>, <code>--new-line-format</code>, <code>--old-line-format</code>, <code>--unchanged-line-format</code>, <code>diff</code>, <code>printf</code>, <code>diff --old-line-format=""-%L"" --unchanged-line-format="" %L"" \
     --new-line-format=""+%L"" file1 file2
</code>, <code>%L</code>, <code>diff -u</code>, <code>---</code>, <code>+++</code>, <code>@@</code>, <code>%dn</code>, <code>diff</code>, <code>comm</code>, <code>join</code>, <code>&lt;(sort ...)</code>, <code>awk</code>, <code># output lines in file1 that are not in file2
BEGIN { FS="""" }                         # preserve whitespace
(NR==FNR) { ll1[FNR]=$0; nl1=FNR; }     # file1, index by lineno
(NR!=FNR) { ss2[$0]++; }                # file2, index by string
END {
    for (ll=1; ll&lt;=nl1; ll++) if (!(ll1[ll] in ss2)) print ll1[ll]
}
</code>, <code>ll1[]</code>, <code>ss2[]</code>, <code>ll1</code>, <code>in</code>, <code>diff</code>, <code>BEGIN { FS="""" }
(NR==FNR) {  # file1, index by lineno and string
  ll1[FNR]=$0; ss1[$0]=FNR; nl1=FNR;
}
(NR!=FNR) {  # file2
  if ($0 in ss1) { delete ll1[ss1[$0]]; delete ss1[$0]; }
}
END {
  for (ll=1; ll&lt;=nl1; ll++) if (ll in ll1) print ll1[ll]
}
</code>, <code>ll1[]</code>, <code>ss1[]</code>, <code>ll1[]</code>, <code>ss1[]</code>, <code>split</code>, <code>split -l 20000 --filter='gawk -f linesnotin.awk - file2' &lt; file1
</code>, <code>-</code>, <code>stdin</code>, <code>gawk</code>, <code>split</code>, <code>diff</code>, <code>awk</code>, <code>split</code>]"
244,https://stackoverflow.com/questions/18592173/,"['Adapted from this post on Processing JSON with jq, you can use the select(bool) like this:']","[<code>select(bool)</code>, <code>$ jq '.[] | select(.location==""Stockholm"")' json
{
  ""location"": ""Stockholm"",
  ""name"": ""Walt""
}
{
  ""location"": ""Stockholm"",
  ""name"": ""Donald""
}
</code>]"
245,https://stackoverflow.com/questions/3061036/,"['In Bash at least the following command tests if $var is empty:', 'The command man test is your friend.']","[<code>if [[ -z ""$var"" ]]; then
   # Do what you want
fi
</code>, <code>man test</code>]"
246,https://stackoverflow.com/questions/8779951/,"['Add a ""shebang"" at the top of your file:', 'And make your file executable (chmod +x script.sh).', 'Finally, modify your path to add the directory where your script is located:', '(typically, you want $HOME/bin for storing your own scripts)']","[<code>#!/bin/bash
</code>, <code>chmod +x script.sh</code>, <code>export PATH=$PATH:/appropriate/directory
</code>, <code>$HOME/bin</code>]"
247,https://stackoverflow.com/questions/12137431/,"[""Previously, the question asked how to check whether there are files in a directory.  The following code achieves that, but see rsp's answer for a better solution."", 'Commands don’t return values – they output them. You can capture this output by using command substitution; e.g. $(ls -A). You can test for a non-empty string in Bash like this:', ""Note that I've used -A rather than -a, since it omits the symbolic current (.) and parent (..) directory entries."", ""Note: As pointed out in the comments, command substitution doesn't capture trailing newlines.  Therefore, if the command outputs only newlines, the substitution will capture nothing and the test will return false.  While very unlikely, this is possible in the above example, since a single newline is a valid filename!  More information in this answer."", 'If you want to check that the command completed successfully, you can inspect $?, which contains the exit code of the last command (zero for success, non-zero for failure). For example:', 'More info here.']","[<code>$(ls -A)</code>, <code>if [[ $(ls -A) ]]; then
    echo ""there are files""
else
    echo ""no files found""
fi
</code>, <code>-A</code>, <code>-a</code>, <code>.</code>, <code>..</code>, <code>$?</code>, <code>files=$(ls -A)
if [[ $? != 0 ]]; then
    echo ""Command failed.""
elif [[ $files ]]; then
    echo ""Files found.""
else
    echo ""No files found.""
fi
</code>]"
248,https://stackoverflow.com/questions/911168/,"['In a pure POSIX shell,', 'returns ""terminal"", because the output is sent to your terminal, whereas ', 'returns ""not a terminal"", because the output of the parenthetic is piped to cat.', 'The -t flag is described in man pages as', '-t fd  True if file descriptor fd is open and refers to a terminal.', '... where fd can be one of the usual file descriptor assignments:']","[<code>if [ -t 1 ] ; then echo terminal; else echo ""not a terminal""; fi
</code>, <code>(if [ -t 1 ] ; then echo terminal; else echo ""not a terminal""; fi) | cat
</code>, <code>cat</code>, <code>-t</code>, <code>fd</code>, <code>0:     stdin  
1:     stdout  
2:     stderr
</code>]"
249,https://stackoverflow.com/questions/2924697/,"['The most compatible way of doing this is using tput to discover the right sequences to send to the terminal:', 'then you can use the variables $bold and $normal to format things:', 'gives', ""this is bold but this isn't""]","[<code>tput</code>, <code>bold=$(tput bold)
normal=$(tput sgr0)
</code>, <code>$bold</code>, <code>$normal</code>, <code>echo ""this is ${bold}bold${normal} but this isn't""
</code>]"
250,https://stackoverflow.com/questions/5731234/,"['You can specify a formatter and use lstart, like this command:', 'The above command will output all processes, with formatters to get PID, command run, and date+time started.', 'Example (from Debian/Jessie command line)', ""You can read ps's manpage or check Opengroup's page for the other formatters.""]","[<code>lstart</code>, <code>ps -eo pid,lstart,cmd
</code>, <code>$ ps -eo pid,lstart,cmd
  PID CMD                                          STARTED
    1 Tue Jun  7 01:29:38 2016 /sbin/init                  
    2 Tue Jun  7 01:29:38 2016 [kthreadd]                  
    3 Tue Jun  7 01:29:38 2016 [ksoftirqd/0]               
    5 Tue Jun  7 01:29:38 2016 [kworker/0:0H]              
    7 Tue Jun  7 01:29:38 2016 [rcu_sched]                 
    8 Tue Jun  7 01:29:38 2016 [rcu_bh]                    
    9 Tue Jun  7 01:29:38 2016 [migration/0]               
   10 Tue Jun  7 01:29:38 2016 [kdevtmpfs]                 
   11 Tue Jun  7 01:29:38 2016 [netns]                     
  277 Tue Jun  7 01:29:38 2016 [writeback]                 
  279 Tue Jun  7 01:29:38 2016 [crypto]                    
      ...
</code>, <code>ps</code>]"
251,https://stackoverflow.com/questions/2609552/,"['""-F"" is a command line argument, not AWK syntax. Try:']","[<code> echo ""1: "" | awk -F  "":"" '/1/ {print $1}'
</code>]"
252,https://stackoverflow.com/questions/626533/,"['You can do the following:', 'This way, you will get a login shell right on the directory_wanted.', 'Explanation', '-t Force pseudo-terminal allocation.  This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services.', 'Multiple -t options force tty allocation, even if ssh has no local tty.']","[<code>ssh -t xxx.xxx.xxx.xxx ""cd /directory_wanted ; bash --login""
</code>, <code>-t</code>, <code>-t</code>, <code>-t</code>, <code>; bash</code>, <code>bash --login</code>]"
253,https://stackoverflow.com/questions/158044/,"[""As pointed out by Max, you can't, but checking files modified or accessed is not all that hard.  I wrote a tutorial about this, as late as today. The essence of which is to use -newerXY and ! -newerXY:"", 'Example: To find all files modified on the 7th of June, 2007:', 'To find all files accessed on the 29th of september, 2008:', 'Or, files which had their permission changed on the same day:', ""If you don't change permissions on the file, 'c' would normally correspond to the creation date, though.""]","[<code>-newerXY</code>, <code>! -newerXY</code>, <code>$ find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08
</code>, <code>$ find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30
</code>, <code>$ find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30
</code>]"
254,https://stackoverflow.com/questions/4549489/,"['and voila.', 'Older syntax for Bash version < 4:']","[<code>nohup some_command &amp;&gt; nohup2.out &amp;
</code>, <code>nohup some_command &gt; nohup2.out 2&gt;&amp;1 &amp;
</code>]"
255,https://stackoverflow.com/questions/5195607/,['You can write a function that launches and tests the command for you. Assume command1 and command2 are environment variables that have been set to a command.'],"[<code>command1</code>, <code>command2</code>, <code>function mytest {
    ""$@""
    local status=$?
    if (( status != 0 )); then
        echo ""error with $1"" &gt;&amp;2
    fi
    return $status
}

mytest ""$command1""
mytest ""$command2""
</code>]"
256,https://stackoverflow.com/questions/11094383/,"['This will corrupt binary files, including those under svn, .git! Read the comments before using!', ""find . -iname '*.java' -type f -exec sed -i.orig 's/\\t/    /g' {} +"", 'The original file is saved as [filename].orig.', ""Replace '*.java' with the file ending of the file type you are looking for. This way you can prevent accidental corruption of binary files."", 'Downsides:']","[<code>svn</code>, <code>.git</code>, <code>find . -iname '*.java' -type f -exec sed -i.orig 's/\t/    /g' {} +</code>, <code>[filename].orig</code>]"
257,https://stackoverflow.com/questions/5750450/,"['or', 'This works with standard /bin/sh as well IIRC (it might be a POSIX thing then)', 'And remember, there is bashdb (bash Shell Debugger, release 4.0-0.4)', 'To revert to normal, exit the subshell or']","[<code>set -o xtrace
</code>, <code>bash -x myscript.sh
</code>, <code>bash Shell Debugger, release 4.0-0.4</code>, <code>set +o xtrace
</code>]"
258,https://stackoverflow.com/questions/2135478/,"['Add this to your crontab (temporarily):', 'After it runs, do this:', ""This assumes that your cron runs /bin/sh, which is the default regardless of the user's default shell.""]","[<code>* * * * * env &gt; ~/cronenv
</code>, <code>env - `cat ~/cronenv` /bin/sh
</code>]"
259,https://stackoverflow.com/questions/9733338/,"[""There's a simpler and more efficient way, using the native shell prefix/suffix removal feature:"", '${opt%\\""} will remove the suffix "" (escaped with a backslash to prevent shell interpretation).', '${temp#\\""} will remove the prefix "" (escaped with a backslash to prevent shell interpretation).', 'Another advantage is that it will remove surrounding quotes only if there are surrounding quotes.', ""BTW, your solution always removes the first and last character, whatever they may be (of course, I'm sure you know your data, but it's always better to be sure of what you're removing)."", 'Using sed:', '(Improved version, as indicated by jfgagne, getting rid of echo)', 'So it replaces a leading "" with nothing, and a trailing "" with nothing too. In the same invocation (there isn\'t any need to pipe and start another sed. Using -e you can have multiple text processing).']","[<code>temp=""${opt%\""}""
temp=""${temp#\""}""
echo ""$temp""
</code>, <code>${opt%\""}</code>, <code>""</code>, <code>${temp#\""}</code>, <code>""</code>, <code>echo ""$opt"" | sed -e 's/^""//' -e 's/""$//'
</code>, <code>sed -e 's/^""//' -e 's/""$//' &lt;&lt;&lt;""$opt""
</code>, <code>""</code>, <code>""</code>, <code>-e</code>]"
260,https://stackoverflow.com/questions/6980090/,"['The following solution reads from a file if the script is called\nwith a file name as the first parameter $1 otherwise from standard input.    ', 'The substitution ${1:-...} takes $1 if defined otherwise\nthe file name of the standard input of the own process is used.']","[<code>$1</code>, <code>while read line
do
  echo ""$line""
done &lt; ""${1:-/dev/stdin}""
</code>, <code>${1:-...}</code>, <code>$1</code>]"
261,https://stackoverflow.com/questions/3497123/,"['Run the following from the parent directory, plugins in this case:', 'To clarify:', 'To play around with find, I recommend using echo after -exec to preview, e.g.:', 'Note: if the -depth 1 option is not available, try -mindepth 1 -maxdepth 1.']","[<code>plugins</code>, <code>find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin master \;
</code>, <code>find .</code>, <code>-type d</code>, <code>-depth 1</code>, <code>-exec {} \;</code>, <code>git --git-dir={}/.git --work-tree=$PWD/{} pull</code>, <code>echo</code>, <code>-exec</code>, <code>find . -type d -depth 1 -exec echo git --git-dir={}/.git --work-tree=$PWD/{} status \;
</code>, <code>-depth 1</code>, <code>-mindepth 1 -maxdepth 1</code>]"
262,https://stackoverflow.com/questions/5274294/,['or'],"[<code>until passwd
do
  echo ""Try again""
done
</code>, <code>while ! passwd
do
  echo ""Try again""
done
</code>]"
263,https://stackoverflow.com/questions/5349718/,"['You can use:', 'How this works:', 'Bash expands {1..100} so the command becomes:', ""I've set printf's format to =%.0s which means that it will always print a single = no matter what argument it is given. Therefore it prints 100 =s.""]","[<code>printf '=%.0s' {1..100}
</code>, <code>printf '=%.0s' 1 2 3 4 ... 100
</code>, <code>=%.0s</code>, <code>=</code>, <code>=</code>]"
264,https://stackoverflow.com/questions/15595374/,"[""nohup catches the hangup signal (see man 7 signal) while the ampersand doesn't (except the shell is confgured that way or doesn't send SIGHUP at all)."", 'Normally, when running a command using & and exiting the shell afterwards, the shell will terminate the sub-command with the hangup signal (kill -SIGHUP <pid>). This can be prevented using nohup, as it catches the signal and ignores it so that it never reaches the actual application. ', ""In case you're using bash, you can use the command shopt | grep hupon to find out whether\nyour shell sends SIGHUP to its child processes or not. If it is off, processes won't be \nterminated, as it seems to be the case for you. More information on how bash terminates\napplications can be found here."", 'There are cases where nohup does not work, for example when the process you start reconnects\nthe SIGHUP signal, as it is the case here.']","[<code>nohup</code>, <code>man 7 signal</code>, <code>SIGHUP</code>, <code>&amp;</code>, <code>kill -SIGHUP &lt;pid&gt;</code>, <code>nohup</code>, <code>shopt | grep hupon</code>, <code>nohup</code>, <code>SIGHUP</code>]"
265,https://stackoverflow.com/questions/12722095/,"[""You can't. bash only does integers; you must delegate to a tool such as bc.""]",[<code>bc</code>]
266,https://stackoverflow.com/questions/4561895/,"['For a huge tree, it might be hard for sort to keep everything in memory.', '%T@ gives you the modification time like a unix timestamp, sort -n sorts numerically, tail -1 takes the last line (highest timestamp), cut -f2 -d"" "" cuts away the first field (the timestamp) from the output.', 'Edit: Just as -printf is probably GNU-only, ajreals usage of stat -c is too. Although it is possible to do the same on BSD, the options for formatting is different (-f ""%m %N"" it would seem)', 'And I missed the part of plural; if you want more then the latest file, just bump up the tail argument.']","[<code>find . -type f -printf '%T@ %p\n' \
| sort -n | tail -1 | cut -f2- -d"" ""
</code>, <code>sort</code>, <code>%T@</code>, <code>sort -n</code>, <code>tail -1</code>, <code>cut -f2 -d"" ""</code>, <code>-printf</code>, <code>stat -c</code>, <code>-f ""%m %N""</code>]"
267,https://stackoverflow.com/questions/618378/,"['You might want to look at the uniq and sort applications.', '(FYI, yes, the sort is necessary in this command line, uniq only strips duplicate lines that are immediately after each other)', 'EDIT:', ""Contrary to what has been posted by Aaron Digulla in relation to uniq's commandline options:"", 'Given the following input:', 'uniq will output all lines exactly once:', 'uniq -d will output all lines that appear more than once, and it will print them once:', 'uniq -u will output all lines that appear exactly once, and it will print them once:']","[<code>uniq</code>, <code>sort</code>, <code>uniq</code>, <code>uniq</code>, <code>uniq</code>, <code>uniq -d</code>, <code>uniq -u</code>]"
268,https://stackoverflow.com/questions/971879/,['Use cut.  Eg. to strip the first 4 characters of each line (i.e. start on the 5th char):'],"[<code>cut</code>, <code>tail -f logfile | grep org.springframework | cut -c 5-
</code>]"
269,https://stackoverflow.com/questions/13617843/,"[""If you know you're always going to use bash, it's much easier to always use the double bracket conditional compound command [[ ... ]], instead of the Posix-compatible  single bracket version [ ... ]. Inside a [[ ... ]] compound, word-splitting and pathname expansion are not applied to words, so you can rely on"", 'to compare the value of $aug1 with the string and.', 'If you use [ ... ], you always need to remember to double quote variables like this:', ""If you don't quote the variable expansion and the variable is undefined or empty, it vanishes from the scene of the crime, leaving only"", 'which is not a valid syntax. (It would also fail with a different error message if $aug1 included white space or shell metacharacters.)', 'The modern [[ operator has lots of other nice features, including regular expression matching.']","[<code>[[ ... ]]</code>, <code>[ ... ]</code>, <code>[[ ... ]]</code>, <code>if [[ $aug1 == ""and"" ]];
</code>, <code>$aug1</code>, <code>and</code>, <code>[ ... ]</code>, <code>if [ ""$aug1"" = ""and"" ];
</code>, <code>if [ = ""and"" ]; 
</code>, <code>$aug1</code>, <code>[[</code>]"
270,https://stackoverflow.com/questions/58280652/,"[""You'll need to reinstall the command line tools:""]","[<code>$ xcode-select --install
</code>]"
271,https://stackoverflow.com/questions/3211595/,"['Try to use a loop, let, and printf for the padding:', 'using the -i flag prevents automatically overwriting existing files.']","[<code>let</code>, <code>printf</code>, <code>a=1
for i in *.jpg; do
  new=$(printf ""%04d.jpg"" ""$a"") #04 pad to length of 4
  mv -i -- ""$i"" ""$new""
  let a=a+1
done
</code>, <code>-i</code>]"
272,https://stackoverflow.com/questions/40944479/,"[""Alpine docker image doesn't have bash installed by default. You will need to add following commands to get bash:"", 'If youre using Alpine 3.3+ then you can just do', 'to keep docker image size small. (Thanks to comment from @sprkysnrky)']","[<code>bash</code>, <code>RUN apk update &amp;&amp; apk add bash
</code>, <code>Alpine 3.3+</code>, <code>RUN apk add --no-cache bash
</code>]"
273,https://stackoverflow.com/questions/7875540/,"['The syntax (<<<) and the command used (echo) is wrong.', 'Correct would be:', 'This construction is referred to as a Here Document and can be found in the Bash man pages under man --pager=\'less -p ""\\s*Here Documents""\' bash.']","[<code>&lt;&lt;&lt;</code>, <code>echo</code>, <code>#!/bin/bash

kernel=""2.6.39""
distro=""xyz""
cat &gt;/etc/myconfig.conf &lt;&lt;EOL
line 1, ${kernel}
line 2, 
line 3, ${distro}
line 4 line
... 
EOL

cat /etc/myconfig.conf
</code>, <code>man --pager='less -p ""\s*Here Documents""' bash</code>]"
274,https://stackoverflow.com/questions/2937407/,"['Bash specific solution:', ""Escape the pattern or it'll get pre-expanded into matches.  "", 'Exit status is:', 'stdout is a list of files matching the glob.\nI think this is the best option in terms of conciseness and minimizing potential side effects.', 'UPDATE: Example usage requested.']","[<code>compgen -G ""&lt;glob-pattern&gt;""
</code>, <code>stdout</code>, <code>if compgen -G ""/tmp/someFiles*"" &gt; /dev/null; then
    echo ""Some files exist.""
fi
</code>]"
275,https://stackoverflow.com/questions/9727695/,"[""Don't forget about spaces:""]","[<code>source=""""
samples=("""")
if [ $1 = ""country"" ]; then
   source=""country""
   samples=""US Canada Mexico...""
else
  echo ""try again""
fi
</code>]"
276,https://stackoverflow.com/questions/5677201/,"['Here is a solution that works at on any Unix / Linux implementation, assuming it cares to follow the POSIX standard. It works on some non Unix environments like cygwin too.', 'Reference:  The Open Group Base Specifications Issue 7\nIEEE Std 1003.1, 2013 Edition, §10.1:', '/dev/tty', 'Associated with the process group of that process, if any. It is\n  useful for programs or shell procedures that wish to be sure of\n  writing messages to or reading data from the terminal no matter how\n  output has been redirected. It can also be used for applications that\n  demand the name of a file for output, when typed output is desired and\n  it is tiresome to find out what terminal is currently in use. In each process, a synonym for the controlling terminal', 'Some environments like Google Colab have been reported not to implement /dev/tty while still having their tty command returning a usable device. Here is a workaround:', 'or with an ancient Bourne shell:  ']","[<code>POSIX</code>, <code>cygwin</code>, <code>echo 'ee' | tee /dev/tty | foo
</code>, <code>/dev/tty</code>, <code>tty</code>, <code>tty=$(tty)
echo 'ee' | tee $tty | foo
</code>, <code>tty=`tty`
echo 'ee' | tee $tty | foo
</code>]"
277,https://stackoverflow.com/questions/380817/,"['This will print the count first, but other than that it should be exactly what you want.']","[<code>sort ip_addresses | uniq -c
</code>]"
278,https://stackoverflow.com/questions/25373188/,"['To put this folder on the PATH environment variable type', 'This appends the folder to your existing PATH, however, it is only active for your current terminal session.', 'If you want it to be automatically set, it depends on the shell you are using. For bash, you can append this line to $HOME/.bashrc using your favorite editor or type the following on the shell', 'In order to check if it worked, logout and login again or execute', 'on the shell.', 'PS: For other systems where there is no ~/.bashrc, you can also put this into ~/.bash_profile', 'PSS: For more recent laravel you need to put $HOME/.config/composer/vendor/bin on the PATH.', 'PSSS: If you want to put this folder on the path also for other shells or on the GUI, you should append the said export command to ~/.profile (cf. https://help.ubuntu.com/community/EnvironmentVariables).']","[<code>export PATH=""$PATH:$HOME/.composer/vendor/bin""
</code>, <code>$HOME/.bashrc</code>, <code>echo 'export PATH=""$PATH:$HOME/.composer/vendor/bin""' &gt;&gt; ~/.bashrc
</code>, <code>source ~/.bashrc
</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>$HOME/.config/composer/vendor/bin</code>, <code>PATH</code>, <code>export</code>, <code>~/.profile</code>]"
279,https://stackoverflow.com/questions/3294072/,['basename does remove the directory prefix of a path:'],"[<code>basename</code>, <code>$ basename /usr/local/svn/repos/example
example
$ echo ""/server/root/$(basename /usr/local/svn/repos/example)""
/server/root/example
</code>]"
280,https://stackoverflow.com/questions/6495501/,"[""Try putting it in quotes -- you're running into the shell's wildcard expansion, so what you're acually passing to find will look like:"", '...causing the syntax error. So try this instead:', 'Note the single quotes around your file expression -- these will stop the shell (bash) expanding your wildcards.']","[<code>find . -name bobtest.c cattest.c snowtest.c
</code>, <code>find . -name '*test.c'
</code>]"
281,https://stackoverflow.com/questions/3822621/,"['Try:', 'Four changes:', 'Since you want to print the message and exit only when the command fails ( exits with non-zero value) you need a || not an &&.', 'will run cmd2 when cmd1 succeeds(exit value 0). Where as', 'will run cmd2 when cmd1 fails(exit value non-zero).', 'Using ( ) makes the command inside them run in a sub-shell and calling a exit from there causes you to exit the sub-shell and not your original shell, hence execution continues in your original shell.', 'To overcome this use { }', 'The last two changes are required by bash.']","[<code>my_command || { echo 'my_command failed' ; exit 1; }
</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>{ }</code>, <code>( )</code>, <code>;</code>, <code>exit</code>, <code>{</code>, <code>}</code>, <code>||</code>, <code>&amp;&amp;</code>, <code>cmd1 &amp;&amp; cmd2
</code>, <code>cmd2</code>, <code>cmd1</code>, <code>0</code>, <code>cmd1 || cmd2
</code>, <code>cmd2</code>, <code>cmd1</code>, <code>( )</code>, <code>exit</code>, <code>{ }</code>]"
282,https://stackoverflow.com/questions/15691942/,"['Try doing this :', 'The difference between $@ and $*:', 'Unquoted, the results are unspecified. In Bash, both expand to separate args\nand then wordsplit and globbed.', 'Quoted, ""$@"" expands each element as a separate argument, while ""$*""\nexpands to the args merged into one argument: ""$1c$2c..."" (where c is\nthe first char of IFS).', 'You almost always want ""$@"". Same goes for ""${arr[@]}"".', 'Always quote them!']","[<code>$ printf '%s\n' ""${my_array[@]}""
</code>, <code>$@</code>, <code>$*</code>, <code>""$@""</code>, <code>""$*""</code>, <code>""$1c$2c...""</code>, <code>c</code>, <code>IFS</code>, <code>""$@""</code>, <code>""${arr[@]}""</code>]"
283,https://stackoverflow.com/questions/92802/,"['read does this:', ""The -n1 specifies that it only waits for a single character. The -r puts it into raw mode, which is necessary because otherwise, if you press something like backslash, it doesn't register until you hit the next key.  The -p specifies the prompt, which must be quoted if it contains spaces.  The key argument is only necessary if you want to know which key they pressed, in which case you can access it through $key."", ""If you are using Bash, you can also specify a timeout with -t, which causes read to return a failure when a key isn't pressed. So for example:""]","[<code>read</code>, <code>user@host:~$ read -n1 -r -p ""Press any key to continue..."" key
[...]
user@host:~$ 
</code>, <code>-n1</code>, <code>-r</code>, <code>-p</code>, <code>key</code>, <code>$key</code>, <code>-t</code>, <code>read -t5 -n1 -r -p 'Press any key in the next five seconds...' key
if [ ""$?"" -eq ""0"" ]; then
    echo 'A key was pressed.'
else
    echo 'No key was pressed.'
fi
</code>]"
284,https://stackoverflow.com/questions/537942/,"['To list all of the screen sessions for a user, run the following command as that user:', 'To see all screen sessions on a specific machine you can do:', 'I get this on my machine:', 'This is a rather brilliantly Unixy use of Unix Sockets wrapped in filesystem permissions to handle security, state, and streams.']","[<code>screen -ls
</code>, <code>ls -laR /var/run/screen/
</code>, <code>gentle ~ # ls -laR /var/run/screen/

/var/run/screen/:
total 1
drwxrwxr-x  4 root utmp   96 Mar  1  2005 .
drwxr-xr-x 10 root root  840 Feb  1 03:10 ..
drwx------  2 josh users  88 Jan 13 11:33 S-josh
drwx------  2 root root   48 Feb 11 10:50 S-root

/var/run/screen/S-josh:
total 0
drwx------ 2 josh users 88 Jan 13 11:33 .
drwxrwxr-x 4 root utmp  96 Mar  1  2005 ..
prwx------ 1 josh users  0 Feb 11 10:41 12931.pts-0.gentle

/var/run/screen/S-root:
total 0
drwx------ 2 root root 48 Feb 11 10:50 .
drwxrwxr-x 4 root utmp 96 Mar  1  2005 ..
</code>]"
285,https://stackoverflow.com/questions/5928156/,"['Use inline shell string replacement. Example:', 'See http://tldp.org/LDP/abs/html/string-manipulation.html for more details.']","[<code>foo=""  ""

# replace first blank only
bar=${foo/ /.}

# replace all blanks
bar=${foo// /.}
</code>]"
286,https://stackoverflow.com/questions/209470/,"['Any shell has several sets of features.', ""The Essential Linux/Unix commands.  All of these are available through the subprocess library.  This isn't always the best first choice for doing all external commands.  Look also at shutil for some commands that are separate Linux commands, but you could probably implement directly in your Python scripts.  Another huge batch of Linux commands are in the os library; you can do these more simply in Python."", ""And -- bonus! -- more quickly.  Each separate Linux command in the shell (with a few exceptions) forks a subprocess.  By using Python shutil and os modules, you don't fork a subprocess."", ""The shell environment features.  This includes stuff that sets a command's environment (current directory and environment variables and what-not).  You can easily manage this from Python directly."", ""The shell programming features.  This is all the process status code checking, the various logic commands (if, while, for, etc.) the test command and all of it's relatives.  The function definition stuff.  This is all much, much easier in Python.  This is one of the huge victories in getting rid of bash and doing it in Python."", ""Interaction features.  This includes command history and what-not.  You don't need this for writing shell scripts.  This is only for human interaction, and not for script-writing."", ""The shell file management features.  This includes redirection and pipelines.  This is trickier.  Much of this can be done with subprocess.  But some things that are easy in the shell are unpleasant in Python.  Specifically stuff like (a | b; c ) | something >result.  This runs two processes in parallel (with output of a as input to b), followed by a third process.  The output from that sequence is run in parallel with something and the output is collected into a file named result.  That's just complex to express in any other language."", 'Specific programs (awk, sed, grep, etc.) can often be rewritten as Python modules.  Don\'t go overboard.  Replace what you need and evolve your ""grep"" module.  Don\'t start out writing a Python module that replaces ""grep"".', 'The best thing is that you can do this in steps.']","[<code>shutil</code>, <code>os</code>, <code>(a | b; c ) | something &gt;result</code>, <code>a</code>, <code>b</code>, <code>something</code>, <code>result</code>, <code>os.walk</code>]"
287,https://stackoverflow.com/questions/8903239/,"['Bash has a handy SECONDS builtin variable that tracks the number of seconds that have passed since the shell was started. This variable retains its properties when assigned to, and the value returned after the assignment is the number of seconds since the assignment plus the assigned value.', 'Thus, you can just set SECONDS to 0 before starting the timed event, simply read SECONDS after the event, and do the time arithmetic before displaying.', ""As this solution doesn't depend on date +%s (which is a GNU extension), it's portable to all systems supported by Bash.""]","[<code>SECONDS</code>, <code>SECONDS</code>, <code>SECONDS</code>, <code>SECONDS=0
# do some work
duration=$SECONDS
echo ""$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed.""
</code>, <code>date +%s</code>]"
288,https://stackoverflow.com/questions/4632028/,"[""Use mktemp -d. It creates a temporary directory with a random name and makes sure that file doesn't already exist. You need to remember to delete the directory after using it though.""]",[<code>mktemp -d</code>]
289,https://stackoverflow.com/questions/2683279/,"['This seems to be portable between Bash and Korn:', 'A line similar to this or an assignment like pathname=""$_"" (with a later test and action) must be on the first line of the script or on the line after the shebang (which, if used, should be for ksh in order for it to work under the most circumstances).']","[<code>[[ $_ != $0 ]] &amp;&amp; echo ""Script is being sourced"" || echo ""Script is a subshell""
</code>, <code>pathname=""$_""</code>]"
290,https://stackoverflow.com/questions/696839/,"[""Avoid PID-files, crons, or anything else that tries to evaluate processes that aren't their children."", 'There is a very good reason why in UNIX, you can ONLY wait on your children.  Any method (ps parsing, pgrep, storing a PID, ...) that tries to work around that is flawed and has gaping holes in it.  Just say no.', ""Instead you need the process that monitors your process to be the process' parent.  What does this mean?  It means only the process that starts your process can reliably wait for it to end.  In bash, this is absolutely trivial."", ""The above piece of bash code runs myserver in an until loop.  The first line starts myserver and waits for it to end.  When it ends, until checks its exit status.  If the exit status is 0, it means it ended gracefully (which means you asked it to shut down somehow, and it did so successfully).  In that case we don't want to restart it (we just asked it to shut down!).  If the exit status is not 0, until will run the loop body, which emits an error message on STDERR and restarts the loop (back to line 1) after 1 second."", ""Why do we wait a second?  Because if something's wrong with the startup sequence of myserver and it crashes immediately, you'll have a very intensive loop of constant restarting and crashing on your hands.  The sleep 1 takes away the strain from that."", 'Now all you need to do is start this bash script (asynchronously, probably), and it will monitor myserver and restart it as necessary.  If you want to start the monitor on boot (making the server ""survive"" reboots), you can schedule it in your user\'s cron(1) with an @reboot rule.  Open your cron rules with crontab:', 'Then add a rule to start your monitor script:', 'Alternatively; look at inittab(5) and /etc/inittab.  You can add a line in there to have myserver start at a certain init level and be respawned automatically.', 'Edit.', ""Let me add some information on why not to use PID files.  While they are very popular; they are also very flawed and there's no reason why you wouldn't just do it the correct way."", 'Consider this:', 'PID recycling (killing the wrong process):', 'PID files go stale.  You need over-complicated (or should I say, non-trivial) logic to check whether the PID file is stale, and any such logic is again vulnerable to 1..', ""What if you don't even have write access or are in a read-only environment?"", ""It's pointless overcomplication; see how simple my example above is.  No need to complicate that, at all."", ""See also: Are PID-files still flawed when doing it 'right'?"", ""By the way; even worse than PID files is parsing ps!  Don't ever do this."", ""If you don't want to manage the process yourself; there are some perfectly good systems out there that will act as monitor for your processes.  Look into runit, for example.""]","[<code>until myserver; do
    echo ""Server 'myserver' crashed with exit code $?.  Respawning.."" &gt;&amp;2
    sleep 1
done
</code>, <code>myserver</code>, <code>until</code>, <code>myserver</code>, <code>until</code>, <code>0</code>, <code>0</code>, <code>until</code>, <code>myserver</code>, <code>sleep 1</code>, <code>myserver</code>, <code>@reboot</code>, <code>crontab</code>, <code>crontab -e
</code>, <code>@reboot /usr/local/bin/myservermonitor
</code>, <code>myserver</code>, <code>/etc/init.d/foo start</code>, <code>foo</code>, <code>foo</code>, <code>/var/run/foo.pid</code>, <code>foo</code>, <code>bar</code>, <code>foo</code>, <code>foo</code>, <code>/etc/init.d/foo/restart</code>, <code>/var/run/foo.pid</code>, <code>bar</code>, <code>foo</code>, <code>foo</code>, <code>1.</code>, <code>ps</code>, <code>ps</code>, <code>ps</code>, <code>ps aux | grep PID</code>]"
291,https://stackoverflow.com/questions/1469849/,"['Did you try just passing the string variable to a for loop? Bash, for one, will split on whitespace automatically.', '\xa0']","[<code>for</code>, <code>sentence=""This is   a sentence.""
for word in $sentence
do
    echo $word
done
</code>, <code>This
is
a
sentence.
</code>]"
292,https://stackoverflow.com/questions/4471364/,"['declare -F', 'Function names and definitions may be listed with the -f option to the\n  declare builtin command (see Bash Builtins). The -F option to declare\n  will list the function names only\n  (and optionally the source file and line number).', 'Bash Reference Manual']","[<code>declare -F</code>, <code>-f</code>, <code>declare</code>, <code>-F</code>, <code>declare</code>]"
293,https://stackoverflow.com/questions/3173131/,"[""Note that this is bash, not sh. If you invoke the script with sh myscript.sh, you will get an error along the lines of syntax error near unexpected token '>'."", 'If you are working with signal traps, you might want to use the tee -i option to avoid disruption of the output if a signal occurs. (Thanks to  JamesThomasMoon1979 for the comment.)', 'Tools that change their output depending on whether they write to a pipe or a terminal (ls using colors and columnized output, for example) will detect the above construct as meaning that they output to a pipe.', 'There are options to enforce the colorizing / columnizing (e.g. ls -C --color=always). Note that this will result in the color codes being written to the logfile as well, making it less readable.']","[<code>#!/usr/bin/env bash

# Redirect stdout ( &gt; ) into a named pipe ( &gt;() ) running ""tee""
exec &gt; &gt;(tee -i logfile.txt)

# Without this, only stdout would be captured - i.e. your
# log file would not contain any error messages.
# SEE (and upvote) the answer by Adam Spiers, which keeps STDERR
# as a separate stream - I did not want to steal from him by simply
# adding his answer to mine.
exec 2&gt;&amp;1

echo ""foo""
echo ""bar"" &gt;&amp;2
</code>, <code>bash</code>, <code>sh</code>, <code>sh myscript.sh</code>, <code>syntax error near unexpected token '&gt;'</code>, <code>tee -i</code>, <code>ls</code>, <code>ls -C --color=always</code>]"
294,https://stackoverflow.com/questions/1298066/,"['To check if packagename was installed, type:', 'You can also use dpkg-query that has a neater output for your purpose, and accepts wild cards, too.', 'To find what package owns the command, try:', 'For further details, see article Find out if package is installed in Linux and dpkg cheat sheet.']","[<code>packagename</code>, <code>dpkg -s &lt;packagename&gt;
</code>, <code>dpkg-query</code>, <code>dpkg-query -l &lt;packagename&gt;
</code>, <code>command</code>, <code>dpkg -S `which &lt;command&gt;`
</code>]"
295,https://stackoverflow.com/questions/3231804/,"[""These are more compact and versatile forms of Hamish's answer. They handle any mixture of upper and lower case letters:"", 'Or, for Bash >= version 3.2:', 'Note: If $response is an empty string, it will give an error. To fix, simply add quotation marks: ""$response"". – Always use double quotes in variables containing strings (e.g.: prefer to use ""$@"" instead $@).', 'Or, Bash 4.x:', 'Edit:', ""In response to your edit, here's how you'd create and use a confirm command based on the first version in my answer (it would work similarly with the other two):"", 'To use this function:', 'or']","[<code>read -r -p ""Are you sure? [y/N] "" response
case ""$response"" in
    [yY][eE][sS]|[yY]) 
        do_something
        ;;
    *)
        do_something_else
        ;;
esac
</code>, <code>read -r -p ""Are you sure? [y/N] "" response
if [[ ""$response"" =~ ^([yY][eE][sS]|[yY])$ ]]
then
    do_something
else
    do_something_else
fi
</code>, <code>$response</code>, <code>""$response""</code>, <code>""$@""</code>, <code>$@</code>, <code>read -r -p ""Are you sure? [y/N] "" response
response=${response,,}    # tolower
if [[ ""$response"" =~ ^(yes|y)$ ]]
...
</code>, <code>confirm</code>, <code>confirm() {
    # call with a prompt string or use a default
    read -r -p ""${1:-Are you sure? [y/N]} "" response
    case ""$response"" in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}
</code>, <code>confirm &amp;&amp; hg push ssh://..
</code>, <code>confirm ""Would you really like to do a push?"" &amp;&amp; hg push ssh://..
</code>]"
296,https://stackoverflow.com/questions/602912/,"[""In UTF-8 it's actually 6 digits (or 3 bytes)."", ""To check how it's encoded by the console, use hexdump:""]","[<code>$ printf '\xE2\x98\xA0'
☠
</code>, <code>$ printf ☠ | hexdump
0000000 98e2 00a0                              
0000003
</code>]"
297,https://stackoverflow.com/questions/6438896/,"['You can use the sort command:', '-n, --numeric-sort compare according to string numerical value', 'For example:']","[<code>sort</code>, <code>sort -k2 -n yourfile
</code>, <code>-n</code>, <code>--numeric-sort</code>, <code>$ cat ages.txt 
Bob 12
Jane 48
Mark 3
Tashi 54

$ sort -k2 -n ages.txt 
Mark 3
Bob 12
Jane 48
Tashi 54
</code>]"
298,https://stackoverflow.com/questions/26598738/,"['The official postgres docker image will run .sql scripts found in the /docker-entrypoint-initdb.d/ folder. ', 'So all you need is to create the following sql script: ', 'init.sql', 'and add it in your Dockerfile:', 'Dockerfile', 'But since July 8th, 2015, if all you need is to create a user and database, it is easier to just make use to the POSTGRES_USER, POSTGRES_PASSWORD and POSTGRES_DB environment variables:', 'or with a Dockerfile:', 'From the documentation of the postgres Docker image, it is said that', '[...] it will source any *.sh script found in that directory [/docker-entrypoint-initdb.d] to do further initialization before starting the service', 'What\'s important here is ""before starting the service"". This means your script make_db.sh will be executed before the postgres service would be started, hence the error message ""could not connect to database postgres"".', 'After that there is another useful piece of information:', 'If you need to execute SQL commands as part of your initialization, the use of Postgres single user mode is highly recommended.', 'Agreed this can be a bit mysterious at the first look. What it says is that your initialization script should start the postgres service in single mode before doing its actions. So you could change your make_db.ksh script as follows and it should get you closer to what you want:', 'NOTE, this has changed recently in the following commit.  This will work with the latest change:', 'Previously, the use of --single mode was required:']","[<code>.sql</code>, <code>/docker-entrypoint-initdb.d/</code>, <code>CREATE USER docker;
CREATE DATABASE docker;
GRANT ALL PRIVILEGES ON DATABASE docker TO docker;
</code>, <code>FROM library/postgres
COPY init.sql /docker-entrypoint-initdb.d/
</code>, <code>POSTGRES_USER</code>, <code>POSTGRES_PASSWORD</code>, <code>POSTGRES_DB</code>, <code>docker run -e POSTGRES_USER=docker -e POSTGRES_PASSWORD=docker -e POSTGRES_DB=docker library/postgres
</code>, <code>FROM library/postgres
ENV POSTGRES_USER docker
ENV POSTGRES_PASSWORD docker
ENV POSTGRES_DB docker
</code>, <code>/docker-entrypoint-initdb.d</code>, <code>export PGUSER=postgres
psql &lt;&lt;- EOSQL
    CREATE USER docker;
    CREATE DATABASE docker;
    GRANT ALL PRIVILEGES ON DATABASE docker TO docker;
EOSQL
</code>, <code>--single</code>, <code>gosu postgres postgres --single &lt;&lt;- EOSQL
    CREATE USER docker;
    CREATE DATABASE docker;
    GRANT ALL PRIVILEGES ON DATABASE docker TO docker;
EOSQL
</code>]"
299,https://stackoverflow.com/questions/2397822/,"['The typical way to do this is to read the password info from a configuration file. If your configuration file is called foobar.config, then you would commit a file called foobar.config.example to the repository, containing sample data. To run your program, you would create a local (not tracked) file called foobar.config with your real password data.', 'To filter out your existing password from previous commits, see the GitHub help page on Removing sensitive data.']","[<code>foobar.config</code>, <code>foobar.config.example</code>, <code>foobar.config</code>]"
300,https://stackoverflow.com/questions/39296472/,"['[ -z ""${DEPLOY_ENV}"" ] checks whether DEPLOY_ENV has length equal to zero. So you could run:']","[<code>[ -z ""${DEPLOY_ENV}"" ]</code>, <code>DEPLOY_ENV</code>, <code>if [[ -z ""${DEPLOY_ENV}"" ]]; then
  MY_SCRIPT_VARIABLE=""Some default value because DEPLOY_ENV is undefined""
else
  MY_SCRIPT_VARIABLE=""${DEPLOY_ENV}""
fi

# or using a short-hand version

[[ -z ""${DEPLOY_ENV}"" ]] &amp;&amp; MyVar='default' || MyVar=""${DEPLOY_ENV}""

# or even shorter use

MyVar=""${DEPLOY_ENV:-default_value}""
</code>]"
301,https://stackoverflow.com/questions/20381128/,"[""It's on the top of the Homebrew homepage."", 'From a Terminal prompt:', 'The command brew install wget is an example of how to use Homebrew to install another application (in this case, wget) after brew is already installed.', 'Edit:', 'Above command to install the Brew is migrated to:']","[<code>ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
</code>, <code>brew install wget</code>, <code>wget</code>, <code>/bin/bash -c ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)""
</code>]"
302,https://stackoverflow.com/questions/5431909/,"['Use 0 for true and 1 for false.', 'Sample:', 'Edit', ""From @amichair's comment, these are also possible""]","[<code>#!/bin/bash

isdirectory() {
  if [ -d ""$1"" ]
  then
    # 0 = true
    return 0 
  else
    # 1 = false
    return 1
  fi
}


if isdirectory $1; then echo ""is directory""; else echo ""nopes""; fi
</code>, <code>isdirectory() {
  if [ -d ""$1"" ]
  then
    true
  else
    false
  fi
}


isdirectory() {
  [ -d ""$1"" ]
}
</code>]"
303,https://stackoverflow.com/questions/8426058/,"['Works if there is a trailing slash, too.']","[<code>dir=/home/smith/Desktop/Test
parentdir=""$(dirname ""$dir"")""
</code>]"
304,https://stackoverflow.com/questions/9639103/,"['No, there is not; see §3.2.4 ""Compound Commands"" in the Bash Reference Manual for information about the control structures that do exist. In particular, note the mention of break and continue, which aren\'t as flexible as goto, but are more flexible in Bash than in some languages, and may help you achieve what you want. (Whatever it is that you want . . .)']","[<code>break</code>, <code>continue</code>, <code>goto</code>]"
305,https://stackoverflow.com/questions/21112707/,"['You can use the test construct, [[ ]], along with the regular expression match operator, =~, to check if a string matches a regex pattern.', 'For your specific case, you can write:', 'Or more a accurate test:', 'That is, you can define a regex in Bash matching the format you want. This way you can do:', 'where commands after && are executed if the test is successful, and commands after || are executed if the test is unsuccessful.', 'Note this is based on the solution by Aleks-Daniel Jakimenko in User input date format verification in bash.', 'In other shells you can use grep. If your shell is POSIX compliant, do', 'In fish, which is not POSIX-compliant, you can do']","[<code>[[ ]]</code>, <code>=~</code>, <code>[[ $date =~ ^[0-9]{8}$ ]] &amp;&amp; echo ""yes""
</code>, <code>[[ $date =~ ^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$ ]] &amp;&amp; echo ""yes""
#           |^^^^^^^^ ^^^^^^ ^^^^^^  ^^^^^^ ^^^^^^^^^^ ^^^^^^ |
#           |   |     ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^ |
#           |   |          |                   |              |
#           |   |           \                  |              |
#           | --year--   --month--           --day--          |
#           |          either 01...09      either 01..09     end of line
# start of line            or 10,11,12         or 10..29
#                                              or 30, 31
</code>, <code>[[ $date =~ ^regex$ ]] &amp;&amp; echo ""matched"" || echo ""did not match""
</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>(echo ""$date"" | grep -Eq  ^regex$) &amp;&amp; echo ""matched"" || echo ""did not match""
</code>, <code>echo ""$date"" | grep -Eq ""^regex\$""; and echo ""matched""; or echo ""did not match""
</code>]"
306,https://stackoverflow.com/questions/21612980/,"[""#!/usr/bin/env searches PATH for bash, and bash is not always in /bin, particularly on non-Linux systems.  For example, on my OpenBSD system, it's in /usr/local/bin, since it was installed as an optional package."", ""If you are absolutely sure bash is in /bin and will always be, there's no harm in putting it directly in your shebang—but I'd recommend against it because scripts and programs all have lives beyond what we initially believe they will have.""]","[<code>#!/usr/bin/env</code>, <code>PATH</code>, <code>bash</code>, <code>bash</code>, <code>/bin</code>, <code>/usr/local/bin</code>, <code>bash</code>, <code>/bin</code>]"
307,https://stackoverflow.com/questions/9533679/,"['sed can operate on an address:', 'What is this magical 1s you see on every answer here? Line addressing!.', 'Want to add <added text> on the first 10 lines?', 'Or you can use Command Grouping:']","[<code>sed</code>, <code>$ sed -i '1s/^/&lt;added text&gt; /' file
</code>, <code>1s</code>, <code>&lt;added text&gt;</code>, <code>$ sed -i '1,10s/^/&lt;added text&gt; /' file
</code>, <code>Command Grouping</code>, <code>$ { echo -n '&lt;added text&gt; '; cat file; } &gt;file.new
$ mv file{.new,}
</code>]"
308,https://stackoverflow.com/questions/756756/,"['Try:', 'or', 'in your .bashrc', 'The second solution allows you to use arguments.']","[<code>alias lock='gnome-screensaver; gnome-screensaver-command --lock'
</code>, <code>lock() {
    gnome-screensaver
    gnome-screensaver-command --lock
}
</code>]"
309,https://stackoverflow.com/questions/27658675/,"[""First, it's usually better to be explicit about your intent. So if you know the string ends in .rtf, and you want to remove that .rtf, you can just use var2=${var%.rtf}. One potentially-useful aspect of this approach is that if the string doesn't end in .rtf, it is not changed at all; var2 will contain an unmodified copy of var."", ""If you want to remove a filename suffix but don't know or care exactly what it is, you can use var2=${var%.*} to remove everything starting with the last .. Or, if you only want to keep everything up to but not including the first ., you can use var2=${var%%.*}. Those options have the same result if there's only one ., but if there might be more than one, you get to pick which end of the string to work from. On the other hand, if there's no . in the string at all, var2 will again be an unchanged copy of var."", 'If you really want to always remove a specific number of characters, here are some options.', ""You tagged this bash specifically, so we'll start with bash builtins. The one which has worked the longest is the same suffix-removal syntax I used above: to remove four characters, use var2=${var%????}. Or to remove four characters only if the first one is a dot, use var2=${var%.???}, which is like var2=${var%.*} but only removes the suffix if the part after the dot is exactly three characters. As you can see, to count characters this way, you need one question mark per unknown character removed, so this approach gets unwieldy for larger substring lengths."", 'An option in newer shell versions is substring extraction: var2=${var:0:${#var}-4}. Here you can put any number in place of the 4 to remove a different number of characters. The ${#var} is replaced by the length of the string, so this is actually asking to extract and keep all the characters from indexes 0 to (length - 4), inclusive. With this approach, you lose the option to make the change only if the string matches a pattern; no matter what the actual value of the string is, the copy will include all but its last four characters.', ""Bash lets you leave the start index out; it defaults to 0, so you can shorten that to just var2=${var::${#var}-4}. In fact, newer versions of bash (specifically 4+, which means the one that ships with MacOS won't work) recognize negative indexes as counting back from the end of the string, so you can get rid of the length expression, too: var2=${var::-4}."", ""If you're not actually using bash but some other POSIX-type shell, the pattern-based suffix removal with % will still work – even in plain old dash, where the index-based substring extraction won't. Ksh and zsh do both support substring extraction, but require the explicit 0 start index; zsh also supports the negative end index, while ksh requires the length expression."", 'Instead of using built-in shell parameter expansion, you can of course run some utility program to modify the string and capture its output with command substitution. There are plenty that will work, but something like var2=$(cut -c -4 <<<""$var"") is probably the shortest option.']","[<code>.rtf</code>, <code>.rtf</code>, <code>var2=${var%.rtf}</code>, <code>.rtf</code>, <code>var2</code>, <code>var</code>, <code>var2=${var%.*}</code>, <code>.</code>, <code>.</code>, <code>var2=${var%%.*}</code>, <code>.</code>, <code>.</code>, <code>var2</code>, <code>var</code>, <code>bash</code>, <code>var2=${var%????}</code>, <code>var2=${var%.???}</code>, <code>var2=${var%.*}</code>, <code>var2=${var:0:${#var}-4}</code>, <code>4</code>, <code>${#var}</code>, <code>var2=${var::${#var}-4}</code>, <code>var2=${var::-4}</code>, <code>%</code>, <code>var2=$(cut -c -4 &lt;&lt;&lt;""$var"")</code>]"
310,https://stackoverflow.com/questions/2314643/,"[""For searching, can I suggest you look at ack ? It's a source-code aware find, and as such will automatically ignore many file types, including source code repository info such as the above.""]",[<code>find</code>]
311,https://stackoverflow.com/questions/8385627/,"['You just need a little extra whitespace around the minus sign, and backticks:', 'Be aware of the exit status:', 'The exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null or 0.', 'Keep this in mind when using the expression in a bash script in combination with set -e which will exit immediately if a command exits with a non-zero status.']","[<code>COUNT=`expr $FIRSTV - $SECONDV`
</code>]"
312,https://stackoverflow.com/questions/15783701/,"['There are two easy and safe rules which work not only in sh but also bash.', 'This works for all chars except single quote itself. To escape the single quote, close the quoting before it, insert the single quote, and re-open the quoting.', 'sed command: sed -e ""s/\'/\'\\\\\\\\\'\'/g; 1s/^/\'/; \\$s/\\$/\'/""', 'This works for all characters except newline. For newline characters use single or double quotes. Empty strings must still be handled - replace with """"', 'sed command: sed -e \'s/./\\\\&/g; 1{$s/^$/""""/}; 1!s/^/""/; $!s/$/""/\'.', ""There's an easy safe set of characters, like [a-zA-Z0-9,._+:@%/-], which can be left unescaped to keep it more readable"", 'sed command: LC_ALL=C sed -e \'s/[^a-zA-Z0-9,._+@%/-]/\\\\&/g; 1{$s/^$/""""/}; 1!s/^/""/; $!s/$/""/\'.', ""Note that in a sed program, one can't know whether the last line of input ends with a newline byte (except when it's empty). That's why both above sed commands assume it does not. You can add a quoted newline manually."", 'Note that shell variables are only defined for text in the POSIX sense. Processing binary data is not defined. For the implementations that matter, binary works with the exception of NUL bytes (because variables are implemented with C strings, and meant to be used as C strings, namely program arguments), but you should switch to a ""binary"" locale such as latin1.', '(You can easily validate the rules by reading the POSIX spec for sh. For bash, check the reference manual linked by @AustinPhillips)']","[<code>sh</code>, <code>bash</code>, <code>'I'\''m a s@fe $tring which ends in newline
'
</code>, <code>sed -e ""s/'/'\\\\''/g; 1s/^/'/; \$s/\$/'/""</code>, <code>""""</code>, <code>\I\'\m\ \a\ \s\@\f\e\ \$\t\r\i\n\g\ \w\h\i\c\h\ \e\n\d\s\ \i\n\ \n\e\w\l\i\n\e""
""
</code>, <code>sed -e 's/./\\&amp;/g; 1{$s/^$/""""/}; 1!s/^/""/; $!s/$/""/'</code>, <code>[a-zA-Z0-9,._+:@%/-]</code>, <code>I\'m\ a\ s@fe\ \$tring\ which\ ends\ in\ newline""
""
</code>, <code>LC_ALL=C sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&amp;/g; 1{$s/^$/""""/}; 1!s/^/""/; $!s/$/""/'</code>, <code>sh</code>]"
313,https://stackoverflow.com/questions/18960689/,"['chmod u+x program_name. Then execute it.', 'If that does not work, copy the program from the USB device to a native volume on the system. Then chmod u+x program_name on the local copy and execute that.', 'Unix and Unix-like systems generally will not execute a program unless it is marked with permission to execute. The way you copied the file from one system to another (or mounted an external volume) may have turned off execute permission (as a safety feature). The command chmod u+x name adds permission for the user that owns the file to execute it.', 'That command only changes the permissions associated with the file; it does not change the security controls associated with the entire volume. If it is security controls on the volume that are interfering with execution (for example, a noexec option may be specified for a volume in the Unix fstab file, which says not to allow execute permission for files on the volume), then you can remount the volume with options to allow execution. However, copying the file to a local volume may be a quicker and easier solution.']","[<code>chmod u+x program_name</code>, <code>chmod u+x program_name</code>, <code>chmod u+x name</code>, <code>noexec</code>, <code>fstab</code>]"
314,https://stackoverflow.com/questions/8955425/,"['Using imagemagick, you can try:', 'Or for multiple images:']","[<code>convert page.png page.pdf
</code>, <code>convert page*.png mydoc.pdf
</code>]"
315,https://stackoverflow.com/questions/589276/,"['From the GNU Make documentation,', 'So put SHELL := /bin/bash at the top of your makefile, and you should be good to go.', 'BTW: You can also do this for one target, at least for GNU Make. Each target can have its own variable assignments, like this:', ""That'll print:"", 'See ""Target-specific Variable Values"" in the documentation for more details. That line can go anywhere in the Makefile, it doesn\'t have to be immediately before the target.']","[<code>5.3.1 Choosing the Shell
------------------------

The program used as the shell is taken from the variable `SHELL'.  If
this variable is not set in your makefile, the program `/bin/sh' is
used as the shell.
</code>, <code>SHELL := /bin/bash</code>, <code>all: a b

a:
    @echo ""a is $$0""

b: SHELL:=/bin/bash   # HERE: this is setting the shell for b only
b:
    @echo ""b is $$0""
</code>, <code>a is /bin/sh
b is /bin/bash
</code>]"
316,https://stackoverflow.com/questions/44656515/,['Use the -r (or --raw-output) option to emit raw strings as output:'],"[<code>-r</code>, <code>--raw-output</code>, <code>jq -r '.name' &lt;json.txt
</code>]"
317,https://stackoverflow.com/questions/13781216/,"['If your $VARIABLE is a string containing spaces or other special characters, and single square brackets are used (which is a shortcut for the test command), then the string may be split out into multiple words. Each of these is treated as a separate argument. ', 'So that one variable is split out into many arguments:', 'The same will be true for any function call that puts down a string containing spaces or other special characters.', 'Wrap the variable output in double quotes, forcing it to stay as one string (therefore one argument). For example,', 'Simple as that. But skip to ""Also beware..."" below if you also can\'t guarantee your variable won\'t be an empty string, or a string that contains nothing but whitespace.', 'Or, an alternate fix is to use double square brackets (which is a shortcut for the new test command). ', 'This exists only in bash (and apparently korn and zsh) however, and so may not be compatible with default shells called by /bin/sh etc. ', 'This means on some systems, it might work from the console but not when called elsewhere, like from cron, depending on how everything is configured. ', 'It would look like this:', 'If your command contains double square brackets like this and you get errors in logs but it works from the console, try swapping out the [[ for an alternative suggested here, or, ensure that whatever runs your script uses a shell that supports [[ aka new test.', 'If you\'re seeing the ""too many arguments"" error, chances are you\'re getting a string from a function with unpredictable output. If it\'s also possible to get an empty string (or all whitespace string), this would be treated as zero arguments even with the above ""quick fix"", and would fail with [: unary operator expected ', ""It's the same 'gotcha' if you're used to other languages - you don't expect the contents of a variable to be effectively printed into the code like this before it is evaluated."", ""Here's an example that prevents both the [: too many arguments and the [: unary operator expected errors: replacing the output with a default value if it is empty (in this example, 0), with double quotes wrapped around the whole thing:"", '(here, the action will happen if $VARIABLE is 0, or empty. Naturally, you should change the 0 (the default value) to a different default value if different behaviour is wanted)', 'Final note: Since [ is a shortcut for test, all the above is also true for the error test: too many arguments (and also test: unary operator expected)']","[<code>$VARIABLE</code>, <code>test</code>, <code>VARIABLE=$(/some/command);  
# returns ""hello world""

if [ $VARIABLE == 0 ]; then
  # fails as if you wrote:
  # if [ hello world == 0 ]
fi 
</code>, <code>VARIABLE=$(/some/command);
if [ ""$VARIABLE"" == 0 ]; then
  # some action
fi 
</code>, <code>new test</code>, <code>/bin/sh</code>, <code>cron</code>, <code>VARIABLE=$(/some/command);
if [[ $VARIABLE == 0 ]]; then
  # some action
fi 
</code>, <code>[[</code>, <code>[[</code>, <code>new test</code>, <code>[: unary operator expected</code>, <code>[: unary operator expected</code>, <code>[: too many arguments</code>, <code>[: unary operator expected</code>, <code>0</code>, <code>VARIABLE=$(/some/command);
if [ ""${VARIABLE:-0}"" == 0 ]; then
  # some action
fi 
</code>, <code>[</code>, <code>test</code>, <code>test: too many arguments</code>, <code>test: unary operator expected</code>]"
318,https://stackoverflow.com/questions/7665/,"['According to the standards, pwd -P should return the path with symlinks resolved.', 'C function char *getcwd(char *buf, size_t size) from unistd.h should have the same behaviour.', 'getcwd\npwd']","[<code>pwd -P</code>, <code>char *getcwd(char *buf, size_t size)</code>, <code>unistd.h</code>]"
319,https://stackoverflow.com/questions/2559076/,['Use the $( ... ) construct:'],"[<code>$( ... )</code>, <code>hash=$(genhash --use-ssl -s $IP -p 443 --url $URL | grep MD5 | grep -c $MD5)
</code>]"
320,https://stackoverflow.com/questions/17965/,"['This depends on what shell you are using.  If you are using bash, then the ulimit command controls several settings relating to program execution, such as whether you should dump core.  If you type', ""then that will tell bash that its programs can dump cores of any size.  You can specify a size such as 52M instead of unlimited if you want, but in practice this shouldn't be necessary since the size of core files will probably never be an issue for you."", ""In tcsh, you'd type""]","[<code>ulimit -c unlimited
</code>, <code>limit coredumpsize unlimited
</code>]"
321,https://stackoverflow.com/questions/29244351/,"['You can use file redirection to redirected the sorted output:', 'Or you can use the -o, --output=FILE option of sort to indicate the same input and output file:', '⚠️ Note: A common mistake is to try to redirect the output to the same input file\n(e.g. sort file > file).  This does not work as the shell is making the redirections (not the sort(1) program) and the input file (as being the output also) will be erased just before giving the sort(1) program the opportunity of reading it.']","[<code>sort input-file &gt; output_file
</code>, <code>-o</code>, <code>--output=FILE</code>, <code>sort -o file file
</code>, <code>sort file &gt; file</code>]"
322,https://stackoverflow.com/questions/1429556/,"['Using sed, just for variety:', 'Using this alternative, which looks more efficient since it stops reading the input when the required line is printed, may generate a SIGPIPE in the feeding process, which may in turn generate an unwanted error message:', ""I've seen that often enough that I usually use the first (which is easier to type, anyway), though ls is not a command that complains when it gets SIGPIPE."", 'For a range of lines:', 'For several ranges of lines:']","[<code>sed</code>, <code>ls -l | sed -n 2p
</code>, <code>ls -l | sed -n -e '2{p;q}'
</code>, <code>ls</code>, <code>ls -l | sed -n 2,4p
</code>, <code>ls -l | sed -n -e 2,4p -e 20,30p
ls -l | sed -n -e '2,4p;20,30p'
</code>]"
323,https://stackoverflow.com/questions/17385794/,"['When using nohup and you put the task in the background, the background operator (&) will give you the PID at the command prompt. If your plan is to manually manage the process, you can save that PID and use it later to kill the process if needed, via kill PID or kill -9 PID (if you need to force kill). Alternatively, you can find the PID later on by ps -ef | grep ""command name"" and locate the PID from there. Note that nohup keyword/command itself does not appear in the ps output for the command in question.', 'If you use a script, you could do something like this in the script:', ""This will run my_command saving all output into my.log (in a script, $! represents the PID of the last process executed). The 2 is the file descriptor for standard error (stderr) and 2>&1 tells the shell to route standard error output to the standard output (file descriptor 1). It requires &1 so that the shell knows it's a file descriptor in that context instead of just a file named 1. The 2>&1 is needed to capture any error messages that normally are written to standard error into our my.log file (which is coming from standard output). See I/O Redirection for more details on handling I/O redirection with the shell."", 'If the command sends output on a regular basis, you can check the output occasionally with tail my.log, or if you want to follow it ""live"" you can use tail -f my.log. Finally, if you need to kill the process, you can do it via:']","[<code>nohup</code>, <code>&amp;</code>, <code>kill PID</code>, <code>kill -9 PID</code>, <code>ps -ef | grep ""command name""</code>, <code>nohup</code>, <code>ps</code>, <code>nohup my_command &gt; my.log 2&gt;&amp;1 &amp;
echo $! &gt; save_pid.txt
</code>, <code>my_command</code>, <code>my.log</code>, <code>$!</code>, <code>2</code>, <code>stderr</code>, <code>2&gt;&amp;1</code>, <code>1</code>, <code>&amp;1</code>, <code>1</code>, <code>2&gt;&amp;1</code>, <code>my.log</code>, <code>tail my.log</code>, <code>tail -f my.log</code>, <code>kill -9 `cat save_pid.txt`
rm save_pid.txt
</code>]"
324,https://stackoverflow.com/questions/284662/,"['if you\'re wanting to chomp part of a filename from the path, ""dirname"" and ""basename"" are your friends, and ""realpath"" is handy too. ', 'realpath alternatives', 'If realpath is not supported by your shell, you can try ', 'Also', 'Works the same as ', ""in that the path doesn't need to exist to be normalized. ""]","[<code>dirname /foo/bar/baz 
# /foo/bar 
basename /foo/bar/baz
# baz
dirname $( dirname  /foo/bar/baz  ) 
# /foo 
realpath ../foo
# ../foo: No such file or directory
realpath /tmp/../tmp/../tmp
# /tmp
</code>, <code>realpath</code>, <code>realpath</code>, <code>readlink -f /path/here/.. 
</code>, <code>readlink -m /path/there/../../ 
</code>, <code>realpath -s /path/here/../../
</code>]"
325,https://stackoverflow.com/questions/17203122/,"['There is no need to explicitly check $?.  Just do:', 'Note that this relies on echo not failing, which is certainly not guaranteed.  A more reliable way to write this is:']","[<code>$?</code>, <code>ps aux | grep some_proces[s] &gt; /tmp/test.txt &amp;&amp; echo 1 || echo 0 
</code>, <code>if ps aux | grep some_proces[s] &gt; /tmp/test.txt; then echo 1; else echo 0; fi
</code>]"
326,https://stackoverflow.com/questions/5767062/,"['-L returns true if the ""file"" exists and is a symbolic link (the linked file may or may not exist). You want -f (returns true if file exists and is a regular file) or maybe just -e (returns true if file exists regardless of type).', 'According to the GNU manpage, -h is identical to -L, but according to the BSD manpage, it should not be used:', '-h file       True if file exists and is a symbolic link.  This operator is retained for compatibility with previous versions of this program. Do not rely on its existence; use -L instead.']","[<code>-L</code>, <code>-f</code>, <code>-e</code>, <code>-h</code>, <code>-L</code>, <code>-h file</code>]"
327,https://stackoverflow.com/questions/2961673/,['I figured it out now. When you need to run two commands in exec in a find you need to actually have two separate execs. This finally worked for me.'],"[<code>find . -type f -name ""*.rm"" -exec ffmpeg -i {} -sameq {}.mp3 \; -exec rm {} \;
</code>]"
328,https://stackoverflow.com/questions/6114119/,"[""You don't need cat.  "", 'will work fine.']","[<code>cat</code>, <code>head -1 file
</code>]"
329,https://stackoverflow.com/questions/2220301/,"[""I haven't tested this on a 500 code, but it works on others like 200, 302 and 404."", ""Note, format provided for --write-out should be quoted.\nAs suggested by @ibai, add --head to make a HEAD only request. This will save time when the retrieval is successful since the page contents won't be transmitted.""]","[<code>response=$(curl --write-out '%{http_code}' --silent --output /dev/null servername)
</code>, <code>--head</code>]"
330,https://stackoverflow.com/questions/9293887/,"['In order to convert a string into an array, please use', 'or', 'It is crucial not to use quotes since this does the trick.']","[<code>arr=($line)
</code>, <code>read -a arr &lt;&lt;&lt; $line
</code>]"
331,https://stackoverflow.com/questions/12524308/,"['If your expected output is a single line, you can simply remove all newline characters from the output. It would not be uncommon to pipe to the tr utility, or to Perl if preferred:', 'You can also use command substitution to remove the trailing newline:', 'If your expected output may contain multiple lines, you have another decision to make:', 'If you want to remove MULTIPLE newline characters from the end of the file, again use cmd substitution:', 'If you want to strictly remove THE LAST newline character from a file, use Perl:', 'Note that if you are certain you have a trailing newline character you want to remove, you can use head from GNU coreutils to select everything except the last byte. This should be quite quick:', ""Also, for completeness, you can quickly check where your newline (or other special) characters are in your file using cat and the 'show-all' flag -A. The dollar sign character will indicate the end of each line:""]","[<code>tr</code>, <code>wc -l &lt; log.txt | tr -d '\n'

wc -l &lt; log.txt | perl -pe 'chomp'
</code>, <code>echo -n ""$(wc -l &lt; log.txt)""

printf ""%s"" ""$(wc -l &lt; log.txt)""
</code>, <code>printf ""%s"" ""$(&lt; log.txt)""
</code>, <code>perl -pe 'chomp if eof' log.txt
</code>, <code>head</code>, <code>head -c -1 log.txt
</code>, <code>cat</code>, <code>-A</code>, <code>cat -A log.txt
</code>]"
332,https://stackoverflow.com/questions/191364/,['with GNU-grep you could just say '],[]
333,https://stackoverflow.com/questions/8473121/,"[""Start your command with a space and it won't be included in the history."", 'Be aware that this does require the environment variable $HISTCONTROL to be set.', 'Check that the following command returns ignorespace or\nignoreboth', 'To add the environment variable if missing, the following line can be\nadded to the bash profile. E.g. %HOME/.bashrc', 'After sourcing the profile again space prefixed commands will not be written to $HISTFILE']","[<code>$HISTCONTROL</code>, <code>ignorespace</code>, <code>ignoreboth</code>, <code>#&gt; echo $HISTCONTROL
</code>, <code>%HOME/.bashrc</code>, <code>export HISTCONTROL=ignorespace
</code>, <code>$HISTFILE</code>]"
334,https://stackoverflow.com/questions/10341271/,"['You can just use exec to replace your current shell with a new shell:', 'Switch to bash:', 'Switch to zsh:', ""This won't affect new terminal windows or anything, but it's convenient.""]","[<code>exec</code>, <code>bash</code>, <code>exec bash
</code>, <code>zsh</code>, <code>exec zsh
</code>]"
335,https://stackoverflow.com/questions/791765/,"['You can search forward as well. From the bash info manual, ""8.2.5 Searching for Commands in the History"":', 'To search backward in the history for a particular string, type C-r.\n  Typing C-s searches forward through the history.', 'The problem with Ctrl-S however is that sometimes collides with XON/XOFF flow control (in Konsole for instance). The searching is a readline feature however, and you should be able to bind it to some other key. Update: Simpler and better is just to disable XON/XOFF by running']","[<code>C-r</code>, <code>C-s</code>, <code>stty -ixon
</code>]"
336,https://stackoverflow.com/questions/314675/,"['Addressing the question as updated.', ""The braces '{ ... }' provide a unit of I/O redirection.  The braces must appear where a command could appear - simplistically, at the start of a line or after a semi-colon.  (Yes, that can be made more precise; if you want to quibble, let me know.)"", ""You are right that you can preserve the original stdout and stderr with the redirections you showed, but it is usually simpler for the people who have to maintain the script later to understand what's going on if you scope the redirected code as shown above."", 'The relevant sections of the Bash manual are Grouping Commands and I/O Redirection.  The relevant sections of the POSIX shell specification are Compound Commands and I/O Redirection.  Bash has some extra notations, but is otherwise similar to the POSIX shell specification.']","[<code>#...part of script without redirection...

{
    #...part of script with redirection...
} &gt; file1 2&gt;file2 # ...and others as appropriate...

#...residue of script without redirection...
</code>]"
337,https://stackoverflow.com/questions/11393817/,"[""Latest revision based on comment from BinaryZebra's comment\nand tested here.  The addition of command eval allows for the expression to be kept in the present execution environment while the expressions before are only held for the duration of the eval."", 'Use $IFS that has no spaces\\tabs, just newlines/CR', 'Also note that you may be setting the array just fine but reading it wrong - be sure to use both double-quotes """" and braces {} as in the example above', 'Edit:', ""Please note the many warnings about my answer in comments about possible glob expansion, specifically gniourf-gniourf's comments about my prior attempts to work around"", ""With all those warnings in mind I'm still leaving this answer here  (yes, bash 4 has been out for many years but I recall that some macs only 2/3 years old have pre-4 as default shell)"", 'Other notes:', ""Can also follow drizzt's suggestion below and replace a forked subshell+cat with "", ""The other option I sometimes use is just set IFS into XIFS, then restore after.  See also Sorpigal's answer which does not need to bother with this""]","[<code>command eval</code>, <code>$ IFS=$'\r\n' GLOBIGNORE='*' command eval  'XYZ=($(cat /etc/passwd))'
$ echo ""${XYZ[5]}""
sync:x:5:0:sync:/sbin:/bin/sync
</code>, <code>""""</code>, <code>{}</code>, <code>$(&lt;/etc/passwd)
</code>]"
338,https://stackoverflow.com/questions/19456518/,"['If you are on a OS X, this probably has nothing to do with the sed command. On the OSX version of sed, the -i option expects an extension argument so your command is actually parsed as the extension argument and the file path is interpreted as the command code.', ""Try adding the -e argument explicitly and giving '' as argument to -i:"", 'See this. ']","[<code>sed</code>, <code>-i</code>, <code>extension</code>, <code>extension</code>, <code>-e</code>, <code>''</code>, <code>-i</code>, <code>find ./ -type f -exec sed -i '' -e ""s/192.168.20.1/new.domain.com/"" {} \;
</code>]"
339,https://stackoverflow.com/questions/2746553/,"['Use', 'You can trick read into accepting from a pipe like this:', 'or even write a function like this:', ""But there's no point - your variable assignments may not last! A pipeline may spawn a subshell, where the environment is inherited by value, not by reference. This is why read doesn't bother with input from a pipe - it's undefined."", 'FYI, http://www.etalabs.net/sh_tricks.html is a nifty collection of the cruft necessary to fight the oddities and incompatibilities of bourne shells, sh.']","[<code>IFS= read var &lt;&lt; EOF
$(foo)
EOF
</code>, <code>read</code>, <code>echo ""hello world"" | { read test; echo test=$test; }
</code>, <code>read_from_pipe() { read ""$@"" &lt;&amp;0; }
</code>, <code>read</code>]"
340,https://stackoverflow.com/questions/16362402/,"[""I don't think you can give a path to curl, but you can CD to the location, download and CD back."", 'Or using subshell.', 'Both ways will only download if path exists. -O keeps remote file name. After download it will return to original location.', 'If you need to set filename explicitly, you can use small -o option:']","[<code>cd target/path &amp;&amp; { curl -O URL ; cd -; }
</code>, <code>(cd target/path &amp;&amp; curl -O URL)
</code>, <code>-O</code>, <code>-o</code>, <code>curl -o target/path/filename URL
</code>]"
341,https://stackoverflow.com/questions/3517162/,"[""With set +e.  Yeah, it's backward that you enable shell options with set - and disable them with set +.  Historical raisins, donchanow.""]","[<code>set +e</code>, <code>set -</code>, <code>set +</code>]"
342,https://stackoverflow.com/questions/195655/,"['No, cp can copy multiple sources but will only copy to a single destination. You need to arrange to invoke cp multiple times - once per destination - for what you want to do; using, as you say, a loop or some other tool.']","[<code>cp</code>, <code>cp</code>]"
343,https://stackoverflow.com/questions/7216358/,"['You could use ', 'Or for a fully ISO-8601 compliant date, use one of the following formats:', 'Output:', 'or', 'Output:']","[<code>date ""+%Y-%m-%d""
</code>, <code>date -u +""%Y-%m-%dT%H:%M:%SZ""
</code>, <code>2011-08-27T23:22:37Z
</code>, <code>date +%Y-%m-%dT%H:%M:%S%z
</code>, <code>2011-08-27T15:22:37-0800
</code>]"
344,https://stackoverflow.com/questions/2556190/,"['Enjoy!', 'Edit: The range is inclusive.']","[<code>shuf -i 2000-65000 -n 1
</code>]"
345,https://stackoverflow.com/questions/13356628/,"['Try', 'which combines the STDERR of ""time"" and your command into time.txt', 'Or use', 'which puts STDERR from ""sleep"" into the file ""sleep.stderr"" and only STDERR from ""time"" goes into ""time.txt""']","[<code>{ time sleep 1 ; } 2&gt; time.txt
</code>, <code>{ time sleep 1 2&gt; sleep.stderr ; } 2&gt; time.txt
</code>]"
346,https://stackoverflow.com/questions/3545292/,"['The Maven Help Plugin is somehow already proposing something for this:', 'Here is how you would invoke it on the command line to get the ${project.version}:']","[<code>help:evaluate</code>, <code>${project.version}</code>, <code>mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate \
    -Dexpression=project.version
</code>]"
347,https://stackoverflow.com/questions/9772036/,"['You have basically two options:', 'UPDATE:', 'To use export to set an environment variable, you can either use an existing variable:', 'This ought to work in both bash and sh.  bash also allows it to be combined like so:', ""This also works in my sh (which happens to be bash, you can use echo $SHELL to check).  But I don't believe that that's guaranteed to work in all sh, so best to play it safe and separate them."", 'Any variable you export in this way will be visible in scripts you execute, for example:', 'a.sh:', 'b.sh:', 'Then:', 'The fact that these are both shell scripts is also just incidental.  Environment variables can be passed to any process you execute, for example if we used python instead it might look like:', 'a.sh:', 'b.py:', 'Sourcing:', 'Instead we could source like this:', 'a.sh:', 'b.sh:', 'Then:', 'This more or less ""imports"" the contents of b.sh directly and executes it in the same shell. Notice that we didn\'t have to export the variable to access it. This implicitly shares all the variables you have, as well as allows the other script to add/delete/modify variables in the shell.  Of course, in this model both your scripts should be the same language (sh or bash). To give an example how we could pass messages back and forth:', 'a.sh:', 'b.sh:', 'Then:', 'This works equally well in bash.  It also makes it easy to share more complex data which you could not express as an environment variable (at least without some heavy lifting on your part), like arrays or associative arrays.']","[<code>export TESTVARIABLE</code>, <code>. test2.sh</code>, <code>export</code>, <code>A=10
# ...
export A
</code>, <code>bash</code>, <code>sh</code>, <code>bash</code>, <code>export A=10
</code>, <code>sh</code>, <code>bash</code>, <code>echo $SHELL</code>, <code>sh</code>, <code>#!/bin/sh

MESSAGE=""hello""
export MESSAGE
./b.sh
</code>, <code>#!/bin/sh

echo ""The message is: $MESSAGE""
</code>, <code>$ ./a.sh
The message is: hello
</code>, <code>#!/bin/sh

MESSAGE=""hello""
export MESSAGE
./b.py
</code>, <code>#!/usr/bin/python

import os

print 'The message is:', os.environ['MESSAGE']
</code>, <code>#!/bin/sh

MESSAGE=""hello""

. ./b.sh
</code>, <code>#!/bin/sh

echo ""The message is: $MESSAGE""
</code>, <code>$ ./a.sh
The message is: hello
</code>, <code>b.sh</code>, <code>sh</code>, <code>bash</code>, <code>#!/bin/sh

MESSAGE=""hello""

. ./b.sh

echo ""[A] The message is: $MESSAGE""
</code>, <code>#!/bin/sh

echo ""[B] The message is: $MESSAGE""

MESSAGE=""goodbye""
</code>, <code>$ ./a.sh
[B] The message is: hello
[A] The message is: goodbye
</code>, <code>bash</code>]"
348,https://stackoverflow.com/questions/2642585/,"['You can use parameter expansion, e.g.', 'Including the default value in the prompt between brackets is a fairly common convention', 'What does the :-Richard part do? From the bash manual:', '${parameter:-word}\nIf parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted.', 'Also worth noting that...', 'In each of the cases below, word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion.', 'So if you use webpath=${webpath:-~/httpdocs} you will get a result of /home/user/expanded/path/httpdocs not ~/httpdocs, etc.']","[<code>read -p ""Enter your name [Richard]: "" name
name=${name:-Richard}
echo $name
</code>, <code>:-Richard</code>, <code>${parameter:-word}</code>, <code>webpath=${webpath:-~/httpdocs}</code>, <code>/home/user/expanded/path/httpdocs</code>, <code>~/httpdocs</code>]"
349,https://stackoverflow.com/questions/4000613/,[],"[<code>for D in `find . -type d`
do
    //Do whatever you need with D
done
</code>]"
350,https://stackoverflow.com/questions/8296710/,"['For GNU xargs, you can use the -r or --no-run-if-empty option:', '--no-run-if-empty \n-r    If the standard input does not contain any nonblanks, do not run the command.  Normally, the command is run once even if there is no input.  This option is a GNU extension.']","[<code>xargs</code>, <code>-r</code>, <code>--no-run-if-empty</code>, <code>--no-run-if-empty</code>, <code>-r</code>]"
351,https://stackoverflow.com/questions/6723426/,"['You would find the array keys with ""${!foo[@]}"" (reference), so:', 'Which means that indices will be in $i while the elements themselves have to be accessed via ${foo[$i]}']","[<code>""${!foo[@]}""</code>, <code>for i in ""${!foo[@]}""; do 
  printf ""%s\t%s\n"" ""$i"" ""${foo[$i]}""
done
</code>, <code>$i</code>, <code>${foo[$i]}</code>]"
352,https://stackoverflow.com/questions/7039130/,['You could replace the word-based iteration with a line-based one:'],"[<code>find . -iname ""foo*"" | while read f
do
    # ... loop body
done
</code>]"
353,https://stackoverflow.com/questions/16854280/,"['The while loop is executed in a subshell. So any changes you do to the variable will not be available once the subshell exits.', 'Instead you can use a here string to re-write the while loop to be in the main shell process; only echo -e $lines will run in a subshell:', ""You can get rid of the rather ugly echo in the here-string above by expanding the backslash sequences immediately when assigning lines. The $'...' form of quoting can be used there:""]","[<code>echo -e $lines | while read line 
    ...
done
</code>, <code>while</code>, <code>echo -e $lines</code>, <code>while read line
do
    if [[ ""$line"" == ""second line"" ]]
    then
        foo=2
        echo ""Variable \$foo updated to $foo inside if inside while loop""
    fi
    echo ""Value of \$foo in while loop body: $foo""
done &lt;&lt;&lt; ""$(echo -e ""$lines"")""
</code>, <code>echo</code>, <code>lines</code>, <code>$'...'</code>, <code>lines=$'first line\nsecond line\nthird line'
while read line; do
    ...
done &lt;&lt;&lt; ""$lines""
</code>]"
354,https://stackoverflow.com/questions/3411048/,"['There is no mistake in your bash script. But you are executing it with sh which has a less extensive syntax ;)', 'So, run bash ./choose.sh instead :)']",[<code>bash ./choose.sh</code>]
355,https://stackoverflow.com/questions/1655372/,"['Using wc (GNU coreutils) 7.4:', 'gives:']","[<code>wc -L filename
</code>, <code>101 filename
</code>]"
356,https://stackoverflow.com/questions/9994295/,"['$@ is all of the parameters passed to the script. ', 'For instance, if you call ./someScript.sh foo bar then $@ will be equal to foo bar.', 'If you do:', 'and then inside someScript.sh reference:', 'this will be passed to umbrella_corp_options with each individual parameter enclosed in double quotes, allowing to take parameters with blank space from the caller and pass them on.']","[<code>$@</code>, <code>./someScript.sh foo bar</code>, <code>$@</code>, <code>foo bar</code>, <code>./someScript.sh foo bar
</code>, <code>someScript.sh</code>, <code>umbrella_corp_options ""$@""
</code>, <code>umbrella_corp_options</code>]"
357,https://stackoverflow.com/questions/2150882/,"['You can run the passwd command and send it piped input.  So, do something like:']","[<code>echo thePassword | passwd theUsername --stdin
</code>]"
358,https://stackoverflow.com/questions/2702564/,"[""For a Perl one-liner, it's basically the same thing as the awk solution in Ayman Hourieh's answer:"", ""If you're curious what Perl one-liners do, you can deparse them:"", 'The result is a more verbose version of the program, in a form that no one would ever write on their own:', ""Just for giggles, I tried this with a file containing 1,000,000 numbers (in the range 0 - 9,999). On my Mac Pro, it returns virtually instantaneously. That's too bad, because I was hoping using mmap would be really fast, but it's just the same time:""]","[<code>awk</code>, <code> % perl -nle '$sum += $_ } END { print $sum'
</code>, <code> %  perl -MO=Deparse -nle '$sum += $_ } END { print $sum'
</code>, <code>BEGIN { $/ = ""\n""; $\ = ""\n""; }
LINE: while (defined($_ = &lt;ARGV&gt;)) {
    chomp $_;
    $sum += $_;
}
sub END {
    print $sum;
}
-e syntax OK
</code>, <code>mmap</code>, <code>use 5.010;
use File::Map qw(map_file);

map_file my $map, $ARGV[0];

$sum += $1 while $map =~ m/(\d+)/g;

say $sum;
</code>]"
359,https://stackoverflow.com/questions/10067266/,"['General rule: quote it if it can either be empty or contain spaces (or any whitespace really) or special characters (wildcards). Not quoting strings with spaces often leads to the shell breaking apart a single argument into many.', ""$? doesn't need quotes since it's a numeric value. Whether $URL needs it depends on what you allow in there and whether you still want an argument if it's empty."", ""I tend to always quote strings just out of habit since it's safer that way.""]","[<code>$?</code>, <code>$URL</code>]"
360,https://stackoverflow.com/questions/249578/,"['Does your find have the -mmin option? That can let you test the number of mins since last modification:', 'Or maybe look at using tmpwatch to do the same job. phjr also recommended tmpreaper in the comments.']","[<code>find</code>, <code>-mmin</code>, <code>find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete
</code>, <code>tmpwatch</code>, <code>tmpreaper</code>]"
361,https://stackoverflow.com/questions/1335815/,"['See the Parameter Expansion section in the Bash man page. A[@] returns the contents of the array, :1:2 takes a slice of length 2, starting at index 1. ', 'Note that the fact that ""a  b c"" is one array element (and that it contains an extra space) is preserved.']","[<code>man</code>, <code>A[@]</code>, <code>:1:2</code>, <code>A=( foo bar ""a  b c"" 42 )
B=(""${A[@]:1:2}"")
C=(""${A[@]:1}"")       # slice to the end of the array
echo ""${B[@]}""        # bar a  b c
echo ""${B[1]}""        # a  b c
echo ""${C[@]}""        # bar a  b c 42
echo ""${C[@]: -2:2}""  # a  b c 42 # The space before the - is necesssary
</code>]"
362,https://stackoverflow.com/questions/4937792/,"[""In answer to your first question, there's no parameter substitution because you've put the delimiter in quotes - the bash manual says:"", 'The format of here-documents is:', 'No  parameter expansion, command substitution, arithmetic expansion, or\n  pathname expansion is performed on word.  If any characters in word are\n  quoted,  the  delimiter is the result of quote removal on word, and the\n  lines in the here-document are not expanded.  If word is unquoted,  all\n  lines  of  the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion. [...]', 'If you change your first example to use <<EOF instead of << ""EOF"" you\'ll find that it works.', ""In your second example, the shell invokes sudo only with the parameter cat, and the redirection applies to the output of sudo cat as the original user.  It'll work if you try:""]","[<code>      &lt;&lt;[-]word
              here-document
      delimiter
</code>, <code>&lt;&lt;EOF</code>, <code>&lt;&lt; ""EOF""</code>, <code>sudo</code>, <code>cat</code>, <code>sudo cat</code>, <code>sudo sh -c ""cat &gt; /path/to/outfile"" &lt;&lt;EOT
my text...
EOT
</code>]"
363,https://stackoverflow.com/questions/2711001/,"[""It's probably easiest to use xargs. In your case:"", 'The -L flag ensures the input is read properly. From the man page of xargs:']","[<code>xargs</code>, <code>ls -1 | xargs -L1 echo
</code>, <code>-L</code>, <code>xargs</code>, <code>-L number
    Call utility for every number non-empty lines read. 
    A line ending with a space continues to the next non-empty line. [...]
</code>]"
364,https://stackoverflow.com/questions/874452/,"['You need to convert your script to a shell function:', 'The reason is that each process has its own current directory, and when you execute a program from the shell it is run in a new process. The standard ""cd"", ""pushd"" and ""popd"" are builtin to the shell interpreter so that they affect the shell process.', 'By making your program a shell function, you are adding your own in-process command and then any directory change gets reflected in the shell process.']","[<code>#!/bin/bash
#
# this script should not be run directly,
# instead you need to source it from your .bashrc,
# by adding this line:
#   . ~/bin/myprog.sh
#

function myprog() {
  A=$1
  B=$2
  echo ""aaa ${A} bbb ${B} ccc""
  cd /proc
}
</code>]"
365,https://stackoverflow.com/questions/12967232/,"['while takes a command to execute, so you can use the simpler', 'This will stop the loop when ./runtest returns a nonzero exit code (which is usually indicative of failure).', 'To further simplify your current solution though, you should just change your untilfail script to look like this:', ""And then you can call it with whatever command you're already using: ""]","[<code>while</code>, <code>while ./runtest; do :; done
</code>, <code>./runtest</code>, <code>#!/bin/bash

while ""$@""; do :; done
</code>, <code>untilfail ./runTest --and val1,val2 -o option1 ""argument two""
</code>]"
366,https://stackoverflow.com/questions/17583578/,"['The no-op command in shell is : (colon).', 'From the bash manual:', ': (a colon)\n  Do nothing beyond expanding arguments and performing redirections. The return status is zero.']","[<code>:</code>, <code>if [ ""$a"" -ge 10 ]
then
    :
elif [ ""$a"" -le 5 ]
then
    echo ""1""
else
    echo ""2""
fi
</code>, <code>:</code>]"
367,https://stackoverflow.com/questions/9964823/,"[""Misspellings are irritating, aren't they?  Check your spelling of empty, but then also try this:"", 'I like shell scripting a lot, but one disadvantage of it is that the shell cannot help you when you misspell, whereas a compiler like your C++ compiler can help you.', 'Notice incidentally that I have swapped the roles of empty.txt and full.txt, as @Matthias suggests.']","[<code>empty</code>, <code>#!/bin/bash -e

if [ -s diff.txt ]
then
        rm -f empty.txt
        touch full.txt
else
        rm -f full.txt
        touch empty.txt
fi
</code>, <code>empty.txt</code>, <code>full.txt</code>]"
368,https://stackoverflow.com/questions/673055/,"['By convention, environment variables (PAGER, EDITOR, ...) and internal shell variables (SHELL, BASH_VERSION, ...) are capitalized. All other variable names should be lower case.', 'Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.', ""Keeping to this convention, you can rest assured that you don't need to know every environment variable used by UNIX tools or shells in order to avoid overwriting them.  If it's your variable, lowercase it.  If you export it, uppercase it.""]","[<code>PAGER</code>, <code>EDITOR</code>, <code>SHELL</code>, <code>BASH_VERSION</code>]"
369,https://stackoverflow.com/questions/19242275/,"[""A sample command that exhibits the symptom: sed 's/./@/' <<<$'\\xfc' fails, because byte 0xfc is not a valid UTF-8 char.\nNote that, by contrast, GNU sed (Linux, but also installable on macOS) simply passes the invalid byte through, without reporting an error."", ""Using the formerly accepted answer is an option if you don't mind losing support for your true locale (if you're on a US system and you never need to deal with foreign characters, that may be fine.)"", 'However, the same effect can be had ad-hoc for a single command only:', 'Note: What matters is an effective LC_CTYPE setting of C, so LC_CTYPE=C sed ... would normally also work, but if LC_ALL happens to be set (to something other than C), it will override individual LC_*-category variables such as LC_CTYPE. Thus, the most robust approach is to set LC_ALL.', 'However, (effectively) setting LC_CTYPE to C treats strings as if each byte were its own character (no interpretation based on encoding rules is performed), with no regard for the - multibyte-on-demand - UTF-8 encoding that OS X employs by default, where foreign characters have multibyte encodings.', 'In a nutshell: setting LC_CTYPE to C causes the shell and utilities to only recognize basic English letters as letters (the ones in the 7-bit ASCII range), so that foreign chars. will not be treated as letters, causing, for instance, upper-/lowercase conversions to fail.', ""Again, this may be fine if you needn't match multibyte-encoded characters such as é, and simply want to pass such characters through."", 'If this is insufficient and/or you want to understand the cause of the original error (including determining what input bytes caused the problem) and perform encoding conversions on demand, read on below.', ""The problem is that the input file's encoding does not match the shell's.\nMore specifically, the input file contains characters encoded in a way that is not valid in UTF-8 (as @Klas Lindbäck stated in a comment) - that's what the sed error message is trying to say by invalid byte sequence."", 'Most likely, your input file uses a single-byte 8-bit encoding such as ISO-8859-1, frequently used to encode ""Western European"" languages.', 'Example: ', 'The accented letter à has Unicode codepoint 0xE0 (224) - the same as in ISO-8859-1. However, due to the nature of UTF-8 encoding, this single codepoint is represented as 2 bytes - 0xC3 0xA0, whereas trying to pass the single byte 0xE0 is invalid under UTF-8.', ""Here's a demonstration of the problem using the string voilà encoded as ISO-8859-1, with the à represented as one byte (via an ANSI-C-quoted bash string ($'...') that uses \\x{e0} to create the byte):"", 'Note that the sed command is effectively a no-op that simply passes the input through, but we need it to provoke the error:', 'To simply ignore the problem, the above LCTYPE=C approach can be used:', 'If you want to determine which parts of the input cause the problem, try the following:', 'The output will show you all bytes that have the high bit set (bytes that exceed the 7-bit ASCII range) in hexadecimal form. (Note, however, that that also includes correctly encoded UTF-8 multibyte sequences - a more sophisticated approach would be needed to specifically identify invalid-in-UTF-8 bytes.)', 'Performing encoding conversions on demand:', 'Standard utility iconv can be used to convert to (-t) and/or from (-f) encodings; iconv -l lists all supported ones.', 'Examples:', 'Convert FROM ISO-8859-1 to the encoding in effect in the shell (based on LC_CTYPE, which is UTF-8-based by default), building on the above example:', 'Note that this conversion allows you to properly match foreign characters:', 'To convert the input BACK to ISO-8859-1 after processing, simply pipe the result to another iconv command:']","[<code>sed 's/./@/' &lt;&lt;&lt;$'\xfc'</code>, <code>0xfc</code>, <code>sed</code>, <code>LC_ALL=C sed -i """" 's|""iphoneos-cross"",""llvm-gcc:-O3|""iphoneos-cross"",""clang:-Os|g' Configure
</code>, <code>LC_CTYPE</code>, <code>C</code>, <code>LC_CTYPE=C sed ...</code>, <code>LC_ALL</code>, <code>C</code>, <code>LC_*</code>, <code>LC_CTYPE</code>, <code>LC_ALL</code>, <code>LC_CTYPE</code>, <code>C</code>, <code>LC_CTYPE</code>, <code>C</code>, <code>é</code>, <code>sed</code>, <code>invalid byte sequence</code>, <code>ISO-8859-1</code>, <code>à</code>, <code>0xE0</code>, <code>ISO-8859-1</code>, <code>0xC3 0xA0</code>, <code>0xE0</code>, <code>voilà</code>, <code>ISO-8859-1</code>, <code>à</code>, <code>$'...'</code>, <code>\x{e0}</code>, <code>sed</code>, <code>  # -&gt; 'illegal byte sequence': byte 0xE0 is not a valid char.
sed 's/.*/&amp;/' &lt;&lt;&lt;$'voil\x{e0}'
</code>, <code>LCTYPE=C</code>, <code>  # No error, bytes are passed through ('á' will render as '?', though).
LC_CTYPE=C sed 's/.*/&amp;/' &lt;&lt;&lt;$'voil\x{e0}'
</code>, <code>  # Convert bytes in the 8-bit range (high bit set) to hex. representation.
  # -&gt; 'voil\x{e0}'
iconv -f ASCII --byte-subst='\x{%02x}' &lt;&lt;&lt;$'voil\x{e0}'
</code>, <code>iconv</code>, <code>-t</code>, <code>-f</code>, <code>iconv -l</code>, <code>ISO-8859-1</code>, <code>LC_CTYPE</code>, <code>UTF-8</code>, <code>  # Converts to UTF-8; output renders correctly as 'voilà'
sed 's/.*/&amp;/' &lt;&lt;&lt;""$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\x{e0}')""
</code>, <code>  # Correctly matches 'à' and replaces it with 'ü': -&gt; 'voilü'
sed 's/à/ü/' &lt;&lt;&lt;""$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\x{e0}')""
</code>, <code>ISO-8859-1</code>, <code>iconv</code>, <code>sed 's/à/ü/' &lt;&lt;&lt;""$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\x{e0}')"" | iconv -t ISO-8859-1
</code>]"
370,https://stackoverflow.com/questions/12331633/,"['everything in folderToCompress will go to compressFileName', 'Edit: After review and comments I realized that people may get confused with compressFileName without an extension. If you want you can use .tar.gz extension(as suggested) with the compressFileName']","[<code>tar -zcvf compressFileName.tar.gz folderToCompress
</code>]"
371,https://stackoverflow.com/questions/4321456/,"[""Since only the shell knows how to run shell functions, you have to run a shell to run a function.  You also need to mark your function for export with export -f, otherwise the subshell won't inherit them:""]","[<code>export -f</code>, <code>export -f dosomething
find . -exec bash -c 'dosomething ""$0""' {} \;
</code>]"
372,https://stackoverflow.com/questions/38832230/,"['Update 2019/04/16: It seems copy/paste is now officially supported in Windows build >= 17643. Take a look at Rich Turner\'s answer. This can be enabled through the same settings menu described below by clicking the checkbox next to ""Use Ctrl+Shift+C/V as Copy/Paste"".', 'Another solution would be to enable ""QuickEdit Mode"" and then you can paste by right-clicking in the terminal.', 'To enable QuickEdit Mode, right-click on the toolbar (or simply click on the icon in the upper left corner), select Properties, and in the Options tab, click the checkbox next to QuickEdit Mode.', 'With this mode enabled, you can also copy text in the terminal by clicking and dragging. Once a selection is made, you can press Enter or right-click to copy.']",[]
373,https://stackoverflow.com/questions/342969/,"['As stated in the comments above,', ""will no longer work. However, there's a __git_complete function in git-completion.bash which can be used to set up completion for aliases like so:""]","[<code>complete -o default -o nospace -F _git_checkout gco
</code>, <code>__git_complete</code>, <code>__git_complete gco _git_checkout
</code>]"
374,https://stackoverflow.com/questions/1731767/,"['You can use the -p parameter, which is documented as:', '-p, --parents', 'no error if existing, make parent directories as needed', 'So:']","[<code>-p</code>, <code>mkdir -p ""$BACKUP_DIR/$client/$year/$month/$day""
</code>]"
375,https://stackoverflow.com/questions/1063347/,"['You can pass multiple arrays as arguments using something like this:', 'Edit/notes: (from comments below)']","[<code>takes_ary_as_arg()
{
    declare -a argAry1=(""${!1}"")
    echo ""${argAry1[@]}""

    declare -a argAry2=(""${!2}"")
    echo ""${argAry2[@]}""
}
try_with_local_arys()
{
    # array variables could have local scope
    local descTable=(
        ""sli4-iread""
        ""sli4-iwrite""
        ""sli3-iread""
        ""sli3-iwrite""
    )
    local optsTable=(
        ""--msix  --iread""
        ""--msix  --iwrite""
        ""--msi   --iread""
        ""--msi   --iwrite""
    )
    takes_ary_as_arg descTable[@] optsTable[@]
}
try_with_local_arys
</code>, <code>sli4-iread sli4-iwrite sli3-iread sli3-iwrite  
--msix  --iread --msix  --iwrite --msi   --iread --msi   --iwrite
</code>, <code>descTable</code>, <code>optsTable</code>, <code>$</code>, <code>descTable</code>, <code>local</code>, <code>!</code>, <code>${!1}</code>, <code>declare -a</code>]"
376,https://stackoverflow.com/questions/9609130/,"['A surprise I found out recently is that Bash natively supports tcp connections as file descriptors. To use:', ""I'm using 6 as the file descriptor because 0,1,2 are stdin, stdout, and stderr. 5 is sometimes used by Bash for child processes, so 3,4,6,7,8, and 9 should be safe."", 'As per the comment below, to test for listening on a local server in a script:', ""To determine if someone is listening, attempt to connect by loopback. If it fails, then the port is closed or we aren't allowed access. Afterwards, close the connection. "", 'Modify this for your use case, such as sending an email, exiting the script on failure, or starting the required service.']","[<code>exec 6&lt;&gt;/dev/tcp/ip.addr.of.server/445
echo -e ""GET / HTTP/1.0\n"" &gt;&amp;6
cat &lt;&amp;6
</code>, <code>exec 6&lt;&gt;/dev/tcp/127.0.0.1/445 || echo ""No one is listening!""
exec 6&gt;&amp;- # close output connection
exec 6&lt;&amp;- # close input connection
</code>]"
377,https://stackoverflow.com/questions/21334348/,"['Just throwing another solution in the mix...', 'Try jq, a lightweight and flexible command-line JSON processor:', 'Prints the length of the array of objects.']","[<code>jq</code>, <code>jq length /tmp/test.json
</code>]"
378,https://stackoverflow.com/questions/5735666/,"['ought to do it.  Alternately, leave off the initial redirection on yours, which is redirecting standard input; bash takes a filename to execute just fine without redirection, and <(command) syntax provides a path.', 'It may be clearer if you look at the output of echo <(cat /dev/null)']","[<code>source &lt;(curl -s http://mywebsite.com/myscript.txt)
</code>, <code>bash</code>, <code>&lt;(command)</code>, <code>bash &lt;(curl -s http://mywebsite.com/myscript.txt)
</code>, <code>echo &lt;(cat /dev/null)</code>]"
379,https://stackoverflow.com/questions/1624691/,"[""There's a special variable for this in bash:"", '$! expands to the PID of the last process executed in the background.']","[<code>kill $!
</code>]"
380,https://stackoverflow.com/questions/2193584/,"['Use rsync:', 'Note that using source and source/ are different.  A trailing slash means to copy the contents of the folder source into destination.  Without the trailing slash, it means copy the folder source into destination.', 'Alternatively, if you have lots of directories (or files) to exclude, you can use --exclude-from=FILE, where FILE is the name of a file containing files or directories to exclude.', '--exclude may also contain wildcards, such as --exclude=*/.svn*']","[<code>rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination
</code>, <code>source</code>, <code>source/</code>, <code>source</code>, <code>destination</code>, <code>source</code>, <code>destination</code>, <code>--exclude-from=FILE</code>, <code>FILE</code>, <code>--exclude</code>, <code>--exclude=*/.svn*</code>]"
381,https://stackoverflow.com/questions/8967843/,"['You can add an alias or a function in your startup script file. Usually this is .bashrc, .bash_login or .profile file in your home directory. ', ""Since these files are hidden you will have to do an ls -a to list them. If you don't have one you can create one."", ""If I remember correctly, when I had bought my Mac, the .bash_login file wasn't there. I had to create it for myself so that I could put prompt info, alias, functions, etc. in it. "", 'Here are the steps if you would like to create one:']","[<code>alias</code>, <code>function</code>, <code>.bashrc</code>, <code>.bash_login</code>, <code>.profile</code>, <code>ls -a</code>, <code>.bash_login</code>, <code>prompt info</code>, <code>alias</code>, <code>functions</code>, <code>cd ~/</code>, <code>touch .bash_profile</code>, <code>.bash_profile</code>, <code>open -e .bash_profile</code>, <code>. .bash_profile</code>, <code>.bash_profile</code>]"
382,https://stackoverflow.com/questions/9640660/,"['The ""problem"" really is that you\'re sourcing and not executing the script. When you source a file, its contents will be executed in the current shell, instead of spawning a subshell. So everything, including exit, will affect the current shell.', 'Instead of using exit, you will want to use return.']","[<code>exit</code>, <code>return</code>]"
383,https://stackoverflow.com/questions/9449778/,"['The major one is the ability to nest them, commands within commands, without losing your sanity trying to figure out if some form of escaping will work on the backticks.', 'An example, though somewhat contrived:', 'which will give you a list of all files in the /dir directory tree which have the same name as the earliest dated text file from December 2011 (a).', 'Another example would be something like getting the name (not the full path) of the parent directory:', ""(a) Now that specific command may not actually work, I haven't tested the functionality. So, if you vote me down for it, you've lost sight of the intent :-) It's meant just as an illustration as to how you can nest, not as a bug-free production-ready snippet.""]","[<code>deps=$(find /dir -name $(ls -1tr 201112[0-9][0-9]*.txt | tail -1l) -print)
</code>, <code>/dir</code>, <code>pax&gt; cd /home/pax/xyzzy/plugh
pax&gt; parent=$(basename $(dirname $PWD))
pax&gt; echo $parent
xyzzy
</code>]"
384,https://stackoverflow.com/questions/8206280/,"['This can be done with a sed one-liner:', 'This says, ""find all lines that start with # and delete them, leaving everything else.""']","[<code>sed '/^#/d'
</code>]"
385,https://stackoverflow.com/questions/19543139/,"['Use the wait built-in:', 'For the above example, 4 processes process1 ... process4 would be started in the background, and the shell would wait until those are completed before starting the next set.', 'From the GNU manual:', 'Wait until the child process specified by each process ID pid or job specification jobspec exits and return the exit status of the last\n  command waited for. If a job spec is given, all processes in the job\n  are waited for. If no arguments are given, all currently active child\n  processes are waited for, and the return status is zero. If neither\n  jobspec nor pid specifies an active child process of the shell, the\n  return status is 127.']","[<code>wait</code>, <code>process1 &amp;
process2 &amp;
process3 &amp;
process4 &amp;
wait
process5 &amp;
process6 &amp;
process7 &amp;
process8 &amp;
wait
</code>, <code>process1</code>, <code>process4</code>, <code>wait [jobspec or pid ...]
</code>]"
386,https://stackoverflow.com/questions/30461201/,"['You have to open that file with a text editor and then save it.', ""It will open the file with TextEdit, paste your things and then save it. If you open it again you'll find your edits."", 'You can use other editors:', ""But if you don't know how to use them, it's easier to use the open approach."", 'Alternatively, you can rely on pbpaste. Copy', 'in the system clipboard and then in a shell run', 'Or alternatively you can also use cat', '(now cat waits for input: paste the two export definitions and then hit ctrl-D).']","[<code>touch ~/.bash_profile; open ~/.bash_profile
</code>, <code>nano ~/.bash_profile
mate ~/.bash_profile
vim ~/.bash_profile
</code>, <code>open</code>, <code>pbpaste</code>, <code>export ANDROID_HOME=/&lt;installation location&gt;/android-sdk-macosx
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
</code>, <code>pbpaste &gt; ~/.bash_profile
</code>, <code>cat</code>, <code>cat &gt; ~/.bash_profile
</code>, <code>cat</code>]"
387,https://stackoverflow.com/questions/5013151/,"[""The -m option is probably what you're looking for:"", 'From man grep:', 'Note: grep stops reading the file once the specified number of matches have been found!']","[<code>-m</code>, <code>grep -m 10 PATTERN [FILE]
</code>, <code>man grep</code>, <code>-m NUM, --max-count=NUM
        Stop reading a file after NUM matching lines.  If the  input  is
        standard  input  from a regular file, and NUM matching lines are
        output, grep ensures that the standard input  is  positioned  to
        just  after the last matching line before exiting, regardless of
        the presence of trailing context lines.  This enables a  calling
        process  to resume a search.
</code>]"
388,https://stackoverflow.com/questions/962255/,"['It would be neater to capture the error file thus:', ""The shell recognizes this and doesn't have to run 'cat' to get the data."", ""The bigger question is hard.  I don't think there's an easy way to do it.  You'd have to build the entire pipeline into the sub-shell, eventually sending its final standard output to a file, so that you can redirect the errors to standard output."", ""Note that the semi-colon is needed (in classic shells - Bourne, Korn - for sure; probably in Bash too).  The '{}' does I/O redirection over the enclosed commands.  As written, it would capture errors from sed too."", 'WARNING: Formally untested code - use at own risk.']","[<code>ERROR=$(&lt;/tmp/Error)
</code>, <code>cat</code>, <code>ERROR=$( { ./useless.sh | sed s/Output/Useless/ &gt; outfile; } 2&gt;&amp;1 )
</code>, <code>{}</code>, <code>sed</code>]"
389,https://stackoverflow.com/questions/11307257/,"['This simple one-liner should work in any shell, not just bash:', 'ls -1q will give you one line per file, even if they contain whitespace or special characters such as newlines.', 'The output is piped to wc -l, which counts the number of lines.']","[<code>ls -1q log* | wc -l
</code>]"
390,https://stackoverflow.com/questions/13408493/,"['What you have should work, unless ${STATUS} is empty.  It would probably be better to do:', 'or', ""It's hard to say, since you haven't shown us exactly what is going wrong with your script."", 'Personal opinion: never use [[.  It suppresses important error messages and is not portable to different shells.  ']","[<code>${STATUS}</code>, <code>if ! [ ""${STATUS}"" -eq 200 ] 2&gt; /dev/null &amp;&amp; [ ""${STRING}"" != ""${VALUE}"" ]; then
</code>, <code>if [ ""${STATUS}"" != 200 ] &amp;&amp; [ ""${STRING}"" != ""${VALUE}"" ]; then
</code>, <code>[[</code>]"
391,https://stackoverflow.com/questions/3043978/,"['To check for the existence of a process, use', ""But just as @unwind said, if you're going to kill it anyway, just"", 'or you will have a race condition.', 'If you want to ignore the text output of kill and do something based on the exit code, you can']","[<code>kill -0 $pid
</code>, <code>kill $pid
</code>, <code>kill</code>, <code>if ! kill $pid &gt; /dev/null 2&gt;&amp;1; then
    echo ""Could not send SIGTERM to process $pid"" &gt;&amp;2
fi
</code>]"
392,https://stackoverflow.com/questions/26376516/,"['Ok, I did that and it works:', 'And paste', 'do source ~/.bash_profile and enjoy ;)', 'Important: If you want to know the difference between bash_profile and bashrc please check this link', 'Note: For Ubuntu 16.04 running laravel 5.1, the path is: ~/.config/composer/vendor/bin', 'On other platforms: To check where your Composer global directory is, run composer global about. Add /vendor/bin to the directory that gets listed after ""Changed current directory to ..."" to get the path you should add to your PATH.']","[<code>nano ~/.bash_profile 
</code>, <code>export PATH=~/.composer/vendor/bin:$PATH
</code>, <code>source ~/.bash_profile</code>, <code>composer global about</code>, <code>/vendor/bin</code>, <code>PATH</code>]"
393,https://stackoverflow.com/questions/8988824/,['EDIT. Changed brackets into parenthesis according to the comment.\nhttp://web.archive.org/web/20150206070451/http://islandlinux.org/howto/generate-random-numbers-bash-scripting'],"[<code>$(( ( RANDOM % 10 )  + 1 ))
</code>]"
394,https://stackoverflow.com/questions/4542732/,"['You had it right, just put a space between the ! and the [[ like if ! [[']","[<code>!</code>, <code>[[</code>, <code>if ! [[</code>]"
395,https://stackoverflow.com/questions/43321/,"['For casual use you are probably better off sticking with bash and just installing bash completion. ', 'Installing it is pretty easy, grab the bash-completion-20060301.tar.gz from http://www.caliban.org/bash/index.shtml#completion and extract it with ', 'then copy the bash_completion/bash_completion file to /etc with ', 'which will prompt you for your password. You probably will want to make a /etc/bash_completion.d directory for any additional completion scripts (for instance I have the git completion script in there).', 'Once this is done the last step is to make sure the .bash_profile file in your home directory has ', 'in it to load the completion file when you login. ', 'To test it just open a new terminal, and try completing on cvs and it should show you the cvs options in the list of completions.']","[<code>tar -xzvf bash-completion-20060301.tar.gz
</code>, <code>sudo cp bash_completion/bash_completion /etc
</code>, <code>if [ -f /etc/bash_completion ]; then
     . /etc/bash_completion 
fi
</code>]"
396,https://stackoverflow.com/questions/85880/,"[""I think you're looking for the 'type' command. It'll tell you whether something is a function, built-in function, external command, or just not defined. Example:""]","[<code>$ LC_ALL=C type foo
bash: type: foo: not found

$ LC_ALL=C type ls
ls is aliased to `ls --color=auto'

$ which type

$ LC_ALL=C type type
type is a shell builtin

$ LC_ALL=C type -t rvm
function

$ if [ -n ""$(LC_ALL=C type -t rvm)"" ] &amp;&amp; [ ""$(LC_ALL=C type -t rvm)"" = function ]; then echo rvm is a function; else echo rvm is NOT a function; fi
rvm is a function
</code>]"
397,https://stackoverflow.com/questions/3679296/,['Well another way :)'],"[<code>md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`
</code>]"
398,https://stackoverflow.com/questions/19454837/,"['HISTSIZE is the number of lines or commands that are stored in memory in a history list while your bash session is ongoing.', 'HISTFILESIZE is the number of lines or commands that (a) are allowed in the history file at startup time of a session, and (b) are stored in the history file at the end of your bash session for use in future sessions.', 'Notice the distinction between file: on disk - and list: in memory.', 'All the info above + some examples:', 'Example 1:\nHISTFILESIZE=10 and HISTSIZE=10', 'Example 2:\nHISTFILESIZE=10 and HISTSIZE=5', 'Example 3:\nHISTFILESIZE=5 and HISTSIZE=10', 'Info from elixir_sinari:', 'The history ""file"" is not updated as you type the commands. The\n  commands get stored in a ""list"" separately (accessed by the history\n  command). The number of these stored commands is controlled by \n  HISTSIZE  value. When the shell (interactive) exits, the last \n  $HISTSIZE  lines are copied/appended to  $HISTFILE  from that ""list"".\n  If  HISTFILESIZE  is set, then after this operation, it is ensured\n  that only  $HISTFILESIZE  lines (latest) exist in  $HISTFILE . And\n  when the shell starts, the ""list"" is initialized from  $HISTFILE  upto\n  a maximum of  $HISTSIZE  commands.', 'And from the man bash page:', 'The  value\n         of  the  HISTSIZE  variable  is used as the number of commands to save in a history list.  The text of the last HISTSIZE commands\n  (default 500) is saved.  (...)', 'On  startup,  the  history  is initialized from the file named by the variable HISTFILE (default ~/.bash_history).  The file named by\n  the value of HISTFILE is\n         truncated, if necessary, to contain no more than the number of lines specified by the value of HISTFILESIZE.  (...)  When an interactive shell exits, the last $HISTSIZE lines\n  are copied from  the  history\n         list to $HISTFILE.  If the histappend shell option is enabled (see the description of shopt under SHELL BUILTIN COMMANDS below), the\n  lines are appended to the\n         history file, otherwise the history file is overwritten.  If HISTFILE is unset, or if the history file is unwritable, the history\n  is not saved. (...)  After saving the history, the\n  history file  is  truncated\n         to contain no more than HISTFILESIZE lines.  If HISTFILESIZE is not set, no truncation is performed.']","[<code>HISTSIZE</code>, <code>HISTFILESIZE</code>, <code>file</code>, <code>list</code>, <code>HISTFILESIZE=10</code>, <code>HISTSIZE=10</code>, <code>histappend</code>, <code>HISTFILESIZE=10</code>, <code>HISTSIZE=5</code>, <code>histappend</code>, <code>HISTFILESIZE=5</code>, <code>HISTSIZE=10</code>, <code>histappend</code>, <code>man bash</code>]"
399,https://stackoverflow.com/questions/8938120/,"[""It's running every minute of the hour 22 I guess. Try the following to run it every first minute of the hour 22:""]","[<code>0 22 * * * ....
</code>]"
400,https://stackoverflow.com/questions/20010199/,"['The most reliable way is to check /proc/1/cgroup. It will tell you the control groups of the init process, and when you are not in a container, that will be / for all hierarchies. When you are inside a container, you will see the name of the anchor point. With LXC/Docker containers, it will be something like /lxc/<containerid> or /docker/<containerid> respectively.']","[<code>/proc/1/cgroup</code>, <code>/</code>, <code>/lxc/&lt;containerid&gt;</code>, <code>/docker/&lt;containerid&gt;</code>]"
401,https://stackoverflow.com/questions/1491514/,"['If you have GNU Grep, it should work like this:', 'If happen to be on a Unix System without GNU Grep, try the following:']","[<code>grep --exclude-dir="".svn""
</code>, <code>grep -R ""whatever you like"" *|grep -v ""\.svn/*"" 
</code>]"
402,https://stackoverflow.com/questions/4023830/,"[""Here is a pure Bash version that doesn't require any external utilities:"", 'Run the tests:']","[<code>#!/bin/bash
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i&lt;${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i&lt;${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} &gt; 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} &lt; 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

testvercomp () {
    vercomp $1 $2
    case $? in
        0) op='=';;
        1) op='&gt;';;
        2) op='&lt;';;
    esac
    if [[ $op != $3 ]]
    then
        echo ""FAIL: Expected '$3', Actual '$op', Arg1 '$1', Arg2 '$2'""
    else
        echo ""Pass: '$1 $op $2'""
    fi
}

# Run tests
# argument table format:
# testarg1   testarg2     expected_relationship
echo ""The following tests should pass""
while read -r test
do
    testvercomp $test
done &lt;&lt; EOF
1            1            =
2.1          2.2          &lt;
3.0.4.10     3.0.4.2      &gt;
4.08         4.08.01      &lt;
3.2.1.9.8144 3.2          &gt;
3.2          3.2.1.9.8144 &lt;
1.2          2.1          &lt;
2.1          1.2          &gt;
5.6.7        5.6.7        =
1.01.1       1.1.1        =
1.1.1        1.01.1       =
1            1.0          =
1.0          1            =
1.0.2.0      1.0.2        =
1..0         1.0          =
1.0          1..0         =
EOF

echo ""The following test should fail (test the tester)""
testvercomp 1 1 '&gt;'
</code>, <code>$ . ./vercomp
The following tests should pass
Pass: '1 = 1'
Pass: '2.1 &lt; 2.2'
Pass: '3.0.4.10 &gt; 3.0.4.2'
Pass: '4.08 &lt; 4.08.01'
Pass: '3.2.1.9.8144 &gt; 3.2'
Pass: '3.2 &lt; 3.2.1.9.8144'
Pass: '1.2 &lt; 2.1'
Pass: '2.1 &gt; 1.2'
Pass: '5.6.7 = 5.6.7'
Pass: '1.01.1 = 1.1.1'
Pass: '1.1.1 = 1.01.1'
Pass: '1 = 1.0'
Pass: '1.0 = 1'
Pass: '1.0.2.0 = 1.0.2'
Pass: '1..0 = 1.0'
Pass: '1.0 = 1..0'
The following test should fail (test the tester)
FAIL: Expected '&gt;', Actual '=', Arg1 '1', Arg2 '1'
</code>]"
403,https://stackoverflow.com/questions/3806874/,['You can use paste:'],"[<code>paste</code>, <code>paste file1.txt file2.txt &gt; fileresults.txt
</code>]"
404,https://stackoverflow.com/questions/14612371/,"['Exactly how do you want them to run? If you want them to be started in the background and run sequentially, you would do something like this:', 'If, on the other hand, you would like them to run in parallel in the background, you can instead do this:', 'And the two techniques could be combined, such as:', ""Bash being bash, there's often a multitude of different techniques to accomplish the same task, although sometimes with subtle differences between them.""]","[<code>(sleep 2; sleep 3) &amp;
</code>, <code>sleep 2 &amp; sleep 3 &amp;
</code>, <code>(sleep 2; echo first finished) &amp; (sleep 3; echo second finished) &amp;
</code>]"
405,https://stackoverflow.com/questions/26475358/,"['You can choose:', '! inverts the return of the following expression, respectively.']","[<code>if [[ $? -ne 0 ]]; then       # -ne: not equal

if ! [[ $? -eq 0 ]]; then     # -eq: equal

if [[ ! $? -eq 0 ]]; then
</code>, <code>!</code>]"
406,https://stackoverflow.com/questions/1983048/,"['you should put quotes and also, your function declaration is wrong.', 'And like the others, it works for me as well. Tell us what version of shell you are using.']","[<code>myFunction()
{
    echo ""$1""
    echo ""$2""
    echo ""$3""
}
</code>]"
407,https://stackoverflow.com/questions/5161193/,"['(As seen in:\nBASH FAQ entry #68: ""How do I run a command, and have it abort (timeout) after N seconds?"")', ""If you don't mind downloading something, use timeout (sudo apt-get install timeout) and use it like: (most Systems have it already installed otherwise use sudo apt-get install coreutils)"", ""If you don't want to download something, do what timeout does internally:"", 'In case that you want to do a timeout for longer bash code, use the second option as such:']","[<code>timeout</code>, <code>sudo apt-get install timeout</code>, <code>sudo apt-get install coreutils</code>, <code>timeout 10 ping www.goooooogle.com
</code>, <code>( cmdpid=$BASHPID; (sleep 10; kill $cmdpid) &amp; exec ping www.goooooogle.com )
</code>, <code>( cmdpid=$BASHPID; 
    (sleep 10; kill $cmdpid) \
   &amp; while ! ping -w 1 www.goooooogle.com 
     do 
         echo crap; 
     done )
</code>]"
408,https://stackoverflow.com/questions/17029902/,"[""You don't need to pass the quotes enclosing the custom headers to curl. Also, your variables in the middle of the data argument should be quoted."", ""First, write a function that generates the post data of your script. This saves you from all sort of headaches concerning shell quoting and makes it easier to read an maintain the script than feeding the post data on curl's invocation line as in your attempt:"", 'It is then easy to use that function in the invocation of curl:', 'This said, here are a few clarifications about shell quoting rules:', 'The double quotes in the -H arguments (as in -H ""foo bar"") tell bash to keep what\'s inside as a single argument (even if it contains spaces).', ""The single quotes in the --data argument (as in --data 'foo bar') do the same, except they pass all text verbatim (including double quote characters and the dollar sign)."", 'To insert a variable in the middle of a single quoted text, you have to end the single quote, then concatenate with the double quoted variable, and re-open the single quote to continue the text: \'foo bar\'""$variable""\'more foo\'.']","[<code>data</code>, <code>generate_post_data()
{
  cat &lt;&lt;EOF
{
  ""account"": {
    ""email"": ""$email"",
    ""screenName"": ""$screenName"",
    ""type"": ""$theType"",
    ""passwordSettings"": {
      ""password"": ""$password"",
      ""passwordConfirm"": ""$password""
    }
  },
  ""firstName"": ""$firstName"",
  ""lastName"": ""$lastName"",
  ""middleName"": ""$middleName"",
  ""locale"": ""$locale"",
  ""registrationSiteId"": ""$registrationSiteId"",
  ""receiveEmail"": ""$receiveEmail"",
  ""dateOfBirth"": ""$dob"",
  ""mobileNumber"": ""$mobileNumber"",
  ""gender"": ""$gender"",
  ""fuelActivationDate"": ""$fuelActivationDate"",
  ""postalCode"": ""$postalCode"",
  ""country"": ""$country"",
  ""city"": ""$city"",
  ""state"": ""$state"",
  ""bio"": ""$bio"",
  ""jpFirstNameKana"": ""$jpFirstNameKana"",
  ""jpLastNameKana"": ""$jpLastNameKana"",
  ""height"": ""$height"",
  ""weight"": ""$weight"",
  ""distanceUnit"": ""MILES"",
  ""weightUnit"": ""POUNDS"",
  ""heightUnit"": ""FT/INCHES""
}
EOF
}
</code>, <code>curl -i \
-H ""Accept: application/json"" \
-H ""Content-Type:application/json"" \
-X POST --data ""$(generate_post_data)"" ""https://xxx:xxxxx@xxxx-www.xxxxx.com/xxxxx/xxxx/xxxx""
</code>, <code>-H</code>, <code>-H ""foo bar""</code>, <code>--data</code>, <code>--data 'foo bar'</code>, <code>'foo bar'""$variable""'more foo'</code>]"
409,https://stackoverflow.com/questions/37182847/,"['OK, I discovered that you need to either avoid checking the ""Git Credential Manager"" checkbox during the Git for Windows installer, or (after installation) run the Bash shell as Administrator and use git config --edit --system to remove the helper = manager line so that it is no longer registered as a credential helper.', 'For bonus points, use git config --edit --global and insert:', 'To disable the OpenSSH credentials popup too.']","[<code>git config --edit --system</code>, <code>helper = manager</code>, <code>git config --edit --global</code>, <code>[core]
    askpass =
</code>]"
410,https://stackoverflow.com/questions/2462385/,"['Bash can be pretty obtuse sometimes.', 'The following commands all return different error messages for basically the same error:', 'Adding quotes around the variable seems to be a good way to deal with the ""ambiguous redirect"" message: You tend to get a better message when you\'ve made a typing mistake -- and when the error is due to spaces in the filename, using quotes is the fix.']","[<code>$ echo hello &gt;
bash: syntax error near unexpected token `newline`

$ echo hello &gt; ${NONEXISTENT}
bash: ${NONEXISTENT}: ambiguous redirect

$ echo hello &gt; ""${NONEXISTENT}""
bash: : No such file or directory
</code>]"
411,https://stackoverflow.com/questions/18006581/,"['You need the cat (short for concatenate) command, with shell redirection (>) into your output file ']","[<code>cat</code>, <code>&gt;</code>, <code>cat 1.txt 2.txt 3.txt &gt; 0.txt
</code>]"
412,https://stackoverflow.com/questions/9377040/,"['You can sort then uniq:', 'Or use awk:']","[<code>sort</code>, <code>uniq</code>, <code>$ sort -u input.txt
</code>, <code>awk</code>, <code>$ awk '!a[$0]++' input.txt
</code>]"
413,https://stackoverflow.com/questions/245406/,"['Will unset the function named z.  A couple people have answered with:', 'but if you have a function and a variable named z only the variable will be unset, not the function.']","[<code>unset -f z
</code>, <code>unset z
</code>]"
414,https://stackoverflow.com/questions/11003418/,"['Exporting the function should do it (untested):', 'You can use the builtin printf instead of the external seq:', ""Also, using return 0 and exit 0 like that masks any error value that might be produced by the command preceding it. Also, if there's no error, it's the default and thus somewhat redundant."", '@phobic mentions that the Bash command could be simplified to', ""moving the {} directly inside it. But it's vulnerable to command injection as pointed out by @Sasha."", 'Here is an example why you should not use the embedded format:', 'Another example of why not:', 'This is what is output using the safe format:', 'This is comparable to using parameterized SQL queries to avoid injection.', ""I'm using date in a command substitution or in escaped quotes here instead of the rm command used in Sasha's comment since it's non-destructive.""]","[<code>export -f echo_var
seq -f ""n%04g"" 1 100 | xargs -n 1 -P 10 -I {} bash -c 'echo_var ""$@""' _ {}
</code>, <code>printf</code>, <code>seq</code>, <code>printf ""n%04g\n"" {1..100} | xargs -n 1 -P 10 -I {} bash -c 'echo_var ""$@""' _ {}
</code>, <code>return 0</code>, <code>exit 0</code>, <code>bash -c 'echo_var ""{}""'
</code>, <code>{}</code>, <code>$ echo '$(date)' | xargs -I {} bash -c 'echo_var ""{}""'
Sun Aug 18 11:56:45 CDT 2019
</code>, <code>echo '\""; date\""' | xargs -I {} bash -c 'echo_var ""{}""'
</code>, <code>$ echo '$(date)' | xargs -I {} bash -c 'echo_var ""$@""' _ {}
$(date)
</code>, <code>date</code>, <code>rm</code>]"
415,https://stackoverflow.com/questions/1537673/,"['Use the shift built-in command to ""eat"" the arguments. Then call the child process and pass it the ""$@"" argument to include all remaining arguments. Notice the quotes, they should be kept, since they cause the expansion of the argument list to be properly quoted.']","[<code>shift</code>, <code>""$@""</code>]"
416,https://stackoverflow.com/questions/185451/,"[""Here's an implementation that uses a lockfile and echoes a PID into it. This serves as a protection if the process is killed before removing the pidfile:"", ""The trick here is the kill -0 which doesn't deliver any signal but just checks if a process with the given PID exists.  Also the call to trap will ensure that the lockfile is removed even when your process is killed (except kill -9).""]","[<code>LOCKFILE=/tmp/lock.txt
if [ -e ${LOCKFILE} ] &amp;&amp; kill -0 `cat ${LOCKFILE}`; then
    echo ""already running""
    exit
fi

# make sure the lockfile is removed when we exit and then claim it
trap ""rm -f ${LOCKFILE}; exit"" INT TERM EXIT
echo $$ &gt; ${LOCKFILE}

# do stuff
sleep 1000

rm -f ${LOCKFILE}
</code>, <code>kill -0</code>, <code>trap</code>, <code>kill -9</code>]"
417,https://stackoverflow.com/questions/10382141/,"['You can run the cd and the executable in a subshell by enclosing the command line in a pair of parentheses:', 'Demo:']","[<code>cd</code>, <code>(cd SOME_PATH &amp;&amp; exec_some_command)
</code>, <code>$ pwd
/home/abhijit
$ (cd /tmp &amp;&amp; pwd)  # directory changed in the subshell
/tmp 
$ pwd               # parent shell's pwd is still the same
/home/abhijit
</code>]"
418,https://stackoverflow.com/questions/3127977/,"['There is no ""hardware beep"" in macOS.', ""The functionality you're thinking of is an artifact of very old (pre-1990s) IBM PC-compatible hardware. Before most computers had sound cards, most machines had a small speaker or piezo buzzer connected to one of the channels of a timer chip. This could be used to generate simple tones or beeps. Even after many computers integrated sound cards, it remained common for quite some time for computers to route this output to a separate internal speaker. More recently, many computers, especially laptops, have integrated this functionality into the onboard sound card."", ""(If you're curious about the technical details of how the PC speaker interface worked, there are more details here.)"", ""This hardware has never existed in Apple computers. The only audio output available is through the sound card, and the only system beep in macOS is the user's alert sound.""]",[]
419,https://stackoverflow.com/questions/2107945/,"['A short explanation: ', 'find finds files (quite obviously)', '. is the current directory, which after the cd is /tmp (IMHO this is more flexible than having /tmp directly in the find command. You have only one place, the cd, to change, if you want more actions to take place in this folder)', ""-maxdepth 1 and -mindepth 1 make sure that find only looks in the current directory and doesn't include . itself in the result"", '-type d looks only for directories', ""-printf '%f\\n prints only the found folder's name (plus a newline) for each hit."", 'Et voilà!']","[<code>cd /tmp
find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n'
</code>, <code>find</code>, <code>.</code>, <code>cd</code>, <code>/tmp</code>, <code>/tmp</code>, <code>find</code>, <code>cd</code>, <code>-maxdepth 1</code>, <code>-mindepth 1</code>, <code>find</code>, <code>.</code>, <code>-type d</code>, <code>-printf '%f\n</code>]"
420,https://stackoverflow.com/questions/6871859/,"[""Since you're running bash, you can use its $PIPESTATUS variable instead of $?:""]","[<code>bash</code>, <code>$?</code>, <code>mvn clean install $@ | tee $logfile
echo ${PIPESTATUS[0]}
</code>]"
421,https://stackoverflow.com/questions/7901517/,"['Just add them in one line command 2>> error 1>> output', 'However, note that >> is for appending if the file already has data. Whereas, > will overwrite any existing data in the file.', 'So, command 2> error 1> output if you do  not want to append.', ""Just for completion's sake, you can write 1> as just > since the default file descriptor is the output. so 1> and > is the same thing."", 'So, command 2> error 1> output becomes, command 2> error > output']","[<code>command 2&gt;&gt; error 1&gt;&gt; output</code>, <code>&gt;&gt;</code>, <code>&gt;</code>, <code>command 2&gt; error 1&gt; output</code>, <code>1&gt;</code>, <code>&gt;</code>, <code>1&gt;</code>, <code>&gt;</code>, <code>command 2&gt; error 1&gt; output</code>, <code>command 2&gt; error &gt; output</code>]"
422,https://stackoverflow.com/questions/17420994/,"['To match regexes you need to use the =~ operator.', 'Try this:', 'Alternatively, you can use wildcards (instead of regexes) with the == operator:', 'If portability is not a concern, I recommend using [[ instead of [ or test as it is safer and more powerful. See What is the difference between test, [ and [[ ? for details.']","[<code>=~</code>, <code>[[ sed-4.2.2.tar.bz2 =~ tar.bz2$ ]] &amp;&amp; echo matched
</code>, <code>==</code>, <code>[[ sed-4.2.2.tar.bz2 == *tar.bz2 ]] &amp;&amp; echo matched
</code>, <code>[[</code>, <code>[</code>, <code>test</code>]"
423,https://stackoverflow.com/questions/407184/,"['I think you want to say ""Are the last four characters of $file equal to .txt?""  If so, you can use the following:', ""Note that the space between file: and -4 is required, as the ':-' modifier means something different.""]","[<code>.txt</code>, <code>if [ ${file: -4} == "".txt"" ]
</code>, <code>file:</code>, <code>-4</code>]"
424,https://stackoverflow.com/questions/7017143/,"['Just write that line to a file ""cd.sh"", then do this from your shell prompt:', 'Or you can create an alias or function in your $HOME/.bashrc file:', ""If the directory name includes spaces or other shell metacharacters, you'll need quotation marks; it won't hurt to add them even if they're not necessary:"", ""(Note that I've omitted the ../../..; you don't need it.)"", 'EDIT: If you add a line', ""to your .bashrc after the function definition, your shell will start in that directory. Or you can just use the cd command directly in your .bashrc if you aren't going to need to use the function later."", '(The name foo is just an example; you should pick a more meaningful name.)']","[<code>. ./cd.sh
</code>, <code>$HOME/.bashrc</code>, <code>foo() { cd /d/work_space_for_my_company/project/code_source ; }
</code>, <code>foo() { cd ""/d/Work Space/project/code_source"" ; }
</code>, <code>../../..</code>, <code>foo
</code>, <code>.bashrc</code>, <code>cd</code>, <code>.bashrc</code>, <code>foo</code>]"
425,https://stackoverflow.com/questions/12230690/,"[""[[ is a bash-builtin. Your /bin/bash doesn't seem to be an actual bash."", 'From a comment:', 'Add #!/bin/bash at the top of file']","[<code>[[</code>, <code>/bin/bash</code>, <code>#!/bin/bash</code>]"
426,https://stackoverflow.com/questions/2437452/,[],"[<code>for entry in ""$search_dir""/*
do
  echo ""$entry""
done
</code>]"
427,https://stackoverflow.com/questions/12711786/,"['Actually your command line arguments are practically like an array already. At least, you can treat the $@ variable much like an array. That said, you can convert it into an actual array like this:', 'If you just want to type some arguments and feed them into the $@ value, use set:', 'Understanding how to use the argument structure is particularly useful in POSIX sh, which has nothing else like an array.']","[<code>$@</code>, <code>myArray=( ""$@"" )
</code>, <code>$@</code>, <code>set</code>, <code>$ set -- apple banana ""kiwi fruit""
$ echo ""$#""
3
$ echo ""$@""
apple banana kiwi fruit
</code>]"
428,https://stackoverflow.com/questions/13939038/,"['This is because there is not only 1 answer...', 'Regarding the OP request: running chmod on all targets listed in file, xargs is the indicated tool. But for some other applications, small amount of files, etc...', 'If your file is not too big and all files are well named (without spaces or other special chars like quotes), you could use shell command line expansion. Simply:', 'For small amount of files (lines), this command is the lighter one.', 'For bigger amount of files, or almost any number of lines in your input file...', 'For many binutils tools, like chown, chmod, rm, cp -t ...', 'If you have special chars and/or a lot of lines in file.txt.', 'if your command need to be run exactly 1 time by entry:', 'This is not needed for this sample, as chmod accept multiple files as argument, but this match the title of question.', 'For some special case, you could even define location of file argument in commands generateds by xargs:', 'Try this:', 'Where commande is done once per line.', 'As OP suggest cat file.txt | while read in; do chmod 755 ""$in""; done will work, but there is 2 issues:', 'cat | is an useless fork, and', '| while ... ;done will become a subshell where environment will disapear after ;done.', 'So this could be better written:', 'But,', 'You may be warned about $IFS and read flags:', 'In some case, you may need to use', 'For avoiding problems with stranges filenames. And maybe if you encouter problems with UTF-8:', 'While you use STDIN for reading file.txt, your script could not be interactive (you cannot use STDIN anymore).', ""Syntax: while read ...;done <file.txt will redirect STDIN to file.txt. That mean, you won't be able to deal with process, until they finish."", 'If you plan to create interactive tool, you have to avoid use of STDIN and use some alternative file descriptor.', 'Constants file descriptors are: 0 for STDIN, 1 for STDOUT and 2 for STDERR. You could see them by:', 'or', 'From there, you have to choose unused number, between 0 and 63 (more, in fact, depending on sysctl superuser tool) as file descriptor:', 'For this demo, I will use fd 7:', '', '', 'Then you could use read -u 7 this way:', '', 'To close fd/7:', '', 'Nota: I let striked version because this syntax could be usefull, when doing many I/O with parallels process:']","[<code>shell</code>, <code>xargs</code>, <code>while read</code>, <code>while read -u</code>, <code>fd</code>, <code>chmod</code>, <code>xargs</code>, <code>shell</code>, <code>chmod 755 $(&lt;file.txt)
</code>, <code>xargs</code>, <code>chown</code>, <code>chmod</code>, <code>rm</code>, <code>cp -t</code>, <code>xargs chmod 755 &lt;file.txt
</code>, <code>file.txt</code>, <code>xargs -0 chmod 755 &lt; &lt;(tr \\n \\0 &lt;file.txt)
</code>, <code>xargs -0 -n 1 chmod 755 &lt; &lt;(tr \\n \\0 &lt;file.txt)
</code>, <code>chmod</code>, <code>xargs</code>, <code>xargs -0 -I '{}' -n 1 myWrapper -arg1 -file='{}' wrapCmd &lt; &lt;(tr \\n \\0 &lt;file.txt)
</code>, <code>seq 1 5</code>, <code>xargs -n 1 -I{} echo Blah {} blabla {}.. &lt; &lt;(seq 1 5)
Blah 1 blabla 1..
Blah 2 blabla 2..
Blah 3 blabla 3..
Blah 4 blabla 4..
Blah 5 blabla 5..
</code>, <code>while read</code>, <code>cat file.txt | while read in; do chmod 755 ""$in""; done</code>, <code>cat |</code>, <code>| while ... ;done</code>, <code>;done</code>, <code>while read in; do chmod 755 ""$in""; done &lt; file.txt
</code>, <code>$IFS</code>, <code>read</code>, <code>help read
</code>, <code>read: read [-r] ... [-d delim] ... [name ...]
    ...
    Reads a single line from the standard input... The line is split
    into fields as with word splitting, and the first word is assigned
    to the first NAME, the second word to the second NAME, and so on...
    Only the characters found in $IFS are recognized as word delimiters.
    ...
    Options:
      ...
      -d delim   continue until the first character of DELIM is read, 
                 rather than newline
      ...
      -r do not allow backslashes to escape any characters
    ...
    Exit Status:
    The return code is zero, unless end-of-file is encountered...
</code>, <code>while IFS= read -r in;do chmod 755 ""$in"";done &lt;file.txt
</code>, <code>UTF-8</code>, <code>while LANG=C IFS= read -r in ; do chmod 755 ""$in"";done &lt;file.txt
</code>, <code>STDIN</code>, <code>file.txt</code>, <code>STDIN</code>, <code>while read -u</code>, <code>fd</code>, <code>while read ...;done &lt;file.txt</code>, <code>STDIN</code>, <code>file.txt</code>, <code>STDIN</code>, <code>0</code>, <code>1</code>, <code>2</code>, <code>ls -l /dev/fd/
</code>, <code>ls -l /proc/self/fd/
</code>, <code>0</code>, <code>63</code>, <code>sysctl</code>, <code>7</code>, <code>exec 7&lt;file.txt      # Without spaces between `7` and `&lt;`!
ls -l /dev/fd/
</code>, <code>read -u 7</code>, <code>while read -u 7 filename;do
    ans=;while [ -z ""$ans"" ];do
        read -p ""Process file '$filename' (y/n)? "" -sn1 foo
        [ ""$foo"" ]&amp;&amp; [ -z ""${foo/[yn]}"" ]&amp;&amp; ans=$foo || echo '??'
    done
    if [ ""$ans"" = ""y"" ] ;then
        echo Yes
        echo ""Processing '$filename'.""
    else
        echo No
    fi
done 7&lt;file.txt
</code>, <code>done
</code>, <code>fd/7</code>, <code>exec 7&lt;&amp;-            # This will close file descriptor 7.
ls -l /dev/fd/
</code>, <code>mkfifo sshfifo
exec 7&gt; &gt;(ssh -t user@host sh &gt;sshfifo)
exec 6&lt;sshfifo
</code>]"
429,https://stackoverflow.com/questions/2314750/,"['Try:', 'or', 'Notice no spaces after the equals sign.', ""Also as Mr. Weiss points out; you don't assign to $pwd, you assign to pwd.""]","[<code>pwd=`pwd`
</code>, <code>pwd=$(pwd)
</code>, <code>$pwd</code>, <code>pwd</code>]"
430,https://stackoverflow.com/questions/5386482/,"['You have a few options other than using public key authentication:', 'If you decide to give sshpass a chance here is a working script snippet to do so:']","[<code>export SSHPASS=your-password-here
sshpass -e sftp -oBatchMode=no -b - sftp-user@remote-host &lt;&lt; !
   cd incoming
   put your-log-file.log
   bye
!
</code>]"
431,https://stackoverflow.com/questions/7780030/,"['Terminal opens a login shell. This means, ~/.bash_profile will get executed, ~/.bashrc not.', 'The solution on most systems is to ""require"" the ~/.bashrc in the ~/.bash_profile: just put this snippet in your ~/.bash_profile:']","[<code>~/.bash_profile</code>, <code>~/.bashrc</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>~/.bash_profile</code>, <code>[[ -s ~/.bashrc ]] &amp;&amp; source ~/.bashrc
</code>]"
432,https://stackoverflow.com/questions/5688576/,"['Try the following:', 'The $((    )) syntax does an arithmetic evaluation of the contents.']","[<code> for i in {1..600}; do echo wget http://example.com/search/link$(($i % 5)); done
</code>, <code>$((    ))</code>]"
433,https://stackoverflow.com/questions/15580144/,"[""Use tr '\\n' ' ' to translate all newline characters to spaces:"", ""Note: grep reads files, cat concatenates files. Don't cat file | grep!"", 'Edit:', 'tr can only handle single character translations. You could use awk to change the output record separator like:', 'This would transform:', 'to:']","[<code>tr '\n' ' '</code>, <code>$ grep pattern file | tr '\n' ' '
</code>, <code>grep</code>, <code>cat</code>, <code>cat file | grep</code>, <code>tr</code>, <code>awk</code>, <code>$ grep pattern file | awk '{print}' ORS='"" '
</code>, <code>one
two 
three
</code>, <code>one"" two"" three"" 
</code>]"
434,https://stackoverflow.com/questions/7103531/,"['The following will print the line matching TERMINATE till the end of the file:', 'Explained: -n disables default behavior of sed of printing each line after executing its script on it, -e indicated a script to sed, /TERMINATE/,$ is an address (line) range selection meaning the first line matching the TERMINATE regular expression (like grep) to the end of the file ($), and p is the print command which prints the current line.', 'This will print from the line that follows the line matching TERMINATE till the end of the file:\n(from AFTER the matching line to EOF, NOT including the matching line)', 'Explained: 1,/TERMINATE/ is an address (line) range selection meaning the first line for the input to the 1st line matching the TERMINATE regular expression, and d is the delete command which delete the current line and skip to the next line.  As sed default behavior is to print the lines, it will print the lines after TERMINATE  to the end of input.', 'Edit:', 'If you want the lines before TERMINATE:', 'And if you want both lines before and after TERMINATE in 2 different files in a single pass:', 'The before and after files will contain the line with terminate, so to process each you need to use:', 'Edit2:', 'IF you do not want to hard-code the filenames in the sed script, you can:', 'But then you have to escape the $ meaning the last line so the shell will not try to expand the $w variable (note that we now use double quotes around the script instead of single quotes).', 'I forgot to tell that the new line is important after the filenames in the script so that sed knows that the filenames end.', '\nEdit: 2016-0530', 'Sébastien Clément asked: ""How would you replace the hardcoded TERMINATE by a variable?""', 'You would make a variable for the matching text and then do it the same way as the previous example:  ', 'to use a variable for the matching text with the previous examples:', 'The important points about replacing text with variables in these cases are:  ']","[<code>TERMINATE</code>, <code>sed -n -e '/TERMINATE/,$p'
</code>, <code>-n</code>, <code>sed</code>, <code>-e</code>, <code>sed</code>, <code>/TERMINATE/,$</code>, <code>TERMINATE</code>, <code>$</code>, <code>p</code>, <code>TERMINATE</code>, <code>sed -e '1,/TERMINATE/d'
</code>, <code>1,/TERMINATE/</code>, <code>TERMINATE</code>, <code>d</code>, <code>sed</code>, <code>TERMINATE</code>, <code>TERMINATE</code>, <code>sed -e '/TERMINATE/,$d'
</code>, <code>TERMINATE</code>, <code>sed -e '1,/TERMINATE/w before
/TERMINATE/,$w after' file
</code>, <code>head -n -1 before
tail -n +2 after
</code>, <code>before=before.txt
after=after.txt
sed -e ""1,/TERMINATE/w $before
/TERMINATE/,\$w $after"" file
</code>, <code>$</code>, <code>$w</code>, <code>TERMINATE</code>, <code>matchtext=TERMINATE
before=before.txt
after=after.txt
sed -e ""1,/$matchtext/w $before
/$matchtext/,\$w $after"" file
</code>, <code>## Print the line containing the matching text, till the end of the file:
## (from the matching line to EOF, including the matching line)
matchtext=TERMINATE
sed -n -e ""/$matchtext/,\$p""
</code>, <code>## Print from the line that follows the line containing the 
## matching text, till the end of the file:
## (from AFTER the matching line to EOF, NOT including the matching line)
matchtext=TERMINATE
sed -e ""1,/$matchtext/d""
</code>, <code>## Print all the lines before the line containing the matching text:
## (from line-1 to BEFORE the matching line, NOT including the matching line)
matchtext=TERMINATE
sed -e ""/$matchtext/,\$d""
</code>, <code>$variablename</code>, <code>single quotes</code>, <code>'</code>, <code>double quotes</code>, <code>""</code>, <code>single quotes</code>, <code>double quotes</code>, <code>sed</code>, <code>$</code>, <code>$p</code>, <code>$d</code>, <code>$w</code>, <code>$</code>, <code>\</code>, <code>\$p</code>, <code>\$d</code>, <code>\$w</code>]"
435,https://stackoverflow.com/questions/8737638/,"[""In shell, you don't put a $ in front of a variable you're assigning.  You only use $IP when you're referring to the variable.""]","[<code>#!/bin/bash

IP=$(curl automation.whatismyip.com/n09230945.asp)

echo ""$IP""

sed ""s/IP/$IP/"" nsupdate.txt | nsupdate
</code>]"
436,https://stackoverflow.com/questions/16553089/,"['Use an associative array, with command names as keys.', ""If you can't use associative arrays (e.g., you must support bash 3), you can use declare to create dynamic variable names:"", 'and use indirect parameter expansion to access the value.', 'See BashFAQ: Indirection - Evaluating indirect/reference variables.']","[<code># Requires bash 4, though
declare -A magic_variable=()

function grep_search() {
    magic_variable[$1]=$( ls | tail -1 )
    echo ${magic_variable[$1]}
}
</code>, <code>bash</code>, <code>declare</code>, <code>declare ""magic_variable_$1=$(ls | tail -1)""
</code>, <code>var=""magic_variable_$1""
echo ""${!var}""
</code>]"
437,https://stackoverflow.com/questions/10520623/,"[""If your solution doesn't have to be general, i.e. only needs to work for strings like your example, you could do:"", 'I chose cut here because you could simply extend the code for a few more variables...']","[<code>var1=$(echo $STR | cut -f1 -d-)
var2=$(echo $STR | cut -f2 -d-)
</code>, <code>cut</code>]"
438,https://stackoverflow.com/questions/1706882/,"['Sorry not mentioning I on Solaris system.\nAs such, the -date switch is not available on Solaris bash.', 'I find out I can get the previous date with little trick on timezone.']","[<code>DATE=`TZ=MYT+16 date +%Y-%m-%d_%r`
echo $DATE
</code>]"
439,https://stackoverflow.com/questions/11065077/,"[""eval takes a string as its argument, and evaluates it as if you'd typed that string on a command line. (If you pass several arguments, they are first joined with spaces between them.)"", ""${$n} is a syntax error in bash. Inside the braces, you can only have a variable name, with some possible prefix and suffixes, but you can't have arbitrary bash syntax and in particular you can't use variable expansion. There is a way of saying “the value of the variable whose name is in this variable”, though:"", '$(…) runs the command specified inside the parentheses in a subshell (i.e. in a separate process that inherits all settings such as variable values from the current shell), and gathers its output. So echo $($n) runs $n as a shell command, and displays its output. Since $n evaluates to 1, $($n) attempts to run the command 1, which does not exist.', 'eval echo \\${$n} runs the parameters passed to eval. After expansion, the parameters are echo and ${1}. So eval echo \\${$n} runs the command echo ${1}.', 'Note that most of the time, you must use double quotes around variable substitutions and command substitutions (i.e. anytime there\'s a $): ""$foo"", ""$(foo)"". Always put double quotes around variable and command substitutions, unless you know you need to leave them off. Without the double quotes, the shell performs field splitting (i.e. it splits value of the variable or the output from the command into separate words) and then treats each word as a wildcard pattern. For example:', 'eval is not used very often. In some shells, the most common use is to obtain the value of a variable whose name is not known until runtime. In bash, this is not necessary thanks to the ${!VAR} syntax. eval is still useful when you need to construct a longer command containing operators, reserved words, etc.']","[<code>eval</code>, <code>${$n}</code>, <code>echo ${!n}
one
</code>, <code>$(…)</code>, <code>echo $($n)</code>, <code>$n</code>, <code>$n</code>, <code>1</code>, <code>$($n)</code>, <code>1</code>, <code>eval echo \${$n}</code>, <code>eval</code>, <code>echo</code>, <code>${1}</code>, <code>eval echo \${$n}</code>, <code>echo ${1}</code>, <code>$</code>, <code>""$foo"", ""$(foo)""</code>, <code>$ ls
file1 file2 otherfile
$ set -- 'f* *'
$ echo ""$1""
f* *
$ echo $1
file1 file2 file1 file2 otherfile
$ n=1
$ eval echo \${$n}
file1 file2 file1 file2 otherfile
$eval echo \""\${$n}\""
f* *
$ echo ""${!n}""
f* *
</code>, <code>eval</code>, <code>${!VAR}</code>, <code>eval</code>]"
440,https://stackoverflow.com/questions/1056394/,"['Press Ctrl-U to delete everything before the cursor. The deleted command will be stored into a buffer. Press Ctrl-Y to paste the deleted command.', '(Optional: Press End or Ctrl-E to jump to the end of the input first.)', ""Alternatively, press Ctrl-C to abort what you're typing.""]",[]
441,https://stackoverflow.com/questions/8260858/,"['Go into Terminal and type man mail for help.', 'You will need to set SMTP up:', 'http://hints.macworld.com/article.php?story=20081217161612647', 'See also:', 'http://www.mactricksandtips.com/2008/09/send-mail-over-your-network.html', 'Eg:', 'This will send an email to example@example.com with the subject hello and the message', 'Hello', 'World']","[<code>man mail</code>, <code>SMTP</code>, <code>mail -s ""hello"" ""example@example.com"" &lt;&lt;EOF
hello
world
EOF
</code>, <code>example@example.com</code>, <code>hello</code>]"
442,https://stackoverflow.com/questions/15374752/,"['I think this should work, irrespective of how often and when you run it ... ']","[<code>date -d ""yesterday 13:00"" '+%Y-%m-%d'
</code>]"
443,https://stackoverflow.com/questions/1356827/,"[""ShellEd looks promising, does syntax highlighting, and has positive reviews, although I've not tried it myself. It was approved for distro inclusion by Redhat. There's a little more info on the ShellEd plugin page on the Eclipse site, and installation instructions on their wiki."", ""Note that if you're not running an up-to-date version of Eclipse (as of this writing, Juno) you'll need to use an older version, for instance 2.0.1 is compatible with Indigo.""]",[]
444,https://stackoverflow.com/questions/4175264/,"['use:', 'to get all files or', 'to display full path (if relative path matters to)']","[<code>find ""$(pwd)""/ -type f
</code>, <code>echo ""$(pwd)/$line""
</code>]"
445,https://stackoverflow.com/questions/415677/,"['Sed!', 'Given template.txt:', 'we just have to say:', 'Thanks to Jonathan Leffler for the tip to pass multiple -e arguments to the same sed invocation.']","[<code>sed -e ""s/\${i}/1/"" -e ""s/\${word}/dog/"" template.txt
</code>, <code>-e</code>, <code>sed</code>]"
446,https://stackoverflow.com/questions/78497/,"['I wrote quite complex shell scripts and my first suggestion is ""don\'t"". The reason is that is fairly easy to make a small mistake that hinders your script, or even make it dangerous.', ""That said, I don't have other resources to pass you but my personal experience. \nHere is what I normally do, which is overkill, but tends to be solid, although very verbose."", 'Invocation', 'make your script accept long and short options. be careful because there are two commands to parse options, getopt and getopts. Use getopt as you face less trouble.', 'Another important point is that a program should always return zero if completes successfully, non-zero if something went wrong.', 'Function calls', 'You can call functions in bash, just remember to define them before the call. Functions are like scripts, they can only return numeric values. This means that you have to invent a different strategy to return string values. My strategy is to use a variable called RESULT to store the result, and returning 0 if the function completed cleanly. \nAlso, you can raise exceptions if you are returning a value different from zero, and then set two ""exception variables"" (mine: EXCEPTION and EXCEPTION_MSG), the first containing the exception type and the second a human readable message.', 'When you call a function, the parameters of the function are assigned to the special vars $0, $1 etc. I suggest you to put them into more meaningful names. declare the variables inside the function as local:', 'Error prone situations', 'In bash, unless you declare otherwise, an unset variable is used as an empty string. This is very dangerous in case of typo, as the badly typed variable will not be reported, and it will be evaluated as empty. use', 'to prevent this to happen. Be careful though, because if you do this, the program will abort every time you evaluate an undefined variable. For this reason, the only way to check if a variable is not defined is the following:', 'You can declare variables as readonly:', 'Modularization', 'You can achieve ""python like"" modularization if you use the following code:', 'you can then import files with the extension .shinc with the following syntax', 'import ""AModule/ModuleFile""', 'Which will be searched in SHELL_LIBRARY_PATH. As you always import in the global namespace, remember to prefix all your functions and variables with a proper prefix, otherwise you risk name clashes. I use double underscore as the python dot.', 'Also, put this as first thing in your module', 'Object oriented programming', 'In bash, you cannot do object oriented programming, unless you build a quite complex system of allocation of objects (I thought about that. it\'s feasible, but insane).\nIn practice, you can however do ""Singleton oriented programming"": you have one instance of each object, and only one.', 'What I do is: i define an object into a module (see the modularization entry). Then I define empty vars (analogous to member variables) an init function (constructor) and member functions, like in this example code', 'Trapping and handling signals', 'I found this useful to catch and handle exceptions.', 'Hints and tips', 'If something does not work for some reason, try to reorder the code. Order is important and not always intuitive.', ""do not even consider working with tcsh. it does not support functions, and it's horrible in general. "", 'Hope it helps, although please note. If you have to use the kind of things I wrote here, it means that your problem is too complex to be solved with shell. use another language. I had to use it due to human factors and legacy.']","[<code>CommandLineOptions__config_file=""""
CommandLineOptions__debug_level=""""

getopt_results=`getopt -s bash -o c:d:: --long config_file:,debug_level:: -- ""$@""`

if test $? != 0
then
    echo ""unrecognized option""
    exit 1
fi

eval set -- ""$getopt_results""

while true
do
    case ""$1"" in
        --config_file)
            CommandLineOptions__config_file=""$2"";
            shift 2;
            ;;
        --debug_level)
            CommandLineOptions__debug_level=""$2"";
            shift 2;
            ;;
        --)
            shift
            break
            ;;
        *)
            echo ""$0: unparseable option $1""
            EXCEPTION=$Main__ParameterException
            EXCEPTION_MSG=""unparseable option $1""
            exit 1
            ;;
    esac
done

if test ""x$CommandLineOptions__config_file"" == ""x""
then
    echo ""$0: missing config_file parameter""
    EXCEPTION=$Main__ParameterException
    EXCEPTION_MSG=""missing config_file parameter""
    exit 1
fi
</code>, <code>function foo {
   local bar=""$0""
}
</code>, <code>set -o nounset
</code>, <code>if test ""x${foo:-notset}"" == ""xnotset""
then
    echo ""foo not set""
fi
</code>, <code>readonly readonly_var=""foo""
</code>, <code>set -o nounset
function getScriptAbsoluteDir {
    # @description used to get the script path
    # @param $1 the script $0 parameter
    local script_invoke_path=""$1""
    local cwd=`pwd`

    # absolute path ? if so, the first character is a /
    if test ""x${script_invoke_path:0:1}"" = 'x/'
    then
        RESULT=`dirname ""$script_invoke_path""`
    else
        RESULT=`dirname ""$cwd/$script_invoke_path""`
    fi
}

script_invoke_path=""$0""
script_name=`basename ""$0""`
getScriptAbsoluteDir ""$script_invoke_path""
script_absolute_dir=$RESULT

function import() { 
    # @description importer routine to get external functionality.
    # @description the first location searched is the script directory.
    # @description if not found, search the module in the paths contained in $SHELL_LIBRARY_PATH environment variable
    # @param $1 the .shinc file to import, without .shinc extension
    module=$1

    if test ""x$module"" == ""x""
    then
        echo ""$script_name : Unable to import unspecified module. Dying.""
        exit 1
    fi

    if test ""x${script_absolute_dir:-notset}"" == ""xnotset""
    then
        echo ""$script_name : Undefined script absolute dir. Did you remove getScriptAbsoluteDir? Dying.""
        exit 1
    fi

    if test ""x$script_absolute_dir"" == ""x""
    then
        echo ""$script_name : empty script path. Dying.""
        exit 1
    fi

    if test -e ""$script_absolute_dir/$module.shinc""
    then
        # import from script directory
        . ""$script_absolute_dir/$module.shinc""
    elif test ""x${SHELL_LIBRARY_PATH:-notset}"" != ""xnotset""
    then
        # import from the shell script library path
        # save the separator and use the ':' instead
        local saved_IFS=""$IFS""
        IFS=':'
        for path in $SHELL_LIBRARY_PATH
        do
            if test -e ""$path/$module.shinc""
            then
                . ""$path/$module.shinc""
                return
            fi
        done
        # restore the standard separator
        IFS=""$saved_IFS""
    fi
    echo ""$script_name : Unable to find module $module.""
    exit 1
} 
</code>, <code># avoid double inclusion
if test ""${BashInclude__imported+defined}"" == ""defined""
then
    return 0
fi
BashInclude__imported=1
</code>, <code># avoid double inclusion
if test ""${Table__imported+defined}"" == ""defined""
then
    return 0
fi
Table__imported=1

readonly Table__NoException=""""
readonly Table__ParameterException=""Table__ParameterException""
readonly Table__MySqlException=""Table__MySqlException""
readonly Table__NotInitializedException=""Table__NotInitializedException""
readonly Table__AlreadyInitializedException=""Table__AlreadyInitializedException""

# an example for module enum constants, used in the mysql table, in this case
readonly Table__GENDER_MALE=""GENDER_MALE""
readonly Table__GENDER_FEMALE=""GENDER_FEMALE""

# private: prefixed with p_ (a bash variable cannot start with _)
p_Table__mysql_exec="""" # will contain the executed mysql command 

p_Table__initialized=0

function Table__init {
    # @description init the module with the database parameters
    # @param $1 the mysql config file
    # @exception Table__NoException, Table__ParameterException

    EXCEPTION=""""
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    RESULT=""""

    if test $p_Table__initialized -ne 0
    then
        EXCEPTION=$Table__AlreadyInitializedException   
        EXCEPTION_MSG=""module already initialized""
        EXCEPTION_FUNC=""$FUNCNAME""
        return 1
    fi


    local config_file=""$1""

      # yes, I am aware that I could put default parameters and other niceties, but I am lazy today
      if test ""x$config_file"" = ""x""; then
          EXCEPTION=$Table__ParameterException
          EXCEPTION_MSG=""missing parameter config file""
          EXCEPTION_FUNC=""$FUNCNAME""
          return 1
      fi


    p_Table__mysql_exec=""mysql --defaults-file=$config_file --silent --skip-column-names -e ""

    # mark the module as initialized
    p_Table__initialized=1

    EXCEPTION=$Table__NoException
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    return 0

}

function Table__getName() {
    # @description gets the name of the person 
    # @param $1 the row identifier
    # @result the name

    EXCEPTION=""""
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    RESULT=""""

    if test $p_Table__initialized -eq 0
    then
        EXCEPTION=$Table__NotInitializedException
        EXCEPTION_MSG=""module not initialized""
        EXCEPTION_FUNC=""$FUNCNAME""
        return 1
    fi

    id=$1

      if test ""x$id"" = ""x""; then
          EXCEPTION=$Table__ParameterException
          EXCEPTION_MSG=""missing parameter identifier""
          EXCEPTION_FUNC=""$FUNCNAME""
          return 1
      fi

    local name=`$p_Table__mysql_exec ""SELECT name FROM table WHERE id = '$id'""`
      if test $? != 0 ; then
        EXCEPTION=$Table__MySqlException
        EXCEPTION_MSG=""unable to perform select""
        EXCEPTION_FUNC=""$FUNCNAME""
        return 1
      fi

    RESULT=$name
    EXCEPTION=$Table__NoException
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    return 0
}
</code>, <code>function Main__interruptHandler() {
    # @description signal handler for SIGINT
    echo ""SIGINT caught""
    exit
} 
function Main__terminationHandler() { 
    # @description signal handler for SIGTERM
    echo ""SIGTERM caught""
    exit
} 
function Main__exitHandler() { 
    # @description signal handler for end of the program (clean or unclean). 
    # probably redundant call, we already call the cleanup in main.
    exit
} 

trap Main__interruptHandler INT
trap Main__terminationHandler TERM
trap Main__exitHandler EXIT

function Main__main() {
    # body
}

# catch signals and exit
trap exit INT TERM EXIT

Main__main ""$@""
</code>]"
447,https://stackoverflow.com/questions/13542832/,"['Single [] are posix shell compliant condition tests.', 'Double [[]] are an extension to the standard [] and are supported by bash and other shells (e.g. zsh, ksh). They support extra operations (as well as the standard posix operations). For example: || instead of -o and regex matching with =~. A fuller list of differences can be found in the bash manual section on conditional constructs.', ""Use [] whenever you want your script to be portable across shells. Use [[]] if you want conditional expressions not supported by [] and don't need to be portable.""]","[<code>[]</code>, <code>[[]]</code>, <code>[]</code>, <code>||</code>, <code>-o</code>, <code>=~</code>, <code>[]</code>, <code>[[]]</code>, <code>[]</code>]"
448,https://stackoverflow.com/questions/23963018/,"['Your console is not running as a login shell and hence have no access to rvm function. If you are running Ubuntu, you can:']",[]
449,https://stackoverflow.com/questions/954302/,"['Assuming that you have a program running in the foreground, press ctrl-Z, then:', ""If there is only one job, then you don't need to specify the job number. Just use disown -h and bg."", 'You press ctrl-Z. The system suspends the running program, displays a job number and a ""Stopped"" message and returns you to a bash prompt. ', ""You type the disown -h %1 command (here, I've used a 1, but you'd use the job number that was displayed in the Stopped message) which marks the job so it ignores the SIGHUP signal (it will not be stopped by logging out). "", 'Next, type the bg command using the same job number; this resumes the running of the program in the background and a message is displayed confirming that. ', 'You can now log out and it will continue running..']","[<code>[1]+  Stopped                 myprogram
$ disown -h %1
$ bg 1
[1]+ myprogram &amp;
$ logout
</code>, <code>disown -h</code>, <code>bg</code>, <code>disown -h %1</code>, <code>1</code>, <code>Stopped</code>, <code>SIGHUP</code>, <code>bg</code>]"
450,https://stackoverflow.com/questions/8409946/,"['By default, *.sh files are opened in a text editor (Xcode or TextEdit). To create a shell script that will execute in Terminal when you open it, name it with the “command” extension, e.g., file.command. By default, these are sent to Terminal, which will execute the file as a shell script.', 'You will also need to ensure the file is executable, e.g.:', 'Without this, Terminal will refuse to execute it.', 'Note that the script does not have to begin with a #! prefix in this specific scenario, because Terminal specifically arranges to execute it with your default shell. (Of course, you can add a #! line if you want to customize which shell is used or if you want to ensure that you can execute it from the command line while using a different shell.)', 'Also note that Terminal executes the shell script without changing the working directory. You’ll need to begin your script with a cd command if you actually need it to run with a particular working directory.']","[<code>*.sh</code>, <code>file.command</code>, <code>chmod +x file.command
</code>, <code>#!</code>, <code>#!</code>, <code>cd</code>]"
451,https://stackoverflow.com/questions/4638874/,['find is just made for that.'],"[<code>find</code>, <code>find /tmp -name '*.pdf' -or -name '*.doc' | xargs rm
</code>]"
452,https://stackoverflow.com/questions/12487424/,[],"[<code>foo=""$(tr '[:lower:]' '[:upper:]' &lt;&lt;&lt; ${foo:0:1})${foo:1}""
</code>]"
453,https://stackoverflow.com/questions/1835943/,['You can use ${FUNCNAME[0]} in bash to get the function name.'],"[<code>${FUNCNAME[0]}</code>, <code>bash</code>]"
454,https://stackoverflow.com/questions/2159860/,"[""It is likely that you're using a pager such as less or most since the output of ps aux is longer than a screenful. If so, the following options will cause (or force) long lines to wrap instead of being truncated."", ""If you use either of the following commands, lines won't be wrapped but you can use your arrow keys or other movement keys to scroll left and right."", 'Lines are always wrapped for more and pg.', 'When ps aux is used in a pipe, the w option is unnecessary since ps only uses screen width when output is to the terminal.']","[<code>less</code>, <code>most</code>, <code>ps aux</code>, <code>ps aux | less -+S

ps aux | most -w
</code>, <code>ps aux | less -S    # use arrow keys, or Esc-( and Esc-), or Alt-( and Alt-) 

ps aux | most       # use arrow keys, or &lt; and &gt; (Tab can also be used to scroll right)
</code>, <code>more</code>, <code>pg</code>, <code>ps aux</code>, <code>w</code>, <code>ps</code>]"
455,https://stackoverflow.com/questions/16203088/,"['Use -a (for and) and -o (for or) operations.', 'tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html', 'Update', 'Actually you could still use && and || with the -eq operation. So your script would be like this:', 'Although in your case you can discard the last two expressions and just stick with one or operation like this:']","[<code>-a</code>, <code>-o</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>-eq</code>, <code>my_error_flag=1
my_error_flag_o=1
if [ $my_error_flag -eq 1 ] ||  [ $my_error_flag_o -eq 2 ] || ([ $my_error_flag -eq 1 ] &amp;&amp; [ $my_error_flag_o -eq 2 ]); then
      echo ""$my_error_flag""
else
    echo ""no flag""
fi
</code>, <code>my_error_flag=1
my_error_flag_o=1
if [ $my_error_flag -eq 1 ] ||  [ $my_error_flag_o -eq 2 ]; then
      echo ""$my_error_flag""
else
    echo ""no flag""
fi
</code>]"
456,https://stackoverflow.com/questions/1455988/,"['This will have some overhead, but technically it does answer your question:', 'And for pipelines specifically, there is a clean solution with no overhead:', 'See Stack Overflow question How to Put Line Comment for a Multi-line Command.']","[<code>echo abc `#Put your comment here` \
     def `#Another chance for a comment` \
     xyz, etc.
</code>, <code>echo abc |        # Normal comment OK here
     tr a-z A-Z | # Another normal comment OK here
     sort |       # The pipelines are automatically continued
     uniq         # Final comment
</code>]"
457,https://stackoverflow.com/questions/13702425/,"['/bin/sh is usually some other shell trying to mimic The Shell. Many distributions use /bin/bash for sh, it supports source. On Ubuntu, though, /bin/dash is used which does not support source. Most shells use . instead of source. If you cannot edit the script, try to change the shell which runs it.']","[<code>/bin/sh</code>, <code>/bin/bash</code>, <code>sh</code>, <code>source</code>, <code>/bin/dash</code>, <code>source</code>, <code>.</code>, <code>source</code>]"
458,https://stackoverflow.com/questions/6709349/,"['You can clear your bash history like this:', 'history -cw']",[<code>history -cw</code>]
459,https://stackoverflow.com/questions/13043344/,"['Use sed:', ""Note that the subsequent -e's are processed in order.  Also, the g flag for the expression will match all occurrences in the input."", 'You can also pick your favorite tool using this method, i.e. perl, awk, e.g.:', 'This may allow you to do more creative matches...  For example, in the snip above, the numeric replacement would not be used unless there was a match on the first expression (due to lazy and evaluation).  And of course, you have the full language support of Perl to do your bidding...']","[<code>MYVAR=ho02123ware38384you443d34o3434ingtod38384day
echo ""$MYVAR"" | sed -e 's/[a-zA-Z]/X/g' -e 's/[0-9]/N/g'
# prints XXNNNNNXXXXNNNNNXXXNNNXNNXNNNNXXXXXXNNNNNXXX
</code>, <code>-e</code>, <code>g</code>, <code>echo ""$MYVAR"" | perl -pe 's/[a-zA-Z]/X/g and s/[0-9]/N/g'
</code>, <code>and</code>]"
460,https://stackoverflow.com/questions/2696055/,[],"[<code>comm -12  &lt;(ls 1) &lt;(ls 2)
</code>]"
461,https://stackoverflow.com/questions/13868821/,"['This will do it recursively for you:', 'Explanation:', 'Alternatively, use:', 'Which is a bit more efficient, because it amounts to:', 'as opposed to:', 'as in the -exec method.', 'With modern versions of find, you can replace the ; with + and it will do the equivalent of the xargs call for you, passing as many files as will fit on each exec system call:']","[<code>find /path/to/base/dir/* -type d -ctime +10 -exec rm -rf {} \;
</code>, <code>find</code>, <code>/path/to/base/dir</code>, <code>-type d</code>, <code>-ctime +10</code>, <code>-exec ... \;</code>, <code>...</code>, <code>rm -rf {}</code>, <code>{}</code>, <code>find /path/to/base/dir/* -type d -ctime +10 | xargs rm -rf
</code>, <code>rm -rf dir1 dir2 dir3 ...
</code>, <code>rm -rf dir1; rm -rf dir2; rm -rf dir3; ...
</code>, <code>-exec</code>, <code>find</code>, <code>;</code>, <code>+</code>, <code>xargs</code>, <code>find . -type d -ctime +10 -exec rm -rf {} +
</code>]"
462,https://stackoverflow.com/questions/18522647/,['will execute the command and then start up a login shell when it completes. For example:'],"[<code>ssh -t 'command; bash -l'
</code>, <code>ssh -t user@domain.com 'cd /some/path; bash -l'
</code>]"
463,https://stackoverflow.com/questions/16497317/,"['(Note that &>>file appends to a file while &> would redirect and overwrite a previously existing file.)', 'To combine stdout and stderr you would redirect the latter to the former using 2>&1. This redirects stderr (file descriptor 2) to stdout (file descriptor 1), e.g.:', 'stdout goes to stdout, stderr goes to stderr. grep only sees stdout, hence stderr prints to the terminal.', 'On the other hand:', 'After writing to both stdout and stderr, 2>&1 redirects stderr back to stdout and grep sees both strings on stdin, thus filters out both.', 'You can read more about redirection here.', 'Regarding your example (POSIX):', 'or, using >=bash-4:']","[<code>&amp;&gt;&gt;file</code>, <code>&amp;&gt;</code>, <code>stdout</code>, <code>stderr</code>, <code>2&gt;&amp;1</code>, <code>$ { echo ""stdout""; echo ""stderr"" 1&gt;&amp;2; } | grep -v std
stderr
$
</code>, <code>stdout</code>, <code>stderr</code>, <code>grep</code>, <code>stdout</code>, <code>stderr</code>, <code>$ { echo ""stdout""; echo ""stderr"" 1&gt;&amp;2; } 2&gt;&amp;1 | grep -v std
$
</code>, <code>2&gt;&amp;1</code>, <code>grep</code>, <code>cmd-doesnt-respect-difference-between-stdout-and-stderr 2&gt;&amp;1 | grep -i SomeError
</code>, <code>&gt;=bash-4</code>, <code>cmd-doesnt-respect-difference-between-stdout-and-stderr |&amp; grep -i SomeError
</code>]"
464,https://stackoverflow.com/questions/2935183/,['sleep infinity does exactly what it suggests and works without cat abuse.'],[<code>sleep infinity</code>]
465,https://stackoverflow.com/questions/19670061/,"['You are running the [ (aka test) command with the argument ""false"", not running the command false. Since ""false"" is a non-empty string, the test command always succeeds. To actually run the command, drop the [ command.']","[<code>[</code>, <code>test</code>, <code>false</code>, <code>test</code>, <code>[</code>, <code>if false; then
   echo ""True""
else
   echo ""False""
fi
</code>]"
466,https://stackoverflow.com/questions/9405478/,"[""There are several questions/issues here, so I'll repeat each section of the poster's text, block-quoted, and followed by my response."", ""What's the preferred syntax, and why? Or are they pretty much interchangeable?"", 'I would say that the $(some_command) form is preferred over the `some_command` form. The second form, using a pair of backquotes (the ""`"" character, also called a backtick and a grave accent), is the historical way of doing it. The first form, using dollar sign and parentheses, is a newer POSIX form, which means it\'s probably a more standard way of doing it. In turn, I\'d think that that means it\'s more likely to work correctly with different shells and with different *nix implementations.', ""Another reason given for preferring the first (POSIX) form is that it's easier to read, especially when command substitutions are nested. Plus, with the backtick form, the backtick characters have to be backslash-escaped in the nested (inner) command substitutions."", ""With the POSIX form, you don't need to do that."", ""As far as whether they're interchangeable, well, I'd say that, in general, they are interchangeable, apart from the exceptions you mentioned for escaped characters. However, I don't know and cannot say whether all modern shells and all modern *nixes support both forms. I doubt that they do, especially older shells/older *nixes. If I were you, I wouldn't depend on interchangeability without first running a couple of quick, simple tests of each form on any shell/*nix implementations that you plan to run your finished scripts on."", 'I tend to favor the first, simply because my text editor seems to know what it is, and does syntax highlighting appropriately.', ""It's unfortunate that your editor doesn't seem to support the POSIX form; maybe you should check to see if there's an update to your editor that supports the POSIX way of doing it. Long shot maybe, but who knows? Or, maybe you should even consider trying a different editor."", 'GGG, what text editor are you using???', ""I read here that escaped characters act a bit differently in each case, but it's not clear to me which behavior is preferable, or if it just depends on the situation."", ""I'd say that it depends on what you're trying to accomplish; in other words, whether you're using escaped characters along with command substitution or not."", 'Side question: Is it bad practice to use both forms in one script, for example when nesting command substitutions?', ""Well, it might make the script slightly easier to READ (typographically speaking), but harder to UNDERSTAND! Someone reading your script (or YOU, reading it six months later!) would likely wonder why you didn't just stick to one form or the other--unless you put some sort of note about why you did this in the comments. Plus, mixing both forms in one script would make that script less likely to be portable: In order for the script to work properly, the shell that's executing it has to support BOTH forms, not just one form or the other."", ""For making a shell script understandable, I'd personally prefer sticking to one form or the other throughout any one script, unless there's a good technical reason to do otherwise. Moreover, I'd prefer the POSIX form over the older form; again, unless there's a good technical reason to do otherwise."", 'For more on the topic of command substitution, and the two different forms for doing it, I suggest you refer to the section on command substitution in the O\'Reilly book ""Classic Shell Scripting,"" second edition, by Robbins and Beebe. In that section, the authors state that the POSIX form for command substitution ""is recommended for all new development."" I have no financial interest in this book; it\'s just one I have (and love) on shell scripting, though it\'s more for intermediate or advanced shell scripting, and not really for beginning shell scripting.', '-B.']","[<code>$(some_command)</code>, <code>`some_command`</code>]"
467,https://stackoverflow.com/questions/12152626/,"['You should be using the command substitution syntax $(command) when you want to execute a command in script/command.', 'So your line would be ', 'Code explanation:', 'Note that this gives the portion of the variable up to the first period .:']","[<code>$(command)</code>, <code>name=$(echo ""$filename"" | cut -f 1 -d '.')
</code>, <code>echo</code>, <code>$filename</code>, <code>cut</code>, <code>cut</code>, <code>-f</code>, <code>$()</code>, <code>name</code>, <code>.</code>, <code>$ filename=hello.world
$ echo ""$filename"" | cut -f 1 -d '.'
hello
$ filename=hello.hello.hello
$ echo ""$filename"" | cut -f 1 -d '.'
hello
$ filename=hello
$ echo ""$filename"" | cut -f 1 -d '.'
hello
</code>]"
468,https://stackoverflow.com/questions/4665051/,"[""That should work. I am not sure why it's failing. You're quoting your variables properly. What happens if you use this script with double [[ ]]?"", ""Double square brackets is a bash extension to [ ]. It doesn't require variables to be quoted, not even if they contain spaces."", 'Also worth trying: -e to test if a path exists without testing what type of file it is.']","[<code>[[</code>, <code>]]</code>, <code>if [[ -d $PASSED ]]; then
    echo ""$PASSED is a directory""
elif [[ -f $PASSED ]]; then
    echo ""$PASSED is a file""
else
    echo ""$PASSED is not valid""
    exit 1
fi
</code>, <code>[ ]</code>, <code>-e</code>]"
469,https://stackoverflow.com/questions/20615217/,"['The default shell (/bin/sh) under Ubuntu points to dash, not bash.', 'So if you chmod +x your_script_file.sh and then run it with ./your_script_file.sh, or if you run it with bash your_script_file.sh, it should work fine.', 'Running it with sh your_script_file.sh will not work because the hashbang line will be ignored and the script will be interpreted by dash, which does not support that string substitution syntax.']","[<code>/bin/sh</code>, <code>dash</code>, <code>bash</code>, <code>me@pc:~$ readlink -f $(which sh)
/bin/dash
</code>, <code>chmod +x your_script_file.sh</code>, <code>./your_script_file.sh</code>, <code>bash your_script_file.sh</code>, <code>sh your_script_file.sh</code>, <code>dash</code>]"
470,https://stackoverflow.com/questions/6541109/,"['You can use one-line heredoc', 'the above is the same as', 'or you can redirect output from a command, like', 'or you can read as', 'or simply']","[<code>heredoc</code>, <code>cat &lt;&lt;&lt; ""This is coming from the stdin""
</code>, <code>cat &lt;&lt;EOF
This is coming from the stdin
EOF
</code>, <code>diff &lt;(ls /bin) &lt;(ls /usr/bin)
</code>, <code>while read line
do
   echo =$line=
done &lt; some_file
</code>, <code>echo something | read param
</code>]"
471,https://stackoverflow.com/questions/21063765/,"['$$ is defined to return the process ID of the parent in a subshell; from the man page under ""Special Parameters"":', '$      Expands to the process ID of the shell.  In a () subshell, it expands to the process ID of the current shell, not the subshell. ', 'In bash 4, you can get the process ID of the child with BASHPID.']","[<code>$$</code>, <code>bash</code>, <code>BASHPID</code>, <code>~ $ echo $$
17601
~ $ ( echo $$; echo $BASHPID )
17601
17634
</code>]"
472,https://stackoverflow.com/questions/10247472/,"['The main use of -f is to force the removal of files that would\nnot be removed using rm by itself (as a special case, it ""removes""\nnon-existent files, thus suppressing the error message).', 'You can also just redirect the error message using', ""(or your operating system's equivalent). You can check the value of $?\nimmediately after calling rm to see if a file was actually removed or not.""]","[<code>-f</code>, <code>rm</code>, <code>$ rm file.txt 2&gt; /dev/null
</code>, <code>$?</code>, <code>rm</code>]"
473,https://stackoverflow.com/questions/2493642/,"[""The variable '$$' contains the PID.""]",[]
474,https://stackoverflow.com/questions/5998066/,"['You just need to do:', ""However, if you want to call your Perl command later, and that's why you want to assign it to a variable, then:"", ""As per Bash's help:""]","[<code>#!/bin/bash
count=$(cat last_queries.txt | wc -l)
$(perl test.pl test2 $count)
</code>, <code>#!/bin/bash
count=$(cat last_queries.txt | wc -l)
var=""perl test.pl test2 $count"" # You need double quotes to get your $count value substituted.

...stuff...

eval $var
</code>, <code>~$ help eval
eval: eval [arg ...]
    Execute arguments as a shell command.

    Combine ARGs into a single string, use the result as input to the shell,
    and execute the resulting commands.

    Exit Status:
    Returns exit status of command or success if command is null.
</code>]"
475,https://stackoverflow.com/questions/670191/,"[""If you're writing a bash script, call it by name:"", '/bin/sh is not guaranteed to be bash. This caused a ton of broken scripts in Ubuntu some years ago (IIRC).', 'The source builtin works just fine in bash; but you might as well just use dot like Norman suggested.']","[<code>#!/bin/bash
</code>]"
476,https://stackoverflow.com/questions/15883416/,"['Git provides a shell script called git-prompt.sh, which includes a function __git_ps1 that', 'prints text to add to bash PS1 prompt (includes branch name)', 'Its most basic usage is:', 'It also takes an optional format string:', 'First, copy the file to somewhere (e.g. ~/.git-prompt.sh).', 'Option 1: use an existing copy on your filesystem.  Example (Mac OS X 10.15):', 'Option 2: Pull the script from GitHub.', 'Next, add the following line to your .bashrc/.zshrc:', 'Finally, change your PS1 to call __git_ps1 as command-substitution:', 'Bash: ', 'Zsh:', 'But note that only git 1.9.3 (May 2014) or later allows you to safely display that branch name(!)', 'See commit 8976500 by Richard Hansen (richardhansen):', 'Both bash and zsh subject the value of PS1 to parameter expansion, command substitution, and arithmetic expansion.  ', 'Rather than include the raw, unescaped branch name in PS1 when running in two- or\n  three-argument mode, construct PS1 to reference a variable that holds the branch name.  ', 'Because the shells do not recursively expand, this avoids arbitrary code execution by specially-crafted branch names such as ', 'What devious mind would name a branch like that? ;) (Beside a Mom as in xkcd)', 'still_dreaming_1 reports in the comments:', 'This seems to work great if you want a color prompt with xterm (in my .bashrc): ', 'Everything is a different color, including the branch.', 'In  in Linux Mint 17.3 Cinnamon 64-bit: ']","[<code>__git_ps1</code>, <code>git-prompt.sh</code>, <code>__git_ps1</code>, <code>$ __git_ps1
(master)
</code>, <code>$ __git_ps1 'git:[%s]'
git:[master]
</code>, <code>~/.git-prompt.sh</code>, <code>$ find / -name 'git-prompt.sh' -type f -print -quit 2&gt;/dev/null
/Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh
</code>, <code>.bashrc/.zshrc</code>, <code>source ~/.git-prompt.sh
</code>, <code>PS1</code>, <code>__git_ps1</code>, <code>PS1='[\u@\h \W$(__git_ps1 "" (%s)"")]\$ '
</code>, <code>setopt PROMPT_SUBST ; PS1='[%n@%m %c$(__git_ps1 "" (%s)"")]\$ '
</code>, <code>richardhansen</code>, <code>PS1</code>, <code>PS1</code>, <code>'$(IFS=_;cmd=sudo_rm_-rf_/;$cmd)'.
</code>, <code>xterm</code>, <code>.bashrc</code>, <code>PS1='\[\e]0;\u@\h: \w\a\]\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\03‌​3[01;34m\]\w\[\033[00m\]$(__git_ps1)\$ ' 
</code>, <code>PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[00m\]$(__git_ps1) \$ ' 
</code>]"
477,https://stackoverflow.com/questions/18460123/,"['Use the following syntax:', 'Disclaimer: Leading zeros only work in >=bash-4.', 'If you want to use printf, nothing prevents you from putting its result in a variable for further use:']","[<code>$ for i in {01..05}; do echo ""$i""; done
01
02
03
04
05
</code>, <code>&gt;=bash-4</code>, <code>printf</code>, <code>$ foo=$(printf ""%02d"" 5)
$ echo ""${foo}""
05
</code>]"
478,https://stackoverflow.com/questions/11145270/,"['Not the greatest, but this should work:', 'where N should be replaced by your target line number. This replaces the line in the original file. To save the changed text in a different file, drop the -i option:']","[<code>sed -i 'Ns/.*/replacement-line/' file.txt
</code>, <code>N</code>, <code>-i</code>, <code>sed 'Ns/.*/replacement-line/' file.txt &gt; new_file.txt
</code>]"
479,https://stackoverflow.com/questions/12444808/,"['You can use the -B and -A to print lines before and after the match.', 'Will print the 10 lines before the match, including the matching line itself.']","[<code>-B</code>, <code>-A</code>, <code>grep -i -B 10 'error' data
</code>]"
480,https://stackoverflow.com/questions/4499910/,"['You could use this:', 'It will show you every commit made by the specified user (USERNAME).', 'UPDATE', 'As suggested by @bahrep, subversion 1.8 comes with a --search option.']","[<code>svn log | sed -n '/USERNAME/,/-----$/ p' 
</code>, <code>--search</code>]"
481,https://stackoverflow.com/questions/4162821/,"['Something like this would do:', 'The xargs program reads its standard input, and for each line of input runs the cat program with the input lines as argument(s).', 'If you really want to do this in a loop, you can:']","[<code>xargs cat &lt;filenames.txt
</code>, <code>xargs</code>, <code>cat</code>, <code>for fn in `cat filenames.txt`; do
    echo ""the next file is $fn""
    cat $fn
done
</code>]"
482,https://stackoverflow.com/questions/845863/,"['Do not make the mistake of doing this:', 'This will break under a lot of conditions, including funky filenames and is impossible to quote right. Your {} must always be a single completely separate argument to the command to avoid code injection bugs.  What you need to do, is this:', 'Applies to xargs as well as find.', ""By the way, never use xargs without the -0 option (unless for very rare and controlled one-time interactive use where you aren't worried about destroying your data)."", ""Also don't parse ls.  Ever.  Use globbing or find instead: http://mywiki.wooledge.org/ParsingLs"", 'Use find for everything that needs recursion and a simple loop with a glob for everything else:', 'or non-recursive:', 'Notice the proper use of quotes.']","[<code>sh -c ""grep ABC {} &gt; {}.out""
</code>, <code>{}</code>, <code>xargs -I{} sh -c 'grep ABC ""$1"" &gt; ""$1.out""' -- {}
</code>, <code>xargs</code>, <code>find</code>, <code>-0</code>, <code>ls</code>, <code>find</code>, <code>find</code>, <code>find /foo -exec sh -c 'grep ""$1"" &gt; ""$1.out""' -- {} \;
</code>, <code>for file in *; do grep ""$file"" &gt; ""$file.out""; done
</code>]"
483,https://stackoverflow.com/questions/670460/,"['Put the following to your .bashrc ', 'It extends regexes.\nYou can then move all files except one by', 'Note that, in copying directories, the forward-flash cannot be used in the name as noticed in the thread Why extglob except breaking except condition?:', 'so Backups.backupdb/ is wrong here before the negation and I would not use it neither in moving directories because of the risk of using wrongly then globs with other commands and possible other exceptions.']","[<code>shopt -s extglob
</code>, <code>mv !(fileOne) ~/path/newFolder
</code>, <code>cp -r !(Backups.backupdb) /home/masi/Documents/
</code>, <code>Backups.backupdb/</code>]"
484,https://stackoverflow.com/questions/25785/,"['The problems with the existing answers:', ""wnoise's answer addresses these issues, but the solution is GNU-specific (and quite complex)."", ""Here's a pragmatic, POSIX-compliant solution that comes with only one caveat: it cannot handle filenames with embedded newlines - but I don't consider that a real-world concern for most people."", ""For the record, here's the explanation for why it's generally not a good idea to parse ls output: http://mywiki.wooledge.org/ParsingLs"", ""Note: This command operates in the current directory; to target a directory explicitly, use a subshell ((...)):\n(cd /path/to && ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {})\nThe same applies analogously to the commands below."", ""The above is inefficient, because xargs has to invoke rm once for each filename.\nYour platform's xargs may allow you to solve this problem:"", ""If you have GNU xargs, use -d '\\n', which makes xargs consider each input line a separate argument, yet passes as many arguments as will fit on a command line at once:"", ""-r (--no-run-if-empty) ensures that rm is not invoked if there's no input."", 'If you have BSD xargs (including on macOS), you can use -0 to handle NUL-separated input, after first translating newlines to NUL (0x0) chars., which also passes (typically) all filenames at once (will also work with GNU xargs):', 'Explanation:', 'ls -tp prints the names of filesystem items sorted by how recently they were modified , in descending order (most recently modified items first) (-t), with directories printed with a trailing / to mark them as such (-p).', ""grep -v '/$' then weeds out directories from the resulting listing, by omitting (-v) lines that have a trailing / (/$)."", 'tail -n +6 skips the first 5 entries in the listing, in effect returning all but the 5 most recently modified files, if any.\nNote that in order to exclude N files, N+1 must be passed to tail -n +.', ""xargs -I {} rm -- {} (and its variations) then invokes on rm on all these files; if there are no matches at all, xargs won't do anything."", 'A variation on the original problem, in case the matching files need to be processed individually or collected in a shell array:']","[<code>rm</code>, <code>rm `...`</code>, <code>rm</code>, <code>ls</code>, <code>ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {}
</code>, <code>(...)</code>, <code>(cd /path/to &amp;&amp; ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {})</code>, <code>xargs</code>, <code>rm</code>, <code>xargs</code>, <code>xargs</code>, <code>-d '\n'</code>, <code>xargs</code>, <code>ls -tp | grep -v '/$' | tail -n +6 | xargs -d '\n' -r rm --
</code>, <code>-r</code>, <code>--no-run-if-empty</code>, <code>rm</code>, <code>xargs</code>, <code>-0</code>, <code>NUL</code>, <code>NUL</code>, <code>0x0</code>, <code>xargs</code>, <code>ls -tp | grep -v '/$' | tail -n +6 | tr '\n' '\0' | xargs -0 rm --
</code>, <code>ls -tp</code>, <code>-t</code>, <code>/</code>, <code>-p</code>, <code>ls -tp</code>, <code>(cd /path/to &amp;&amp; ls -tp ...)</code>, <code>grep -v '/$'</code>, <code>-v</code>, <code>/</code>, <code>/$</code>, <code>tail -n +6</code>, <code>N</code>, <code>N+1</code>, <code>tail -n +</code>, <code>xargs -I {} rm -- {}</code>, <code>rm</code>, <code>xargs</code>, <code>xargs -I {} rm -- {}</code>, <code>{}</code>, <code>rm</code>, <code>--</code>, <code>-</code>, <code>rm</code>, <code># One by one, in a shell loop (POSIX-compliant):
ls -tp | grep -v '/$' | tail -n +6 | while IFS= read -r f; do echo ""$f""; done

# One by one, but using a Bash process substitution (&lt;(...), 
# so that the variables inside the `while` loop remain in scope:
while IFS= read -r f; do echo ""$f""; done &lt; &lt;(ls -tp | grep -v '/$' | tail -n +6)

# Collecting the matches in a Bash *array*:
IFS=$'\n' read -d '' -ra files  &lt; &lt;(ls -tp | grep -v '/$' | tail -n +6)
printf '%s\n' ""${files[@]}"" # print array elements
</code>]"
485,https://stackoverflow.com/questions/657130/,"[""Since this hasn't been closed yet, here are a few more options."", 'I recommend the second option. Ctrl+r is really handy and fast, no mucking about with editors, and you see the results before the command is run (unlike the history expansions).']","[<code>$FCEDIT</code>, <code>$EDITOR</code>, <code>emacs</code>, <code>option25</code>, <code>s///</code>, <code>!-2:s/--option25/--newoption/</code>, <code>./cmd</code>, <code>!string</code>, <code>!./cmd:s/--option25/--newoption/</code>, <code>^--option25^--newoption</code>]"
486,https://stackoverflow.com/questions/13380607/,"[""I don't know about sed, but it can be done with head:""]","[<code>sed</code>, <code>head</code>, <code>head -n -2 myfile.txt
</code>]"
487,https://stackoverflow.com/questions/6153152/,"['The r flag means to search recursively (search subdirectories). The i flag means case insensitive.', 'If you just want file names add the l (lowercase L) flag:']","[<code>egrep -ir --include=*.{php,html,js} ""(document.cookie|setcookie)"" .
</code>, <code>r</code>, <code>i</code>, <code>l</code>, <code>L</code>, <code>egrep -lir --include=*.{php,html,js} ""(document.cookie|setcookie)"" .
</code>]"
488,https://stackoverflow.com/questions/4090301/,"['I answered this question on SuperUser but only after the OP disregarded the unhelpful answer that was at the time the only answer to the question.', 'Here is the proper way to elevate permissions in Cygwin, copied from my own answer on SuperUser:', 'I found the answer on the Cygwin mailing list. To run command with elevated privileges in Cygwin, precede the command with cygstart --action=runas like this:', 'This will open a Windows dialogue box asking for the Admin password and run the command if the proper password is entered.', 'This is easily scripted, so long as ~/bin is in your path. Create a file ~/bin/sudo with the following content:', 'Now make the file executable:', 'Now you can run commands with real elevated privileges:', 'You may need to add ~/bin to your path. You can run the following command on the Cygwin CLI, or add it to ~/.bashrc:', 'Tested on 64-bit Windows 8.', 'You could also instead of above steps add an alias for this command to ~/.bashrc:']","[<code>command</code>, <code>cygstart --action=runas</code>, <code>$ cygstart --action=runas command
</code>, <code>~/bin</code>, <code>~/bin/sudo</code>, <code>#!/usr/bin/bash
cygstart --action=runas ""$@""
</code>, <code>$ chmod +x ~/bin/sudo
</code>, <code>$ sudo elevatedCommand
</code>, <code>~/bin</code>, <code>~/.bashrc</code>, <code>$ PATH=$HOME/bin:$PATH
</code>, <code>~/.bashrc</code>, <code># alias to simulate sudo
alias sudo='cygstart --action=runas'
</code>]"
489,https://stackoverflow.com/questions/9605232/,"['awk:', 'note, there is an empty line at the end of output.', 'sed:']","[<code>awk 'NR%2{printf ""%s "",$0;next;}1' yourFile
</code>, <code>sed 'N;s/\n/ /' yourFile
</code>]"
490,https://stackoverflow.com/questions/414164/,"[""Here's a script that uses GNU sort's random option:""]","[<code>ls |sort -R |tail -$N |while read file; do
    # Something involving $file, or you can leave
    # off the while to just get the filenames
done
</code>]"
491,https://stackoverflow.com/questions/951336/,"[""These give you a trace of what is being executed.  (See also 'Clarification' near the bottom of the answer.)"", 'Sometimes, you need to control the debugging within the script.  In that case, as Cheeto reminded me, you can use:', 'This turns debugging on.  You can then turn it off again with:', '(You can find out the current tracing state by analyzing $-, the current flags, for x.)', ""Also, shells generally provide options '-n' for 'no execution' and '-v' for 'verbose' mode; you can use these in combination to see whether the shell thinks it could execute your script — occasionally useful if you have an unbalanced quote somewhere."", ""There is contention that the '-x' option in Bash is different from other shells (see the comments).  The Bash Manual says:"", '-x', 'Print a trace of simple commands, for commands, case commands, select commands, and arithmetic for commands and their arguments or associated word lists after they are expanded and before they are executed. The value of the PS4 variable is expanded and the resultant value is printed before the command and its expanded arguments. ', ""That much does not seem to indicate different behaviour at all.  I don't see any other relevant references to '-x' in the manual.  It does not describe differences in the startup sequence."", ""Clarification: On systems such as a typical Linux box, where '/bin/sh' is a symlink to '/bin/bash' (or wherever the Bash executable is found), the two command lines achieve the equivalent effect of running the script with execution trace on.  On other systems (for example, Solaris, and some more modern variants of Linux), /bin/sh is not Bash, and the two command lines would give (slightly) different results.  Most notably, '/bin/sh' would be confused by constructs in Bash that it does not recognize at all.  (On Solaris, /bin/sh is a Bourne shell; on modern Linux, it is sometimes Dash — a smaller, more strictly POSIX-only shell.)  When invoked by name like this, the 'shebang' line ('#!/bin/bash' vs '#!/bin/sh') at the start of the file has no effect on how the contents are interpreted."", ""The Bash manual has a section on Bash POSIX mode which, contrary to a long-standing but erroneous version of this answer (see also the comments below), does describe in extensive detail the difference between 'Bash invoked as sh' and 'Bash invoked as bash'."", 'When debugging a (Bash) shell script, it will be sensible and sane — necessary even — to use the shell named in the shebang line with the -x option.  Otherwise, you may (will?) get different behaviour when debugging from when running the script.']","[<code>sh -x script [arg1 ...]
bash -x script [arg1 ...]
</code>, <code>set -x
</code>, <code>set +x
</code>, <code>$-</code>, <code>x</code>, <code>-n</code>, <code>-v</code>, <code>-x</code>, <code>for</code>, <code>case</code>, <code>select</code>, <code>for</code>, <code>PS4</code>, <code>-x</code>, <code>/bin/sh</code>, <code>/bin/bash</code>, <code>/bin/sh</code>, <code>/bin/sh</code>, <code>/bin/sh</code>, <code>#!/bin/bash</code>, <code>'#!/bin/sh</code>, <code>sh</code>, <code>bash</code>, <code>-x</code>]"
492,https://stackoverflow.com/questions/1447625/,"['Why not:', ""I'm not sure where I learned it - but I've been using this.""]","[<code>ls *.{mp3,exe,mp4}
</code>]"
493,https://stackoverflow.com/questions/7328223/,"[""When you execute a program the child program inherits its environment variables from the parent. For instance if $HOME is set to /root in the parent then the child's $HOME variable is also set to /root."", 'This only applies to environment variable that are marked for export. If you set a variable at the command-line like', 'That variable will not be visible in child processes. Not unless you export it:', 'You can combine these two statements into a single one in bash (but not in old-school sh):', ""Here's a quick example showing the difference between exported and non-exported variables. To understand what's happening know that sh -c creates a child shell process which inherits the parent shell's environment."", 'Note: To get help on shell built-in commands use help export. Shell built-ins are commands that are part of your shell rather than independent executables like /bin/ls.']","[<code>$HOME</code>, <code>/root</code>, <code>$HOME</code>, <code>/root</code>, <code>$ FOO=""bar""
</code>, <code>$ export FOO
</code>, <code>$ export FOO=""bar""
</code>, <code>sh -c</code>, <code>$ FOO=bar
$ sh -c 'echo $FOO'

$ export FOO
$ sh -c 'echo $FOO'
bar
</code>, <code>help export</code>, <code>/bin/ls</code>]"
494,https://stackoverflow.com/questions/2355148/,['You can use eval to execute a string:'],"[<code>eval</code>, <code>eval $illcommando
</code>]"
495,https://stackoverflow.com/questions/4168371/,"['An example might have been useful, but if I understood you correctly, this would work:', 'This will convert Hello: world into Hello.']","[<code>echo ""Hello: world"" | cut -f1 -d"":""
</code>, <code>Hello: world</code>, <code>Hello</code>]"
496,https://stackoverflow.com/questions/114814/,"['And if you consider comments blank lines:', ""Although, that's language dependent. ""]","[<code>cat foo.c | sed '/^\s*$/d' | wc -l
</code>, <code>cat foo.pl | sed '/^\s*#/d;/^\s*$/d' | wc -l
</code>]"
497,https://stackoverflow.com/questions/7470165/,"['You can do the following, when your current directory is parent_directory:', ""The ( and ) create a subshell, so the current directory isn't changed in the main script.""]","[<code>parent_directory</code>, <code>for d in [0-9][0-9][0-9]
do
    ( cd ""$d"" &amp;&amp; your-command-here )
done
</code>, <code>(</code>, <code>)</code>]"
498,https://stackoverflow.com/questions/5131948/,"['Use single quotes instead of double quotes', 'Alternatively, if you need to use double quotes for whatever reason but still want a literal ! then turn off history expansion at the top of your script via set +H']","[<code>git commit -am 'Nailed it!'
</code>, <code>!</code>, <code>set +H</code>]"
499,https://stackoverflow.com/questions/4034896/,['Use find with a wildcard:'],"[<code>find</code>, <code>find . -name 'mystring*'
</code>]"
